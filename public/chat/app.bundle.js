!function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)r.d(n,i,function(t){return e[t]}.bind(null,i));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=170)}([function(e,t){"function"==typeof Object.create?e.exports=function(e,t){t&&(e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}))}:e.exports=function(e,t){if(t){e.super_=t;var r=function(){};r.prototype=t.prototype,e.prototype=new r,e.prototype.constructor=e}}},function(e,t,r){var n=r(3),i=n.Buffer;function a(e,t){for(var r in e)t[r]=e[r]}function o(e,t,r){return i(e,t,r)}i.from&&i.alloc&&i.allocUnsafe&&i.allocUnsafeSlow?e.exports=n:(a(n,t),t.Buffer=o),a(i,o),o.from=function(e,t,r){if("number"==typeof e)throw new TypeError("Argument must not be a number");return i(e,t,r)},o.alloc=function(e,t,r){if("number"!=typeof e)throw new TypeError("Argument must be a number");var n=i(e);return void 0!==t?"string"==typeof r?n.fill(t,r):n.fill(t):n.fill(0),n},o.allocUnsafe=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return i(e)},o.allocUnsafeSlow=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return n.SlowBuffer(e)}},function(e,t,r){(function(e){!function(e,t){"use strict";function n(e,t){if(!e)throw new Error(t||"Assertion failed")}function i(e,t){e.super_=t;var r=function(){};r.prototype=t.prototype,e.prototype=new r,e.prototype.constructor=e}function a(e,t,r){if(a.isBN(e))return e;this.negative=0,this.words=null,this.length=0,this.red=null,null!==e&&("le"!==t&&"be"!==t||(r=t,t=10),this._init(e||0,t||10,r||"be"))}var o;"object"==typeof e?e.exports=a:t.BN=a,a.BN=a,a.wordSize=26;try{o=r(123).Buffer}catch(e){}function f(e,t,r){for(var n=0,i=Math.min(e.length,r),a=t;a<i;a++){var o=e.charCodeAt(a)-48;n<<=4,n|=o>=49&&o<=54?o-49+10:o>=17&&o<=22?o-17+10:15&o}return n}function s(e,t,r,n){for(var i=0,a=Math.min(e.length,r),o=t;o<a;o++){var f=e.charCodeAt(o)-48;i*=n,i+=f>=49?f-49+10:f>=17?f-17+10:f}return i}a.isBN=function(e){return e instanceof a||null!==e&&"object"==typeof e&&e.constructor.wordSize===a.wordSize&&Array.isArray(e.words)},a.max=function(e,t){return e.cmp(t)>0?e:t},a.min=function(e,t){return e.cmp(t)<0?e:t},a.prototype._init=function(e,t,r){if("number"==typeof e)return this._initNumber(e,t,r);if("object"==typeof e)return this._initArray(e,t,r);"hex"===t&&(t=16),n(t===(0|t)&&t>=2&&t<=36);var i=0;"-"===(e=e.toString().replace(/\s+/g,""))[0]&&i++,16===t?this._parseHex(e,i):this._parseBase(e,t,i),"-"===e[0]&&(this.negative=1),this.strip(),"le"===r&&this._initArray(this.toArray(),t,r)},a.prototype._initNumber=function(e,t,r){e<0&&(this.negative=1,e=-e),e<67108864?(this.words=[67108863&e],this.length=1):e<4503599627370496?(this.words=[67108863&e,e/67108864&67108863],this.length=2):(n(e<9007199254740992),this.words=[67108863&e,e/67108864&67108863,1],this.length=3),"le"===r&&this._initArray(this.toArray(),t,r)},a.prototype._initArray=function(e,t,r){if(n("number"==typeof e.length),e.length<=0)return this.words=[0],this.length=1,this;this.length=Math.ceil(e.length/3),this.words=new Array(this.length);for(var i=0;i<this.length;i++)this.words[i]=0;var a,o,f=0;if("be"===r)for(i=e.length-1,a=0;i>=0;i-=3)o=e[i]|e[i-1]<<8|e[i-2]<<16,this.words[a]|=o<<f&67108863,this.words[a+1]=o>>>26-f&67108863,(f+=24)>=26&&(f-=26,a++);else if("le"===r)for(i=0,a=0;i<e.length;i+=3)o=e[i]|e[i+1]<<8|e[i+2]<<16,this.words[a]|=o<<f&67108863,this.words[a+1]=o>>>26-f&67108863,(f+=24)>=26&&(f-=26,a++);return this.strip()},a.prototype._parseHex=function(e,t){this.length=Math.ceil((e.length-t)/6),this.words=new Array(this.length);for(var r=0;r<this.length;r++)this.words[r]=0;var n,i,a=0;for(r=e.length-6,n=0;r>=t;r-=6)i=f(e,r,r+6),this.words[n]|=i<<a&67108863,this.words[n+1]|=i>>>26-a&4194303,(a+=24)>=26&&(a-=26,n++);r+6!==t&&(i=f(e,t,r+6),this.words[n]|=i<<a&67108863,this.words[n+1]|=i>>>26-a&4194303),this.strip()},a.prototype._parseBase=function(e,t,r){this.words=[0],this.length=1;for(var n=0,i=1;i<=67108863;i*=t)n++;n--,i=i/t|0;for(var a=e.length-r,o=a%n,f=Math.min(a,a-o)+r,c=0,u=r;u<f;u+=n)c=s(e,u,u+n,t),this.imuln(i),this.words[0]+c<67108864?this.words[0]+=c:this._iaddn(c);if(0!==o){var h=1;for(c=s(e,u,e.length,t),u=0;u<o;u++)h*=t;this.imuln(h),this.words[0]+c<67108864?this.words[0]+=c:this._iaddn(c)}},a.prototype.copy=function(e){e.words=new Array(this.length);for(var t=0;t<this.length;t++)e.words[t]=this.words[t];e.length=this.length,e.negative=this.negative,e.red=this.red},a.prototype.clone=function(){var e=new a(null);return this.copy(e),e},a.prototype._expand=function(e){for(;this.length<e;)this.words[this.length++]=0;return this},a.prototype.strip=function(){for(;this.length>1&&0===this.words[this.length-1];)this.length--;return this._normSign()},a.prototype._normSign=function(){return 1===this.length&&0===this.words[0]&&(this.negative=0),this},a.prototype.inspect=function(){return(this.red?"<BN-R: ":"<BN: ")+this.toString(16)+">"};var c=["","0","00","000","0000","00000","000000","0000000","00000000","000000000","0000000000","00000000000","000000000000","0000000000000","00000000000000","000000000000000","0000000000000000","00000000000000000","000000000000000000","0000000000000000000","00000000000000000000","000000000000000000000","0000000000000000000000","00000000000000000000000","000000000000000000000000","0000000000000000000000000"],u=[0,0,25,16,12,11,10,9,8,8,7,7,7,7,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],h=[0,0,33554432,43046721,16777216,48828125,60466176,40353607,16777216,43046721,1e7,19487171,35831808,62748517,7529536,11390625,16777216,24137569,34012224,47045881,64e6,4084101,5153632,6436343,7962624,9765625,11881376,14348907,17210368,20511149,243e5,28629151,33554432,39135393,45435424,52521875,60466176];function d(e,t,r){r.negative=t.negative^e.negative;var n=e.length+t.length|0;r.length=n,n=n-1|0;var i=0|e.words[0],a=0|t.words[0],o=i*a,f=67108863&o,s=o/67108864|0;r.words[0]=f;for(var c=1;c<n;c++){for(var u=s>>>26,h=67108863&s,d=Math.min(c,t.length-1),l=Math.max(0,c-e.length+1);l<=d;l++){var p=c-l|0;u+=(o=(i=0|e.words[p])*(a=0|t.words[l])+h)/67108864|0,h=67108863&o}r.words[c]=0|h,s=0|u}return 0!==s?r.words[c]=0|s:r.length--,r.strip()}a.prototype.toString=function(e,t){var r;if(t=0|t||1,16===(e=e||10)||"hex"===e){r="";for(var i=0,a=0,o=0;o<this.length;o++){var f=this.words[o],s=(16777215&(f<<i|a)).toString(16);r=0!==(a=f>>>24-i&16777215)||o!==this.length-1?c[6-s.length]+s+r:s+r,(i+=2)>=26&&(i-=26,o--)}for(0!==a&&(r=a.toString(16)+r);r.length%t!=0;)r="0"+r;return 0!==this.negative&&(r="-"+r),r}if(e===(0|e)&&e>=2&&e<=36){var d=u[e],l=h[e];r="";var p=this.clone();for(p.negative=0;!p.isZero();){var b=p.modn(l).toString(e);r=(p=p.idivn(l)).isZero()?b+r:c[d-b.length]+b+r}for(this.isZero()&&(r="0"+r);r.length%t!=0;)r="0"+r;return 0!==this.negative&&(r="-"+r),r}n(!1,"Base should be between 2 and 36")},a.prototype.toNumber=function(){var e=this.words[0];return 2===this.length?e+=67108864*this.words[1]:3===this.length&&1===this.words[2]?e+=4503599627370496+67108864*this.words[1]:this.length>2&&n(!1,"Number can only safely store up to 53 bits"),0!==this.negative?-e:e},a.prototype.toJSON=function(){return this.toString(16)},a.prototype.toBuffer=function(e,t){return n(void 0!==o),this.toArrayLike(o,e,t)},a.prototype.toArray=function(e,t){return this.toArrayLike(Array,e,t)},a.prototype.toArrayLike=function(e,t,r){var i=this.byteLength(),a=r||Math.max(1,i);n(i<=a,"byte array longer than desired length"),n(a>0,"Requested array length <= 0"),this.strip();var o,f,s="le"===t,c=new e(a),u=this.clone();if(s){for(f=0;!u.isZero();f++)o=u.andln(255),u.iushrn(8),c[f]=o;for(;f<a;f++)c[f]=0}else{for(f=0;f<a-i;f++)c[f]=0;for(f=0;!u.isZero();f++)o=u.andln(255),u.iushrn(8),c[a-f-1]=o}return c},Math.clz32?a.prototype._countBits=function(e){return 32-Math.clz32(e)}:a.prototype._countBits=function(e){var t=e,r=0;return t>=4096&&(r+=13,t>>>=13),t>=64&&(r+=7,t>>>=7),t>=8&&(r+=4,t>>>=4),t>=2&&(r+=2,t>>>=2),r+t},a.prototype._zeroBits=function(e){if(0===e)return 26;var t=e,r=0;return 0==(8191&t)&&(r+=13,t>>>=13),0==(127&t)&&(r+=7,t>>>=7),0==(15&t)&&(r+=4,t>>>=4),0==(3&t)&&(r+=2,t>>>=2),0==(1&t)&&r++,r},a.prototype.bitLength=function(){var e=this.words[this.length-1],t=this._countBits(e);return 26*(this.length-1)+t},a.prototype.zeroBits=function(){if(this.isZero())return 0;for(var e=0,t=0;t<this.length;t++){var r=this._zeroBits(this.words[t]);if(e+=r,26!==r)break}return e},a.prototype.byteLength=function(){return Math.ceil(this.bitLength()/8)},a.prototype.toTwos=function(e){return 0!==this.negative?this.abs().inotn(e).iaddn(1):this.clone()},a.prototype.fromTwos=function(e){return this.testn(e-1)?this.notn(e).iaddn(1).ineg():this.clone()},a.prototype.isNeg=function(){return 0!==this.negative},a.prototype.neg=function(){return this.clone().ineg()},a.prototype.ineg=function(){return this.isZero()||(this.negative^=1),this},a.prototype.iuor=function(e){for(;this.length<e.length;)this.words[this.length++]=0;for(var t=0;t<e.length;t++)this.words[t]=this.words[t]|e.words[t];return this.strip()},a.prototype.ior=function(e){return n(0==(this.negative|e.negative)),this.iuor(e)},a.prototype.or=function(e){return this.length>e.length?this.clone().ior(e):e.clone().ior(this)},a.prototype.uor=function(e){return this.length>e.length?this.clone().iuor(e):e.clone().iuor(this)},a.prototype.iuand=function(e){var t;t=this.length>e.length?e:this;for(var r=0;r<t.length;r++)this.words[r]=this.words[r]&e.words[r];return this.length=t.length,this.strip()},a.prototype.iand=function(e){return n(0==(this.negative|e.negative)),this.iuand(e)},a.prototype.and=function(e){return this.length>e.length?this.clone().iand(e):e.clone().iand(this)},a.prototype.uand=function(e){return this.length>e.length?this.clone().iuand(e):e.clone().iuand(this)},a.prototype.iuxor=function(e){var t,r;this.length>e.length?(t=this,r=e):(t=e,r=this);for(var n=0;n<r.length;n++)this.words[n]=t.words[n]^r.words[n];if(this!==t)for(;n<t.length;n++)this.words[n]=t.words[n];return this.length=t.length,this.strip()},a.prototype.ixor=function(e){return n(0==(this.negative|e.negative)),this.iuxor(e)},a.prototype.xor=function(e){return this.length>e.length?this.clone().ixor(e):e.clone().ixor(this)},a.prototype.uxor=function(e){return this.length>e.length?this.clone().iuxor(e):e.clone().iuxor(this)},a.prototype.inotn=function(e){n("number"==typeof e&&e>=0);var t=0|Math.ceil(e/26),r=e%26;this._expand(t),r>0&&t--;for(var i=0;i<t;i++)this.words[i]=67108863&~this.words[i];return r>0&&(this.words[i]=~this.words[i]&67108863>>26-r),this.strip()},a.prototype.notn=function(e){return this.clone().inotn(e)},a.prototype.setn=function(e,t){n("number"==typeof e&&e>=0);var r=e/26|0,i=e%26;return this._expand(r+1),this.words[r]=t?this.words[r]|1<<i:this.words[r]&~(1<<i),this.strip()},a.prototype.iadd=function(e){var t,r,n;if(0!==this.negative&&0===e.negative)return this.negative=0,t=this.isub(e),this.negative^=1,this._normSign();if(0===this.negative&&0!==e.negative)return e.negative=0,t=this.isub(e),e.negative=1,t._normSign();this.length>e.length?(r=this,n=e):(r=e,n=this);for(var i=0,a=0;a<n.length;a++)t=(0|r.words[a])+(0|n.words[a])+i,this.words[a]=67108863&t,i=t>>>26;for(;0!==i&&a<r.length;a++)t=(0|r.words[a])+i,this.words[a]=67108863&t,i=t>>>26;if(this.length=r.length,0!==i)this.words[this.length]=i,this.length++;else if(r!==this)for(;a<r.length;a++)this.words[a]=r.words[a];return this},a.prototype.add=function(e){var t;return 0!==e.negative&&0===this.negative?(e.negative=0,t=this.sub(e),e.negative^=1,t):0===e.negative&&0!==this.negative?(this.negative=0,t=e.sub(this),this.negative=1,t):this.length>e.length?this.clone().iadd(e):e.clone().iadd(this)},a.prototype.isub=function(e){if(0!==e.negative){e.negative=0;var t=this.iadd(e);return e.negative=1,t._normSign()}if(0!==this.negative)return this.negative=0,this.iadd(e),this.negative=1,this._normSign();var r,n,i=this.cmp(e);if(0===i)return this.negative=0,this.length=1,this.words[0]=0,this;i>0?(r=this,n=e):(r=e,n=this);for(var a=0,o=0;o<n.length;o++)a=(t=(0|r.words[o])-(0|n.words[o])+a)>>26,this.words[o]=67108863&t;for(;0!==a&&o<r.length;o++)a=(t=(0|r.words[o])+a)>>26,this.words[o]=67108863&t;if(0===a&&o<r.length&&r!==this)for(;o<r.length;o++)this.words[o]=r.words[o];return this.length=Math.max(this.length,o),r!==this&&(this.negative=1),this.strip()},a.prototype.sub=function(e){return this.clone().isub(e)};var l=function(e,t,r){var n,i,a,o=e.words,f=t.words,s=r.words,c=0,u=0|o[0],h=8191&u,d=u>>>13,l=0|o[1],p=8191&l,b=l>>>13,y=0|o[2],g=8191&y,m=y>>>13,v=0|o[3],_=8191&v,w=v>>>13,E=0|o[4],A=8191&E,S=E>>>13,B=0|o[5],M=8191&B,C=B>>>13,D=0|o[6],k=8191&D,F=D>>>13,x=0|o[7],I=8191&x,R=x>>>13,j=0|o[8],T=8191&j,P=j>>>13,O=0|o[9],N=8191&O,q=O>>>13,L=0|f[0],U=8191&L,z=L>>>13,K=0|f[1],H=8191&K,Y=K>>>13,V=0|f[2],W=8191&V,J=V>>>13,X=0|f[3],G=8191&X,Z=X>>>13,$=0|f[4],Q=8191&$,ee=$>>>13,te=0|f[5],re=8191&te,ne=te>>>13,ie=0|f[6],ae=8191&ie,oe=ie>>>13,fe=0|f[7],se=8191&fe,ce=fe>>>13,ue=0|f[8],he=8191&ue,de=ue>>>13,le=0|f[9],pe=8191&le,be=le>>>13;r.negative=e.negative^t.negative,r.length=19;var ye=(c+(n=Math.imul(h,U))|0)+((8191&(i=(i=Math.imul(h,z))+Math.imul(d,U)|0))<<13)|0;c=((a=Math.imul(d,z))+(i>>>13)|0)+(ye>>>26)|0,ye&=67108863,n=Math.imul(p,U),i=(i=Math.imul(p,z))+Math.imul(b,U)|0,a=Math.imul(b,z);var ge=(c+(n=n+Math.imul(h,H)|0)|0)+((8191&(i=(i=i+Math.imul(h,Y)|0)+Math.imul(d,H)|0))<<13)|0;c=((a=a+Math.imul(d,Y)|0)+(i>>>13)|0)+(ge>>>26)|0,ge&=67108863,n=Math.imul(g,U),i=(i=Math.imul(g,z))+Math.imul(m,U)|0,a=Math.imul(m,z),n=n+Math.imul(p,H)|0,i=(i=i+Math.imul(p,Y)|0)+Math.imul(b,H)|0,a=a+Math.imul(b,Y)|0;var me=(c+(n=n+Math.imul(h,W)|0)|0)+((8191&(i=(i=i+Math.imul(h,J)|0)+Math.imul(d,W)|0))<<13)|0;c=((a=a+Math.imul(d,J)|0)+(i>>>13)|0)+(me>>>26)|0,me&=67108863,n=Math.imul(_,U),i=(i=Math.imul(_,z))+Math.imul(w,U)|0,a=Math.imul(w,z),n=n+Math.imul(g,H)|0,i=(i=i+Math.imul(g,Y)|0)+Math.imul(m,H)|0,a=a+Math.imul(m,Y)|0,n=n+Math.imul(p,W)|0,i=(i=i+Math.imul(p,J)|0)+Math.imul(b,W)|0,a=a+Math.imul(b,J)|0;var ve=(c+(n=n+Math.imul(h,G)|0)|0)+((8191&(i=(i=i+Math.imul(h,Z)|0)+Math.imul(d,G)|0))<<13)|0;c=((a=a+Math.imul(d,Z)|0)+(i>>>13)|0)+(ve>>>26)|0,ve&=67108863,n=Math.imul(A,U),i=(i=Math.imul(A,z))+Math.imul(S,U)|0,a=Math.imul(S,z),n=n+Math.imul(_,H)|0,i=(i=i+Math.imul(_,Y)|0)+Math.imul(w,H)|0,a=a+Math.imul(w,Y)|0,n=n+Math.imul(g,W)|0,i=(i=i+Math.imul(g,J)|0)+Math.imul(m,W)|0,a=a+Math.imul(m,J)|0,n=n+Math.imul(p,G)|0,i=(i=i+Math.imul(p,Z)|0)+Math.imul(b,G)|0,a=a+Math.imul(b,Z)|0;var _e=(c+(n=n+Math.imul(h,Q)|0)|0)+((8191&(i=(i=i+Math.imul(h,ee)|0)+Math.imul(d,Q)|0))<<13)|0;c=((a=a+Math.imul(d,ee)|0)+(i>>>13)|0)+(_e>>>26)|0,_e&=67108863,n=Math.imul(M,U),i=(i=Math.imul(M,z))+Math.imul(C,U)|0,a=Math.imul(C,z),n=n+Math.imul(A,H)|0,i=(i=i+Math.imul(A,Y)|0)+Math.imul(S,H)|0,a=a+Math.imul(S,Y)|0,n=n+Math.imul(_,W)|0,i=(i=i+Math.imul(_,J)|0)+Math.imul(w,W)|0,a=a+Math.imul(w,J)|0,n=n+Math.imul(g,G)|0,i=(i=i+Math.imul(g,Z)|0)+Math.imul(m,G)|0,a=a+Math.imul(m,Z)|0,n=n+Math.imul(p,Q)|0,i=(i=i+Math.imul(p,ee)|0)+Math.imul(b,Q)|0,a=a+Math.imul(b,ee)|0;var we=(c+(n=n+Math.imul(h,re)|0)|0)+((8191&(i=(i=i+Math.imul(h,ne)|0)+Math.imul(d,re)|0))<<13)|0;c=((a=a+Math.imul(d,ne)|0)+(i>>>13)|0)+(we>>>26)|0,we&=67108863,n=Math.imul(k,U),i=(i=Math.imul(k,z))+Math.imul(F,U)|0,a=Math.imul(F,z),n=n+Math.imul(M,H)|0,i=(i=i+Math.imul(M,Y)|0)+Math.imul(C,H)|0,a=a+Math.imul(C,Y)|0,n=n+Math.imul(A,W)|0,i=(i=i+Math.imul(A,J)|0)+Math.imul(S,W)|0,a=a+Math.imul(S,J)|0,n=n+Math.imul(_,G)|0,i=(i=i+Math.imul(_,Z)|0)+Math.imul(w,G)|0,a=a+Math.imul(w,Z)|0,n=n+Math.imul(g,Q)|0,i=(i=i+Math.imul(g,ee)|0)+Math.imul(m,Q)|0,a=a+Math.imul(m,ee)|0,n=n+Math.imul(p,re)|0,i=(i=i+Math.imul(p,ne)|0)+Math.imul(b,re)|0,a=a+Math.imul(b,ne)|0;var Ee=(c+(n=n+Math.imul(h,ae)|0)|0)+((8191&(i=(i=i+Math.imul(h,oe)|0)+Math.imul(d,ae)|0))<<13)|0;c=((a=a+Math.imul(d,oe)|0)+(i>>>13)|0)+(Ee>>>26)|0,Ee&=67108863,n=Math.imul(I,U),i=(i=Math.imul(I,z))+Math.imul(R,U)|0,a=Math.imul(R,z),n=n+Math.imul(k,H)|0,i=(i=i+Math.imul(k,Y)|0)+Math.imul(F,H)|0,a=a+Math.imul(F,Y)|0,n=n+Math.imul(M,W)|0,i=(i=i+Math.imul(M,J)|0)+Math.imul(C,W)|0,a=a+Math.imul(C,J)|0,n=n+Math.imul(A,G)|0,i=(i=i+Math.imul(A,Z)|0)+Math.imul(S,G)|0,a=a+Math.imul(S,Z)|0,n=n+Math.imul(_,Q)|0,i=(i=i+Math.imul(_,ee)|0)+Math.imul(w,Q)|0,a=a+Math.imul(w,ee)|0,n=n+Math.imul(g,re)|0,i=(i=i+Math.imul(g,ne)|0)+Math.imul(m,re)|0,a=a+Math.imul(m,ne)|0,n=n+Math.imul(p,ae)|0,i=(i=i+Math.imul(p,oe)|0)+Math.imul(b,ae)|0,a=a+Math.imul(b,oe)|0;var Ae=(c+(n=n+Math.imul(h,se)|0)|0)+((8191&(i=(i=i+Math.imul(h,ce)|0)+Math.imul(d,se)|0))<<13)|0;c=((a=a+Math.imul(d,ce)|0)+(i>>>13)|0)+(Ae>>>26)|0,Ae&=67108863,n=Math.imul(T,U),i=(i=Math.imul(T,z))+Math.imul(P,U)|0,a=Math.imul(P,z),n=n+Math.imul(I,H)|0,i=(i=i+Math.imul(I,Y)|0)+Math.imul(R,H)|0,a=a+Math.imul(R,Y)|0,n=n+Math.imul(k,W)|0,i=(i=i+Math.imul(k,J)|0)+Math.imul(F,W)|0,a=a+Math.imul(F,J)|0,n=n+Math.imul(M,G)|0,i=(i=i+Math.imul(M,Z)|0)+Math.imul(C,G)|0,a=a+Math.imul(C,Z)|0,n=n+Math.imul(A,Q)|0,i=(i=i+Math.imul(A,ee)|0)+Math.imul(S,Q)|0,a=a+Math.imul(S,ee)|0,n=n+Math.imul(_,re)|0,i=(i=i+Math.imul(_,ne)|0)+Math.imul(w,re)|0,a=a+Math.imul(w,ne)|0,n=n+Math.imul(g,ae)|0,i=(i=i+Math.imul(g,oe)|0)+Math.imul(m,ae)|0,a=a+Math.imul(m,oe)|0,n=n+Math.imul(p,se)|0,i=(i=i+Math.imul(p,ce)|0)+Math.imul(b,se)|0,a=a+Math.imul(b,ce)|0;var Se=(c+(n=n+Math.imul(h,he)|0)|0)+((8191&(i=(i=i+Math.imul(h,de)|0)+Math.imul(d,he)|0))<<13)|0;c=((a=a+Math.imul(d,de)|0)+(i>>>13)|0)+(Se>>>26)|0,Se&=67108863,n=Math.imul(N,U),i=(i=Math.imul(N,z))+Math.imul(q,U)|0,a=Math.imul(q,z),n=n+Math.imul(T,H)|0,i=(i=i+Math.imul(T,Y)|0)+Math.imul(P,H)|0,a=a+Math.imul(P,Y)|0,n=n+Math.imul(I,W)|0,i=(i=i+Math.imul(I,J)|0)+Math.imul(R,W)|0,a=a+Math.imul(R,J)|0,n=n+Math.imul(k,G)|0,i=(i=i+Math.imul(k,Z)|0)+Math.imul(F,G)|0,a=a+Math.imul(F,Z)|0,n=n+Math.imul(M,Q)|0,i=(i=i+Math.imul(M,ee)|0)+Math.imul(C,Q)|0,a=a+Math.imul(C,ee)|0,n=n+Math.imul(A,re)|0,i=(i=i+Math.imul(A,ne)|0)+Math.imul(S,re)|0,a=a+Math.imul(S,ne)|0,n=n+Math.imul(_,ae)|0,i=(i=i+Math.imul(_,oe)|0)+Math.imul(w,ae)|0,a=a+Math.imul(w,oe)|0,n=n+Math.imul(g,se)|0,i=(i=i+Math.imul(g,ce)|0)+Math.imul(m,se)|0,a=a+Math.imul(m,ce)|0,n=n+Math.imul(p,he)|0,i=(i=i+Math.imul(p,de)|0)+Math.imul(b,he)|0,a=a+Math.imul(b,de)|0;var Be=(c+(n=n+Math.imul(h,pe)|0)|0)+((8191&(i=(i=i+Math.imul(h,be)|0)+Math.imul(d,pe)|0))<<13)|0;c=((a=a+Math.imul(d,be)|0)+(i>>>13)|0)+(Be>>>26)|0,Be&=67108863,n=Math.imul(N,H),i=(i=Math.imul(N,Y))+Math.imul(q,H)|0,a=Math.imul(q,Y),n=n+Math.imul(T,W)|0,i=(i=i+Math.imul(T,J)|0)+Math.imul(P,W)|0,a=a+Math.imul(P,J)|0,n=n+Math.imul(I,G)|0,i=(i=i+Math.imul(I,Z)|0)+Math.imul(R,G)|0,a=a+Math.imul(R,Z)|0,n=n+Math.imul(k,Q)|0,i=(i=i+Math.imul(k,ee)|0)+Math.imul(F,Q)|0,a=a+Math.imul(F,ee)|0,n=n+Math.imul(M,re)|0,i=(i=i+Math.imul(M,ne)|0)+Math.imul(C,re)|0,a=a+Math.imul(C,ne)|0,n=n+Math.imul(A,ae)|0,i=(i=i+Math.imul(A,oe)|0)+Math.imul(S,ae)|0,a=a+Math.imul(S,oe)|0,n=n+Math.imul(_,se)|0,i=(i=i+Math.imul(_,ce)|0)+Math.imul(w,se)|0,a=a+Math.imul(w,ce)|0,n=n+Math.imul(g,he)|0,i=(i=i+Math.imul(g,de)|0)+Math.imul(m,he)|0,a=a+Math.imul(m,de)|0;var Me=(c+(n=n+Math.imul(p,pe)|0)|0)+((8191&(i=(i=i+Math.imul(p,be)|0)+Math.imul(b,pe)|0))<<13)|0;c=((a=a+Math.imul(b,be)|0)+(i>>>13)|0)+(Me>>>26)|0,Me&=67108863,n=Math.imul(N,W),i=(i=Math.imul(N,J))+Math.imul(q,W)|0,a=Math.imul(q,J),n=n+Math.imul(T,G)|0,i=(i=i+Math.imul(T,Z)|0)+Math.imul(P,G)|0,a=a+Math.imul(P,Z)|0,n=n+Math.imul(I,Q)|0,i=(i=i+Math.imul(I,ee)|0)+Math.imul(R,Q)|0,a=a+Math.imul(R,ee)|0,n=n+Math.imul(k,re)|0,i=(i=i+Math.imul(k,ne)|0)+Math.imul(F,re)|0,a=a+Math.imul(F,ne)|0,n=n+Math.imul(M,ae)|0,i=(i=i+Math.imul(M,oe)|0)+Math.imul(C,ae)|0,a=a+Math.imul(C,oe)|0,n=n+Math.imul(A,se)|0,i=(i=i+Math.imul(A,ce)|0)+Math.imul(S,se)|0,a=a+Math.imul(S,ce)|0,n=n+Math.imul(_,he)|0,i=(i=i+Math.imul(_,de)|0)+Math.imul(w,he)|0,a=a+Math.imul(w,de)|0;var Ce=(c+(n=n+Math.imul(g,pe)|0)|0)+((8191&(i=(i=i+Math.imul(g,be)|0)+Math.imul(m,pe)|0))<<13)|0;c=((a=a+Math.imul(m,be)|0)+(i>>>13)|0)+(Ce>>>26)|0,Ce&=67108863,n=Math.imul(N,G),i=(i=Math.imul(N,Z))+Math.imul(q,G)|0,a=Math.imul(q,Z),n=n+Math.imul(T,Q)|0,i=(i=i+Math.imul(T,ee)|0)+Math.imul(P,Q)|0,a=a+Math.imul(P,ee)|0,n=n+Math.imul(I,re)|0,i=(i=i+Math.imul(I,ne)|0)+Math.imul(R,re)|0,a=a+Math.imul(R,ne)|0,n=n+Math.imul(k,ae)|0,i=(i=i+Math.imul(k,oe)|0)+Math.imul(F,ae)|0,a=a+Math.imul(F,oe)|0,n=n+Math.imul(M,se)|0,i=(i=i+Math.imul(M,ce)|0)+Math.imul(C,se)|0,a=a+Math.imul(C,ce)|0,n=n+Math.imul(A,he)|0,i=(i=i+Math.imul(A,de)|0)+Math.imul(S,he)|0,a=a+Math.imul(S,de)|0;var De=(c+(n=n+Math.imul(_,pe)|0)|0)+((8191&(i=(i=i+Math.imul(_,be)|0)+Math.imul(w,pe)|0))<<13)|0;c=((a=a+Math.imul(w,be)|0)+(i>>>13)|0)+(De>>>26)|0,De&=67108863,n=Math.imul(N,Q),i=(i=Math.imul(N,ee))+Math.imul(q,Q)|0,a=Math.imul(q,ee),n=n+Math.imul(T,re)|0,i=(i=i+Math.imul(T,ne)|0)+Math.imul(P,re)|0,a=a+Math.imul(P,ne)|0,n=n+Math.imul(I,ae)|0,i=(i=i+Math.imul(I,oe)|0)+Math.imul(R,ae)|0,a=a+Math.imul(R,oe)|0,n=n+Math.imul(k,se)|0,i=(i=i+Math.imul(k,ce)|0)+Math.imul(F,se)|0,a=a+Math.imul(F,ce)|0,n=n+Math.imul(M,he)|0,i=(i=i+Math.imul(M,de)|0)+Math.imul(C,he)|0,a=a+Math.imul(C,de)|0;var ke=(c+(n=n+Math.imul(A,pe)|0)|0)+((8191&(i=(i=i+Math.imul(A,be)|0)+Math.imul(S,pe)|0))<<13)|0;c=((a=a+Math.imul(S,be)|0)+(i>>>13)|0)+(ke>>>26)|0,ke&=67108863,n=Math.imul(N,re),i=(i=Math.imul(N,ne))+Math.imul(q,re)|0,a=Math.imul(q,ne),n=n+Math.imul(T,ae)|0,i=(i=i+Math.imul(T,oe)|0)+Math.imul(P,ae)|0,a=a+Math.imul(P,oe)|0,n=n+Math.imul(I,se)|0,i=(i=i+Math.imul(I,ce)|0)+Math.imul(R,se)|0,a=a+Math.imul(R,ce)|0,n=n+Math.imul(k,he)|0,i=(i=i+Math.imul(k,de)|0)+Math.imul(F,he)|0,a=a+Math.imul(F,de)|0;var Fe=(c+(n=n+Math.imul(M,pe)|0)|0)+((8191&(i=(i=i+Math.imul(M,be)|0)+Math.imul(C,pe)|0))<<13)|0;c=((a=a+Math.imul(C,be)|0)+(i>>>13)|0)+(Fe>>>26)|0,Fe&=67108863,n=Math.imul(N,ae),i=(i=Math.imul(N,oe))+Math.imul(q,ae)|0,a=Math.imul(q,oe),n=n+Math.imul(T,se)|0,i=(i=i+Math.imul(T,ce)|0)+Math.imul(P,se)|0,a=a+Math.imul(P,ce)|0,n=n+Math.imul(I,he)|0,i=(i=i+Math.imul(I,de)|0)+Math.imul(R,he)|0,a=a+Math.imul(R,de)|0;var xe=(c+(n=n+Math.imul(k,pe)|0)|0)+((8191&(i=(i=i+Math.imul(k,be)|0)+Math.imul(F,pe)|0))<<13)|0;c=((a=a+Math.imul(F,be)|0)+(i>>>13)|0)+(xe>>>26)|0,xe&=67108863,n=Math.imul(N,se),i=(i=Math.imul(N,ce))+Math.imul(q,se)|0,a=Math.imul(q,ce),n=n+Math.imul(T,he)|0,i=(i=i+Math.imul(T,de)|0)+Math.imul(P,he)|0,a=a+Math.imul(P,de)|0;var Ie=(c+(n=n+Math.imul(I,pe)|0)|0)+((8191&(i=(i=i+Math.imul(I,be)|0)+Math.imul(R,pe)|0))<<13)|0;c=((a=a+Math.imul(R,be)|0)+(i>>>13)|0)+(Ie>>>26)|0,Ie&=67108863,n=Math.imul(N,he),i=(i=Math.imul(N,de))+Math.imul(q,he)|0,a=Math.imul(q,de);var Re=(c+(n=n+Math.imul(T,pe)|0)|0)+((8191&(i=(i=i+Math.imul(T,be)|0)+Math.imul(P,pe)|0))<<13)|0;c=((a=a+Math.imul(P,be)|0)+(i>>>13)|0)+(Re>>>26)|0,Re&=67108863;var je=(c+(n=Math.imul(N,pe))|0)+((8191&(i=(i=Math.imul(N,be))+Math.imul(q,pe)|0))<<13)|0;return c=((a=Math.imul(q,be))+(i>>>13)|0)+(je>>>26)|0,je&=67108863,s[0]=ye,s[1]=ge,s[2]=me,s[3]=ve,s[4]=_e,s[5]=we,s[6]=Ee,s[7]=Ae,s[8]=Se,s[9]=Be,s[10]=Me,s[11]=Ce,s[12]=De,s[13]=ke,s[14]=Fe,s[15]=xe,s[16]=Ie,s[17]=Re,s[18]=je,0!==c&&(s[19]=c,r.length++),r};function p(e,t,r){return(new b).mulp(e,t,r)}function b(e,t){this.x=e,this.y=t}Math.imul||(l=d),a.prototype.mulTo=function(e,t){var r=this.length+e.length;return 10===this.length&&10===e.length?l(this,e,t):r<63?d(this,e,t):r<1024?function(e,t,r){r.negative=t.negative^e.negative,r.length=e.length+t.length;for(var n=0,i=0,a=0;a<r.length-1;a++){var o=i;i=0;for(var f=67108863&n,s=Math.min(a,t.length-1),c=Math.max(0,a-e.length+1);c<=s;c++){var u=a-c,h=(0|e.words[u])*(0|t.words[c]),d=67108863&h;f=67108863&(d=d+f|0),i+=(o=(o=o+(h/67108864|0)|0)+(d>>>26)|0)>>>26,o&=67108863}r.words[a]=f,n=o,o=i}return 0!==n?r.words[a]=n:r.length--,r.strip()}(this,e,t):p(this,e,t)},b.prototype.makeRBT=function(e){for(var t=new Array(e),r=a.prototype._countBits(e)-1,n=0;n<e;n++)t[n]=this.revBin(n,r,e);return t},b.prototype.revBin=function(e,t,r){if(0===e||e===r-1)return e;for(var n=0,i=0;i<t;i++)n|=(1&e)<<t-i-1,e>>=1;return n},b.prototype.permute=function(e,t,r,n,i,a){for(var o=0;o<a;o++)n[o]=t[e[o]],i[o]=r[e[o]]},b.prototype.transform=function(e,t,r,n,i,a){this.permute(a,e,t,r,n,i);for(var o=1;o<i;o<<=1)for(var f=o<<1,s=Math.cos(2*Math.PI/f),c=Math.sin(2*Math.PI/f),u=0;u<i;u+=f)for(var h=s,d=c,l=0;l<o;l++){var p=r[u+l],b=n[u+l],y=r[u+l+o],g=n[u+l+o],m=h*y-d*g;g=h*g+d*y,y=m,r[u+l]=p+y,n[u+l]=b+g,r[u+l+o]=p-y,n[u+l+o]=b-g,l!==f&&(m=s*h-c*d,d=s*d+c*h,h=m)}},b.prototype.guessLen13b=function(e,t){var r=1|Math.max(t,e),n=1&r,i=0;for(r=r/2|0;r;r>>>=1)i++;return 1<<i+1+n},b.prototype.conjugate=function(e,t,r){if(!(r<=1))for(var n=0;n<r/2;n++){var i=e[n];e[n]=e[r-n-1],e[r-n-1]=i,i=t[n],t[n]=-t[r-n-1],t[r-n-1]=-i}},b.prototype.normalize13b=function(e,t){for(var r=0,n=0;n<t/2;n++){var i=8192*Math.round(e[2*n+1]/t)+Math.round(e[2*n]/t)+r;e[n]=67108863&i,r=i<67108864?0:i/67108864|0}return e},b.prototype.convert13b=function(e,t,r,i){for(var a=0,o=0;o<t;o++)a+=0|e[o],r[2*o]=8191&a,a>>>=13,r[2*o+1]=8191&a,a>>>=13;for(o=2*t;o<i;++o)r[o]=0;n(0===a),n(0==(-8192&a))},b.prototype.stub=function(e){for(var t=new Array(e),r=0;r<e;r++)t[r]=0;return t},b.prototype.mulp=function(e,t,r){var n=2*this.guessLen13b(e.length,t.length),i=this.makeRBT(n),a=this.stub(n),o=new Array(n),f=new Array(n),s=new Array(n),c=new Array(n),u=new Array(n),h=new Array(n),d=r.words;d.length=n,this.convert13b(e.words,e.length,o,n),this.convert13b(t.words,t.length,c,n),this.transform(o,a,f,s,n,i),this.transform(c,a,u,h,n,i);for(var l=0;l<n;l++){var p=f[l]*u[l]-s[l]*h[l];s[l]=f[l]*h[l]+s[l]*u[l],f[l]=p}return this.conjugate(f,s,n),this.transform(f,s,d,a,n,i),this.conjugate(d,a,n),this.normalize13b(d,n),r.negative=e.negative^t.negative,r.length=e.length+t.length,r.strip()},a.prototype.mul=function(e){var t=new a(null);return t.words=new Array(this.length+e.length),this.mulTo(e,t)},a.prototype.mulf=function(e){var t=new a(null);return t.words=new Array(this.length+e.length),p(this,e,t)},a.prototype.imul=function(e){return this.clone().mulTo(e,this)},a.prototype.imuln=function(e){n("number"==typeof e),n(e<67108864);for(var t=0,r=0;r<this.length;r++){var i=(0|this.words[r])*e,a=(67108863&i)+(67108863&t);t>>=26,t+=i/67108864|0,t+=a>>>26,this.words[r]=67108863&a}return 0!==t&&(this.words[r]=t,this.length++),this},a.prototype.muln=function(e){return this.clone().imuln(e)},a.prototype.sqr=function(){return this.mul(this)},a.prototype.isqr=function(){return this.imul(this.clone())},a.prototype.pow=function(e){var t=function(e){for(var t=new Array(e.bitLength()),r=0;r<t.length;r++){var n=r/26|0,i=r%26;t[r]=(e.words[n]&1<<i)>>>i}return t}(e);if(0===t.length)return new a(1);for(var r=this,n=0;n<t.length&&0===t[n];n++,r=r.sqr());if(++n<t.length)for(var i=r.sqr();n<t.length;n++,i=i.sqr())0!==t[n]&&(r=r.mul(i));return r},a.prototype.iushln=function(e){n("number"==typeof e&&e>=0);var t,r=e%26,i=(e-r)/26,a=67108863>>>26-r<<26-r;if(0!==r){var o=0;for(t=0;t<this.length;t++){var f=this.words[t]&a,s=(0|this.words[t])-f<<r;this.words[t]=s|o,o=f>>>26-r}o&&(this.words[t]=o,this.length++)}if(0!==i){for(t=this.length-1;t>=0;t--)this.words[t+i]=this.words[t];for(t=0;t<i;t++)this.words[t]=0;this.length+=i}return this.strip()},a.prototype.ishln=function(e){return n(0===this.negative),this.iushln(e)},a.prototype.iushrn=function(e,t,r){var i;n("number"==typeof e&&e>=0),i=t?(t-t%26)/26:0;var a=e%26,o=Math.min((e-a)/26,this.length),f=67108863^67108863>>>a<<a,s=r;if(i-=o,i=Math.max(0,i),s){for(var c=0;c<o;c++)s.words[c]=this.words[c];s.length=o}if(0===o);else if(this.length>o)for(this.length-=o,c=0;c<this.length;c++)this.words[c]=this.words[c+o];else this.words[0]=0,this.length=1;var u=0;for(c=this.length-1;c>=0&&(0!==u||c>=i);c--){var h=0|this.words[c];this.words[c]=u<<26-a|h>>>a,u=h&f}return s&&0!==u&&(s.words[s.length++]=u),0===this.length&&(this.words[0]=0,this.length=1),this.strip()},a.prototype.ishrn=function(e,t,r){return n(0===this.negative),this.iushrn(e,t,r)},a.prototype.shln=function(e){return this.clone().ishln(e)},a.prototype.ushln=function(e){return this.clone().iushln(e)},a.prototype.shrn=function(e){return this.clone().ishrn(e)},a.prototype.ushrn=function(e){return this.clone().iushrn(e)},a.prototype.testn=function(e){n("number"==typeof e&&e>=0);var t=e%26,r=(e-t)/26,i=1<<t;return!(this.length<=r)&&!!(this.words[r]&i)},a.prototype.imaskn=function(e){n("number"==typeof e&&e>=0);var t=e%26,r=(e-t)/26;if(n(0===this.negative,"imaskn works only with positive numbers"),this.length<=r)return this;if(0!==t&&r++,this.length=Math.min(r,this.length),0!==t){var i=67108863^67108863>>>t<<t;this.words[this.length-1]&=i}return this.strip()},a.prototype.maskn=function(e){return this.clone().imaskn(e)},a.prototype.iaddn=function(e){return n("number"==typeof e),n(e<67108864),e<0?this.isubn(-e):0!==this.negative?1===this.length&&(0|this.words[0])<e?(this.words[0]=e-(0|this.words[0]),this.negative=0,this):(this.negative=0,this.isubn(e),this.negative=1,this):this._iaddn(e)},a.prototype._iaddn=function(e){this.words[0]+=e;for(var t=0;t<this.length&&this.words[t]>=67108864;t++)this.words[t]-=67108864,t===this.length-1?this.words[t+1]=1:this.words[t+1]++;return this.length=Math.max(this.length,t+1),this},a.prototype.isubn=function(e){if(n("number"==typeof e),n(e<67108864),e<0)return this.iaddn(-e);if(0!==this.negative)return this.negative=0,this.iaddn(e),this.negative=1,this;if(this.words[0]-=e,1===this.length&&this.words[0]<0)this.words[0]=-this.words[0],this.negative=1;else for(var t=0;t<this.length&&this.words[t]<0;t++)this.words[t]+=67108864,this.words[t+1]-=1;return this.strip()},a.prototype.addn=function(e){return this.clone().iaddn(e)},a.prototype.subn=function(e){return this.clone().isubn(e)},a.prototype.iabs=function(){return this.negative=0,this},a.prototype.abs=function(){return this.clone().iabs()},a.prototype._ishlnsubmul=function(e,t,r){var i,a,o=e.length+r;this._expand(o);var f=0;for(i=0;i<e.length;i++){a=(0|this.words[i+r])+f;var s=(0|e.words[i])*t;f=((a-=67108863&s)>>26)-(s/67108864|0),this.words[i+r]=67108863&a}for(;i<this.length-r;i++)f=(a=(0|this.words[i+r])+f)>>26,this.words[i+r]=67108863&a;if(0===f)return this.strip();for(n(-1===f),f=0,i=0;i<this.length;i++)f=(a=-(0|this.words[i])+f)>>26,this.words[i]=67108863&a;return this.negative=1,this.strip()},a.prototype._wordDiv=function(e,t){var r=(this.length,e.length),n=this.clone(),i=e,o=0|i.words[i.length-1];0!==(r=26-this._countBits(o))&&(i=i.ushln(r),n.iushln(r),o=0|i.words[i.length-1]);var f,s=n.length-i.length;if("mod"!==t){(f=new a(null)).length=s+1,f.words=new Array(f.length);for(var c=0;c<f.length;c++)f.words[c]=0}var u=n.clone()._ishlnsubmul(i,1,s);0===u.negative&&(n=u,f&&(f.words[s]=1));for(var h=s-1;h>=0;h--){var d=67108864*(0|n.words[i.length+h])+(0|n.words[i.length+h-1]);for(d=Math.min(d/o|0,67108863),n._ishlnsubmul(i,d,h);0!==n.negative;)d--,n.negative=0,n._ishlnsubmul(i,1,h),n.isZero()||(n.negative^=1);f&&(f.words[h]=d)}return f&&f.strip(),n.strip(),"div"!==t&&0!==r&&n.iushrn(r),{div:f||null,mod:n}},a.prototype.divmod=function(e,t,r){return n(!e.isZero()),this.isZero()?{div:new a(0),mod:new a(0)}:0!==this.negative&&0===e.negative?(f=this.neg().divmod(e,t),"mod"!==t&&(i=f.div.neg()),"div"!==t&&(o=f.mod.neg(),r&&0!==o.negative&&o.iadd(e)),{div:i,mod:o}):0===this.negative&&0!==e.negative?(f=this.divmod(e.neg(),t),"mod"!==t&&(i=f.div.neg()),{div:i,mod:f.mod}):0!=(this.negative&e.negative)?(f=this.neg().divmod(e.neg(),t),"div"!==t&&(o=f.mod.neg(),r&&0!==o.negative&&o.isub(e)),{div:f.div,mod:o}):e.length>this.length||this.cmp(e)<0?{div:new a(0),mod:this}:1===e.length?"div"===t?{div:this.divn(e.words[0]),mod:null}:"mod"===t?{div:null,mod:new a(this.modn(e.words[0]))}:{div:this.divn(e.words[0]),mod:new a(this.modn(e.words[0]))}:this._wordDiv(e,t);var i,o,f},a.prototype.div=function(e){return this.divmod(e,"div",!1).div},a.prototype.mod=function(e){return this.divmod(e,"mod",!1).mod},a.prototype.umod=function(e){return this.divmod(e,"mod",!0).mod},a.prototype.divRound=function(e){var t=this.divmod(e);if(t.mod.isZero())return t.div;var r=0!==t.div.negative?t.mod.isub(e):t.mod,n=e.ushrn(1),i=e.andln(1),a=r.cmp(n);return a<0||1===i&&0===a?t.div:0!==t.div.negative?t.div.isubn(1):t.div.iaddn(1)},a.prototype.modn=function(e){n(e<=67108863);for(var t=(1<<26)%e,r=0,i=this.length-1;i>=0;i--)r=(t*r+(0|this.words[i]))%e;return r},a.prototype.idivn=function(e){n(e<=67108863);for(var t=0,r=this.length-1;r>=0;r--){var i=(0|this.words[r])+67108864*t;this.words[r]=i/e|0,t=i%e}return this.strip()},a.prototype.divn=function(e){return this.clone().idivn(e)},a.prototype.egcd=function(e){n(0===e.negative),n(!e.isZero());var t=this,r=e.clone();t=0!==t.negative?t.umod(e):t.clone();for(var i=new a(1),o=new a(0),f=new a(0),s=new a(1),c=0;t.isEven()&&r.isEven();)t.iushrn(1),r.iushrn(1),++c;for(var u=r.clone(),h=t.clone();!t.isZero();){for(var d=0,l=1;0==(t.words[0]&l)&&d<26;++d,l<<=1);if(d>0)for(t.iushrn(d);d-- >0;)(i.isOdd()||o.isOdd())&&(i.iadd(u),o.isub(h)),i.iushrn(1),o.iushrn(1);for(var p=0,b=1;0==(r.words[0]&b)&&p<26;++p,b<<=1);if(p>0)for(r.iushrn(p);p-- >0;)(f.isOdd()||s.isOdd())&&(f.iadd(u),s.isub(h)),f.iushrn(1),s.iushrn(1);t.cmp(r)>=0?(t.isub(r),i.isub(f),o.isub(s)):(r.isub(t),f.isub(i),s.isub(o))}return{a:f,b:s,gcd:r.iushln(c)}},a.prototype._invmp=function(e){n(0===e.negative),n(!e.isZero());var t=this,r=e.clone();t=0!==t.negative?t.umod(e):t.clone();for(var i,o=new a(1),f=new a(0),s=r.clone();t.cmpn(1)>0&&r.cmpn(1)>0;){for(var c=0,u=1;0==(t.words[0]&u)&&c<26;++c,u<<=1);if(c>0)for(t.iushrn(c);c-- >0;)o.isOdd()&&o.iadd(s),o.iushrn(1);for(var h=0,d=1;0==(r.words[0]&d)&&h<26;++h,d<<=1);if(h>0)for(r.iushrn(h);h-- >0;)f.isOdd()&&f.iadd(s),f.iushrn(1);t.cmp(r)>=0?(t.isub(r),o.isub(f)):(r.isub(t),f.isub(o))}return(i=0===t.cmpn(1)?o:f).cmpn(0)<0&&i.iadd(e),i},a.prototype.gcd=function(e){if(this.isZero())return e.abs();if(e.isZero())return this.abs();var t=this.clone(),r=e.clone();t.negative=0,r.negative=0;for(var n=0;t.isEven()&&r.isEven();n++)t.iushrn(1),r.iushrn(1);for(;;){for(;t.isEven();)t.iushrn(1);for(;r.isEven();)r.iushrn(1);var i=t.cmp(r);if(i<0){var a=t;t=r,r=a}else if(0===i||0===r.cmpn(1))break;t.isub(r)}return r.iushln(n)},a.prototype.invm=function(e){return this.egcd(e).a.umod(e)},a.prototype.isEven=function(){return 0==(1&this.words[0])},a.prototype.isOdd=function(){return 1==(1&this.words[0])},a.prototype.andln=function(e){return this.words[0]&e},a.prototype.bincn=function(e){n("number"==typeof e);var t=e%26,r=(e-t)/26,i=1<<t;if(this.length<=r)return this._expand(r+1),this.words[r]|=i,this;for(var a=i,o=r;0!==a&&o<this.length;o++){var f=0|this.words[o];a=(f+=a)>>>26,f&=67108863,this.words[o]=f}return 0!==a&&(this.words[o]=a,this.length++),this},a.prototype.isZero=function(){return 1===this.length&&0===this.words[0]},a.prototype.cmpn=function(e){var t,r=e<0;if(0!==this.negative&&!r)return-1;if(0===this.negative&&r)return 1;if(this.strip(),this.length>1)t=1;else{r&&(e=-e),n(e<=67108863,"Number is too big");var i=0|this.words[0];t=i===e?0:i<e?-1:1}return 0!==this.negative?0|-t:t},a.prototype.cmp=function(e){if(0!==this.negative&&0===e.negative)return-1;if(0===this.negative&&0!==e.negative)return 1;var t=this.ucmp(e);return 0!==this.negative?0|-t:t},a.prototype.ucmp=function(e){if(this.length>e.length)return 1;if(this.length<e.length)return-1;for(var t=0,r=this.length-1;r>=0;r--){var n=0|this.words[r],i=0|e.words[r];if(n!==i){n<i?t=-1:n>i&&(t=1);break}}return t},a.prototype.gtn=function(e){return 1===this.cmpn(e)},a.prototype.gt=function(e){return 1===this.cmp(e)},a.prototype.gten=function(e){return this.cmpn(e)>=0},a.prototype.gte=function(e){return this.cmp(e)>=0},a.prototype.ltn=function(e){return-1===this.cmpn(e)},a.prototype.lt=function(e){return-1===this.cmp(e)},a.prototype.lten=function(e){return this.cmpn(e)<=0},a.prototype.lte=function(e){return this.cmp(e)<=0},a.prototype.eqn=function(e){return 0===this.cmpn(e)},a.prototype.eq=function(e){return 0===this.cmp(e)},a.red=function(e){return new E(e)},a.prototype.toRed=function(e){return n(!this.red,"Already a number in reduction context"),n(0===this.negative,"red works only with positives"),e.convertTo(this)._forceRed(e)},a.prototype.fromRed=function(){return n(this.red,"fromRed works only with numbers in reduction context"),this.red.convertFrom(this)},a.prototype._forceRed=function(e){return this.red=e,this},a.prototype.forceRed=function(e){return n(!this.red,"Already a number in reduction context"),this._forceRed(e)},a.prototype.redAdd=function(e){return n(this.red,"redAdd works only with red numbers"),this.red.add(this,e)},a.prototype.redIAdd=function(e){return n(this.red,"redIAdd works only with red numbers"),this.red.iadd(this,e)},a.prototype.redSub=function(e){return n(this.red,"redSub works only with red numbers"),this.red.sub(this,e)},a.prototype.redISub=function(e){return n(this.red,"redISub works only with red numbers"),this.red.isub(this,e)},a.prototype.redShl=function(e){return n(this.red,"redShl works only with red numbers"),this.red.shl(this,e)},a.prototype.redMul=function(e){return n(this.red,"redMul works only with red numbers"),this.red._verify2(this,e),this.red.mul(this,e)},a.prototype.redIMul=function(e){return n(this.red,"redMul works only with red numbers"),this.red._verify2(this,e),this.red.imul(this,e)},a.prototype.redSqr=function(){return n(this.red,"redSqr works only with red numbers"),this.red._verify1(this),this.red.sqr(this)},a.prototype.redISqr=function(){return n(this.red,"redISqr works only with red numbers"),this.red._verify1(this),this.red.isqr(this)},a.prototype.redSqrt=function(){return n(this.red,"redSqrt works only with red numbers"),this.red._verify1(this),this.red.sqrt(this)},a.prototype.redInvm=function(){return n(this.red,"redInvm works only with red numbers"),this.red._verify1(this),this.red.invm(this)},a.prototype.redNeg=function(){return n(this.red,"redNeg works only with red numbers"),this.red._verify1(this),this.red.neg(this)},a.prototype.redPow=function(e){return n(this.red&&!e.red,"redPow(normalNum)"),this.red._verify1(this),this.red.pow(this,e)};var y={k256:null,p224:null,p192:null,p25519:null};function g(e,t){this.name=e,this.p=new a(t,16),this.n=this.p.bitLength(),this.k=new a(1).iushln(this.n).isub(this.p),this.tmp=this._tmp()}function m(){g.call(this,"k256","ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f")}function v(){g.call(this,"p224","ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001")}function _(){g.call(this,"p192","ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff")}function w(){g.call(this,"25519","7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed")}function E(e){if("string"==typeof e){var t=a._prime(e);this.m=t.p,this.prime=t}else n(e.gtn(1),"modulus must be greater than 1"),this.m=e,this.prime=null}function A(e){E.call(this,e),this.shift=this.m.bitLength(),this.shift%26!=0&&(this.shift+=26-this.shift%26),this.r=new a(1).iushln(this.shift),this.r2=this.imod(this.r.sqr()),this.rinv=this.r._invmp(this.m),this.minv=this.rinv.mul(this.r).isubn(1).div(this.m),this.minv=this.minv.umod(this.r),this.minv=this.r.sub(this.minv)}g.prototype._tmp=function(){var e=new a(null);return e.words=new Array(Math.ceil(this.n/13)),e},g.prototype.ireduce=function(e){var t,r=e;do{this.split(r,this.tmp),t=(r=(r=this.imulK(r)).iadd(this.tmp)).bitLength()}while(t>this.n);var n=t<this.n?-1:r.ucmp(this.p);return 0===n?(r.words[0]=0,r.length=1):n>0?r.isub(this.p):r.strip(),r},g.prototype.split=function(e,t){e.iushrn(this.n,0,t)},g.prototype.imulK=function(e){return e.imul(this.k)},i(m,g),m.prototype.split=function(e,t){for(var r=Math.min(e.length,9),n=0;n<r;n++)t.words[n]=e.words[n];if(t.length=r,e.length<=9)return e.words[0]=0,void(e.length=1);var i=e.words[9];for(t.words[t.length++]=4194303&i,n=10;n<e.length;n++){var a=0|e.words[n];e.words[n-10]=(4194303&a)<<4|i>>>22,i=a}i>>>=22,e.words[n-10]=i,0===i&&e.length>10?e.length-=10:e.length-=9},m.prototype.imulK=function(e){e.words[e.length]=0,e.words[e.length+1]=0,e.length+=2;for(var t=0,r=0;r<e.length;r++){var n=0|e.words[r];t+=977*n,e.words[r]=67108863&t,t=64*n+(t/67108864|0)}return 0===e.words[e.length-1]&&(e.length--,0===e.words[e.length-1]&&e.length--),e},i(v,g),i(_,g),i(w,g),w.prototype.imulK=function(e){for(var t=0,r=0;r<e.length;r++){var n=19*(0|e.words[r])+t,i=67108863&n;n>>>=26,e.words[r]=i,t=n}return 0!==t&&(e.words[e.length++]=t),e},a._prime=function(e){if(y[e])return y[e];var t;if("k256"===e)t=new m;else if("p224"===e)t=new v;else if("p192"===e)t=new _;else{if("p25519"!==e)throw new Error("Unknown prime "+e);t=new w}return y[e]=t,t},E.prototype._verify1=function(e){n(0===e.negative,"red works only with positives"),n(e.red,"red works only with red numbers")},E.prototype._verify2=function(e,t){n(0==(e.negative|t.negative),"red works only with positives"),n(e.red&&e.red===t.red,"red works only with red numbers")},E.prototype.imod=function(e){return this.prime?this.prime.ireduce(e)._forceRed(this):e.umod(this.m)._forceRed(this)},E.prototype.neg=function(e){return e.isZero()?e.clone():this.m.sub(e)._forceRed(this)},E.prototype.add=function(e,t){this._verify2(e,t);var r=e.add(t);return r.cmp(this.m)>=0&&r.isub(this.m),r._forceRed(this)},E.prototype.iadd=function(e,t){this._verify2(e,t);var r=e.iadd(t);return r.cmp(this.m)>=0&&r.isub(this.m),r},E.prototype.sub=function(e,t){this._verify2(e,t);var r=e.sub(t);return r.cmpn(0)<0&&r.iadd(this.m),r._forceRed(this)},E.prototype.isub=function(e,t){this._verify2(e,t);var r=e.isub(t);return r.cmpn(0)<0&&r.iadd(this.m),r},E.prototype.shl=function(e,t){return this._verify1(e),this.imod(e.ushln(t))},E.prototype.imul=function(e,t){return this._verify2(e,t),this.imod(e.imul(t))},E.prototype.mul=function(e,t){return this._verify2(e,t),this.imod(e.mul(t))},E.prototype.isqr=function(e){return this.imul(e,e.clone())},E.prototype.sqr=function(e){return this.mul(e,e)},E.prototype.sqrt=function(e){if(e.isZero())return e.clone();var t=this.m.andln(3);if(n(t%2==1),3===t){var r=this.m.add(new a(1)).iushrn(2);return this.pow(e,r)}for(var i=this.m.subn(1),o=0;!i.isZero()&&0===i.andln(1);)o++,i.iushrn(1);n(!i.isZero());var f=new a(1).toRed(this),s=f.redNeg(),c=this.m.subn(1).iushrn(1),u=this.m.bitLength();for(u=new a(2*u*u).toRed(this);0!==this.pow(u,c).cmp(s);)u.redIAdd(s);for(var h=this.pow(u,i),d=this.pow(e,i.addn(1).iushrn(1)),l=this.pow(e,i),p=o;0!==l.cmp(f);){for(var b=l,y=0;0!==b.cmp(f);y++)b=b.redSqr();n(y<p);var g=this.pow(h,new a(1).iushln(p-y-1));d=d.redMul(g),h=g.redSqr(),l=l.redMul(h),p=y}return d},E.prototype.invm=function(e){var t=e._invmp(this.m);return 0!==t.negative?(t.negative=0,this.imod(t).redNeg()):this.imod(t)},E.prototype.pow=function(e,t){if(t.isZero())return new a(1).toRed(this);if(0===t.cmpn(1))return e.clone();var r=new Array(16);r[0]=new a(1).toRed(this),r[1]=e;for(var n=2;n<r.length;n++)r[n]=this.mul(r[n-1],e);var i=r[0],o=0,f=0,s=t.bitLength()%26;for(0===s&&(s=26),n=t.length-1;n>=0;n--){for(var c=t.words[n],u=s-1;u>=0;u--){var h=c>>u&1;i!==r[0]&&(i=this.sqr(i)),0!==h||0!==o?(o<<=1,o|=h,(4===++f||0===n&&0===u)&&(i=this.mul(i,r[o]),f=0,o=0)):f=0}s=26}return i},E.prototype.convertTo=function(e){var t=e.umod(this.m);return t===e?t.clone():t},E.prototype.convertFrom=function(e){var t=e.clone();return t.red=null,t},a.mont=function(e){return new A(e)},i(A,E),A.prototype.convertTo=function(e){return this.imod(e.ushln(this.shift))},A.prototype.convertFrom=function(e){var t=this.imod(e.mul(this.rinv));return t.red=null,t},A.prototype.imul=function(e,t){if(e.isZero()||t.isZero())return e.words[0]=0,e.length=1,e;var r=e.imul(t),n=r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),i=r.isub(n).iushrn(this.shift),a=i;return i.cmp(this.m)>=0?a=i.isub(this.m):i.cmpn(0)<0&&(a=i.iadd(this.m)),a._forceRed(this)},A.prototype.mul=function(e,t){if(e.isZero()||t.isZero())return new a(0)._forceRed(this);var r=e.mul(t),n=r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),i=r.isub(n).iushrn(this.shift),o=i;return i.cmp(this.m)>=0?o=i.isub(this.m):i.cmpn(0)<0&&(o=i.iadd(this.m)),o._forceRed(this)},A.prototype.invm=function(e){return this.imod(e._invmp(this.m).mul(this.r2))._forceRed(this)}}(e,this)}).call(this,r(122)(e))},function(e,t,r){"use strict";(function(e){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
var n=r(80),i=r(81),a=r(82);function o(){return s.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function f(e,t){if(o()<t)throw new RangeError("Invalid typed array length");return s.TYPED_ARRAY_SUPPORT?(e=new Uint8Array(t)).__proto__=s.prototype:(null===e&&(e=new s(t)),e.length=t),e}function s(e,t,r){if(!(s.TYPED_ARRAY_SUPPORT||this instanceof s))return new s(e,t,r);if("number"==typeof e){if("string"==typeof t)throw new Error("If encoding is specified then the first argument must be a string");return h(this,e)}return c(this,e,t,r)}function c(e,t,r,n){if("number"==typeof t)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer?function(e,t,r,n){if(t.byteLength,r<0||t.byteLength<r)throw new RangeError("'offset' is out of bounds");if(t.byteLength<r+(n||0))throw new RangeError("'length' is out of bounds");t=void 0===r&&void 0===n?new Uint8Array(t):void 0===n?new Uint8Array(t,r):new Uint8Array(t,r,n);s.TYPED_ARRAY_SUPPORT?(e=t).__proto__=s.prototype:e=d(e,t);return e}(e,t,r,n):"string"==typeof t?function(e,t,r){"string"==typeof r&&""!==r||(r="utf8");if(!s.isEncoding(r))throw new TypeError('"encoding" must be a valid string encoding');var n=0|p(t,r),i=(e=f(e,n)).write(t,r);i!==n&&(e=e.slice(0,i));return e}(e,t,r):function(e,t){if(s.isBuffer(t)){var r=0|l(t.length);return 0===(e=f(e,r)).length?e:(t.copy(e,0,0,r),e)}if(t){if("undefined"!=typeof ArrayBuffer&&t.buffer instanceof ArrayBuffer||"length"in t)return"number"!=typeof t.length||(n=t.length)!=n?f(e,0):d(e,t);if("Buffer"===t.type&&a(t.data))return d(e,t.data)}var n;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(e,t)}function u(e){if("number"!=typeof e)throw new TypeError('"size" argument must be a number');if(e<0)throw new RangeError('"size" argument must not be negative')}function h(e,t){if(u(t),e=f(e,t<0?0:0|l(t)),!s.TYPED_ARRAY_SUPPORT)for(var r=0;r<t;++r)e[r]=0;return e}function d(e,t){var r=t.length<0?0:0|l(t.length);e=f(e,r);for(var n=0;n<r;n+=1)e[n]=255&t[n];return e}function l(e){if(e>=o())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+o().toString(16)+" bytes");return 0|e}function p(e,t){if(s.isBuffer(e))return e.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(e)||e instanceof ArrayBuffer))return e.byteLength;"string"!=typeof e&&(e=""+e);var r=e.length;if(0===r)return 0;for(var n=!1;;)switch(t){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":case void 0:return U(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return z(e).length;default:if(n)return U(e).length;t=(""+t).toLowerCase(),n=!0}}function b(e,t,r){var n=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if((r>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return F(this,t,r);case"utf8":case"utf-8":return M(this,t,r);case"ascii":return D(this,t,r);case"latin1":case"binary":return k(this,t,r);case"base64":return B(this,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return x(this,t,r);default:if(n)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),n=!0}}function y(e,t,r){var n=e[t];e[t]=e[r],e[r]=n}function g(e,t,r,n,i){if(0===e.length)return-1;if("string"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),r=+r,isNaN(r)&&(r=i?0:e.length-1),r<0&&(r=e.length+r),r>=e.length){if(i)return-1;r=e.length-1}else if(r<0){if(!i)return-1;r=0}if("string"==typeof t&&(t=s.from(t,n)),s.isBuffer(t))return 0===t.length?-1:m(e,t,r,n,i);if("number"==typeof t)return t&=255,s.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(e,t,r):Uint8Array.prototype.lastIndexOf.call(e,t,r):m(e,[t],r,n,i);throw new TypeError("val must be string, number or Buffer")}function m(e,t,r,n,i){var a,o=1,f=e.length,s=t.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(e.length<2||t.length<2)return-1;o=2,f/=2,s/=2,r/=2}function c(e,t){return 1===o?e[t]:e.readUInt16BE(t*o)}if(i){var u=-1;for(a=r;a<f;a++)if(c(e,a)===c(t,-1===u?0:a-u)){if(-1===u&&(u=a),a-u+1===s)return u*o}else-1!==u&&(a-=a-u),u=-1}else for(r+s>f&&(r=f-s),a=r;a>=0;a--){for(var h=!0,d=0;d<s;d++)if(c(e,a+d)!==c(t,d)){h=!1;break}if(h)return a}return-1}function v(e,t,r,n){r=Number(r)||0;var i=e.length-r;n?(n=Number(n))>i&&(n=i):n=i;var a=t.length;if(a%2!=0)throw new TypeError("Invalid hex string");n>a/2&&(n=a/2);for(var o=0;o<n;++o){var f=parseInt(t.substr(2*o,2),16);if(isNaN(f))return o;e[r+o]=f}return o}function _(e,t,r,n){return K(U(t,e.length-r),e,r,n)}function w(e,t,r,n){return K(function(e){for(var t=[],r=0;r<e.length;++r)t.push(255&e.charCodeAt(r));return t}(t),e,r,n)}function E(e,t,r,n){return w(e,t,r,n)}function A(e,t,r,n){return K(z(t),e,r,n)}function S(e,t,r,n){return K(function(e,t){for(var r,n,i,a=[],o=0;o<e.length&&!((t-=2)<0);++o)r=e.charCodeAt(o),n=r>>8,i=r%256,a.push(i),a.push(n);return a}(t,e.length-r),e,r,n)}function B(e,t,r){return 0===t&&r===e.length?n.fromByteArray(e):n.fromByteArray(e.slice(t,r))}function M(e,t,r){r=Math.min(e.length,r);for(var n=[],i=t;i<r;){var a,o,f,s,c=e[i],u=null,h=c>239?4:c>223?3:c>191?2:1;if(i+h<=r)switch(h){case 1:c<128&&(u=c);break;case 2:128==(192&(a=e[i+1]))&&(s=(31&c)<<6|63&a)>127&&(u=s);break;case 3:a=e[i+1],o=e[i+2],128==(192&a)&&128==(192&o)&&(s=(15&c)<<12|(63&a)<<6|63&o)>2047&&(s<55296||s>57343)&&(u=s);break;case 4:a=e[i+1],o=e[i+2],f=e[i+3],128==(192&a)&&128==(192&o)&&128==(192&f)&&(s=(15&c)<<18|(63&a)<<12|(63&o)<<6|63&f)>65535&&s<1114112&&(u=s)}null===u?(u=65533,h=1):u>65535&&(u-=65536,n.push(u>>>10&1023|55296),u=56320|1023&u),n.push(u),i+=h}return function(e){var t=e.length;if(t<=C)return String.fromCharCode.apply(String,e);var r="",n=0;for(;n<t;)r+=String.fromCharCode.apply(String,e.slice(n,n+=C));return r}(n)}t.Buffer=s,t.SlowBuffer=function(e){+e!=e&&(e=0);return s.alloc(+e)},t.INSPECT_MAX_BYTES=50,s.TYPED_ARRAY_SUPPORT=void 0!==e.TYPED_ARRAY_SUPPORT?e.TYPED_ARRAY_SUPPORT:function(){try{var e=new Uint8Array(1);return e.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===e.foo()&&"function"==typeof e.subarray&&0===e.subarray(1,1).byteLength}catch(e){return!1}}(),t.kMaxLength=o(),s.poolSize=8192,s._augment=function(e){return e.__proto__=s.prototype,e},s.from=function(e,t,r){return c(null,e,t,r)},s.TYPED_ARRAY_SUPPORT&&(s.prototype.__proto__=Uint8Array.prototype,s.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&s[Symbol.species]===s&&Object.defineProperty(s,Symbol.species,{value:null,configurable:!0})),s.alloc=function(e,t,r){return function(e,t,r,n){return u(t),t<=0?f(e,t):void 0!==r?"string"==typeof n?f(e,t).fill(r,n):f(e,t).fill(r):f(e,t)}(null,e,t,r)},s.allocUnsafe=function(e){return h(null,e)},s.allocUnsafeSlow=function(e){return h(null,e)},s.isBuffer=function(e){return!(null==e||!e._isBuffer)},s.compare=function(e,t){if(!s.isBuffer(e)||!s.isBuffer(t))throw new TypeError("Arguments must be Buffers");if(e===t)return 0;for(var r=e.length,n=t.length,i=0,a=Math.min(r,n);i<a;++i)if(e[i]!==t[i]){r=e[i],n=t[i];break}return r<n?-1:n<r?1:0},s.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},s.concat=function(e,t){if(!a(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return s.alloc(0);var r;if(void 0===t)for(t=0,r=0;r<e.length;++r)t+=e[r].length;var n=s.allocUnsafe(t),i=0;for(r=0;r<e.length;++r){var o=e[r];if(!s.isBuffer(o))throw new TypeError('"list" argument must be an Array of Buffers');o.copy(n,i),i+=o.length}return n},s.byteLength=p,s.prototype._isBuffer=!0,s.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)y(this,t,t+1);return this},s.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)y(this,t,t+3),y(this,t+1,t+2);return this},s.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)y(this,t,t+7),y(this,t+1,t+6),y(this,t+2,t+5),y(this,t+3,t+4);return this},s.prototype.toString=function(){var e=0|this.length;return 0===e?"":0===arguments.length?M(this,0,e):b.apply(this,arguments)},s.prototype.equals=function(e){if(!s.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===s.compare(this,e)},s.prototype.inspect=function(){var e="",r=t.INSPECT_MAX_BYTES;return this.length>0&&(e=this.toString("hex",0,r).match(/.{2}/g).join(" "),this.length>r&&(e+=" ... ")),"<Buffer "+e+">"},s.prototype.compare=function(e,t,r,n,i){if(!s.isBuffer(e))throw new TypeError("Argument must be a Buffer");if(void 0===t&&(t=0),void 0===r&&(r=e?e.length:0),void 0===n&&(n=0),void 0===i&&(i=this.length),t<0||r>e.length||n<0||i>this.length)throw new RangeError("out of range index");if(n>=i&&t>=r)return 0;if(n>=i)return-1;if(t>=r)return 1;if(this===e)return 0;for(var a=(i>>>=0)-(n>>>=0),o=(r>>>=0)-(t>>>=0),f=Math.min(a,o),c=this.slice(n,i),u=e.slice(t,r),h=0;h<f;++h)if(c[h]!==u[h]){a=c[h],o=u[h];break}return a<o?-1:o<a?1:0},s.prototype.includes=function(e,t,r){return-1!==this.indexOf(e,t,r)},s.prototype.indexOf=function(e,t,r){return g(this,e,t,r,!0)},s.prototype.lastIndexOf=function(e,t,r){return g(this,e,t,r,!1)},s.prototype.write=function(e,t,r,n){if(void 0===t)n="utf8",r=this.length,t=0;else if(void 0===r&&"string"==typeof t)n=t,r=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t|=0,isFinite(r)?(r|=0,void 0===n&&(n="utf8")):(n=r,r=void 0)}var i=this.length-t;if((void 0===r||r>i)&&(r=i),e.length>0&&(r<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");for(var a=!1;;)switch(n){case"hex":return v(this,e,t,r);case"utf8":case"utf-8":return _(this,e,t,r);case"ascii":return w(this,e,t,r);case"latin1":case"binary":return E(this,e,t,r);case"base64":return A(this,e,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return S(this,e,t,r);default:if(a)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),a=!0}},s.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var C=4096;function D(e,t,r){var n="";r=Math.min(e.length,r);for(var i=t;i<r;++i)n+=String.fromCharCode(127&e[i]);return n}function k(e,t,r){var n="";r=Math.min(e.length,r);for(var i=t;i<r;++i)n+=String.fromCharCode(e[i]);return n}function F(e,t,r){var n=e.length;(!t||t<0)&&(t=0),(!r||r<0||r>n)&&(r=n);for(var i="",a=t;a<r;++a)i+=L(e[a]);return i}function x(e,t,r){for(var n=e.slice(t,r),i="",a=0;a<n.length;a+=2)i+=String.fromCharCode(n[a]+256*n[a+1]);return i}function I(e,t,r){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>r)throw new RangeError("Trying to access beyond buffer length")}function R(e,t,r,n,i,a){if(!s.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>i||t<a)throw new RangeError('"value" argument is out of bounds');if(r+n>e.length)throw new RangeError("Index out of range")}function j(e,t,r,n){t<0&&(t=65535+t+1);for(var i=0,a=Math.min(e.length-r,2);i<a;++i)e[r+i]=(t&255<<8*(n?i:1-i))>>>8*(n?i:1-i)}function T(e,t,r,n){t<0&&(t=4294967295+t+1);for(var i=0,a=Math.min(e.length-r,4);i<a;++i)e[r+i]=t>>>8*(n?i:3-i)&255}function P(e,t,r,n,i,a){if(r+n>e.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function O(e,t,r,n,a){return a||P(e,0,r,4),i.write(e,t,r,n,23,4),r+4}function N(e,t,r,n,a){return a||P(e,0,r,8),i.write(e,t,r,n,52,8),r+8}s.prototype.slice=function(e,t){var r,n=this.length;if((e=~~e)<0?(e+=n)<0&&(e=0):e>n&&(e=n),(t=void 0===t?n:~~t)<0?(t+=n)<0&&(t=0):t>n&&(t=n),t<e&&(t=e),s.TYPED_ARRAY_SUPPORT)(r=this.subarray(e,t)).__proto__=s.prototype;else{var i=t-e;r=new s(i,void 0);for(var a=0;a<i;++a)r[a]=this[a+e]}return r},s.prototype.readUIntLE=function(e,t,r){e|=0,t|=0,r||I(e,t,this.length);for(var n=this[e],i=1,a=0;++a<t&&(i*=256);)n+=this[e+a]*i;return n},s.prototype.readUIntBE=function(e,t,r){e|=0,t|=0,r||I(e,t,this.length);for(var n=this[e+--t],i=1;t>0&&(i*=256);)n+=this[e+--t]*i;return n},s.prototype.readUInt8=function(e,t){return t||I(e,1,this.length),this[e]},s.prototype.readUInt16LE=function(e,t){return t||I(e,2,this.length),this[e]|this[e+1]<<8},s.prototype.readUInt16BE=function(e,t){return t||I(e,2,this.length),this[e]<<8|this[e+1]},s.prototype.readUInt32LE=function(e,t){return t||I(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},s.prototype.readUInt32BE=function(e,t){return t||I(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},s.prototype.readIntLE=function(e,t,r){e|=0,t|=0,r||I(e,t,this.length);for(var n=this[e],i=1,a=0;++a<t&&(i*=256);)n+=this[e+a]*i;return n>=(i*=128)&&(n-=Math.pow(2,8*t)),n},s.prototype.readIntBE=function(e,t,r){e|=0,t|=0,r||I(e,t,this.length);for(var n=t,i=1,a=this[e+--n];n>0&&(i*=256);)a+=this[e+--n]*i;return a>=(i*=128)&&(a-=Math.pow(2,8*t)),a},s.prototype.readInt8=function(e,t){return t||I(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},s.prototype.readInt16LE=function(e,t){t||I(e,2,this.length);var r=this[e]|this[e+1]<<8;return 32768&r?4294901760|r:r},s.prototype.readInt16BE=function(e,t){t||I(e,2,this.length);var r=this[e+1]|this[e]<<8;return 32768&r?4294901760|r:r},s.prototype.readInt32LE=function(e,t){return t||I(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},s.prototype.readInt32BE=function(e,t){return t||I(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},s.prototype.readFloatLE=function(e,t){return t||I(e,4,this.length),i.read(this,e,!0,23,4)},s.prototype.readFloatBE=function(e,t){return t||I(e,4,this.length),i.read(this,e,!1,23,4)},s.prototype.readDoubleLE=function(e,t){return t||I(e,8,this.length),i.read(this,e,!0,52,8)},s.prototype.readDoubleBE=function(e,t){return t||I(e,8,this.length),i.read(this,e,!1,52,8)},s.prototype.writeUIntLE=function(e,t,r,n){(e=+e,t|=0,r|=0,n)||R(this,e,t,r,Math.pow(2,8*r)-1,0);var i=1,a=0;for(this[t]=255&e;++a<r&&(i*=256);)this[t+a]=e/i&255;return t+r},s.prototype.writeUIntBE=function(e,t,r,n){(e=+e,t|=0,r|=0,n)||R(this,e,t,r,Math.pow(2,8*r)-1,0);var i=r-1,a=1;for(this[t+i]=255&e;--i>=0&&(a*=256);)this[t+i]=e/a&255;return t+r},s.prototype.writeUInt8=function(e,t,r){return e=+e,t|=0,r||R(this,e,t,1,255,0),s.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),this[t]=255&e,t+1},s.prototype.writeUInt16LE=function(e,t,r){return e=+e,t|=0,r||R(this,e,t,2,65535,0),s.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):j(this,e,t,!0),t+2},s.prototype.writeUInt16BE=function(e,t,r){return e=+e,t|=0,r||R(this,e,t,2,65535,0),s.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):j(this,e,t,!1),t+2},s.prototype.writeUInt32LE=function(e,t,r){return e=+e,t|=0,r||R(this,e,t,4,4294967295,0),s.TYPED_ARRAY_SUPPORT?(this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e):T(this,e,t,!0),t+4},s.prototype.writeUInt32BE=function(e,t,r){return e=+e,t|=0,r||R(this,e,t,4,4294967295,0),s.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):T(this,e,t,!1),t+4},s.prototype.writeIntLE=function(e,t,r,n){if(e=+e,t|=0,!n){var i=Math.pow(2,8*r-1);R(this,e,t,r,i-1,-i)}var a=0,o=1,f=0;for(this[t]=255&e;++a<r&&(o*=256);)e<0&&0===f&&0!==this[t+a-1]&&(f=1),this[t+a]=(e/o>>0)-f&255;return t+r},s.prototype.writeIntBE=function(e,t,r,n){if(e=+e,t|=0,!n){var i=Math.pow(2,8*r-1);R(this,e,t,r,i-1,-i)}var a=r-1,o=1,f=0;for(this[t+a]=255&e;--a>=0&&(o*=256);)e<0&&0===f&&0!==this[t+a+1]&&(f=1),this[t+a]=(e/o>>0)-f&255;return t+r},s.prototype.writeInt8=function(e,t,r){return e=+e,t|=0,r||R(this,e,t,1,127,-128),s.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),e<0&&(e=255+e+1),this[t]=255&e,t+1},s.prototype.writeInt16LE=function(e,t,r){return e=+e,t|=0,r||R(this,e,t,2,32767,-32768),s.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):j(this,e,t,!0),t+2},s.prototype.writeInt16BE=function(e,t,r){return e=+e,t|=0,r||R(this,e,t,2,32767,-32768),s.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):j(this,e,t,!1),t+2},s.prototype.writeInt32LE=function(e,t,r){return e=+e,t|=0,r||R(this,e,t,4,2147483647,-2147483648),s.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24):T(this,e,t,!0),t+4},s.prototype.writeInt32BE=function(e,t,r){return e=+e,t|=0,r||R(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),s.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):T(this,e,t,!1),t+4},s.prototype.writeFloatLE=function(e,t,r){return O(this,e,t,!0,r)},s.prototype.writeFloatBE=function(e,t,r){return O(this,e,t,!1,r)},s.prototype.writeDoubleLE=function(e,t,r){return N(this,e,t,!0,r)},s.prototype.writeDoubleBE=function(e,t,r){return N(this,e,t,!1,r)},s.prototype.copy=function(e,t,r,n){if(r||(r=0),n||0===n||(n=this.length),t>=e.length&&(t=e.length),t||(t=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("sourceStart out of bounds");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),e.length-t<n-r&&(n=e.length-t+r);var i,a=n-r;if(this===e&&r<t&&t<n)for(i=a-1;i>=0;--i)e[i+t]=this[i+r];else if(a<1e3||!s.TYPED_ARRAY_SUPPORT)for(i=0;i<a;++i)e[i+t]=this[i+r];else Uint8Array.prototype.set.call(e,this.subarray(r,r+a),t);return a},s.prototype.fill=function(e,t,r,n){if("string"==typeof e){if("string"==typeof t?(n=t,t=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),1===e.length){var i=e.charCodeAt(0);i<256&&(e=i)}if(void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!s.isEncoding(n))throw new TypeError("Unknown encoding: "+n)}else"number"==typeof e&&(e&=255);if(t<0||this.length<t||this.length<r)throw new RangeError("Out of range index");if(r<=t)return this;var a;if(t>>>=0,r=void 0===r?this.length:r>>>0,e||(e=0),"number"==typeof e)for(a=t;a<r;++a)this[a]=e;else{var o=s.isBuffer(e)?e:U(new s(e,n).toString()),f=o.length;for(a=0;a<r-t;++a)this[a+t]=o[a%f]}return this};var q=/[^+\/0-9A-Za-z-_]/g;function L(e){return e<16?"0"+e.toString(16):e.toString(16)}function U(e,t){var r;t=t||1/0;for(var n=e.length,i=null,a=[],o=0;o<n;++o){if((r=e.charCodeAt(o))>55295&&r<57344){if(!i){if(r>56319){(t-=3)>-1&&a.push(239,191,189);continue}if(o+1===n){(t-=3)>-1&&a.push(239,191,189);continue}i=r;continue}if(r<56320){(t-=3)>-1&&a.push(239,191,189),i=r;continue}r=65536+(i-55296<<10|r-56320)}else i&&(t-=3)>-1&&a.push(239,191,189);if(i=null,r<128){if((t-=1)<0)break;a.push(r)}else if(r<2048){if((t-=2)<0)break;a.push(r>>6|192,63&r|128)}else if(r<65536){if((t-=3)<0)break;a.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;a.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return a}function z(e){return n.toByteArray(function(e){if((e=function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}(e).replace(q,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function K(e,t,r,n){for(var i=0;i<n&&!(i+r>=t.length||i>=e.length);++i)t[i+r]=e[i];return i}}).call(this,r(6))},function(e,t){function r(e,t){if(!e)throw new Error(t||"Assertion failed")}e.exports=r,r.equal=function(e,t,r){if(e!=t)throw new Error(r||"Assertion failed: "+e+" != "+t)}},function(e,t,r){"use strict";var n=t,i=r(2),a=r(4),o=r(63);n.assert=a,n.toArray=o.toArray,n.zero2=o.zero2,n.toHex=o.toHex,n.encode=o.encode,n.getNAF=function(e,t){for(var r=[],n=1<<t+1,i=e.clone();i.cmpn(1)>=0;){var a;if(i.isOdd()){var o=i.andln(n-1);a=o>(n>>1)-1?(n>>1)-o:o,i.isubn(a)}else a=0;r.push(a);for(var f=0!==i.cmpn(0)&&0===i.andln(n-1)?t+1:1,s=1;s<f;s++)r.push(0);i.iushrn(f)}return r},n.getJSF=function(e,t){var r=[[],[]];e=e.clone(),t=t.clone();for(var n=0,i=0;e.cmpn(-n)>0||t.cmpn(-i)>0;){var a,o,f,s=e.andln(3)+n&3,c=t.andln(3)+i&3;if(3===s&&(s=-1),3===c&&(c=-1),0==(1&s))a=0;else a=3!==(f=e.andln(7)+n&7)&&5!==f||2!==c?s:-s;if(r[0].push(a),0==(1&c))o=0;else o=3!==(f=t.andln(7)+i&7)&&5!==f||2!==s?c:-c;r[1].push(o),2*n===a+1&&(n=1-n),2*i===o+1&&(i=1-i),e.iushrn(1),t.iushrn(1)}return r},n.cachedProperty=function(e,t,r){var n="_"+t;e.prototype[t]=function(){return void 0!==this[n]?this[n]:this[n]=r.call(this)}},n.parseBytes=function(e){return"string"==typeof e?n.toArray(e,"hex"):e},n.intFromLE=function(e){return new i(e,"hex","le")}},function(e,t){var r;r=function(){return this}();try{r=r||new Function("return this")()}catch(e){"object"==typeof window&&(r=window)}e.exports=r},function(e,t){var r,n,i=e.exports={};function a(){throw new Error("setTimeout has not been defined")}function o(){throw new Error("clearTimeout has not been defined")}function f(e){if(r===setTimeout)return setTimeout(e,0);if((r===a||!r)&&setTimeout)return r=setTimeout,setTimeout(e,0);try{return r(e,0)}catch(t){try{return r.call(null,e,0)}catch(t){return r.call(this,e,0)}}}!function(){try{r="function"==typeof setTimeout?setTimeout:a}catch(e){r=a}try{n="function"==typeof clearTimeout?clearTimeout:o}catch(e){n=o}}();var s,c=[],u=!1,h=-1;function d(){u&&s&&(u=!1,s.length?c=s.concat(c):h=-1,c.length&&l())}function l(){if(!u){var e=f(d);u=!0;for(var t=c.length;t;){for(s=c,c=[];++h<t;)s&&s[h].run();h=-1,t=c.length}s=null,u=!1,function(e){if(n===clearTimeout)return clearTimeout(e);if((n===o||!n)&&clearTimeout)return n=clearTimeout,clearTimeout(e);try{n(e)}catch(t){try{return n.call(null,e)}catch(t){return n.call(this,e)}}}(e)}}function p(e,t){this.fun=e,this.array=t}function b(){}i.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)t[r-1]=arguments[r];c.push(new p(e,t)),1!==c.length||u||f(l)},p.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=b,i.addListener=b,i.once=b,i.off=b,i.removeListener=b,i.removeAllListeners=b,i.emit=b,i.prependListener=b,i.prependOnceListener=b,i.listeners=function(e){return[]},i.binding=function(e){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(e){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(e,t,r){"use strict";var n=r(4),i=r(0);function a(e,t){return 55296==(64512&e.charCodeAt(t))&&(!(t<0||t+1>=e.length)&&56320==(64512&e.charCodeAt(t+1)))}function o(e){return(e>>>24|e>>>8&65280|e<<8&16711680|(255&e)<<24)>>>0}function f(e){return 1===e.length?"0"+e:e}function s(e){return 7===e.length?"0"+e:6===e.length?"00"+e:5===e.length?"000"+e:4===e.length?"0000"+e:3===e.length?"00000"+e:2===e.length?"000000"+e:1===e.length?"0000000"+e:e}t.inherits=i,t.toArray=function(e,t){if(Array.isArray(e))return e.slice();if(!e)return[];var r=[];if("string"==typeof e)if(t){if("hex"===t)for((e=e.replace(/[^a-z0-9]+/gi,"")).length%2!=0&&(e="0"+e),i=0;i<e.length;i+=2)r.push(parseInt(e[i]+e[i+1],16))}else for(var n=0,i=0;i<e.length;i++){var o=e.charCodeAt(i);o<128?r[n++]=o:o<2048?(r[n++]=o>>6|192,r[n++]=63&o|128):a(e,i)?(o=65536+((1023&o)<<10)+(1023&e.charCodeAt(++i)),r[n++]=o>>18|240,r[n++]=o>>12&63|128,r[n++]=o>>6&63|128,r[n++]=63&o|128):(r[n++]=o>>12|224,r[n++]=o>>6&63|128,r[n++]=63&o|128)}else for(i=0;i<e.length;i++)r[i]=0|e[i];return r},t.toHex=function(e){for(var t="",r=0;r<e.length;r++)t+=f(e[r].toString(16));return t},t.htonl=o,t.toHex32=function(e,t){for(var r="",n=0;n<e.length;n++){var i=e[n];"little"===t&&(i=o(i)),r+=s(i.toString(16))}return r},t.zero2=f,t.zero8=s,t.join32=function(e,t,r,i){var a=r-t;n(a%4==0);for(var o=new Array(a/4),f=0,s=t;f<o.length;f++,s+=4){var c;c="big"===i?e[s]<<24|e[s+1]<<16|e[s+2]<<8|e[s+3]:e[s+3]<<24|e[s+2]<<16|e[s+1]<<8|e[s],o[f]=c>>>0}return o},t.split32=function(e,t){for(var r=new Array(4*e.length),n=0,i=0;n<e.length;n++,i+=4){var a=e[n];"big"===t?(r[i]=a>>>24,r[i+1]=a>>>16&255,r[i+2]=a>>>8&255,r[i+3]=255&a):(r[i+3]=a>>>24,r[i+2]=a>>>16&255,r[i+1]=a>>>8&255,r[i]=255&a)}return r},t.rotr32=function(e,t){return e>>>t|e<<32-t},t.rotl32=function(e,t){return e<<t|e>>>32-t},t.sum32=function(e,t){return e+t>>>0},t.sum32_3=function(e,t,r){return e+t+r>>>0},t.sum32_4=function(e,t,r,n){return e+t+r+n>>>0},t.sum32_5=function(e,t,r,n,i){return e+t+r+n+i>>>0},t.sum64=function(e,t,r,n){var i=e[t],a=n+e[t+1]>>>0,o=(a<n?1:0)+r+i;e[t]=o>>>0,e[t+1]=a},t.sum64_hi=function(e,t,r,n){return(t+n>>>0<t?1:0)+e+r>>>0},t.sum64_lo=function(e,t,r,n){return t+n>>>0},t.sum64_4_hi=function(e,t,r,n,i,a,o,f){var s=0,c=t;return s+=(c=c+n>>>0)<t?1:0,s+=(c=c+a>>>0)<a?1:0,e+r+i+o+(s+=(c=c+f>>>0)<f?1:0)>>>0},t.sum64_4_lo=function(e,t,r,n,i,a,o,f){return t+n+a+f>>>0},t.sum64_5_hi=function(e,t,r,n,i,a,o,f,s,c){var u=0,h=t;return u+=(h=h+n>>>0)<t?1:0,u+=(h=h+a>>>0)<a?1:0,u+=(h=h+f>>>0)<f?1:0,e+r+i+o+s+(u+=(h=h+c>>>0)<c?1:0)>>>0},t.sum64_5_lo=function(e,t,r,n,i,a,o,f,s,c){return t+n+a+f+c>>>0},t.rotr64_hi=function(e,t,r){return(t<<32-r|e>>>r)>>>0},t.rotr64_lo=function(e,t,r){return(e<<32-r|t>>>r)>>>0},t.shr64_hi=function(e,t,r){return e>>>r},t.shr64_lo=function(e,t,r){return(e<<32-r|t>>>r)>>>0}},function(e,t,r){var n=r(1).Buffer,i=r(27).Transform,a=r(31).StringDecoder;function o(e){i.call(this),this.hashMode="string"==typeof e,this.hashMode?this[e]=this._finalOrDigest:this.final=this._finalOrDigest,this._final&&(this.__final=this._final,this._final=null),this._decoder=null,this._encoding=null}r(0)(o,i),o.prototype.update=function(e,t,r){"string"==typeof e&&(e=n.from(e,t));var i=this._update(e);return this.hashMode?this:(r&&(i=this._toString(i,r)),i)},o.prototype.setAutoPadding=function(){},o.prototype.getAuthTag=function(){throw new Error("trying to get auth tag in unsupported state")},o.prototype.setAuthTag=function(){throw new Error("trying to set auth tag in unsupported state")},o.prototype.setAAD=function(){throw new Error("trying to set aad in unsupported state")},o.prototype._transform=function(e,t,r){var n;try{this.hashMode?this._update(e):this.push(this._update(e))}catch(e){n=e}finally{r(n)}},o.prototype._flush=function(e){var t;try{this.push(this.__final())}catch(e){t=e}e(t)},o.prototype._finalOrDigest=function(e){var t=this.__final()||n.alloc(0);return e&&(t=this._toString(t,e,!0)),t},o.prototype._toString=function(e,t,r){if(this._decoder||(this._decoder=new a(t),this._encoding=t),this._encoding!==t)throw new Error("can't switch encodings");var n=this._decoder.write(e);return r&&(n+=this._decoder.end()),n},e.exports=o},function(e,t,r){e.exports=r(83),e.exports.params=r(77)},function(e,t,r){"use strict";var n=r(21),i=Object.keys||function(e){var t=[];for(var r in e)t.push(r);return t};e.exports=h;var a=r(15);a.inherits=r(0);var o=r(43),f=r(30);a.inherits(h,o);for(var s=i(f.prototype),c=0;c<s.length;c++){var u=s[c];h.prototype[u]||(h.prototype[u]=f.prototype[u])}function h(e){if(!(this instanceof h))return new h(e);o.call(this,e),f.call(this,e),e&&!1===e.readable&&(this.readable=!1),e&&!1===e.writable&&(this.writable=!1),this.allowHalfOpen=!0,e&&!1===e.allowHalfOpen&&(this.allowHalfOpen=!1),this.once("end",d)}function d(){this.allowHalfOpen||this._writableState.ended||n.nextTick(l,this)}function l(e){e.end()}Object.defineProperty(h.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),Object.defineProperty(h.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed&&this._writableState.destroyed)},set:function(e){void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed=e,this._writableState.destroyed=e)}}),h.prototype._destroy=function(e,t){this.push(null),this.end(),n.nextTick(t,e)}},function(e,t,r){"use strict";(function(t,n){var i=65536,a=4294967295;var o=r(1).Buffer,f=t.crypto||t.msCrypto;f&&f.getRandomValues?e.exports=function(e,t){if(e>a)throw new RangeError("requested too many random bytes");var r=o.allocUnsafe(e);if(e>0)if(e>i)for(var s=0;s<e;s+=i)f.getRandomValues(r.slice(s,s+i));else f.getRandomValues(r);if("function"==typeof t)return n.nextTick((function(){t(null,r)}));return r}:e.exports=function(){throw new Error("Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11")}}).call(this,r(6),r(7))},function(e,t,r){var n=r(1).Buffer;function i(e,t){this._block=n.alloc(e),this._finalSize=t,this._blockSize=e,this._len=0}i.prototype.update=function(e,t){"string"==typeof e&&(t=t||"utf8",e=n.from(e,t));for(var r=this._block,i=this._blockSize,a=e.length,o=this._len,f=0;f<a;){for(var s=o%i,c=Math.min(a-f,i-s),u=0;u<c;u++)r[s+u]=e[f+u];f+=c,(o+=c)%i==0&&this._update(r)}return this._len+=a,this},i.prototype.digest=function(e){var t=this._len%this._blockSize;this._block[t]=128,this._block.fill(0,t+1),t>=this._finalSize&&(this._update(this._block),this._block.fill(0));var r=8*this._len;if(r<=4294967295)this._block.writeUInt32BE(r,this._blockSize-4);else{var n=(4294967295&r)>>>0,i=(r-n)/4294967296;this._block.writeUInt32BE(i,this._blockSize-8),this._block.writeUInt32BE(n,this._blockSize-4)}this._update(this._block);var a=this._hash();return e?a.toString(e):a},i.prototype._update=function(){throw new Error("_update must be implemented by subclass")},e.exports=i},function(e,t,r){"use strict";var n=r(0),i=r(26),a=r(32),o=r(33),f=r(9);function s(e){f.call(this,"digest"),this._hash=e}n(s,f),s.prototype._update=function(e){this._hash.update(e)},s.prototype._final=function(){return this._hash.digest()},e.exports=function(e){return"md5"===(e=e.toLowerCase())?new i:"rmd160"===e||"ripemd160"===e?new a:new s(o(e))}},function(e,t,r){(function(e){function r(e){return Object.prototype.toString.call(e)}t.isArray=function(e){return Array.isArray?Array.isArray(e):"[object Array]"===r(e)},t.isBoolean=function(e){return"boolean"==typeof e},t.isNull=function(e){return null===e},t.isNullOrUndefined=function(e){return null==e},t.isNumber=function(e){return"number"==typeof e},t.isString=function(e){return"string"==typeof e},t.isSymbol=function(e){return"symbol"==typeof e},t.isUndefined=function(e){return void 0===e},t.isRegExp=function(e){return"[object RegExp]"===r(e)},t.isObject=function(e){return"object"==typeof e&&null!==e},t.isDate=function(e){return"[object Date]"===r(e)},t.isError=function(e){return"[object Error]"===r(e)||e instanceof Error},t.isFunction=function(e){return"function"==typeof e},t.isPrimitive=function(e){return null===e||"boolean"==typeof e||"number"==typeof e||"string"==typeof e||"symbol"==typeof e||void 0===e},t.isBuffer=e.isBuffer}).call(this,r(3).Buffer)},function(e,t,r){(function(t){e.exports=function(e,r){for(var n=Math.min(e.length,r.length),i=new t(n),a=0;a<n;++a)i[a]=e[a]^r[a];return i}}).call(this,r(3).Buffer)},function(e,t,r){"use strict";var n=r(8),i=r(4);function a(){this.pending=null,this.pendingTotal=0,this.blockSize=this.constructor.blockSize,this.outSize=this.constructor.outSize,this.hmacStrength=this.constructor.hmacStrength,this.padLength=this.constructor.padLength/8,this.endian="big",this._delta8=this.blockSize/8,this._delta32=this.blockSize/32}t.BlockHash=a,a.prototype.update=function(e,t){if(e=n.toArray(e,t),this.pending?this.pending=this.pending.concat(e):this.pending=e,this.pendingTotal+=e.length,this.pending.length>=this._delta8){var r=(e=this.pending).length%this._delta8;this.pending=e.slice(e.length-r,e.length),0===this.pending.length&&(this.pending=null),e=n.join32(e,0,e.length-r,this.endian);for(var i=0;i<e.length;i+=this._delta32)this._update(e,i,i+this._delta32)}return this},a.prototype.digest=function(e){return this.update(this._pad()),i(null===this.pending),this._digest(e)},a.prototype._pad=function(){var e=this.pendingTotal,t=this._delta8,r=t-(e+this.padLength)%t,n=new Array(r+this.padLength);n[0]=128;for(var i=1;i<r;i++)n[i]=0;if(e<<=3,"big"===this.endian){for(var a=8;a<this.padLength;a++)n[i++]=0;n[i++]=0,n[i++]=0,n[i++]=0,n[i++]=0,n[i++]=e>>>24&255,n[i++]=e>>>16&255,n[i++]=e>>>8&255,n[i++]=255&e}else for(n[i++]=255&e,n[i++]=e>>>8&255,n[i++]=e>>>16&255,n[i++]=e>>>24&255,n[i++]=0,n[i++]=0,n[i++]=0,n[i++]=0,a=8;a<this.padLength;a++)n[i++]=0;return n}},function(e,t,r){var n=t;n.bignum=r(2),n.define=r(148).define,n.base=r(19),n.constants=r(69),n.decoders=r(153),n.encoders=r(155)},function(e,t,r){var n=t;n.Reporter=r(150).Reporter,n.DecoderBuffer=r(68).DecoderBuffer,n.EncoderBuffer=r(68).EncoderBuffer,n.Node=r(151)},function(e,t,r){(function(t){function r(e,r){return i(r)&&a(r.data)&&(r.data.length>0?r.data="base64:"+t.from(r.data).toString("base64"):r.data=""),r}function n(e,r){if(i(r)){if(a(r.data))return t.from(r.data);if(o(r.data))return r.data.startsWith("base64:")?t.from(r.data.slice("base64:".length),"base64"):t.from(r.data)}return r}function i(e){return function(e){return"object"==typeof e&&null!==e}(e)&&"Buffer"===e.type&&(a(e.data)||o(e.data))}function a(e){return Array.isArray(e)}function o(e){return"string"==typeof e}e.exports={stringify:function(e,t){return JSON.stringify(e,r,t)},parse:function(e){return JSON.parse(e,n)},replacer:r,reviver:n}}).call(this,r(3).Buffer)},function(e,t,r){"use strict";(function(t){void 0===t||!t.version||0===t.version.indexOf("v0.")||0===t.version.indexOf("v1.")&&0!==t.version.indexOf("v1.8.")?e.exports={nextTick:function(e,r,n,i){if("function"!=typeof e)throw new TypeError('"callback" argument must be a function');var a,o,f=arguments.length;switch(f){case 0:case 1:return t.nextTick(e);case 2:return t.nextTick((function(){e.call(null,r)}));case 3:return t.nextTick((function(){e.call(null,r,n)}));case 4:return t.nextTick((function(){e.call(null,r,n,i)}));default:for(a=new Array(f-1),o=0;o<a.length;)a[o++]=arguments[o];return t.nextTick((function(){e.apply(null,a)}))}}}:e.exports=t}).call(this,r(7))},function(e,t,r){var n=r(1).Buffer;function i(e){n.isBuffer(e)||(e=n.from(e));for(var t=e.length/4|0,r=new Array(t),i=0;i<t;i++)r[i]=e.readUInt32BE(4*i);return r}function a(e){for(;0<e.length;e++)e[0]=0}function o(e,t,r,n,i){for(var a,o,f,s,c=r[0],u=r[1],h=r[2],d=r[3],l=e[0]^t[0],p=e[1]^t[1],b=e[2]^t[2],y=e[3]^t[3],g=4,m=1;m<i;m++)a=c[l>>>24]^u[p>>>16&255]^h[b>>>8&255]^d[255&y]^t[g++],o=c[p>>>24]^u[b>>>16&255]^h[y>>>8&255]^d[255&l]^t[g++],f=c[b>>>24]^u[y>>>16&255]^h[l>>>8&255]^d[255&p]^t[g++],s=c[y>>>24]^u[l>>>16&255]^h[p>>>8&255]^d[255&b]^t[g++],l=a,p=o,b=f,y=s;return a=(n[l>>>24]<<24|n[p>>>16&255]<<16|n[b>>>8&255]<<8|n[255&y])^t[g++],o=(n[p>>>24]<<24|n[b>>>16&255]<<16|n[y>>>8&255]<<8|n[255&l])^t[g++],f=(n[b>>>24]<<24|n[y>>>16&255]<<16|n[l>>>8&255]<<8|n[255&p])^t[g++],s=(n[y>>>24]<<24|n[l>>>16&255]<<16|n[p>>>8&255]<<8|n[255&b])^t[g++],[a>>>=0,o>>>=0,f>>>=0,s>>>=0]}var f=[0,1,2,4,8,16,32,64,128,27,54],s=function(){for(var e=new Array(256),t=0;t<256;t++)e[t]=t<128?t<<1:t<<1^283;for(var r=[],n=[],i=[[],[],[],[]],a=[[],[],[],[]],o=0,f=0,s=0;s<256;++s){var c=f^f<<1^f<<2^f<<3^f<<4;c=c>>>8^255&c^99,r[o]=c,n[c]=o;var u=e[o],h=e[u],d=e[h],l=257*e[c]^16843008*c;i[0][o]=l<<24|l>>>8,i[1][o]=l<<16|l>>>16,i[2][o]=l<<8|l>>>24,i[3][o]=l,l=16843009*d^65537*h^257*u^16843008*o,a[0][c]=l<<24|l>>>8,a[1][c]=l<<16|l>>>16,a[2][c]=l<<8|l>>>24,a[3][c]=l,0===o?o=f=1:(o=u^e[e[e[d^u]]],f^=e[e[f]])}return{SBOX:r,INV_SBOX:n,SUB_MIX:i,INV_SUB_MIX:a}}();function c(e){this._key=i(e),this._reset()}c.blockSize=16,c.keySize=32,c.prototype.blockSize=c.blockSize,c.prototype.keySize=c.keySize,c.prototype._reset=function(){for(var e=this._key,t=e.length,r=t+6,n=4*(r+1),i=[],a=0;a<t;a++)i[a]=e[a];for(a=t;a<n;a++){var o=i[a-1];a%t==0?(o=o<<8|o>>>24,o=s.SBOX[o>>>24]<<24|s.SBOX[o>>>16&255]<<16|s.SBOX[o>>>8&255]<<8|s.SBOX[255&o],o^=f[a/t|0]<<24):t>6&&a%t==4&&(o=s.SBOX[o>>>24]<<24|s.SBOX[o>>>16&255]<<16|s.SBOX[o>>>8&255]<<8|s.SBOX[255&o]),i[a]=i[a-t]^o}for(var c=[],u=0;u<n;u++){var h=n-u,d=i[h-(u%4?0:4)];c[u]=u<4||h<=4?d:s.INV_SUB_MIX[0][s.SBOX[d>>>24]]^s.INV_SUB_MIX[1][s.SBOX[d>>>16&255]]^s.INV_SUB_MIX[2][s.SBOX[d>>>8&255]]^s.INV_SUB_MIX[3][s.SBOX[255&d]]}this._nRounds=r,this._keySchedule=i,this._invKeySchedule=c},c.prototype.encryptBlockRaw=function(e){return o(e=i(e),this._keySchedule,s.SUB_MIX,s.SBOX,this._nRounds)},c.prototype.encryptBlock=function(e){var t=this.encryptBlockRaw(e),r=n.allocUnsafe(16);return r.writeUInt32BE(t[0],0),r.writeUInt32BE(t[1],4),r.writeUInt32BE(t[2],8),r.writeUInt32BE(t[3],12),r},c.prototype.decryptBlock=function(e){var t=(e=i(e))[1];e[1]=e[3],e[3]=t;var r=o(e,this._invKeySchedule,s.INV_SUB_MIX,s.INV_SBOX,this._nRounds),a=n.allocUnsafe(16);return a.writeUInt32BE(r[0],0),a.writeUInt32BE(r[3],4),a.writeUInt32BE(r[2],8),a.writeUInt32BE(r[1],12),a},c.prototype.scrub=function(){a(this._keySchedule),a(this._invKeySchedule),a(this._key)},e.exports.AES=c},function(e,t,r){var n=r(1).Buffer,i=r(26);e.exports=function(e,t,r,a){if(n.isBuffer(e)||(e=n.from(e,"binary")),t&&(n.isBuffer(t)||(t=n.from(t,"binary")),8!==t.length))throw new RangeError("salt should be Buffer with 8 byte length");for(var o=r/8,f=n.alloc(o),s=n.alloc(a||0),c=n.alloc(0);o>0||a>0;){var u=new i;u.update(c),u.update(e),t&&u.update(t),c=u.digest();var h=0;if(o>0){var d=f.length-o;h=Math.min(o,c.length),c.copy(f,d,0,h),o-=h}if(h<c.length&&a>0){var l=s.length-a,p=Math.min(a,c.length-h);c.copy(s,l,h,h+p),a-=p}}return c.fill(0),{key:f,iv:s}}},function(e,t,r){"use strict";var n=r(2),i=r(5),a=i.getNAF,o=i.getJSF,f=i.assert;function s(e,t){this.type=e,this.p=new n(t.p,16),this.red=t.prime?n.red(t.prime):n.mont(this.p),this.zero=new n(0).toRed(this.red),this.one=new n(1).toRed(this.red),this.two=new n(2).toRed(this.red),this.n=t.n&&new n(t.n,16),this.g=t.g&&this.pointFromJSON(t.g,t.gRed),this._wnafT1=new Array(4),this._wnafT2=new Array(4),this._wnafT3=new Array(4),this._wnafT4=new Array(4);var r=this.n&&this.p.div(this.n);!r||r.cmpn(100)>0?this.redN=null:(this._maxwellTrick=!0,this.redN=this.n.toRed(this.red))}function c(e,t){this.curve=e,this.type=t,this.precomputed=null}e.exports=s,s.prototype.point=function(){throw new Error("Not implemented")},s.prototype.validate=function(){throw new Error("Not implemented")},s.prototype._fixedNafMul=function(e,t){f(e.precomputed);var r=e._getDoubles(),n=a(t,1),i=(1<<r.step+1)-(r.step%2==0?2:1);i/=3;for(var o=[],s=0;s<n.length;s+=r.step){var c=0;for(t=s+r.step-1;t>=s;t--)c=(c<<1)+n[t];o.push(c)}for(var u=this.jpoint(null,null,null),h=this.jpoint(null,null,null),d=i;d>0;d--){for(s=0;s<o.length;s++){(c=o[s])===d?h=h.mixedAdd(r.points[s]):c===-d&&(h=h.mixedAdd(r.points[s].neg()))}u=u.add(h)}return u.toP()},s.prototype._wnafMul=function(e,t){var r=4,n=e._getNAFPoints(r);r=n.wnd;for(var i=n.points,o=a(t,r),s=this.jpoint(null,null,null),c=o.length-1;c>=0;c--){for(t=0;c>=0&&0===o[c];c--)t++;if(c>=0&&t++,s=s.dblp(t),c<0)break;var u=o[c];f(0!==u),s="affine"===e.type?u>0?s.mixedAdd(i[u-1>>1]):s.mixedAdd(i[-u-1>>1].neg()):u>0?s.add(i[u-1>>1]):s.add(i[-u-1>>1].neg())}return"affine"===e.type?s.toP():s},s.prototype._wnafMulAdd=function(e,t,r,n,i){for(var f=this._wnafT1,s=this._wnafT2,c=this._wnafT3,u=0,h=0;h<n;h++){var d=(B=t[h])._getNAFPoints(e);f[h]=d.wnd,s[h]=d.points}for(h=n-1;h>=1;h-=2){var l=h-1,p=h;if(1===f[l]&&1===f[p]){var b=[t[l],null,null,t[p]];0===t[l].y.cmp(t[p].y)?(b[1]=t[l].add(t[p]),b[2]=t[l].toJ().mixedAdd(t[p].neg())):0===t[l].y.cmp(t[p].y.redNeg())?(b[1]=t[l].toJ().mixedAdd(t[p]),b[2]=t[l].add(t[p].neg())):(b[1]=t[l].toJ().mixedAdd(t[p]),b[2]=t[l].toJ().mixedAdd(t[p].neg()));var y=[-3,-1,-5,-7,0,7,5,1,3],g=o(r[l],r[p]);u=Math.max(g[0].length,u),c[l]=new Array(u),c[p]=new Array(u);for(var m=0;m<u;m++){var v=0|g[0][m],_=0|g[1][m];c[l][m]=y[3*(v+1)+(_+1)],c[p][m]=0,s[l]=b}}else c[l]=a(r[l],f[l]),c[p]=a(r[p],f[p]),u=Math.max(c[l].length,u),u=Math.max(c[p].length,u)}var w=this.jpoint(null,null,null),E=this._wnafT4;for(h=u;h>=0;h--){for(var A=0;h>=0;){var S=!0;for(m=0;m<n;m++)E[m]=0|c[m][h],0!==E[m]&&(S=!1);if(!S)break;A++,h--}if(h>=0&&A++,w=w.dblp(A),h<0)break;for(m=0;m<n;m++){var B,M=E[m];0!==M&&(M>0?B=s[m][M-1>>1]:M<0&&(B=s[m][-M-1>>1].neg()),w="affine"===B.type?w.mixedAdd(B):w.add(B))}}for(h=0;h<n;h++)s[h]=null;return i?w:w.toP()},s.BasePoint=c,c.prototype.eq=function(){throw new Error("Not implemented")},c.prototype.validate=function(){return this.curve.validate(this)},s.prototype.decodePoint=function(e,t){e=i.toArray(e,t);var r=this.p.byteLength();if((4===e[0]||6===e[0]||7===e[0])&&e.length-1==2*r)return 6===e[0]?f(e[e.length-1]%2==0):7===e[0]&&f(e[e.length-1]%2==1),this.point(e.slice(1,1+r),e.slice(1+r,1+2*r));if((2===e[0]||3===e[0])&&e.length-1===r)return this.pointFromX(e.slice(1,1+r),3===e[0]);throw new Error("Unknown point format")},c.prototype.encodeCompressed=function(e){return this.encode(e,!0)},c.prototype._encode=function(e){var t=this.curve.p.byteLength(),r=this.getX().toArray("be",t);return e?[this.getY().isEven()?2:3].concat(r):[4].concat(r,this.getY().toArray("be",t))},c.prototype.encode=function(e,t){return i.encode(this._encode(t),e)},c.prototype.precompute=function(e){if(this.precomputed)return this;var t={doubles:null,naf:null,beta:null};return t.naf=this._getNAFPoints(8),t.doubles=this._getDoubles(4,e),t.beta=this._getBeta(),this.precomputed=t,this},c.prototype._hasDoubles=function(e){if(!this.precomputed)return!1;var t=this.precomputed.doubles;return!!t&&t.points.length>=Math.ceil((e.bitLength()+1)/t.step)},c.prototype._getDoubles=function(e,t){if(this.precomputed&&this.precomputed.doubles)return this.precomputed.doubles;for(var r=[this],n=this,i=0;i<t;i+=e){for(var a=0;a<e;a++)n=n.dbl();r.push(n)}return{step:e,points:r}},c.prototype._getNAFPoints=function(e){if(this.precomputed&&this.precomputed.naf)return this.precomputed.naf;for(var t=[this],r=(1<<e)-1,n=1===r?null:this.dbl(),i=1;i<r;i++)t[i]=t[i-1].add(n);return{wnd:e,points:t}},c.prototype._getBeta=function(){return null},c.prototype.dblp=function(e){for(var t=this,r=0;r<e;r++)t=t.dbl();return t}},function(e,t,r){var n=r(147),i=r(158),a=r(159),o=r(35),f=r(52),s=r(1).Buffer;function c(e){var t;"object"!=typeof e||s.isBuffer(e)||(t=e.passphrase,e=e.key),"string"==typeof e&&(e=s.from(e));var r,c,u=a(e,t),h=u.tag,d=u.data;switch(h){case"CERTIFICATE":c=n.certificate.decode(d,"der").tbsCertificate.subjectPublicKeyInfo;case"PUBLIC KEY":switch(c||(c=n.PublicKey.decode(d,"der")),r=c.algorithm.algorithm.join(".")){case"1.2.840.113549.1.1.1":return n.RSAPublicKey.decode(c.subjectPublicKey.data,"der");case"1.2.840.10045.2.1":return c.subjectPrivateKey=c.subjectPublicKey,{type:"ec",data:c};case"1.2.840.10040.4.1":return c.algorithm.params.pub_key=n.DSAparam.decode(c.subjectPublicKey.data,"der"),{type:"dsa",data:c.algorithm.params};default:throw new Error("unknown key id "+r)}throw new Error("unknown key type "+h);case"ENCRYPTED PRIVATE KEY":d=function(e,t){var r=e.algorithm.decrypt.kde.kdeparams.salt,n=parseInt(e.algorithm.decrypt.kde.kdeparams.iters.toString(),10),a=i[e.algorithm.decrypt.cipher.algo.join(".")],c=e.algorithm.decrypt.cipher.iv,u=e.subjectPrivateKey,h=parseInt(a.split("-")[1],10)/8,d=f.pbkdf2Sync(t,r,n,h,"sha1"),l=o.createDecipheriv(a,d,c),p=[];return p.push(l.update(u)),p.push(l.final()),s.concat(p)}(d=n.EncryptedPrivateKey.decode(d,"der"),t);case"PRIVATE KEY":switch(r=(c=n.PrivateKey.decode(d,"der")).algorithm.algorithm.join(".")){case"1.2.840.113549.1.1.1":return n.RSAPrivateKey.decode(c.subjectPrivateKey,"der");case"1.2.840.10045.2.1":return{curve:c.algorithm.curve,privateKey:n.ECPrivateKey.decode(c.subjectPrivateKey,"der").privateKey};case"1.2.840.10040.4.1":return c.algorithm.params.priv_key=n.DSAparam.decode(c.subjectPrivateKey,"der"),{type:"dsa",params:c.algorithm.params};default:throw new Error("unknown key id "+r)}throw new Error("unknown key type "+h);case"RSA PUBLIC KEY":return n.RSAPublicKey.decode(d,"der");case"RSA PRIVATE KEY":return n.RSAPrivateKey.decode(d,"der");case"DSA PRIVATE KEY":return{type:"dsa",params:n.DSAPrivateKey.decode(d,"der")};case"EC PRIVATE KEY":return{curve:(d=n.ECPrivateKey.decode(d,"der")).parameters.value,privateKey:d.privateKey};default:throw new Error("unknown key type "+h)}}e.exports=c,c.signature=n.signature},function(e,t,r){"use strict";var n=r(0),i=r(42),a=r(1).Buffer,o=new Array(16);function f(){i.call(this,64),this._a=1732584193,this._b=4023233417,this._c=2562383102,this._d=271733878}function s(e,t){return e<<t|e>>>32-t}function c(e,t,r,n,i,a,o){return s(e+(t&r|~t&n)+i+a|0,o)+t|0}function u(e,t,r,n,i,a,o){return s(e+(t&n|r&~n)+i+a|0,o)+t|0}function h(e,t,r,n,i,a,o){return s(e+(t^r^n)+i+a|0,o)+t|0}function d(e,t,r,n,i,a,o){return s(e+(r^(t|~n))+i+a|0,o)+t|0}n(f,i),f.prototype._update=function(){for(var e=o,t=0;t<16;++t)e[t]=this._block.readInt32LE(4*t);var r=this._a,n=this._b,i=this._c,a=this._d;r=c(r,n,i,a,e[0],3614090360,7),a=c(a,r,n,i,e[1],3905402710,12),i=c(i,a,r,n,e[2],606105819,17),n=c(n,i,a,r,e[3],3250441966,22),r=c(r,n,i,a,e[4],4118548399,7),a=c(a,r,n,i,e[5],1200080426,12),i=c(i,a,r,n,e[6],2821735955,17),n=c(n,i,a,r,e[7],4249261313,22),r=c(r,n,i,a,e[8],1770035416,7),a=c(a,r,n,i,e[9],2336552879,12),i=c(i,a,r,n,e[10],4294925233,17),n=c(n,i,a,r,e[11],2304563134,22),r=c(r,n,i,a,e[12],1804603682,7),a=c(a,r,n,i,e[13],4254626195,12),i=c(i,a,r,n,e[14],2792965006,17),r=u(r,n=c(n,i,a,r,e[15],1236535329,22),i,a,e[1],4129170786,5),a=u(a,r,n,i,e[6],3225465664,9),i=u(i,a,r,n,e[11],643717713,14),n=u(n,i,a,r,e[0],3921069994,20),r=u(r,n,i,a,e[5],3593408605,5),a=u(a,r,n,i,e[10],38016083,9),i=u(i,a,r,n,e[15],3634488961,14),n=u(n,i,a,r,e[4],3889429448,20),r=u(r,n,i,a,e[9],568446438,5),a=u(a,r,n,i,e[14],3275163606,9),i=u(i,a,r,n,e[3],4107603335,14),n=u(n,i,a,r,e[8],1163531501,20),r=u(r,n,i,a,e[13],2850285829,5),a=u(a,r,n,i,e[2],4243563512,9),i=u(i,a,r,n,e[7],1735328473,14),r=h(r,n=u(n,i,a,r,e[12],2368359562,20),i,a,e[5],4294588738,4),a=h(a,r,n,i,e[8],2272392833,11),i=h(i,a,r,n,e[11],1839030562,16),n=h(n,i,a,r,e[14],4259657740,23),r=h(r,n,i,a,e[1],2763975236,4),a=h(a,r,n,i,e[4],1272893353,11),i=h(i,a,r,n,e[7],4139469664,16),n=h(n,i,a,r,e[10],3200236656,23),r=h(r,n,i,a,e[13],681279174,4),a=h(a,r,n,i,e[0],3936430074,11),i=h(i,a,r,n,e[3],3572445317,16),n=h(n,i,a,r,e[6],76029189,23),r=h(r,n,i,a,e[9],3654602809,4),a=h(a,r,n,i,e[12],3873151461,11),i=h(i,a,r,n,e[15],530742520,16),r=d(r,n=h(n,i,a,r,e[2],3299628645,23),i,a,e[0],4096336452,6),a=d(a,r,n,i,e[7],1126891415,10),i=d(i,a,r,n,e[14],2878612391,15),n=d(n,i,a,r,e[5],4237533241,21),r=d(r,n,i,a,e[12],1700485571,6),a=d(a,r,n,i,e[3],2399980690,10),i=d(i,a,r,n,e[10],4293915773,15),n=d(n,i,a,r,e[1],2240044497,21),r=d(r,n,i,a,e[8],1873313359,6),a=d(a,r,n,i,e[15],4264355552,10),i=d(i,a,r,n,e[6],2734768916,15),n=d(n,i,a,r,e[13],1309151649,21),r=d(r,n,i,a,e[4],4149444226,6),a=d(a,r,n,i,e[11],3174756917,10),i=d(i,a,r,n,e[2],718787259,15),n=d(n,i,a,r,e[9],3951481745,21),this._a=this._a+r|0,this._b=this._b+n|0,this._c=this._c+i|0,this._d=this._d+a|0},f.prototype._digest=function(){this._block[this._blockOffset++]=128,this._blockOffset>56&&(this._block.fill(0,this._blockOffset,64),this._update(),this._blockOffset=0),this._block.fill(0,this._blockOffset,56),this._block.writeUInt32LE(this._length[0],56),this._block.writeUInt32LE(this._length[1],60),this._update();var e=a.allocUnsafe(16);return e.writeInt32LE(this._a,0),e.writeInt32LE(this._b,4),e.writeInt32LE(this._c,8),e.writeInt32LE(this._d,12),e},e.exports=f},function(e,t,r){e.exports=i;var n=r(28).EventEmitter;function i(){n.call(this)}r(0)(i,n),i.Readable=r(29),i.Writable=r(93),i.Duplex=r(94),i.Transform=r(95),i.PassThrough=r(96),i.Stream=i,i.prototype.pipe=function(e,t){var r=this;function i(t){e.writable&&!1===e.write(t)&&r.pause&&r.pause()}function a(){r.readable&&r.resume&&r.resume()}r.on("data",i),e.on("drain",a),e._isStdio||t&&!1===t.end||(r.on("end",f),r.on("close",s));var o=!1;function f(){o||(o=!0,e.end())}function s(){o||(o=!0,"function"==typeof e.destroy&&e.destroy())}function c(e){if(u(),0===n.listenerCount(this,"error"))throw e}function u(){r.removeListener("data",i),e.removeListener("drain",a),r.removeListener("end",f),r.removeListener("close",s),r.removeListener("error",c),e.removeListener("error",c),r.removeListener("end",u),r.removeListener("close",u),e.removeListener("close",u)}return r.on("error",c),e.on("error",c),r.on("end",u),r.on("close",u),e.on("close",u),e.emit("pipe",r),e}},function(e,t,r){"use strict";var n,i="object"==typeof Reflect?Reflect:null,a=i&&"function"==typeof i.apply?i.apply:function(e,t,r){return Function.prototype.apply.call(e,t,r)};n=i&&"function"==typeof i.ownKeys?i.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var o=Number.isNaN||function(e){return e!=e};function f(){f.init.call(this)}e.exports=f,f.EventEmitter=f,f.prototype._events=void 0,f.prototype._eventsCount=0,f.prototype._maxListeners=void 0;var s=10;function c(e){return void 0===e._maxListeners?f.defaultMaxListeners:e._maxListeners}function u(e,t,r,n){var i,a,o,f;if("function"!=typeof r)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof r);if(void 0===(a=e._events)?(a=e._events=Object.create(null),e._eventsCount=0):(void 0!==a.newListener&&(e.emit("newListener",t,r.listener?r.listener:r),a=e._events),o=a[t]),void 0===o)o=a[t]=r,++e._eventsCount;else if("function"==typeof o?o=a[t]=n?[r,o]:[o,r]:n?o.unshift(r):o.push(r),(i=c(e))>0&&o.length>i&&!o.warned){o.warned=!0;var s=new Error("Possible EventEmitter memory leak detected. "+o.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");s.name="MaxListenersExceededWarning",s.emitter=e,s.type=t,s.count=o.length,f=s,console&&console.warn&&console.warn(f)}return e}function h(){for(var e=[],t=0;t<arguments.length;t++)e.push(arguments[t]);this.fired||(this.target.removeListener(this.type,this.wrapFn),this.fired=!0,a(this.listener,this.target,e))}function d(e,t,r){var n={fired:!1,wrapFn:void 0,target:e,type:t,listener:r},i=h.bind(n);return i.listener=r,n.wrapFn=i,i}function l(e,t,r){var n=e._events;if(void 0===n)return[];var i=n[t];return void 0===i?[]:"function"==typeof i?r?[i.listener||i]:[i]:r?function(e){for(var t=new Array(e.length),r=0;r<t.length;++r)t[r]=e[r].listener||e[r];return t}(i):b(i,i.length)}function p(e){var t=this._events;if(void 0!==t){var r=t[e];if("function"==typeof r)return 1;if(void 0!==r)return r.length}return 0}function b(e,t){for(var r=new Array(t),n=0;n<t;++n)r[n]=e[n];return r}Object.defineProperty(f,"defaultMaxListeners",{enumerable:!0,get:function(){return s},set:function(e){if("number"!=typeof e||e<0||o(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");s=e}}),f.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},f.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||o(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},f.prototype.getMaxListeners=function(){return c(this)},f.prototype.emit=function(e){for(var t=[],r=1;r<arguments.length;r++)t.push(arguments[r]);var n="error"===e,i=this._events;if(void 0!==i)n=n&&void 0===i.error;else if(!n)return!1;if(n){var o;if(t.length>0&&(o=t[0]),o instanceof Error)throw o;var f=new Error("Unhandled error."+(o?" ("+o.message+")":""));throw f.context=o,f}var s=i[e];if(void 0===s)return!1;if("function"==typeof s)a(s,this,t);else{var c=s.length,u=b(s,c);for(r=0;r<c;++r)a(u[r],this,t)}return!0},f.prototype.addListener=function(e,t){return u(this,e,t,!1)},f.prototype.on=f.prototype.addListener,f.prototype.prependListener=function(e,t){return u(this,e,t,!0)},f.prototype.once=function(e,t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);return this.on(e,d(this,e,t)),this},f.prototype.prependOnceListener=function(e,t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);return this.prependListener(e,d(this,e,t)),this},f.prototype.removeListener=function(e,t){var r,n,i,a,o;if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);if(void 0===(n=this._events))return this;if(void 0===(r=n[e]))return this;if(r===t||r.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete n[e],n.removeListener&&this.emit("removeListener",e,r.listener||t));else if("function"!=typeof r){for(i=-1,a=r.length-1;a>=0;a--)if(r[a]===t||r[a].listener===t){o=r[a].listener,i=a;break}if(i<0)return this;0===i?r.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(r,i),1===r.length&&(n[e]=r[0]),void 0!==n.removeListener&&this.emit("removeListener",e,o||t)}return this},f.prototype.off=f.prototype.removeListener,f.prototype.removeAllListeners=function(e){var t,r,n;if(void 0===(r=this._events))return this;if(void 0===r.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==r[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete r[e]),this;if(0===arguments.length){var i,a=Object.keys(r);for(n=0;n<a.length;++n)"removeListener"!==(i=a[n])&&this.removeAllListeners(i);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=r[e]))this.removeListener(e,t);else if(void 0!==t)for(n=t.length-1;n>=0;n--)this.removeListener(e,t[n]);return this},f.prototype.listeners=function(e){return l(this,e,!0)},f.prototype.rawListeners=function(e){return l(this,e,!1)},f.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):p.call(e,t)},f.prototype.listenerCount=p,f.prototype.eventNames=function(){return this._eventsCount>0?n(this._events):[]}},function(e,t,r){(t=e.exports=r(43)).Stream=t,t.Readable=t,t.Writable=r(30),t.Duplex=r(11),t.Transform=r(46),t.PassThrough=r(92)},function(e,t,r){"use strict";(function(t,n,i){var a=r(21);function o(e){var t=this;this.next=null,this.entry=null,this.finish=function(){!function(e,t,r){var n=e.entry;e.entry=null;for(;n;){var i=n.callback;t.pendingcb--,i(r),n=n.next}t.corkedRequestsFree?t.corkedRequestsFree.next=e:t.corkedRequestsFree=e}(t,e)}}e.exports=m;var f,s=!t.browser&&["v0.10","v0.9."].indexOf(t.version.slice(0,5))>-1?n:a.nextTick;m.WritableState=g;var c=r(15);c.inherits=r(0);var u={deprecate:r(91)},h=r(44),d=r(1).Buffer,l=i.Uint8Array||function(){};var p,b=r(45);function y(){}function g(e,t){f=f||r(11),e=e||{};var n=t instanceof f;this.objectMode=!!e.objectMode,n&&(this.objectMode=this.objectMode||!!e.writableObjectMode);var i=e.highWaterMark,c=e.writableHighWaterMark,u=this.objectMode?16:16384;this.highWaterMark=i||0===i?i:n&&(c||0===c)?c:u,this.highWaterMark=Math.floor(this.highWaterMark),this.finalCalled=!1,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1,this.destroyed=!1;var h=!1===e.decodeStrings;this.decodeStrings=!h,this.defaultEncoding=e.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(e){!function(e,t){var r=e._writableState,n=r.sync,i=r.writecb;if(function(e){e.writing=!1,e.writecb=null,e.length-=e.writelen,e.writelen=0}(r),t)!function(e,t,r,n,i){--t.pendingcb,r?(a.nextTick(i,n),a.nextTick(S,e,t),e._writableState.errorEmitted=!0,e.emit("error",n)):(i(n),e._writableState.errorEmitted=!0,e.emit("error",n),S(e,t))}(e,r,n,t,i);else{var o=E(r);o||r.corked||r.bufferProcessing||!r.bufferedRequest||w(e,r),n?s(_,e,r,o,i):_(e,r,o,i)}}(t,e)},this.writecb=null,this.writelen=0,this.bufferedRequest=null,this.lastBufferedRequest=null,this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1,this.bufferedRequestCount=0,this.corkedRequestsFree=new o(this)}function m(e){if(f=f||r(11),!(p.call(m,this)||this instanceof f))return new m(e);this._writableState=new g(e,this),this.writable=!0,e&&("function"==typeof e.write&&(this._write=e.write),"function"==typeof e.writev&&(this._writev=e.writev),"function"==typeof e.destroy&&(this._destroy=e.destroy),"function"==typeof e.final&&(this._final=e.final)),h.call(this)}function v(e,t,r,n,i,a,o){t.writelen=n,t.writecb=o,t.writing=!0,t.sync=!0,r?e._writev(i,t.onwrite):e._write(i,a,t.onwrite),t.sync=!1}function _(e,t,r,n){r||function(e,t){0===t.length&&t.needDrain&&(t.needDrain=!1,e.emit("drain"))}(e,t),t.pendingcb--,n(),S(e,t)}function w(e,t){t.bufferProcessing=!0;var r=t.bufferedRequest;if(e._writev&&r&&r.next){var n=t.bufferedRequestCount,i=new Array(n),a=t.corkedRequestsFree;a.entry=r;for(var f=0,s=!0;r;)i[f]=r,r.isBuf||(s=!1),r=r.next,f+=1;i.allBuffers=s,v(e,t,!0,t.length,i,"",a.finish),t.pendingcb++,t.lastBufferedRequest=null,a.next?(t.corkedRequestsFree=a.next,a.next=null):t.corkedRequestsFree=new o(t),t.bufferedRequestCount=0}else{for(;r;){var c=r.chunk,u=r.encoding,h=r.callback;if(v(e,t,!1,t.objectMode?1:c.length,c,u,h),r=r.next,t.bufferedRequestCount--,t.writing)break}null===r&&(t.lastBufferedRequest=null)}t.bufferedRequest=r,t.bufferProcessing=!1}function E(e){return e.ending&&0===e.length&&null===e.bufferedRequest&&!e.finished&&!e.writing}function A(e,t){e._final((function(r){t.pendingcb--,r&&e.emit("error",r),t.prefinished=!0,e.emit("prefinish"),S(e,t)}))}function S(e,t){var r=E(t);return r&&(!function(e,t){t.prefinished||t.finalCalled||("function"==typeof e._final?(t.pendingcb++,t.finalCalled=!0,a.nextTick(A,e,t)):(t.prefinished=!0,e.emit("prefinish")))}(e,t),0===t.pendingcb&&(t.finished=!0,e.emit("finish"))),r}c.inherits(m,h),g.prototype.getBuffer=function(){for(var e=this.bufferedRequest,t=[];e;)t.push(e),e=e.next;return t},function(){try{Object.defineProperty(g.prototype,"buffer",{get:u.deprecate((function(){return this.getBuffer()}),"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.","DEP0003")})}catch(e){}}(),"function"==typeof Symbol&&Symbol.hasInstance&&"function"==typeof Function.prototype[Symbol.hasInstance]?(p=Function.prototype[Symbol.hasInstance],Object.defineProperty(m,Symbol.hasInstance,{value:function(e){return!!p.call(this,e)||this===m&&(e&&e._writableState instanceof g)}})):p=function(e){return e instanceof this},m.prototype.pipe=function(){this.emit("error",new Error("Cannot pipe, not readable"))},m.prototype.write=function(e,t,r){var n,i=this._writableState,o=!1,f=!i.objectMode&&(n=e,d.isBuffer(n)||n instanceof l);return f&&!d.isBuffer(e)&&(e=function(e){return d.from(e)}(e)),"function"==typeof t&&(r=t,t=null),f?t="buffer":t||(t=i.defaultEncoding),"function"!=typeof r&&(r=y),i.ended?function(e,t){var r=new Error("write after end");e.emit("error",r),a.nextTick(t,r)}(this,r):(f||function(e,t,r,n){var i=!0,o=!1;return null===r?o=new TypeError("May not write null values to stream"):"string"==typeof r||void 0===r||t.objectMode||(o=new TypeError("Invalid non-string/buffer chunk")),o&&(e.emit("error",o),a.nextTick(n,o),i=!1),i}(this,i,e,r))&&(i.pendingcb++,o=function(e,t,r,n,i,a){if(!r){var o=function(e,t,r){e.objectMode||!1===e.decodeStrings||"string"!=typeof t||(t=d.from(t,r));return t}(t,n,i);n!==o&&(r=!0,i="buffer",n=o)}var f=t.objectMode?1:n.length;t.length+=f;var s=t.length<t.highWaterMark;s||(t.needDrain=!0);if(t.writing||t.corked){var c=t.lastBufferedRequest;t.lastBufferedRequest={chunk:n,encoding:i,isBuf:r,callback:a,next:null},c?c.next=t.lastBufferedRequest:t.bufferedRequest=t.lastBufferedRequest,t.bufferedRequestCount+=1}else v(e,t,!1,f,n,i,a);return s}(this,i,f,e,t,r)),o},m.prototype.cork=function(){this._writableState.corked++},m.prototype.uncork=function(){var e=this._writableState;e.corked&&(e.corked--,e.writing||e.corked||e.finished||e.bufferProcessing||!e.bufferedRequest||w(this,e))},m.prototype.setDefaultEncoding=function(e){if("string"==typeof e&&(e=e.toLowerCase()),!(["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le","raw"].indexOf((e+"").toLowerCase())>-1))throw new TypeError("Unknown encoding: "+e);return this._writableState.defaultEncoding=e,this},Object.defineProperty(m.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),m.prototype._write=function(e,t,r){r(new Error("_write() is not implemented"))},m.prototype._writev=null,m.prototype.end=function(e,t,r){var n=this._writableState;"function"==typeof e?(r=e,e=null,t=null):"function"==typeof t&&(r=t,t=null),null!=e&&this.write(e,t),n.corked&&(n.corked=1,this.uncork()),n.ending||n.finished||function(e,t,r){t.ending=!0,S(e,t),r&&(t.finished?a.nextTick(r):e.once("finish",r));t.ended=!0,e.writable=!1}(this,n,r)},Object.defineProperty(m.prototype,"destroyed",{get:function(){return void 0!==this._writableState&&this._writableState.destroyed},set:function(e){this._writableState&&(this._writableState.destroyed=e)}}),m.prototype.destroy=b.destroy,m.prototype._undestroy=b.undestroy,m.prototype._destroy=function(e,t){this.end(),t(e)}}).call(this,r(7),r(89).setImmediate,r(6))},function(e,t,r){"use strict";var n=r(1).Buffer,i=n.isEncoding||function(e){switch((e=""+e)&&e.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1}};function a(e){var t;switch(this.encoding=function(e){var t=function(e){if(!e)return"utf8";for(var t;;)switch(e){case"utf8":case"utf-8":return"utf8";case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return"utf16le";case"latin1":case"binary":return"latin1";case"base64":case"ascii":case"hex":return e;default:if(t)return;e=(""+e).toLowerCase(),t=!0}}(e);if("string"!=typeof t&&(n.isEncoding===i||!i(e)))throw new Error("Unknown encoding: "+e);return t||e}(e),this.encoding){case"utf16le":this.text=s,this.end=c,t=4;break;case"utf8":this.fillLast=f,t=4;break;case"base64":this.text=u,this.end=h,t=3;break;default:return this.write=d,void(this.end=l)}this.lastNeed=0,this.lastTotal=0,this.lastChar=n.allocUnsafe(t)}function o(e){return e<=127?0:e>>5==6?2:e>>4==14?3:e>>3==30?4:e>>6==2?-1:-2}function f(e){var t=this.lastTotal-this.lastNeed,r=function(e,t,r){if(128!=(192&t[0]))return e.lastNeed=0,"�";if(e.lastNeed>1&&t.length>1){if(128!=(192&t[1]))return e.lastNeed=1,"�";if(e.lastNeed>2&&t.length>2&&128!=(192&t[2]))return e.lastNeed=2,"�"}}(this,e);return void 0!==r?r:this.lastNeed<=e.length?(e.copy(this.lastChar,t,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal)):(e.copy(this.lastChar,t,0,e.length),void(this.lastNeed-=e.length))}function s(e,t){if((e.length-t)%2==0){var r=e.toString("utf16le",t);if(r){var n=r.charCodeAt(r.length-1);if(n>=55296&&n<=56319)return this.lastNeed=2,this.lastTotal=4,this.lastChar[0]=e[e.length-2],this.lastChar[1]=e[e.length-1],r.slice(0,-1)}return r}return this.lastNeed=1,this.lastTotal=2,this.lastChar[0]=e[e.length-1],e.toString("utf16le",t,e.length-1)}function c(e){var t=e&&e.length?this.write(e):"";if(this.lastNeed){var r=this.lastTotal-this.lastNeed;return t+this.lastChar.toString("utf16le",0,r)}return t}function u(e,t){var r=(e.length-t)%3;return 0===r?e.toString("base64",t):(this.lastNeed=3-r,this.lastTotal=3,1===r?this.lastChar[0]=e[e.length-1]:(this.lastChar[0]=e[e.length-2],this.lastChar[1]=e[e.length-1]),e.toString("base64",t,e.length-r))}function h(e){var t=e&&e.length?this.write(e):"";return this.lastNeed?t+this.lastChar.toString("base64",0,3-this.lastNeed):t}function d(e){return e.toString(this.encoding)}function l(e){return e&&e.length?this.write(e):""}t.StringDecoder=a,a.prototype.write=function(e){if(0===e.length)return"";var t,r;if(this.lastNeed){if(void 0===(t=this.fillLast(e)))return"";r=this.lastNeed,this.lastNeed=0}else r=0;return r<e.length?t?t+this.text(e,r):this.text(e,r):t||""},a.prototype.end=function(e){var t=e&&e.length?this.write(e):"";return this.lastNeed?t+"�":t},a.prototype.text=function(e,t){var r=function(e,t,r){var n=t.length-1;if(n<r)return 0;var i=o(t[n]);if(i>=0)return i>0&&(e.lastNeed=i-1),i;if(--n<r||-2===i)return 0;if((i=o(t[n]))>=0)return i>0&&(e.lastNeed=i-2),i;if(--n<r||-2===i)return 0;if((i=o(t[n]))>=0)return i>0&&(2===i?i=0:e.lastNeed=i-3),i;return 0}(this,e,t);if(!this.lastNeed)return e.toString("utf8",t);this.lastTotal=r;var n=e.length-(r-this.lastNeed);return e.copy(this.lastChar,0,n),e.toString("utf8",t,n)},a.prototype.fillLast=function(e){if(this.lastNeed<=e.length)return e.copy(this.lastChar,this.lastTotal-this.lastNeed,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal);e.copy(this.lastChar,this.lastTotal-this.lastNeed,0,e.length),this.lastNeed-=e.length}},function(e,t,r){"use strict";var n=r(3).Buffer,i=r(0),a=r(42),o=new Array(16),f=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,7,4,13,1,10,6,15,3,12,0,9,5,2,14,11,8,3,10,14,4,9,15,8,1,2,7,0,6,13,11,5,12,1,9,11,10,0,8,12,4,13,3,7,15,14,5,6,2,4,0,5,9,7,12,2,10,14,1,3,8,11,6,15,13],s=[5,14,7,0,9,2,11,4,13,6,15,8,1,10,3,12,6,11,3,7,0,13,5,10,14,15,8,12,4,9,1,2,15,5,1,3,7,14,6,9,11,8,12,2,10,0,4,13,8,6,4,1,3,11,15,0,5,12,2,13,9,7,10,14,12,15,10,4,1,5,8,7,6,2,13,14,0,3,9,11],c=[11,14,15,12,5,8,7,9,11,13,14,15,6,7,9,8,7,6,8,13,11,9,7,15,7,12,15,9,11,7,13,12,11,13,6,7,14,9,13,15,14,8,13,6,5,12,7,5,11,12,14,15,14,15,9,8,9,14,5,6,8,6,5,12,9,15,5,11,6,8,13,12,5,12,13,14,11,8,5,6],u=[8,9,9,11,13,15,15,5,7,7,8,11,14,14,12,6,9,13,15,7,12,8,9,11,7,7,12,7,6,15,13,11,9,7,15,11,8,6,6,14,12,13,5,14,13,13,7,5,15,5,8,11,14,14,6,14,6,9,12,9,12,5,15,8,8,5,12,9,12,5,14,6,8,13,6,5,15,13,11,11],h=[0,1518500249,1859775393,2400959708,2840853838],d=[1352829926,1548603684,1836072691,2053994217,0];function l(){a.call(this,64),this._a=1732584193,this._b=4023233417,this._c=2562383102,this._d=271733878,this._e=3285377520}function p(e,t){return e<<t|e>>>32-t}function b(e,t,r,n,i,a,o,f){return p(e+(t^r^n)+a+o|0,f)+i|0}function y(e,t,r,n,i,a,o,f){return p(e+(t&r|~t&n)+a+o|0,f)+i|0}function g(e,t,r,n,i,a,o,f){return p(e+((t|~r)^n)+a+o|0,f)+i|0}function m(e,t,r,n,i,a,o,f){return p(e+(t&n|r&~n)+a+o|0,f)+i|0}function v(e,t,r,n,i,a,o,f){return p(e+(t^(r|~n))+a+o|0,f)+i|0}i(l,a),l.prototype._update=function(){for(var e=o,t=0;t<16;++t)e[t]=this._block.readInt32LE(4*t);for(var r=0|this._a,n=0|this._b,i=0|this._c,a=0|this._d,l=0|this._e,_=0|this._a,w=0|this._b,E=0|this._c,A=0|this._d,S=0|this._e,B=0;B<80;B+=1){var M,C;B<16?(M=b(r,n,i,a,l,e[f[B]],h[0],c[B]),C=v(_,w,E,A,S,e[s[B]],d[0],u[B])):B<32?(M=y(r,n,i,a,l,e[f[B]],h[1],c[B]),C=m(_,w,E,A,S,e[s[B]],d[1],u[B])):B<48?(M=g(r,n,i,a,l,e[f[B]],h[2],c[B]),C=g(_,w,E,A,S,e[s[B]],d[2],u[B])):B<64?(M=m(r,n,i,a,l,e[f[B]],h[3],c[B]),C=y(_,w,E,A,S,e[s[B]],d[3],u[B])):(M=v(r,n,i,a,l,e[f[B]],h[4],c[B]),C=b(_,w,E,A,S,e[s[B]],d[4],u[B])),r=l,l=a,a=p(i,10),i=n,n=M,_=S,S=A,A=p(E,10),E=w,w=C}var D=this._b+i+A|0;this._b=this._c+a+S|0,this._c=this._d+l+_|0,this._d=this._e+r+w|0,this._e=this._a+n+E|0,this._a=D},l.prototype._digest=function(){this._block[this._blockOffset++]=128,this._blockOffset>56&&(this._block.fill(0,this._blockOffset,64),this._update(),this._blockOffset=0),this._block.fill(0,this._blockOffset,56),this._block.writeUInt32LE(this._length[0],56),this._block.writeUInt32LE(this._length[1],60),this._update();var e=n.alloc?n.alloc(20):new n(20);return e.writeInt32LE(this._a,0),e.writeInt32LE(this._b,4),e.writeInt32LE(this._c,8),e.writeInt32LE(this._d,12),e.writeInt32LE(this._e,16),e},e.exports=l},function(e,t,r){(t=e.exports=function(e){e=e.toLowerCase();var r=t[e];if(!r)throw new Error(e+" is not supported (we accept pull requests)");return new r}).sha=r(97),t.sha1=r(98),t.sha224=r(99),t.sha256=r(47),t.sha384=r(100),t.sha512=r(48)},function(e,t,r){"use strict";t.utils=r(106),t.Cipher=r(107),t.DES=r(108),t.CBC=r(109),t.EDE=r(110)},function(e,t,r){var n=r(111),i=r(119),a=r(58);t.createCipher=t.Cipher=n.createCipher,t.createCipheriv=t.Cipheriv=n.createCipheriv,t.createDecipher=t.Decipher=i.createDecipher,t.createDecipheriv=t.Decipheriv=i.createDecipheriv,t.listCiphers=t.getCiphers=function(){return Object.keys(a)}},function(e,t,r){var n={ECB:r(112),CBC:r(113),CFB:r(114),CFB8:r(115),CFB1:r(116),OFB:r(117),CTR:r(56),GCM:r(56)},i=r(58);for(var a in i)i[a].module=n[i[a].mode];e.exports=i},function(e,t,r){var n;function i(e){this.rand=e}if(e.exports=function(e){return n||(n=new i(null)),n.generate(e)},e.exports.Rand=i,i.prototype.generate=function(e){return this._rand(e)},i.prototype._rand=function(e){if(this.rand.getBytes)return this.rand.getBytes(e);for(var t=new Uint8Array(e),r=0;r<t.length;r++)t[r]=this.rand.getByte();return t},"object"==typeof self)self.crypto&&self.crypto.getRandomValues?i.prototype._rand=function(e){var t=new Uint8Array(e);return self.crypto.getRandomValues(t),t}:self.msCrypto&&self.msCrypto.getRandomValues?i.prototype._rand=function(e){var t=new Uint8Array(e);return self.msCrypto.getRandomValues(t),t}:"object"==typeof window&&(i.prototype._rand=function(){throw new Error("Not implemented yet")});else try{var a=r(124);if("function"!=typeof a.randomBytes)throw new Error("Not supported");i.prototype._rand=function(e){return a.randomBytes(e)}}catch(e){}},function(e,t,r){(function(t){var n=r(2),i=r(12);function a(e,r){var i=function(e){var t=o(e);return{blinder:t.toRed(n.mont(e.modulus)).redPow(new n(e.publicExponent)).fromRed(),unblinder:t.invm(e.modulus)}}(r),a=r.modulus.byteLength(),f=(n.mont(r.modulus),new n(e).mul(i.blinder).umod(r.modulus)),s=f.toRed(n.mont(r.prime1)),c=f.toRed(n.mont(r.prime2)),u=r.coefficient,h=r.prime1,d=r.prime2,l=s.redPow(r.exponent1),p=c.redPow(r.exponent2);l=l.fromRed(),p=p.fromRed();var b=l.isub(p).imul(u).umod(h);return b.imul(d),p.iadd(b),new t(p.imul(i.unblinder).umod(r.modulus).toArray(!1,a))}function o(e){for(var t=e.modulus.byteLength(),r=new n(i(t));r.cmp(e.modulus)>=0||!r.umod(e.prime1)||!r.umod(e.prime2);)r=new n(i(t));return r}e.exports=a,a.getr=o}).call(this,r(3).Buffer)},function(e,t,r){"use strict";var n=t;n.version=r(129).version,n.utils=r(5),n.rand=r(37),n.curve=r(64),n.curves=r(40),n.ec=r(140),n.eddsa=r(144)},function(e,t,r){"use strict";var n,i=t,a=r(41),o=r(64),f=r(5).assert;function s(e){"short"===e.type?this.curve=new o.short(e):"edwards"===e.type?this.curve=new o.edwards(e):this.curve=new o.mont(e),this.g=this.curve.g,this.n=this.curve.n,this.hash=e.hash,f(this.g.validate(),"Invalid curve"),f(this.g.mul(this.n).isInfinity(),"Invalid curve, G*N != O")}function c(e,t){Object.defineProperty(i,e,{configurable:!0,enumerable:!0,get:function(){var r=new s(t);return Object.defineProperty(i,e,{configurable:!0,enumerable:!0,value:r}),r}})}i.PresetCurve=s,c("p192",{type:"short",prime:"p192",p:"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff",a:"ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc",b:"64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1",n:"ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831",hash:a.sha256,gRed:!1,g:["188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012","07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811"]}),c("p224",{type:"short",prime:"p224",p:"ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001",a:"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe",b:"b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4",n:"ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d",hash:a.sha256,gRed:!1,g:["b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21","bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34"]}),c("p256",{type:"short",prime:null,p:"ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff",a:"ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc",b:"5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b",n:"ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551",hash:a.sha256,gRed:!1,g:["6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296","4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5"]}),c("p384",{type:"short",prime:null,p:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",a:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",b:"b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",n:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",hash:a.sha384,gRed:!1,g:["aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7","3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f"]}),c("p521",{type:"short",prime:null,p:"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",a:"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",b:"00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",n:"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",hash:a.sha512,gRed:!1,g:["000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66","00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650"]}),c("curve25519",{type:"mont",prime:"p25519",p:"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",a:"76d06",b:"1",n:"1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",hash:a.sha256,gRed:!1,g:["9"]}),c("ed25519",{type:"edwards",prime:"p25519",p:"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",a:"-1",c:"1",d:"52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3",n:"1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",hash:a.sha256,gRed:!1,g:["216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a","6666666666666666666666666666666666666666666666666666666666666658"]});try{n=r(139)}catch(e){n=void 0}c("secp256k1",{type:"short",prime:"k256",p:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",a:"0",b:"7",n:"ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",h:"1",hash:a.sha256,beta:"7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",lambda:"5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",basis:[{a:"3086d221a7d46bcde86c90e49284eb15",b:"-e4437ed6010e88286f547fa90abfe4c3"},{a:"114ca50f7a8e2f3f657c1108d9d44cfd8",b:"3086d221a7d46bcde86c90e49284eb15"}],gRed:!1,g:["79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798","483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8",n]})},function(e,t,r){var n=t;n.utils=r(8),n.common=r(17),n.sha=r(133),n.ripemd=r(137),n.hmac=r(138),n.sha1=n.sha.sha1,n.sha256=n.sha.sha256,n.sha224=n.sha.sha224,n.sha384=n.sha.sha384,n.sha512=n.sha.sha512,n.ripemd160=n.ripemd.ripemd160},function(e,t,r){"use strict";var n=r(1).Buffer,i=r(27).Transform;function a(e){i.call(this),this._block=n.allocUnsafe(e),this._blockSize=e,this._blockOffset=0,this._length=[0,0,0,0],this._finalized=!1}r(0)(a,i),a.prototype._transform=function(e,t,r){var n=null;try{this.update(e,t)}catch(e){n=e}r(n)},a.prototype._flush=function(e){var t=null;try{this.push(this.digest())}catch(e){t=e}e(t)},a.prototype.update=function(e,t){if(function(e,t){if(!n.isBuffer(e)&&"string"!=typeof e)throw new TypeError(t+" must be a string or a buffer")}(e,"Data"),this._finalized)throw new Error("Digest already called");n.isBuffer(e)||(e=n.from(e,t));for(var r=this._block,i=0;this._blockOffset+e.length-i>=this._blockSize;){for(var a=this._blockOffset;a<this._blockSize;)r[a++]=e[i++];this._update(),this._blockOffset=0}for(;i<e.length;)r[this._blockOffset++]=e[i++];for(var o=0,f=8*e.length;f>0;++o)this._length[o]+=f,(f=this._length[o]/4294967296|0)>0&&(this._length[o]-=4294967296*f);return this},a.prototype._update=function(){throw new Error("_update is not implemented")},a.prototype.digest=function(e){if(this._finalized)throw new Error("Digest already called");this._finalized=!0;var t=this._digest();void 0!==e&&(t=t.toString(e)),this._block.fill(0),this._blockOffset=0;for(var r=0;r<4;++r)this._length[r]=0;return t},a.prototype._digest=function(){throw new Error("_digest is not implemented")},e.exports=a},function(e,t,r){"use strict";(function(t,n){var i=r(21);e.exports=v;var a,o=r(85);v.ReadableState=m;r(28).EventEmitter;var f=function(e,t){return e.listeners(t).length},s=r(44),c=r(1).Buffer,u=t.Uint8Array||function(){};var h=r(15);h.inherits=r(0);var d=r(86),l=void 0;l=d&&d.debuglog?d.debuglog("stream"):function(){};var p,b=r(87),y=r(45);h.inherits(v,s);var g=["error","close","destroy","pause","resume"];function m(e,t){e=e||{};var n=t instanceof(a=a||r(11));this.objectMode=!!e.objectMode,n&&(this.objectMode=this.objectMode||!!e.readableObjectMode);var i=e.highWaterMark,o=e.readableHighWaterMark,f=this.objectMode?16:16384;this.highWaterMark=i||0===i?i:n&&(o||0===o)?o:f,this.highWaterMark=Math.floor(this.highWaterMark),this.buffer=new b,this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this.destroyed=!1,this.defaultEncoding=e.defaultEncoding||"utf8",this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,e.encoding&&(p||(p=r(31).StringDecoder),this.decoder=new p(e.encoding),this.encoding=e.encoding)}function v(e){if(a=a||r(11),!(this instanceof v))return new v(e);this._readableState=new m(e,this),this.readable=!0,e&&("function"==typeof e.read&&(this._read=e.read),"function"==typeof e.destroy&&(this._destroy=e.destroy)),s.call(this)}function _(e,t,r,n,i){var a,o=e._readableState;null===t?(o.reading=!1,function(e,t){if(t.ended)return;if(t.decoder){var r=t.decoder.end();r&&r.length&&(t.buffer.push(r),t.length+=t.objectMode?1:r.length)}t.ended=!0,S(e)}(e,o)):(i||(a=function(e,t){var r;n=t,c.isBuffer(n)||n instanceof u||"string"==typeof t||void 0===t||e.objectMode||(r=new TypeError("Invalid non-string/buffer chunk"));var n;return r}(o,t)),a?e.emit("error",a):o.objectMode||t&&t.length>0?("string"==typeof t||o.objectMode||Object.getPrototypeOf(t)===c.prototype||(t=function(e){return c.from(e)}(t)),n?o.endEmitted?e.emit("error",new Error("stream.unshift() after end event")):w(e,o,t,!0):o.ended?e.emit("error",new Error("stream.push() after EOF")):(o.reading=!1,o.decoder&&!r?(t=o.decoder.write(t),o.objectMode||0!==t.length?w(e,o,t,!1):M(e,o)):w(e,o,t,!1))):n||(o.reading=!1));return function(e){return!e.ended&&(e.needReadable||e.length<e.highWaterMark||0===e.length)}(o)}function w(e,t,r,n){t.flowing&&0===t.length&&!t.sync?(e.emit("data",r),e.read(0)):(t.length+=t.objectMode?1:r.length,n?t.buffer.unshift(r):t.buffer.push(r),t.needReadable&&S(e)),M(e,t)}Object.defineProperty(v.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&this._readableState.destroyed},set:function(e){this._readableState&&(this._readableState.destroyed=e)}}),v.prototype.destroy=y.destroy,v.prototype._undestroy=y.undestroy,v.prototype._destroy=function(e,t){this.push(null),t(e)},v.prototype.push=function(e,t){var r,n=this._readableState;return n.objectMode?r=!0:"string"==typeof e&&((t=t||n.defaultEncoding)!==n.encoding&&(e=c.from(e,t),t=""),r=!0),_(this,e,t,!1,r)},v.prototype.unshift=function(e){return _(this,e,null,!0,!1)},v.prototype.isPaused=function(){return!1===this._readableState.flowing},v.prototype.setEncoding=function(e){return p||(p=r(31).StringDecoder),this._readableState.decoder=new p(e),this._readableState.encoding=e,this};var E=8388608;function A(e,t){return e<=0||0===t.length&&t.ended?0:t.objectMode?1:e!=e?t.flowing&&t.length?t.buffer.head.data.length:t.length:(e>t.highWaterMark&&(t.highWaterMark=function(e){return e>=E?e=E:(e--,e|=e>>>1,e|=e>>>2,e|=e>>>4,e|=e>>>8,e|=e>>>16,e++),e}(e)),e<=t.length?e:t.ended?t.length:(t.needReadable=!0,0))}function S(e){var t=e._readableState;t.needReadable=!1,t.emittedReadable||(l("emitReadable",t.flowing),t.emittedReadable=!0,t.sync?i.nextTick(B,e):B(e))}function B(e){l("emit readable"),e.emit("readable"),F(e)}function M(e,t){t.readingMore||(t.readingMore=!0,i.nextTick(C,e,t))}function C(e,t){for(var r=t.length;!t.reading&&!t.flowing&&!t.ended&&t.length<t.highWaterMark&&(l("maybeReadMore read 0"),e.read(0),r!==t.length);)r=t.length;t.readingMore=!1}function D(e){l("readable nexttick read 0"),e.read(0)}function k(e,t){t.reading||(l("resume read 0"),e.read(0)),t.resumeScheduled=!1,t.awaitDrain=0,e.emit("resume"),F(e),t.flowing&&!t.reading&&e.read(0)}function F(e){var t=e._readableState;for(l("flow",t.flowing);t.flowing&&null!==e.read(););}function x(e,t){return 0===t.length?null:(t.objectMode?r=t.buffer.shift():!e||e>=t.length?(r=t.decoder?t.buffer.join(""):1===t.buffer.length?t.buffer.head.data:t.buffer.concat(t.length),t.buffer.clear()):r=function(e,t,r){var n;e<t.head.data.length?(n=t.head.data.slice(0,e),t.head.data=t.head.data.slice(e)):n=e===t.head.data.length?t.shift():r?function(e,t){var r=t.head,n=1,i=r.data;e-=i.length;for(;r=r.next;){var a=r.data,o=e>a.length?a.length:e;if(o===a.length?i+=a:i+=a.slice(0,e),0===(e-=o)){o===a.length?(++n,r.next?t.head=r.next:t.head=t.tail=null):(t.head=r,r.data=a.slice(o));break}++n}return t.length-=n,i}(e,t):function(e,t){var r=c.allocUnsafe(e),n=t.head,i=1;n.data.copy(r),e-=n.data.length;for(;n=n.next;){var a=n.data,o=e>a.length?a.length:e;if(a.copy(r,r.length-e,0,o),0===(e-=o)){o===a.length?(++i,n.next?t.head=n.next:t.head=t.tail=null):(t.head=n,n.data=a.slice(o));break}++i}return t.length-=i,r}(e,t);return n}(e,t.buffer,t.decoder),r);var r}function I(e){var t=e._readableState;if(t.length>0)throw new Error('"endReadable()" called on non-empty stream');t.endEmitted||(t.ended=!0,i.nextTick(R,t,e))}function R(e,t){e.endEmitted||0!==e.length||(e.endEmitted=!0,t.readable=!1,t.emit("end"))}function j(e,t){for(var r=0,n=e.length;r<n;r++)if(e[r]===t)return r;return-1}v.prototype.read=function(e){l("read",e),e=parseInt(e,10);var t=this._readableState,r=e;if(0!==e&&(t.emittedReadable=!1),0===e&&t.needReadable&&(t.length>=t.highWaterMark||t.ended))return l("read: emitReadable",t.length,t.ended),0===t.length&&t.ended?I(this):S(this),null;if(0===(e=A(e,t))&&t.ended)return 0===t.length&&I(this),null;var n,i=t.needReadable;return l("need readable",i),(0===t.length||t.length-e<t.highWaterMark)&&l("length less than watermark",i=!0),t.ended||t.reading?l("reading or ended",i=!1):i&&(l("do read"),t.reading=!0,t.sync=!0,0===t.length&&(t.needReadable=!0),this._read(t.highWaterMark),t.sync=!1,t.reading||(e=A(r,t))),null===(n=e>0?x(e,t):null)?(t.needReadable=!0,e=0):t.length-=e,0===t.length&&(t.ended||(t.needReadable=!0),r!==e&&t.ended&&I(this)),null!==n&&this.emit("data",n),n},v.prototype._read=function(e){this.emit("error",new Error("_read() is not implemented"))},v.prototype.pipe=function(e,t){var r=this,a=this._readableState;switch(a.pipesCount){case 0:a.pipes=e;break;case 1:a.pipes=[a.pipes,e];break;default:a.pipes.push(e)}a.pipesCount+=1,l("pipe count=%d opts=%j",a.pipesCount,t);var s=(!t||!1!==t.end)&&e!==n.stdout&&e!==n.stderr?u:v;function c(t,n){l("onunpipe"),t===r&&n&&!1===n.hasUnpiped&&(n.hasUnpiped=!0,l("cleanup"),e.removeListener("close",g),e.removeListener("finish",m),e.removeListener("drain",h),e.removeListener("error",y),e.removeListener("unpipe",c),r.removeListener("end",u),r.removeListener("end",v),r.removeListener("data",b),d=!0,!a.awaitDrain||e._writableState&&!e._writableState.needDrain||h())}function u(){l("onend"),e.end()}a.endEmitted?i.nextTick(s):r.once("end",s),e.on("unpipe",c);var h=function(e){return function(){var t=e._readableState;l("pipeOnDrain",t.awaitDrain),t.awaitDrain&&t.awaitDrain--,0===t.awaitDrain&&f(e,"data")&&(t.flowing=!0,F(e))}}(r);e.on("drain",h);var d=!1;var p=!1;function b(t){l("ondata"),p=!1,!1!==e.write(t)||p||((1===a.pipesCount&&a.pipes===e||a.pipesCount>1&&-1!==j(a.pipes,e))&&!d&&(l("false write response, pause",r._readableState.awaitDrain),r._readableState.awaitDrain++,p=!0),r.pause())}function y(t){l("onerror",t),v(),e.removeListener("error",y),0===f(e,"error")&&e.emit("error",t)}function g(){e.removeListener("finish",m),v()}function m(){l("onfinish"),e.removeListener("close",g),v()}function v(){l("unpipe"),r.unpipe(e)}return r.on("data",b),function(e,t,r){if("function"==typeof e.prependListener)return e.prependListener(t,r);e._events&&e._events[t]?o(e._events[t])?e._events[t].unshift(r):e._events[t]=[r,e._events[t]]:e.on(t,r)}(e,"error",y),e.once("close",g),e.once("finish",m),e.emit("pipe",r),a.flowing||(l("pipe resume"),r.resume()),e},v.prototype.unpipe=function(e){var t=this._readableState,r={hasUnpiped:!1};if(0===t.pipesCount)return this;if(1===t.pipesCount)return e&&e!==t.pipes?this:(e||(e=t.pipes),t.pipes=null,t.pipesCount=0,t.flowing=!1,e&&e.emit("unpipe",this,r),this);if(!e){var n=t.pipes,i=t.pipesCount;t.pipes=null,t.pipesCount=0,t.flowing=!1;for(var a=0;a<i;a++)n[a].emit("unpipe",this,r);return this}var o=j(t.pipes,e);return-1===o?this:(t.pipes.splice(o,1),t.pipesCount-=1,1===t.pipesCount&&(t.pipes=t.pipes[0]),e.emit("unpipe",this,r),this)},v.prototype.on=function(e,t){var r=s.prototype.on.call(this,e,t);if("data"===e)!1!==this._readableState.flowing&&this.resume();else if("readable"===e){var n=this._readableState;n.endEmitted||n.readableListening||(n.readableListening=n.needReadable=!0,n.emittedReadable=!1,n.reading?n.length&&S(this):i.nextTick(D,this))}return r},v.prototype.addListener=v.prototype.on,v.prototype.resume=function(){var e=this._readableState;return e.flowing||(l("resume"),e.flowing=!0,function(e,t){t.resumeScheduled||(t.resumeScheduled=!0,i.nextTick(k,e,t))}(this,e)),this},v.prototype.pause=function(){return l("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(l("pause"),this._readableState.flowing=!1,this.emit("pause")),this},v.prototype.wrap=function(e){var t=this,r=this._readableState,n=!1;for(var i in e.on("end",(function(){if(l("wrapped end"),r.decoder&&!r.ended){var e=r.decoder.end();e&&e.length&&t.push(e)}t.push(null)})),e.on("data",(function(i){(l("wrapped data"),r.decoder&&(i=r.decoder.write(i)),r.objectMode&&null==i)||(r.objectMode||i&&i.length)&&(t.push(i)||(n=!0,e.pause()))})),e)void 0===this[i]&&"function"==typeof e[i]&&(this[i]=function(t){return function(){return e[t].apply(e,arguments)}}(i));for(var a=0;a<g.length;a++)e.on(g[a],this.emit.bind(this,g[a]));return this._read=function(t){l("wrapped _read",t),n&&(n=!1,e.resume())},this},Object.defineProperty(v.prototype,"readableHighWaterMark",{enumerable:!1,get:function(){return this._readableState.highWaterMark}}),v._fromList=x}).call(this,r(6),r(7))},function(e,t,r){e.exports=r(28).EventEmitter},function(e,t,r){"use strict";var n=r(21);function i(e,t){e.emit("error",t)}e.exports={destroy:function(e,t){var r=this,a=this._readableState&&this._readableState.destroyed,o=this._writableState&&this._writableState.destroyed;return a||o?(t?t(e):!e||this._writableState&&this._writableState.errorEmitted||n.nextTick(i,this,e),this):(this._readableState&&(this._readableState.destroyed=!0),this._writableState&&(this._writableState.destroyed=!0),this._destroy(e||null,(function(e){!t&&e?(n.nextTick(i,r,e),r._writableState&&(r._writableState.errorEmitted=!0)):t&&t(e)})),this)},undestroy:function(){this._readableState&&(this._readableState.destroyed=!1,this._readableState.reading=!1,this._readableState.ended=!1,this._readableState.endEmitted=!1),this._writableState&&(this._writableState.destroyed=!1,this._writableState.ended=!1,this._writableState.ending=!1,this._writableState.finished=!1,this._writableState.errorEmitted=!1)}}},function(e,t,r){"use strict";e.exports=o;var n=r(11),i=r(15);function a(e,t){var r=this._transformState;r.transforming=!1;var n=r.writecb;if(!n)return this.emit("error",new Error("write callback called multiple times"));r.writechunk=null,r.writecb=null,null!=t&&this.push(t),n(e);var i=this._readableState;i.reading=!1,(i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}function o(e){if(!(this instanceof o))return new o(e);n.call(this,e),this._transformState={afterTransform:a.bind(this),needTransform:!1,transforming:!1,writecb:null,writechunk:null,writeencoding:null},this._readableState.needReadable=!0,this._readableState.sync=!1,e&&("function"==typeof e.transform&&(this._transform=e.transform),"function"==typeof e.flush&&(this._flush=e.flush)),this.on("prefinish",f)}function f(){var e=this;"function"==typeof this._flush?this._flush((function(t,r){s(e,t,r)})):s(this,null,null)}function s(e,t,r){if(t)return e.emit("error",t);if(null!=r&&e.push(r),e._writableState.length)throw new Error("Calling transform done when ws.length != 0");if(e._transformState.transforming)throw new Error("Calling transform done when still transforming");return e.push(null)}i.inherits=r(0),i.inherits(o,n),o.prototype.push=function(e,t){return this._transformState.needTransform=!1,n.prototype.push.call(this,e,t)},o.prototype._transform=function(e,t,r){throw new Error("_transform() is not implemented")},o.prototype._write=function(e,t,r){var n=this._transformState;if(n.writecb=r,n.writechunk=e,n.writeencoding=t,!n.transforming){var i=this._readableState;(n.needTransform||i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}},o.prototype._read=function(e){var t=this._transformState;null!==t.writechunk&&t.writecb&&!t.transforming?(t.transforming=!0,this._transform(t.writechunk,t.writeencoding,t.afterTransform)):t.needTransform=!0},o.prototype._destroy=function(e,t){var r=this;n.prototype._destroy.call(this,e,(function(e){t(e),r.emit("close")}))}},function(e,t,r){var n=r(0),i=r(13),a=r(1).Buffer,o=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298],f=new Array(64);function s(){this.init(),this._w=f,i.call(this,64,56)}function c(e,t,r){return r^e&(t^r)}function u(e,t,r){return e&t|r&(e|t)}function h(e){return(e>>>2|e<<30)^(e>>>13|e<<19)^(e>>>22|e<<10)}function d(e){return(e>>>6|e<<26)^(e>>>11|e<<21)^(e>>>25|e<<7)}function l(e){return(e>>>7|e<<25)^(e>>>18|e<<14)^e>>>3}n(s,i),s.prototype.init=function(){return this._a=1779033703,this._b=3144134277,this._c=1013904242,this._d=2773480762,this._e=1359893119,this._f=2600822924,this._g=528734635,this._h=1541459225,this},s.prototype._update=function(e){for(var t,r=this._w,n=0|this._a,i=0|this._b,a=0|this._c,f=0|this._d,s=0|this._e,p=0|this._f,b=0|this._g,y=0|this._h,g=0;g<16;++g)r[g]=e.readInt32BE(4*g);for(;g<64;++g)r[g]=0|(((t=r[g-2])>>>17|t<<15)^(t>>>19|t<<13)^t>>>10)+r[g-7]+l(r[g-15])+r[g-16];for(var m=0;m<64;++m){var v=y+d(s)+c(s,p,b)+o[m]+r[m]|0,_=h(n)+u(n,i,a)|0;y=b,b=p,p=s,s=f+v|0,f=a,a=i,i=n,n=v+_|0}this._a=n+this._a|0,this._b=i+this._b|0,this._c=a+this._c|0,this._d=f+this._d|0,this._e=s+this._e|0,this._f=p+this._f|0,this._g=b+this._g|0,this._h=y+this._h|0},s.prototype._hash=function(){var e=a.allocUnsafe(32);return e.writeInt32BE(this._a,0),e.writeInt32BE(this._b,4),e.writeInt32BE(this._c,8),e.writeInt32BE(this._d,12),e.writeInt32BE(this._e,16),e.writeInt32BE(this._f,20),e.writeInt32BE(this._g,24),e.writeInt32BE(this._h,28),e},e.exports=s},function(e,t,r){var n=r(0),i=r(13),a=r(1).Buffer,o=[1116352408,3609767458,1899447441,602891725,3049323471,3964484399,3921009573,2173295548,961987163,4081628472,1508970993,3053834265,2453635748,2937671579,2870763221,3664609560,3624381080,2734883394,310598401,1164996542,607225278,1323610764,1426881987,3590304994,1925078388,4068182383,2162078206,991336113,2614888103,633803317,3248222580,3479774868,3835390401,2666613458,4022224774,944711139,264347078,2341262773,604807628,2007800933,770255983,1495990901,1249150122,1856431235,1555081692,3175218132,1996064986,2198950837,2554220882,3999719339,2821834349,766784016,2952996808,2566594879,3210313671,3203337956,3336571891,1034457026,3584528711,2466948901,113926993,3758326383,338241895,168717936,666307205,1188179964,773529912,1546045734,1294757372,1522805485,1396182291,2643833823,1695183700,2343527390,1986661051,1014477480,2177026350,1206759142,2456956037,344077627,2730485921,1290863460,2820302411,3158454273,3259730800,3505952657,3345764771,106217008,3516065817,3606008344,3600352804,1432725776,4094571909,1467031594,275423344,851169720,430227734,3100823752,506948616,1363258195,659060556,3750685593,883997877,3785050280,958139571,3318307427,1322822218,3812723403,1537002063,2003034995,1747873779,3602036899,1955562222,1575990012,2024104815,1125592928,2227730452,2716904306,2361852424,442776044,2428436474,593698344,2756734187,3733110249,3204031479,2999351573,3329325298,3815920427,3391569614,3928383900,3515267271,566280711,3940187606,3454069534,4118630271,4000239992,116418474,1914138554,174292421,2731055270,289380356,3203993006,460393269,320620315,685471733,587496836,852142971,1086792851,1017036298,365543100,1126000580,2618297676,1288033470,3409855158,1501505948,4234509866,1607167915,987167468,1816402316,1246189591],f=new Array(160);function s(){this.init(),this._w=f,i.call(this,128,112)}function c(e,t,r){return r^e&(t^r)}function u(e,t,r){return e&t|r&(e|t)}function h(e,t){return(e>>>28|t<<4)^(t>>>2|e<<30)^(t>>>7|e<<25)}function d(e,t){return(e>>>14|t<<18)^(e>>>18|t<<14)^(t>>>9|e<<23)}function l(e,t){return(e>>>1|t<<31)^(e>>>8|t<<24)^e>>>7}function p(e,t){return(e>>>1|t<<31)^(e>>>8|t<<24)^(e>>>7|t<<25)}function b(e,t){return(e>>>19|t<<13)^(t>>>29|e<<3)^e>>>6}function y(e,t){return(e>>>19|t<<13)^(t>>>29|e<<3)^(e>>>6|t<<26)}function g(e,t){return e>>>0<t>>>0?1:0}n(s,i),s.prototype.init=function(){return this._ah=1779033703,this._bh=3144134277,this._ch=1013904242,this._dh=2773480762,this._eh=1359893119,this._fh=2600822924,this._gh=528734635,this._hh=1541459225,this._al=4089235720,this._bl=2227873595,this._cl=4271175723,this._dl=1595750129,this._el=2917565137,this._fl=725511199,this._gl=4215389547,this._hl=327033209,this},s.prototype._update=function(e){for(var t=this._w,r=0|this._ah,n=0|this._bh,i=0|this._ch,a=0|this._dh,f=0|this._eh,s=0|this._fh,m=0|this._gh,v=0|this._hh,_=0|this._al,w=0|this._bl,E=0|this._cl,A=0|this._dl,S=0|this._el,B=0|this._fl,M=0|this._gl,C=0|this._hl,D=0;D<32;D+=2)t[D]=e.readInt32BE(4*D),t[D+1]=e.readInt32BE(4*D+4);for(;D<160;D+=2){var k=t[D-30],F=t[D-30+1],x=l(k,F),I=p(F,k),R=b(k=t[D-4],F=t[D-4+1]),j=y(F,k),T=t[D-14],P=t[D-14+1],O=t[D-32],N=t[D-32+1],q=I+P|0,L=x+T+g(q,I)|0;L=(L=L+R+g(q=q+j|0,j)|0)+O+g(q=q+N|0,N)|0,t[D]=L,t[D+1]=q}for(var U=0;U<160;U+=2){L=t[U],q=t[U+1];var z=u(r,n,i),K=u(_,w,E),H=h(r,_),Y=h(_,r),V=d(f,S),W=d(S,f),J=o[U],X=o[U+1],G=c(f,s,m),Z=c(S,B,M),$=C+W|0,Q=v+V+g($,C)|0;Q=(Q=(Q=Q+G+g($=$+Z|0,Z)|0)+J+g($=$+X|0,X)|0)+L+g($=$+q|0,q)|0;var ee=Y+K|0,te=H+z+g(ee,Y)|0;v=m,C=M,m=s,M=B,s=f,B=S,f=a+Q+g(S=A+$|0,A)|0,a=i,A=E,i=n,E=w,n=r,w=_,r=Q+te+g(_=$+ee|0,$)|0}this._al=this._al+_|0,this._bl=this._bl+w|0,this._cl=this._cl+E|0,this._dl=this._dl+A|0,this._el=this._el+S|0,this._fl=this._fl+B|0,this._gl=this._gl+M|0,this._hl=this._hl+C|0,this._ah=this._ah+r+g(this._al,_)|0,this._bh=this._bh+n+g(this._bl,w)|0,this._ch=this._ch+i+g(this._cl,E)|0,this._dh=this._dh+a+g(this._dl,A)|0,this._eh=this._eh+f+g(this._el,S)|0,this._fh=this._fh+s+g(this._fl,B)|0,this._gh=this._gh+m+g(this._gl,M)|0,this._hh=this._hh+v+g(this._hl,C)|0},s.prototype._hash=function(){var e=a.allocUnsafe(64);function t(t,r,n){e.writeInt32BE(t,n),e.writeInt32BE(r,n+4)}return t(this._ah,this._al,0),t(this._bh,this._bl,8),t(this._ch,this._cl,16),t(this._dh,this._dl,24),t(this._eh,this._el,32),t(this._fh,this._fl,40),t(this._gh,this._gl,48),t(this._hh,this._hl,56),e},e.exports=s},function(e,t,r){"use strict";var n=r(0),i=r(101),a=r(9),o=r(1).Buffer,f=r(50),s=r(32),c=r(33),u=o.alloc(128);function h(e,t){a.call(this,"digest"),"string"==typeof t&&(t=o.from(t));var r="sha512"===e||"sha384"===e?128:64;(this._alg=e,this._key=t,t.length>r)?t=("rmd160"===e?new s:c(e)).update(t).digest():t.length<r&&(t=o.concat([t,u],r));for(var n=this._ipad=o.allocUnsafe(r),i=this._opad=o.allocUnsafe(r),f=0;f<r;f++)n[f]=54^t[f],i[f]=92^t[f];this._hash="rmd160"===e?new s:c(e),this._hash.update(n)}n(h,a),h.prototype._update=function(e){this._hash.update(e)},h.prototype._final=function(){var e=this._hash.digest();return("rmd160"===this._alg?new s:c(this._alg)).update(this._opad).update(e).digest()},e.exports=function(e,t){return"rmd160"===(e=e.toLowerCase())||"ripemd160"===e?new h("rmd160",t):"md5"===e?new i(f,t):new h(e,t)}},function(e,t,r){var n=r(26);e.exports=function(e){return(new n).update(e).digest()}},function(e){e.exports=JSON.parse('{"sha224WithRSAEncryption":{"sign":"rsa","hash":"sha224","id":"302d300d06096086480165030402040500041c"},"RSA-SHA224":{"sign":"ecdsa/rsa","hash":"sha224","id":"302d300d06096086480165030402040500041c"},"sha256WithRSAEncryption":{"sign":"rsa","hash":"sha256","id":"3031300d060960864801650304020105000420"},"RSA-SHA256":{"sign":"ecdsa/rsa","hash":"sha256","id":"3031300d060960864801650304020105000420"},"sha384WithRSAEncryption":{"sign":"rsa","hash":"sha384","id":"3041300d060960864801650304020205000430"},"RSA-SHA384":{"sign":"ecdsa/rsa","hash":"sha384","id":"3041300d060960864801650304020205000430"},"sha512WithRSAEncryption":{"sign":"rsa","hash":"sha512","id":"3051300d060960864801650304020305000440"},"RSA-SHA512":{"sign":"ecdsa/rsa","hash":"sha512","id":"3051300d060960864801650304020305000440"},"RSA-SHA1":{"sign":"rsa","hash":"sha1","id":"3021300906052b0e03021a05000414"},"ecdsa-with-SHA1":{"sign":"ecdsa","hash":"sha1","id":""},"sha256":{"sign":"ecdsa","hash":"sha256","id":""},"sha224":{"sign":"ecdsa","hash":"sha224","id":""},"sha384":{"sign":"ecdsa","hash":"sha384","id":""},"sha512":{"sign":"ecdsa","hash":"sha512","id":""},"DSA-SHA":{"sign":"dsa","hash":"sha1","id":""},"DSA-SHA1":{"sign":"dsa","hash":"sha1","id":""},"DSA":{"sign":"dsa","hash":"sha1","id":""},"DSA-WITH-SHA224":{"sign":"dsa","hash":"sha224","id":""},"DSA-SHA224":{"sign":"dsa","hash":"sha224","id":""},"DSA-WITH-SHA256":{"sign":"dsa","hash":"sha256","id":""},"DSA-SHA256":{"sign":"dsa","hash":"sha256","id":""},"DSA-WITH-SHA384":{"sign":"dsa","hash":"sha384","id":""},"DSA-SHA384":{"sign":"dsa","hash":"sha384","id":""},"DSA-WITH-SHA512":{"sign":"dsa","hash":"sha512","id":""},"DSA-SHA512":{"sign":"dsa","hash":"sha512","id":""},"DSA-RIPEMD160":{"sign":"dsa","hash":"rmd160","id":""},"ripemd160WithRSA":{"sign":"rsa","hash":"rmd160","id":"3021300906052b2403020105000414"},"RSA-RIPEMD160":{"sign":"rsa","hash":"rmd160","id":"3021300906052b2403020105000414"},"md5WithRSAEncryption":{"sign":"rsa","hash":"md5","id":"3020300c06082a864886f70d020505000410"},"RSA-MD5":{"sign":"rsa","hash":"md5","id":"3020300c06082a864886f70d020505000410"}}')},function(e,t,r){t.pbkdf2=r(103),t.pbkdf2Sync=r(55)},function(e,t,r){(function(t){var r=Math.pow(2,30)-1;function n(e,r){if("string"!=typeof e&&!t.isBuffer(e))throw new TypeError(r+" must be a buffer or string")}e.exports=function(e,t,i,a){if(n(e,"Password"),n(t,"Salt"),"number"!=typeof i)throw new TypeError("Iterations not a number");if(i<0)throw new TypeError("Bad iterations");if("number"!=typeof a)throw new TypeError("Key length not a number");if(a<0||a>r||a!=a)throw new TypeError("Bad key length")}}).call(this,r(3).Buffer)},function(e,t,r){(function(t){var r;t.browser?r="utf-8":r=parseInt(t.version.split(".")[0].slice(1),10)>=6?"utf-8":"binary";e.exports=r}).call(this,r(7))},function(e,t,r){var n=r(50),i=r(32),a=r(33),o=r(53),f=r(54),s=r(1).Buffer,c=s.alloc(128),u={md5:16,sha1:20,sha224:28,sha256:32,sha384:48,sha512:64,rmd160:20,ripemd160:20};function h(e,t,r){var o=function(e){return"rmd160"===e||"ripemd160"===e?function(e){return(new i).update(e).digest()}:"md5"===e?n:function(t){return a(e).update(t).digest()}}(e),f="sha512"===e||"sha384"===e?128:64;t.length>f?t=o(t):t.length<f&&(t=s.concat([t,c],f));for(var h=s.allocUnsafe(f+u[e]),d=s.allocUnsafe(f+u[e]),l=0;l<f;l++)h[l]=54^t[l],d[l]=92^t[l];var p=s.allocUnsafe(f+r+4);h.copy(p,0,0,f),this.ipad1=p,this.ipad2=h,this.opad=d,this.alg=e,this.blocksize=f,this.hash=o,this.size=u[e]}h.prototype.run=function(e,t){return e.copy(t,this.blocksize),this.hash(t).copy(this.opad,this.blocksize),this.hash(this.opad)},e.exports=function(e,t,r,n,i){o(e,t,r,n),s.isBuffer(e)||(e=s.from(e,f)),s.isBuffer(t)||(t=s.from(t,f));var a=new h(i=i||"sha1",e,t.length),c=s.allocUnsafe(n),d=s.allocUnsafe(t.length+4);t.copy(d,0,0,t.length);for(var l=0,p=u[i],b=Math.ceil(n/p),y=1;y<=b;y++){d.writeUInt32BE(y,t.length);for(var g=a.run(d,a.ipad1),m=g,v=1;v<r;v++){m=a.run(m,a.ipad2);for(var _=0;_<p;_++)g[_]^=m[_]}g.copy(c,l),l+=p}return c}},function(e,t,r){var n=r(16),i=r(1).Buffer,a=r(57);function o(e){var t=e._cipher.encryptBlockRaw(e._prev);return a(e._prev),t}t.encrypt=function(e,t){var r=Math.ceil(t.length/16),a=e._cache.length;e._cache=i.concat([e._cache,i.allocUnsafe(16*r)]);for(var f=0;f<r;f++){var s=o(e),c=a+16*f;e._cache.writeUInt32BE(s[0],c+0),e._cache.writeUInt32BE(s[1],c+4),e._cache.writeUInt32BE(s[2],c+8),e._cache.writeUInt32BE(s[3],c+12)}var u=e._cache.slice(0,t.length);return e._cache=e._cache.slice(t.length),n(t,u)}},function(e,t){e.exports=function(e){for(var t,r=e.length;r--;){if(255!==(t=e.readUInt8(r))){t++,e.writeUInt8(t,r);break}e.writeUInt8(0,r)}}},function(e){e.exports=JSON.parse('{"aes-128-ecb":{"cipher":"AES","key":128,"iv":0,"mode":"ECB","type":"block"},"aes-192-ecb":{"cipher":"AES","key":192,"iv":0,"mode":"ECB","type":"block"},"aes-256-ecb":{"cipher":"AES","key":256,"iv":0,"mode":"ECB","type":"block"},"aes-128-cbc":{"cipher":"AES","key":128,"iv":16,"mode":"CBC","type":"block"},"aes-192-cbc":{"cipher":"AES","key":192,"iv":16,"mode":"CBC","type":"block"},"aes-256-cbc":{"cipher":"AES","key":256,"iv":16,"mode":"CBC","type":"block"},"aes128":{"cipher":"AES","key":128,"iv":16,"mode":"CBC","type":"block"},"aes192":{"cipher":"AES","key":192,"iv":16,"mode":"CBC","type":"block"},"aes256":{"cipher":"AES","key":256,"iv":16,"mode":"CBC","type":"block"},"aes-128-cfb":{"cipher":"AES","key":128,"iv":16,"mode":"CFB","type":"stream"},"aes-192-cfb":{"cipher":"AES","key":192,"iv":16,"mode":"CFB","type":"stream"},"aes-256-cfb":{"cipher":"AES","key":256,"iv":16,"mode":"CFB","type":"stream"},"aes-128-cfb8":{"cipher":"AES","key":128,"iv":16,"mode":"CFB8","type":"stream"},"aes-192-cfb8":{"cipher":"AES","key":192,"iv":16,"mode":"CFB8","type":"stream"},"aes-256-cfb8":{"cipher":"AES","key":256,"iv":16,"mode":"CFB8","type":"stream"},"aes-128-cfb1":{"cipher":"AES","key":128,"iv":16,"mode":"CFB1","type":"stream"},"aes-192-cfb1":{"cipher":"AES","key":192,"iv":16,"mode":"CFB1","type":"stream"},"aes-256-cfb1":{"cipher":"AES","key":256,"iv":16,"mode":"CFB1","type":"stream"},"aes-128-ofb":{"cipher":"AES","key":128,"iv":16,"mode":"OFB","type":"stream"},"aes-192-ofb":{"cipher":"AES","key":192,"iv":16,"mode":"OFB","type":"stream"},"aes-256-ofb":{"cipher":"AES","key":256,"iv":16,"mode":"OFB","type":"stream"},"aes-128-ctr":{"cipher":"AES","key":128,"iv":16,"mode":"CTR","type":"stream"},"aes-192-ctr":{"cipher":"AES","key":192,"iv":16,"mode":"CTR","type":"stream"},"aes-256-ctr":{"cipher":"AES","key":256,"iv":16,"mode":"CTR","type":"stream"},"aes-128-gcm":{"cipher":"AES","key":128,"iv":12,"mode":"GCM","type":"auth"},"aes-192-gcm":{"cipher":"AES","key":192,"iv":12,"mode":"GCM","type":"auth"},"aes-256-gcm":{"cipher":"AES","key":256,"iv":12,"mode":"GCM","type":"auth"}}')},function(e,t,r){var n=r(22),i=r(1).Buffer,a=r(9),o=r(0),f=r(118),s=r(16),c=r(57);function u(e,t,r,o){a.call(this);var s=i.alloc(4,0);this._cipher=new n.AES(t);var u=this._cipher.encryptBlock(s);this._ghash=new f(u),r=function(e,t,r){if(12===t.length)return e._finID=i.concat([t,i.from([0,0,0,1])]),i.concat([t,i.from([0,0,0,2])]);var n=new f(r),a=t.length,o=a%16;n.update(t),o&&(o=16-o,n.update(i.alloc(o,0))),n.update(i.alloc(8,0));var s=8*a,u=i.alloc(8);u.writeUIntBE(s,0,8),n.update(u),e._finID=n.state;var h=i.from(e._finID);return c(h),h}(this,r,u),this._prev=i.from(r),this._cache=i.allocUnsafe(0),this._secCache=i.allocUnsafe(0),this._decrypt=o,this._alen=0,this._len=0,this._mode=e,this._authTag=null,this._called=!1}o(u,a),u.prototype._update=function(e){if(!this._called&&this._alen){var t=16-this._alen%16;t<16&&(t=i.alloc(t,0),this._ghash.update(t))}this._called=!0;var r=this._mode.encrypt(this,e);return this._decrypt?this._ghash.update(e):this._ghash.update(r),this._len+=e.length,r},u.prototype._final=function(){if(this._decrypt&&!this._authTag)throw new Error("Unsupported state or unable to authenticate data");var e=s(this._ghash.final(8*this._alen,8*this._len),this._cipher.encryptBlock(this._finID));if(this._decrypt&&function(e,t){var r=0;e.length!==t.length&&r++;for(var n=Math.min(e.length,t.length),i=0;i<n;++i)r+=e[i]^t[i];return r}(e,this._authTag))throw new Error("Unsupported state or unable to authenticate data");this._authTag=e,this._cipher.scrub()},u.prototype.getAuthTag=function(){if(this._decrypt||!i.isBuffer(this._authTag))throw new Error("Attempting to get auth tag in unsupported state");return this._authTag},u.prototype.setAuthTag=function(e){if(!this._decrypt)throw new Error("Attempting to set auth tag in unsupported state");this._authTag=e},u.prototype.setAAD=function(e){if(this._called)throw new Error("Attempting to set AAD in unsupported state");this._ghash.update(e),this._alen+=e.length},e.exports=u},function(e,t,r){var n=r(22),i=r(1).Buffer,a=r(9);function o(e,t,r,o){a.call(this),this._cipher=new n.AES(t),this._prev=i.from(r),this._cache=i.allocUnsafe(0),this._secCache=i.allocUnsafe(0),this._decrypt=o,this._mode=e}r(0)(o,a),o.prototype._update=function(e){return this._mode.encrypt(this,e,this._decrypt)},o.prototype._final=function(){this._cipher.scrub()},e.exports=o},function(e,t,r){var n=r(12);e.exports=m,m.simpleSieve=y,m.fermatTest=g;var i=r(2),a=new i(24),o=new(r(62)),f=new i(1),s=new i(2),c=new i(5),u=(new i(16),new i(8),new i(10)),h=new i(3),d=(new i(7),new i(11)),l=new i(4),p=(new i(12),null);function b(){if(null!==p)return p;var e=[];e[0]=2;for(var t=1,r=3;r<1048576;r+=2){for(var n=Math.ceil(Math.sqrt(r)),i=0;i<t&&e[i]<=n&&r%e[i]!=0;i++);t!==i&&e[i]<=n||(e[t++]=r)}return p=e,e}function y(e){for(var t=b(),r=0;r<t.length;r++)if(0===e.modn(t[r]))return 0===e.cmpn(t[r]);return!0}function g(e){var t=i.mont(e);return 0===s.toRed(t).redPow(e.subn(1)).fromRed().cmpn(1)}function m(e,t){if(e<16)return new i(2===t||5===t?[140,123]:[140,39]);var r,p;for(t=new i(t);;){for(r=new i(n(Math.ceil(e/8)));r.bitLength()>e;)r.ishrn(1);if(r.isEven()&&r.iadd(f),r.testn(1)||r.iadd(s),t.cmp(s)){if(!t.cmp(c))for(;r.mod(u).cmp(h);)r.iadd(l)}else for(;r.mod(a).cmp(d);)r.iadd(l);if(y(p=r.shrn(1))&&y(r)&&g(p)&&g(r)&&o.test(p)&&o.test(r))return r}}},function(e,t,r){var n=r(2),i=r(37);function a(e){this.rand=e||new i.Rand}e.exports=a,a.create=function(e){return new a(e)},a.prototype._randbelow=function(e){var t=e.bitLength(),r=Math.ceil(t/8);do{var i=new n(this.rand.generate(r))}while(i.cmp(e)>=0);return i},a.prototype._randrange=function(e,t){var r=t.sub(e);return e.add(this._randbelow(r))},a.prototype.test=function(e,t,r){var i=e.bitLength(),a=n.mont(e),o=new n(1).toRed(a);t||(t=Math.max(1,i/48|0));for(var f=e.subn(1),s=0;!f.testn(s);s++);for(var c=e.shrn(s),u=f.toRed(a);t>0;t--){var h=this._randrange(new n(2),f);r&&r(h);var d=h.toRed(a).redPow(c);if(0!==d.cmp(o)&&0!==d.cmp(u)){for(var l=1;l<s;l++){if(0===(d=d.redSqr()).cmp(o))return!1;if(0===d.cmp(u))break}if(l===s)return!1}}return!0},a.prototype.getDivisor=function(e,t){var r=e.bitLength(),i=n.mont(e),a=new n(1).toRed(i);t||(t=Math.max(1,r/48|0));for(var o=e.subn(1),f=0;!o.testn(f);f++);for(var s=e.shrn(f),c=o.toRed(i);t>0;t--){var u=this._randrange(new n(2),o),h=e.gcd(u);if(0!==h.cmpn(1))return h;var d=u.toRed(i).redPow(s);if(0!==d.cmp(a)&&0!==d.cmp(c)){for(var l=1;l<f;l++){if(0===(d=d.redSqr()).cmp(a))return d.fromRed().subn(1).gcd(e);if(0===d.cmp(c))break}if(l===f)return(d=d.redSqr()).fromRed().subn(1).gcd(e)}}return!1}},function(e,t,r){"use strict";var n=t;function i(e){return 1===e.length?"0"+e:e}function a(e){for(var t="",r=0;r<e.length;r++)t+=i(e[r].toString(16));return t}n.toArray=function(e,t){if(Array.isArray(e))return e.slice();if(!e)return[];var r=[];if("string"!=typeof e){for(var n=0;n<e.length;n++)r[n]=0|e[n];return r}if("hex"===t){(e=e.replace(/[^a-z0-9]+/gi,"")).length%2!=0&&(e="0"+e);for(n=0;n<e.length;n+=2)r.push(parseInt(e[n]+e[n+1],16))}else for(n=0;n<e.length;n++){var i=e.charCodeAt(n),a=i>>8,o=255&i;a?r.push(a,o):r.push(o)}return r},n.zero2=i,n.toHex=a,n.encode=function(e,t){return"hex"===t?a(e):e}},function(e,t,r){"use strict";var n=t;n.base=r(24),n.short=r(130),n.mont=r(131),n.edwards=r(132)},function(e,t,r){"use strict";var n=r(8).rotr32;function i(e,t,r){return e&t^~e&r}function a(e,t,r){return e&t^e&r^t&r}function o(e,t,r){return e^t^r}t.ft_1=function(e,t,r,n){return 0===e?i(t,r,n):1===e||3===e?o(t,r,n):2===e?a(t,r,n):void 0},t.ch32=i,t.maj32=a,t.p32=o,t.s0_256=function(e){return n(e,2)^n(e,13)^n(e,22)},t.s1_256=function(e){return n(e,6)^n(e,11)^n(e,25)},t.g0_256=function(e){return n(e,7)^n(e,18)^e>>>3},t.g1_256=function(e){return n(e,17)^n(e,19)^e>>>10}},function(e,t,r){"use strict";var n=r(8),i=r(17),a=r(65),o=r(4),f=n.sum32,s=n.sum32_4,c=n.sum32_5,u=a.ch32,h=a.maj32,d=a.s0_256,l=a.s1_256,p=a.g0_256,b=a.g1_256,y=i.BlockHash,g=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298];function m(){if(!(this instanceof m))return new m;y.call(this),this.h=[1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225],this.k=g,this.W=new Array(64)}n.inherits(m,y),e.exports=m,m.blockSize=512,m.outSize=256,m.hmacStrength=192,m.padLength=64,m.prototype._update=function(e,t){for(var r=this.W,n=0;n<16;n++)r[n]=e[t+n];for(;n<r.length;n++)r[n]=s(b(r[n-2]),r[n-7],p(r[n-15]),r[n-16]);var i=this.h[0],a=this.h[1],y=this.h[2],g=this.h[3],m=this.h[4],v=this.h[5],_=this.h[6],w=this.h[7];for(o(this.k.length===r.length),n=0;n<r.length;n++){var E=c(w,l(m),u(m,v,_),this.k[n],r[n]),A=f(d(i),h(i,a,y));w=_,_=v,v=m,m=f(g,E),g=y,y=a,a=i,i=f(E,A)}this.h[0]=f(this.h[0],i),this.h[1]=f(this.h[1],a),this.h[2]=f(this.h[2],y),this.h[3]=f(this.h[3],g),this.h[4]=f(this.h[4],m),this.h[5]=f(this.h[5],v),this.h[6]=f(this.h[6],_),this.h[7]=f(this.h[7],w)},m.prototype._digest=function(e){return"hex"===e?n.toHex32(this.h,"big"):n.split32(this.h,"big")}},function(e,t,r){"use strict";var n=r(8),i=r(17),a=r(4),o=n.rotr64_hi,f=n.rotr64_lo,s=n.shr64_hi,c=n.shr64_lo,u=n.sum64,h=n.sum64_hi,d=n.sum64_lo,l=n.sum64_4_hi,p=n.sum64_4_lo,b=n.sum64_5_hi,y=n.sum64_5_lo,g=i.BlockHash,m=[1116352408,3609767458,1899447441,602891725,3049323471,3964484399,3921009573,2173295548,961987163,4081628472,1508970993,3053834265,2453635748,2937671579,2870763221,3664609560,3624381080,2734883394,310598401,1164996542,607225278,1323610764,1426881987,3590304994,1925078388,4068182383,2162078206,991336113,2614888103,633803317,3248222580,3479774868,3835390401,2666613458,4022224774,944711139,264347078,2341262773,604807628,2007800933,770255983,1495990901,1249150122,1856431235,1555081692,3175218132,1996064986,2198950837,2554220882,3999719339,2821834349,766784016,2952996808,2566594879,3210313671,3203337956,3336571891,1034457026,3584528711,2466948901,113926993,3758326383,338241895,168717936,666307205,1188179964,773529912,1546045734,1294757372,1522805485,1396182291,2643833823,1695183700,2343527390,1986661051,1014477480,2177026350,1206759142,2456956037,344077627,2730485921,1290863460,2820302411,3158454273,3259730800,3505952657,3345764771,106217008,3516065817,3606008344,3600352804,1432725776,4094571909,1467031594,275423344,851169720,430227734,3100823752,506948616,1363258195,659060556,3750685593,883997877,3785050280,958139571,3318307427,1322822218,3812723403,1537002063,2003034995,1747873779,3602036899,1955562222,1575990012,2024104815,1125592928,2227730452,2716904306,2361852424,442776044,2428436474,593698344,2756734187,3733110249,3204031479,2999351573,3329325298,3815920427,3391569614,3928383900,3515267271,566280711,3940187606,3454069534,4118630271,4000239992,116418474,1914138554,174292421,2731055270,289380356,3203993006,460393269,320620315,685471733,587496836,852142971,1086792851,1017036298,365543100,1126000580,2618297676,1288033470,3409855158,1501505948,4234509866,1607167915,987167468,1816402316,1246189591];function v(){if(!(this instanceof v))return new v;g.call(this),this.h=[1779033703,4089235720,3144134277,2227873595,1013904242,4271175723,2773480762,1595750129,1359893119,2917565137,2600822924,725511199,528734635,4215389547,1541459225,327033209],this.k=m,this.W=new Array(160)}function _(e,t,r,n,i){var a=e&r^~e&i;return a<0&&(a+=4294967296),a}function w(e,t,r,n,i,a){var o=t&n^~t&a;return o<0&&(o+=4294967296),o}function E(e,t,r,n,i){var a=e&r^e&i^r&i;return a<0&&(a+=4294967296),a}function A(e,t,r,n,i,a){var o=t&n^t&a^n&a;return o<0&&(o+=4294967296),o}function S(e,t){var r=o(e,t,28)^o(t,e,2)^o(t,e,7);return r<0&&(r+=4294967296),r}function B(e,t){var r=f(e,t,28)^f(t,e,2)^f(t,e,7);return r<0&&(r+=4294967296),r}function M(e,t){var r=o(e,t,14)^o(e,t,18)^o(t,e,9);return r<0&&(r+=4294967296),r}function C(e,t){var r=f(e,t,14)^f(e,t,18)^f(t,e,9);return r<0&&(r+=4294967296),r}function D(e,t){var r=o(e,t,1)^o(e,t,8)^s(e,t,7);return r<0&&(r+=4294967296),r}function k(e,t){var r=f(e,t,1)^f(e,t,8)^c(e,t,7);return r<0&&(r+=4294967296),r}function F(e,t){var r=o(e,t,19)^o(t,e,29)^s(e,t,6);return r<0&&(r+=4294967296),r}function x(e,t){var r=f(e,t,19)^f(t,e,29)^c(e,t,6);return r<0&&(r+=4294967296),r}n.inherits(v,g),e.exports=v,v.blockSize=1024,v.outSize=512,v.hmacStrength=192,v.padLength=128,v.prototype._prepareBlock=function(e,t){for(var r=this.W,n=0;n<32;n++)r[n]=e[t+n];for(;n<r.length;n+=2){var i=F(r[n-4],r[n-3]),a=x(r[n-4],r[n-3]),o=r[n-14],f=r[n-13],s=D(r[n-30],r[n-29]),c=k(r[n-30],r[n-29]),u=r[n-32],h=r[n-31];r[n]=l(i,a,o,f,s,c,u,h),r[n+1]=p(i,a,o,f,s,c,u,h)}},v.prototype._update=function(e,t){this._prepareBlock(e,t);var r=this.W,n=this.h[0],i=this.h[1],o=this.h[2],f=this.h[3],s=this.h[4],c=this.h[5],l=this.h[6],p=this.h[7],g=this.h[8],m=this.h[9],v=this.h[10],D=this.h[11],k=this.h[12],F=this.h[13],x=this.h[14],I=this.h[15];a(this.k.length===r.length);for(var R=0;R<r.length;R+=2){var j=x,T=I,P=M(g,m),O=C(g,m),N=_(g,m,v,D,k),q=w(g,m,v,D,k,F),L=this.k[R],U=this.k[R+1],z=r[R],K=r[R+1],H=b(j,T,P,O,N,q,L,U,z,K),Y=y(j,T,P,O,N,q,L,U,z,K);j=S(n,i),T=B(n,i),P=E(n,i,o,f,s),O=A(n,i,o,f,s,c);var V=h(j,T,P,O),W=d(j,T,P,O);x=k,I=F,k=v,F=D,v=g,D=m,g=h(l,p,H,Y),m=d(p,p,H,Y),l=s,p=c,s=o,c=f,o=n,f=i,n=h(H,Y,V,W),i=d(H,Y,V,W)}u(this.h,0,n,i),u(this.h,2,o,f),u(this.h,4,s,c),u(this.h,6,l,p),u(this.h,8,g,m),u(this.h,10,v,D),u(this.h,12,k,F),u(this.h,14,x,I)},v.prototype._digest=function(e){return"hex"===e?n.toHex32(this.h,"big"):n.split32(this.h,"big")}},function(e,t,r){var n=r(0),i=r(19).Reporter,a=r(3).Buffer;function o(e,t){i.call(this,t),a.isBuffer(e)?(this.base=e,this.offset=0,this.length=e.length):this.error("Input not Buffer")}function f(e,t){if(Array.isArray(e))this.length=0,this.value=e.map((function(e){return e instanceof f||(e=new f(e,t)),this.length+=e.length,e}),this);else if("number"==typeof e){if(!(0<=e&&e<=255))return t.error("non-byte EncoderBuffer value");this.value=e,this.length=1}else if("string"==typeof e)this.value=e,this.length=a.byteLength(e);else{if(!a.isBuffer(e))return t.error("Unsupported type: "+typeof e);this.value=e,this.length=e.length}}n(o,i),t.DecoderBuffer=o,o.prototype.save=function(){return{offset:this.offset,reporter:i.prototype.save.call(this)}},o.prototype.restore=function(e){var t=new o(this.base);return t.offset=e.offset,t.length=this.offset,this.offset=e.offset,i.prototype.restore.call(this,e.reporter),t},o.prototype.isEmpty=function(){return this.offset===this.length},o.prototype.readUInt8=function(e){return this.offset+1<=this.length?this.base.readUInt8(this.offset++,!0):this.error(e||"DecoderBuffer overrun")},o.prototype.skip=function(e,t){if(!(this.offset+e<=this.length))return this.error(t||"DecoderBuffer overrun");var r=new o(this.base);return r._reporterState=this._reporterState,r.offset=this.offset,r.length=this.offset+e,this.offset+=e,r},o.prototype.raw=function(e){return this.base.slice(e?e.offset:this.offset,this.length)},t.EncoderBuffer=f,f.prototype.join=function(e,t){return e||(e=new a(this.length)),t||(t=0),0===this.length?e:(Array.isArray(this.value)?this.value.forEach((function(r){r.join(e,t),t+=r.length})):("number"==typeof this.value?e[t]=this.value:"string"==typeof this.value?e.write(this.value,t):a.isBuffer(this.value)&&this.value.copy(e,t),t+=this.length),e)}},function(e,t,r){var n=t;n._reverse=function(e){var t={};return Object.keys(e).forEach((function(r){(0|r)==r&&(r|=0);var n=e[r];t[n]=r})),t},n.der=r(152)},function(e,t,r){var n=r(0),i=r(18),a=i.base,o=i.bignum,f=i.constants.der;function s(e){this.enc="der",this.name=e.name,this.entity=e,this.tree=new c,this.tree._init(e.body)}function c(e){a.Node.call(this,"der",e)}function u(e,t){var r=e.readUInt8(t);if(e.isError(r))return r;var n=f.tagClass[r>>6],i=0==(32&r);if(31==(31&r)){var a=r;for(r=0;128==(128&a);){if(a=e.readUInt8(t),e.isError(a))return a;r<<=7,r|=127&a}}else r&=31;return{cls:n,primitive:i,tag:r,tagStr:f.tag[r]}}function h(e,t,r){var n=e.readUInt8(r);if(e.isError(n))return n;if(!t&&128===n)return null;if(0==(128&n))return n;var i=127&n;if(i>4)return e.error("length octect is too long");n=0;for(var a=0;a<i;a++){n<<=8;var o=e.readUInt8(r);if(e.isError(o))return o;n|=o}return n}e.exports=s,s.prototype.decode=function(e,t){return e instanceof a.DecoderBuffer||(e=new a.DecoderBuffer(e,t)),this.tree._decode(e,t)},n(c,a.Node),c.prototype._peekTag=function(e,t,r){if(e.isEmpty())return!1;var n=e.save(),i=u(e,'Failed to peek tag: "'+t+'"');return e.isError(i)?i:(e.restore(n),i.tag===t||i.tagStr===t||i.tagStr+"of"===t||r)},c.prototype._decodeTag=function(e,t,r){var n=u(e,'Failed to decode tag of "'+t+'"');if(e.isError(n))return n;var i=h(e,n.primitive,'Failed to get length of "'+t+'"');if(e.isError(i))return i;if(!r&&n.tag!==t&&n.tagStr!==t&&n.tagStr+"of"!==t)return e.error('Failed to match tag: "'+t+'"');if(n.primitive||null!==i)return e.skip(i,'Failed to match body of: "'+t+'"');var a=e.save(),o=this._skipUntilEnd(e,'Failed to skip indefinite length body: "'+this.tag+'"');return e.isError(o)?o:(i=e.offset-a.offset,e.restore(a),e.skip(i,'Failed to match body of: "'+t+'"'))},c.prototype._skipUntilEnd=function(e,t){for(;;){var r=u(e,t);if(e.isError(r))return r;var n,i=h(e,r.primitive,t);if(e.isError(i))return i;if(n=r.primitive||null!==i?e.skip(i):this._skipUntilEnd(e,t),e.isError(n))return n;if("end"===r.tagStr)break}},c.prototype._decodeList=function(e,t,r,n){for(var i=[];!e.isEmpty();){var a=this._peekTag(e,"end");if(e.isError(a))return a;var o=r.decode(e,"der",n);if(e.isError(o)&&a)break;i.push(o)}return i},c.prototype._decodeStr=function(e,t){if("bitstr"===t){var r=e.readUInt8();return e.isError(r)?r:{unused:r,data:e.raw()}}if("bmpstr"===t){var n=e.raw();if(n.length%2==1)return e.error("Decoding of string type: bmpstr length mismatch");for(var i="",a=0;a<n.length/2;a++)i+=String.fromCharCode(n.readUInt16BE(2*a));return i}if("numstr"===t){var o=e.raw().toString("ascii");return this._isNumstr(o)?o:e.error("Decoding of string type: numstr unsupported characters")}if("octstr"===t)return e.raw();if("objDesc"===t)return e.raw();if("printstr"===t){var f=e.raw().toString("ascii");return this._isPrintstr(f)?f:e.error("Decoding of string type: printstr unsupported characters")}return/str$/.test(t)?e.raw().toString():e.error("Decoding of string type: "+t+" unsupported")},c.prototype._decodeObjid=function(e,t,r){for(var n,i=[],a=0;!e.isEmpty();){var o=e.readUInt8();a<<=7,a|=127&o,0==(128&o)&&(i.push(a),a=0)}128&o&&i.push(a);var f=i[0]/40|0,s=i[0]%40;if(n=r?i:[f,s].concat(i.slice(1)),t){var c=t[n.join(" ")];void 0===c&&(c=t[n.join(".")]),void 0!==c&&(n=c)}return n},c.prototype._decodeTime=function(e,t){var r=e.raw().toString();if("gentime"===t)var n=0|r.slice(0,4),i=0|r.slice(4,6),a=0|r.slice(6,8),o=0|r.slice(8,10),f=0|r.slice(10,12),s=0|r.slice(12,14);else{if("utctime"!==t)return e.error("Decoding "+t+" time is not supported yet");n=0|r.slice(0,2),i=0|r.slice(2,4),a=0|r.slice(4,6),o=0|r.slice(6,8),f=0|r.slice(8,10),s=0|r.slice(10,12);n=n<70?2e3+n:1900+n}return Date.UTC(n,i-1,a,o,f,s,0)},c.prototype._decodeNull=function(e){return null},c.prototype._decodeBool=function(e){var t=e.readUInt8();return e.isError(t)?t:0!==t},c.prototype._decodeInt=function(e,t){var r=e.raw(),n=new o(r);return t&&(n=t[n.toString(10)]||n),n},c.prototype._use=function(e,t){return"function"==typeof e&&(e=e(t)),e._getDecoder("der").tree}},function(e,t,r){var n=r(0),i=r(3).Buffer,a=r(18),o=a.base,f=a.constants.der;function s(e){this.enc="der",this.name=e.name,this.entity=e,this.tree=new c,this.tree._init(e.body)}function c(e){o.Node.call(this,"der",e)}function u(e){return e<10?"0"+e:e}e.exports=s,s.prototype.encode=function(e,t){return this.tree._encode(e,t).join()},n(c,o.Node),c.prototype._encodeComposite=function(e,t,r,n){var a,o=function(e,t,r,n){var i;"seqof"===e?e="seq":"setof"===e&&(e="set");if(f.tagByName.hasOwnProperty(e))i=f.tagByName[e];else{if("number"!=typeof e||(0|e)!==e)return n.error("Unknown tag: "+e);i=e}if(i>=31)return n.error("Multi-octet tag encoding unsupported");t||(i|=32);return i|=f.tagClassByName[r||"universal"]<<6}(e,t,r,this.reporter);if(n.length<128)return(a=new i(2))[0]=o,a[1]=n.length,this._createEncoderBuffer([a,n]);for(var s=1,c=n.length;c>=256;c>>=8)s++;(a=new i(2+s))[0]=o,a[1]=128|s;c=1+s;for(var u=n.length;u>0;c--,u>>=8)a[c]=255&u;return this._createEncoderBuffer([a,n])},c.prototype._encodeStr=function(e,t){if("bitstr"===t)return this._createEncoderBuffer([0|e.unused,e.data]);if("bmpstr"===t){for(var r=new i(2*e.length),n=0;n<e.length;n++)r.writeUInt16BE(e.charCodeAt(n),2*n);return this._createEncoderBuffer(r)}return"numstr"===t?this._isNumstr(e)?this._createEncoderBuffer(e):this.reporter.error("Encoding of string type: numstr supports only digits and space"):"printstr"===t?this._isPrintstr(e)?this._createEncoderBuffer(e):this.reporter.error("Encoding of string type: printstr supports only latin upper and lower case letters, digits, space, apostrophe, left and rigth parenthesis, plus sign, comma, hyphen, dot, slash, colon, equal sign, question mark"):/str$/.test(t)?this._createEncoderBuffer(e):"objDesc"===t?this._createEncoderBuffer(e):this.reporter.error("Encoding of string type: "+t+" unsupported")},c.prototype._encodeObjid=function(e,t,r){if("string"==typeof e){if(!t)return this.reporter.error("string objid given, but no values map found");if(!t.hasOwnProperty(e))return this.reporter.error("objid not found in values map");e=t[e].split(/[\s\.]+/g);for(var n=0;n<e.length;n++)e[n]|=0}else if(Array.isArray(e)){e=e.slice();for(n=0;n<e.length;n++)e[n]|=0}if(!Array.isArray(e))return this.reporter.error("objid() should be either array or string, got: "+JSON.stringify(e));if(!r){if(e[1]>=40)return this.reporter.error("Second objid identifier OOB");e.splice(0,2,40*e[0]+e[1])}var a=0;for(n=0;n<e.length;n++){var o=e[n];for(a++;o>=128;o>>=7)a++}var f=new i(a),s=f.length-1;for(n=e.length-1;n>=0;n--){o=e[n];for(f[s--]=127&o;(o>>=7)>0;)f[s--]=128|127&o}return this._createEncoderBuffer(f)},c.prototype._encodeTime=function(e,t){var r,n=new Date(e);return"gentime"===t?r=[u(n.getFullYear()),u(n.getUTCMonth()+1),u(n.getUTCDate()),u(n.getUTCHours()),u(n.getUTCMinutes()),u(n.getUTCSeconds()),"Z"].join(""):"utctime"===t?r=[u(n.getFullYear()%100),u(n.getUTCMonth()+1),u(n.getUTCDate()),u(n.getUTCHours()),u(n.getUTCMinutes()),u(n.getUTCSeconds()),"Z"].join(""):this.reporter.error("Encoding "+t+" time is not supported yet"),this._encodeStr(r,"octstr")},c.prototype._encodeNull=function(){return this._createEncoderBuffer("")},c.prototype._encodeInt=function(e,t){if("string"==typeof e){if(!t)return this.reporter.error("String int or enum given, but no values map");if(!t.hasOwnProperty(e))return this.reporter.error("Values map doesn't contain: "+JSON.stringify(e));e=t[e]}if("number"!=typeof e&&!i.isBuffer(e)){var r=e.toArray();!e.sign&&128&r[0]&&r.unshift(0),e=new i(r)}if(i.isBuffer(e)){var n=e.length;0===e.length&&n++;var a=new i(n);return e.copy(a),0===e.length&&(a[0]=0),this._createEncoderBuffer(a)}if(e<128)return this._createEncoderBuffer(e);if(e<256)return this._createEncoderBuffer([0,e]);n=1;for(var o=e;o>=256;o>>=8)n++;for(o=(a=new Array(n)).length-1;o>=0;o--)a[o]=255&e,e>>=8;return 128&a[0]&&a.unshift(0),this._createEncoderBuffer(new i(a))},c.prototype._encodeBool=function(e){return this._createEncoderBuffer(e?255:0)},c.prototype._use=function(e,t){return"function"==typeof e&&(e=e(t)),e._getEncoder("der").tree},c.prototype._skipDefault=function(e,t,r){var n,i=this._baseState;if(null===i.default)return!1;var a=e.join();if(void 0===i.defaultBuffer&&(i.defaultBuffer=this._encodeValue(i.default,t,r).join()),a.length!==i.defaultBuffer.length)return!1;for(n=0;n<a.length;n++)if(a[n]!==i.defaultBuffer[n])return!1;return!0}},function(e){e.exports=JSON.parse('{"1.3.132.0.10":"secp256k1","1.3.132.0.33":"p224","1.2.840.10045.3.1.1":"p192","1.2.840.10045.3.1.7":"p256","1.3.132.0.34":"p384","1.3.132.0.35":"p521"}')},function(e,t,r){var n=r(14),i=r(1).Buffer;function a(e){var t=i.allocUnsafe(4);return t.writeUInt32BE(e,0),t}e.exports=function(e,t){for(var r,o=i.alloc(0),f=0;o.length<t;)r=a(f++),o=i.concat([o,n("sha1").update(e).update(r).digest()]);return o.slice(0,t)}},function(e,t){e.exports=function(e,t){for(var r=e.length,n=-1;++n<r;)e[n]^=t[n];return e}},function(e,t,r){var n=r(2),i=r(1).Buffer;e.exports=function(e,t){return i.from(e.toRed(n.mont(t.modulus)).redPow(new n(t.publicExponent)).fromRed().toArray())}},function(e,t,r){(function(e){var n=Object.getOwnPropertyDescriptors||function(e){for(var t=Object.keys(e),r={},n=0;n<t.length;n++)r[t[n]]=Object.getOwnPropertyDescriptor(e,t[n]);return r},i=/%[sdj%]/g;t.format=function(e){if(!g(e)){for(var t=[],r=0;r<arguments.length;r++)t.push(f(arguments[r]));return t.join(" ")}r=1;for(var n=arguments,a=n.length,o=String(e).replace(i,(function(e){if("%%"===e)return"%";if(r>=a)return e;switch(e){case"%s":return String(n[r++]);case"%d":return Number(n[r++]);case"%j":try{return JSON.stringify(n[r++])}catch(e){return"[Circular]"}default:return e}})),s=n[r];r<a;s=n[++r])b(s)||!_(s)?o+=" "+s:o+=" "+f(s);return o},t.deprecate=function(r,n){if(void 0!==e&&!0===e.noDeprecation)return r;if(void 0===e)return function(){return t.deprecate(r,n).apply(this,arguments)};var i=!1;return function(){if(!i){if(e.throwDeprecation)throw new Error(n);e.traceDeprecation?console.trace(n):console.error(n),i=!0}return r.apply(this,arguments)}};var a,o={};function f(e,r){var n={seen:[],stylize:c};return arguments.length>=3&&(n.depth=arguments[2]),arguments.length>=4&&(n.colors=arguments[3]),p(r)?n.showHidden=r:r&&t._extend(n,r),m(n.showHidden)&&(n.showHidden=!1),m(n.depth)&&(n.depth=2),m(n.colors)&&(n.colors=!1),m(n.customInspect)&&(n.customInspect=!0),n.colors&&(n.stylize=s),u(n,e,n.depth)}function s(e,t){var r=f.styles[t];return r?"["+f.colors[r][0]+"m"+e+"["+f.colors[r][1]+"m":e}function c(e,t){return e}function u(e,r,n){if(e.customInspect&&r&&A(r.inspect)&&r.inspect!==t.inspect&&(!r.constructor||r.constructor.prototype!==r)){var i=r.inspect(n,e);return g(i)||(i=u(e,i,n)),i}var a=function(e,t){if(m(t))return e.stylize("undefined","undefined");if(g(t)){var r="'"+JSON.stringify(t).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return e.stylize(r,"string")}if(y(t))return e.stylize(""+t,"number");if(p(t))return e.stylize(""+t,"boolean");if(b(t))return e.stylize("null","null")}(e,r);if(a)return a;var o=Object.keys(r),f=function(e){var t={};return e.forEach((function(e,r){t[e]=!0})),t}(o);if(e.showHidden&&(o=Object.getOwnPropertyNames(r)),E(r)&&(o.indexOf("message")>=0||o.indexOf("description")>=0))return h(r);if(0===o.length){if(A(r)){var s=r.name?": "+r.name:"";return e.stylize("[Function"+s+"]","special")}if(v(r))return e.stylize(RegExp.prototype.toString.call(r),"regexp");if(w(r))return e.stylize(Date.prototype.toString.call(r),"date");if(E(r))return h(r)}var c,_="",S=!1,B=["{","}"];(l(r)&&(S=!0,B=["[","]"]),A(r))&&(_=" [Function"+(r.name?": "+r.name:"")+"]");return v(r)&&(_=" "+RegExp.prototype.toString.call(r)),w(r)&&(_=" "+Date.prototype.toUTCString.call(r)),E(r)&&(_=" "+h(r)),0!==o.length||S&&0!=r.length?n<0?v(r)?e.stylize(RegExp.prototype.toString.call(r),"regexp"):e.stylize("[Object]","special"):(e.seen.push(r),c=S?function(e,t,r,n,i){for(var a=[],o=0,f=t.length;o<f;++o)D(t,String(o))?a.push(d(e,t,r,n,String(o),!0)):a.push("");return i.forEach((function(i){i.match(/^\d+$/)||a.push(d(e,t,r,n,i,!0))})),a}(e,r,n,f,o):o.map((function(t){return d(e,r,n,f,t,S)})),e.seen.pop(),function(e,t,r){if(e.reduce((function(e,t){return t.indexOf("\n")>=0&&0,e+t.replace(/\u001b\[\d\d?m/g,"").length+1}),0)>60)return r[0]+(""===t?"":t+"\n ")+" "+e.join(",\n  ")+" "+r[1];return r[0]+t+" "+e.join(", ")+" "+r[1]}(c,_,B)):B[0]+_+B[1]}function h(e){return"["+Error.prototype.toString.call(e)+"]"}function d(e,t,r,n,i,a){var o,f,s;if((s=Object.getOwnPropertyDescriptor(t,i)||{value:t[i]}).get?f=s.set?e.stylize("[Getter/Setter]","special"):e.stylize("[Getter]","special"):s.set&&(f=e.stylize("[Setter]","special")),D(n,i)||(o="["+i+"]"),f||(e.seen.indexOf(s.value)<0?(f=b(r)?u(e,s.value,null):u(e,s.value,r-1)).indexOf("\n")>-1&&(f=a?f.split("\n").map((function(e){return"  "+e})).join("\n").substr(2):"\n"+f.split("\n").map((function(e){return"   "+e})).join("\n")):f=e.stylize("[Circular]","special")),m(o)){if(a&&i.match(/^\d+$/))return f;(o=JSON.stringify(""+i)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(o=o.substr(1,o.length-2),o=e.stylize(o,"name")):(o=o.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),o=e.stylize(o,"string"))}return o+": "+f}function l(e){return Array.isArray(e)}function p(e){return"boolean"==typeof e}function b(e){return null===e}function y(e){return"number"==typeof e}function g(e){return"string"==typeof e}function m(e){return void 0===e}function v(e){return _(e)&&"[object RegExp]"===S(e)}function _(e){return"object"==typeof e&&null!==e}function w(e){return _(e)&&"[object Date]"===S(e)}function E(e){return _(e)&&("[object Error]"===S(e)||e instanceof Error)}function A(e){return"function"==typeof e}function S(e){return Object.prototype.toString.call(e)}function B(e){return e<10?"0"+e.toString(10):e.toString(10)}t.debuglog=function(r){if(m(a)&&(a=e.env.NODE_DEBUG||""),r=r.toUpperCase(),!o[r])if(new RegExp("\\b"+r+"\\b","i").test(a)){var n=e.pid;o[r]=function(){var e=t.format.apply(t,arguments);console.error("%s %d: %s",r,n,e)}}else o[r]=function(){};return o[r]},t.inspect=f,f.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},f.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"},t.isArray=l,t.isBoolean=p,t.isNull=b,t.isNullOrUndefined=function(e){return null==e},t.isNumber=y,t.isString=g,t.isSymbol=function(e){return"symbol"==typeof e},t.isUndefined=m,t.isRegExp=v,t.isObject=_,t.isDate=w,t.isError=E,t.isFunction=A,t.isPrimitive=function(e){return null===e||"boolean"==typeof e||"number"==typeof e||"string"==typeof e||"symbol"==typeof e||void 0===e},t.isBuffer=r(168);var M=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function C(){var e=new Date,t=[B(e.getHours()),B(e.getMinutes()),B(e.getSeconds())].join(":");return[e.getDate(),M[e.getMonth()],t].join(" ")}function D(e,t){return Object.prototype.hasOwnProperty.call(e,t)}t.log=function(){console.log("%s - %s",C(),t.format.apply(t,arguments))},t.inherits=r(169),t._extend=function(e,t){if(!t||!_(t))return e;for(var r=Object.keys(t),n=r.length;n--;)e[r[n]]=t[r[n]];return e};var k="undefined"!=typeof Symbol?Symbol("util.promisify.custom"):void 0;function F(e,t){if(!e){var r=new Error("Promise was rejected with a falsy value");r.reason=e,e=r}return t(e)}t.promisify=function(e){if("function"!=typeof e)throw new TypeError('The "original" argument must be of type Function');if(k&&e[k]){var t;if("function"!=typeof(t=e[k]))throw new TypeError('The "util.promisify.custom" argument must be of type Function');return Object.defineProperty(t,k,{value:t,enumerable:!1,writable:!1,configurable:!0}),t}function t(){for(var t,r,n=new Promise((function(e,n){t=e,r=n})),i=[],a=0;a<arguments.length;a++)i.push(arguments[a]);i.push((function(e,n){e?r(e):t(n)}));try{e.apply(this,i)}catch(e){r(e)}return n}return Object.setPrototypeOf(t,Object.getPrototypeOf(e)),k&&Object.defineProperty(t,k,{value:t,enumerable:!1,writable:!1,configurable:!0}),Object.defineProperties(t,n(e))},t.promisify.custom=k,t.callbackify=function(t){if("function"!=typeof t)throw new TypeError('The "original" argument must be of type Function');function r(){for(var r=[],n=0;n<arguments.length;n++)r.push(arguments[n]);var i=r.pop();if("function"!=typeof i)throw new TypeError("The last argument must be of type Function");var a=this,o=function(){return i.apply(a,arguments)};t.apply(this,r).then((function(t){e.nextTick(o,null,t)}),(function(t){e.nextTick(F,t,o)}))}return Object.setPrototypeOf(r,Object.getPrototypeOf(t)),Object.defineProperties(r,n(t)),r}}).call(this,r(7))},function(e,t){function r(e){return BigInt("0x"+e.replace(/\s/g,""))}e.exports={1024:{N_length_bits:1024,N:r("EEAF0AB9 ADB38DD6 9C33F80A FA8FC5E8 60726187 75FF3C0B 9EA2314C9C256576 D674DF74 96EA81D3 383B4813 D692C6E0 E0D5D8E2 50B98BE48E495C1D 6089DAD1 5DC7D7B4 6154D6B6 CE8EF4AD 69B15D49 82559B297BCF1885 C529F566 660E57EC 68EDBC3C 05726CC0 2FD4CBF4 976EAA9AFD5138FE 8376435B 9FC61D2F C0EB06E3"),g:r("02"),hash:"sha1"},1536:{N_length_bits:1536,N:r("9DEF3CAF B939277A B1F12A86 17A47BBB DBA51DF4 99AC4C80 BEEEA9614B19CC4D 5F4F5F55 6E27CBDE 51C6A94B E4607A29 1558903B A0D0F84380B655BB 9A22E8DC DF028A7C EC67F0D0 8134B1C8 B9798914 9B609E0BE3BAB63D 47548381 DBC5B1FC 764E3F4B 53DD9DA1 158BFD3E 2B9C8CF56EDF0195 39349627 DB2FD53D 24B7C486 65772E43 7D6C7F8C E442734AF7CCB7AE 837C264A E3A9BEB8 7F8A2FE9 B8B5292E 5A021FFF 5E91479E8CE7A28C 2442C6F3 15180F93 499A234D CF76E3FE D135F9BB"),g:r("02"),hash:"sha1"},2048:{N_length_bits:2048,N:r("AC6BDB41 324A9A9B F166DE5E 1389582F AF72B665 1987EE07 FC3192943DB56050 A37329CB B4A099ED 8193E075 7767A13D D52312AB 4B03310DCD7F48A9 DA04FD50 E8083969 EDB767B0 CF609517 9A163AB3 661A05FBD5FAAAE8 2918A996 2F0B93B8 55F97993 EC975EEA A80D740A DBF4FF747359D041 D5C33EA7 1D281E44 6B14773B CA97B43A 23FB8016 76BD207A436C6481 F1D2B907 8717461A 5B9D32E6 88F87748 544523B5 24B0D57D5EA77A27 75D2ECFA 032CFBDB F52FB378 61602790 04E57AE6 AF874E7303CE5329 9CCC041C 7BC308D8 2A5698F3 A8D0C382 71AE35F8 E9DBFBB694B5C803 D89F7AE4 35DE236D 525F5475 9B65E372 FCD68EF2 0FA7111F9E4AFF73"),g:r("02"),hash:"sha256"},3072:{N_length_bits:3072,N:r("FFFFFFFF FFFFFFFF C90FDAA2 2168C234 C4C6628B 80DC1CD1 29024E088A67CC74 020BBEA6 3B139B22 514A0879 8E3404DD EF9519B3 CD3A431B302B0A6D F25F1437 4FE1356D 6D51C245 E485B576 625E7EC6 F44C42E9A637ED6B 0BFF5CB6 F406B7ED EE386BFB 5A899FA5 AE9F2411 7C4B1FE649286651 ECE45B3D C2007CB8 A163BF05 98DA4836 1C55D39A 69163FA8FD24CF5F 83655D23 DCA3AD96 1C62F356 208552BB 9ED52907 7096966D670C354E 4ABC9804 F1746C08 CA18217C 32905E46 2E36CE3B E39E772C180E8603 9B2783A2 EC07A28F B5C55DF0 6F4C52C9 DE2BCBF6 955817183995497C EA956AE5 15D22618 98FA0510 15728E5A 8AAAC42D AD33170D04507A33 A85521AB DF1CBA64 ECFB8504 58DBEF0A 8AEA7157 5D060C7DB3970F85 A6E1E4C7 ABF5AE8C DB0933D7 1E8C94E0 4A25619D CEE3D2261AD2EE6B F12FFA06 D98A0864 D8760273 3EC86A64 521F2B18 177B200CBBE11757 7A615D6C 770988C0 BAD946E2 08E24FA0 74E5AB31 43DB5BFCE0FD108E 4B82D120 A93AD2CA FFFFFFFF FFFFFFFF"),g:r("05"),hash:"sha256"},4096:{N_length_bits:4096,N:r("FFFFFFFF FFFFFFFF C90FDAA2 2168C234 C4C6628B 80DC1CD1 29024E088A67CC74 020BBEA6 3B139B22 514A0879 8E3404DD EF9519B3 CD3A431B302B0A6D F25F1437 4FE1356D 6D51C245 E485B576 625E7EC6 F44C42E9A637ED6B 0BFF5CB6 F406B7ED EE386BFB 5A899FA5 AE9F2411 7C4B1FE649286651 ECE45B3D C2007CB8 A163BF05 98DA4836 1C55D39A 69163FA8FD24CF5F 83655D23 DCA3AD96 1C62F356 208552BB 9ED52907 7096966D670C354E 4ABC9804 F1746C08 CA18217C 32905E46 2E36CE3B E39E772C180E8603 9B2783A2 EC07A28F B5C55DF0 6F4C52C9 DE2BCBF6 955817183995497C EA956AE5 15D22618 98FA0510 15728E5A 8AAAC42D AD33170D04507A33 A85521AB DF1CBA64 ECFB8504 58DBEF0A 8AEA7157 5D060C7DB3970F85 A6E1E4C7 ABF5AE8C DB0933D7 1E8C94E0 4A25619D CEE3D2261AD2EE6B F12FFA06 D98A0864 D8760273 3EC86A64 521F2B18 177B200CBBE11757 7A615D6C 770988C0 BAD946E2 08E24FA0 74E5AB31 43DB5BFCE0FD108E 4B82D120 A9210801 1A723C12 A787E6D7 88719A10 BDBA5B2699C32718 6AF4E23C 1A946834 B6150BDA 2583E9CA 2AD44CE8 DBBBC2DB04DE8EF9 2E8EFC14 1FBECAA6 287C5947 4E6BC05D 99B2964F A090C3A2233BA186 515BE7ED 1F612970 CEE2D7AF B81BDD76 2170481C D0069127D5B05AA9 93B4EA98 8D8FDDC1 86FFB7DC 90A6C08F 4DF435C9 34063199FFFFFFFF FFFFFFFF"),g:r("05"),hash:"sha256"},6244:{N_length_bits:6244,N:r("FFFFFFFF FFFFFFFF C90FDAA2 2168C234 C4C6628B 80DC1CD1 29024E088A67CC74 020BBEA6 3B139B22 514A0879 8E3404DD EF9519B3 CD3A431B302B0A6D F25F1437 4FE1356D 6D51C245 E485B576 625E7EC6 F44C42E9A637ED6B 0BFF5CB6 F406B7ED EE386BFB 5A899FA5 AE9F2411 7C4B1FE649286651 ECE45B3D C2007CB8 A163BF05 98DA4836 1C55D39A 69163FA8FD24CF5F 83655D23 DCA3AD96 1C62F356 208552BB 9ED52907 7096966D670C354E 4ABC9804 F1746C08 CA18217C 32905E46 2E36CE3B E39E772C180E8603 9B2783A2 EC07A28F B5C55DF0 6F4C52C9 DE2BCBF6 955817183995497C EA956AE5 15D22618 98FA0510 15728E5A 8AAAC42D AD33170D04507A33 A85521AB DF1CBA64 ECFB8504 58DBEF0A 8AEA7157 5D060C7DB3970F85 A6E1E4C7 ABF5AE8C DB0933D7 1E8C94E0 4A25619D CEE3D2261AD2EE6B F12FFA06 D98A0864 D8760273 3EC86A64 521F2B18 177B200CBBE11757 7A615D6C 770988C0 BAD946E2 08E24FA0 74E5AB31 43DB5BFCE0FD108E 4B82D120 A9210801 1A723C12 A787E6D7 88719A10 BDBA5B2699C32718 6AF4E23C 1A946834 B6150BDA 2583E9CA 2AD44CE8 DBBBC2DB04DE8EF9 2E8EFC14 1FBECAA6 287C5947 4E6BC05D 99B2964F A090C3A2233BA186 515BE7ED 1F612970 CEE2D7AF B81BDD76 2170481C D0069127D5B05AA9 93B4EA98 8D8FDDC1 86FFB7DC 90A6C08F 4DF435C9 3402849236C3FAB4 D27C7026 C1D4DCB2 602646DE C9751E76 3DBA37BD F8FF9406AD9E530E E5DB382F 413001AE B06A53ED 9027D831 179727B0 865A8918DA3EDBEB CF9B14ED 44CE6CBA CED4BB1B DB7F1447 E6CC254B 332051512BD7AF42 6FB8F401 378CD2BF 5983CA01 C64B92EC F032EA15 D1721D03F482D7CE 6E74FEF6 D55E702F 46980C82 B5A84031 900B1C9E 59E7C97FBEC7E8F3 23A97A7E 36CC88BE 0F1D45B7 FF585AC5 4BD407B2 2B4154AACC8F6D7E BF48E1D8 14CC5ED2 0F8037E0 A79715EE F29BE328 06A1D58BB7C5DA76 F550AA3D 8A1FBFF0 EB19CCB1 A313D55C DA56C9EC 2EF29632387FE8D7 6E3C0468 043E8F66 3F4860EE 12BF2D5B 0B7474D6 E694F91E6DCC4024 FFFFFFFF FFFFFFFF"),g:r("05"),hash:"sha256"},8192:{N_length_bits:8192,N:rg:r("13"),hash:"sha256"}}},function(e,t,r){"use strict";(function(e){r.d(t,"a",(function(){return c}));var n=r(10),i=r.n(n),a=r(20),o=r.n(a),f=r(79),s=r.n(f);const c=Vue.component("Register",{template:"\n    <div id=registerApp>\n      <h2>Register</h2>\n      <div>{{ nameTextRegister }}</div>\n      <input v-model='name' autocomplete=\"off\" />\n      <div>{{ passTextRegister }}</div>\n      <input v-model='password' autocomplete=\"off\" />\n      <div>{{ emailTextRegister  }}</div>\n      <input v-model='email' autocomplete=\"off\" />\n      <button v-on:click='initRegister'>{{ buttonTextRegister }}</button>\n      <h2>Log in</h2>\n      <div>{{ nameTextLogin }}</div>\n      <input v-model='name' autocomplete=\"off\" />\n      <div>{{ passTextLogin }}</div>\n      <input v-model='password' autocomplete=\"off\" />\n      <button v-on:click='initLogin'>{{ buttonTextLogin }}</button>\n    </div>\n  ",data:function(){return{nameTextRegister:"Enter Name",passTextRegister:"Password",emailTextRegister:"Email",buttonTextRegister:"Register",nameTextLogin:"Enter Name",passTextLogin:"Password",buttonTextLogin:"Login",name:"",password:"",email:"",c:null}},methods:{initRegister:async function(){const t=i.a.params[2048],r=await i.a.genKey(),n=e.from(s()()),a=e.from(this.$data.password),o=e.from(this.$data.name),f=i.a.computeVerifier(t,n,o,a);this.c=new i.a.Client(t,n,o,a,r);const c={name:this.$data.name,password:this.$data.password,identity:o,verifier:f,salt:n,requestName:"auth_step_1"};fetch("/",{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify(c)})},async initLogin(){const t=e.from(this.$data.name),r=i.a.params[2048],n={identity:t,requestName:"auth_step_0"};let a=await fetch("/",{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify(n)}),f=await a.text();const s=o.a.parse(f),c=await i.a.genKey(),u=e.from(this.$data.password);this.c=new i.a.Client(r,s,t,u,c),this.getAuthData()},async getAuthData(){let e=await fetch("/",{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({requestName:"auth_step_2"})}),t=await e.text();if(this.c){const e=o.a.parse(t);this.c.setB(e.buf);let r=this.c.computeM1(),n=await fetch("/",{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({requestName:"auth_step_3",m1:r,sprA:this.c.computeA()})}),i=await n.text();const a=o.a.parse(i);let f=this.c.computeK();console.log(f),console.log(a.buf)}}}})}).call(this,r(3).Buffer)},function(e,t,r){(function(t){var r=t&&t.pid?t.pid.toString(36):"";function n(){var e=Date.now(),t=n.last||e;return n.last=e>t?e:t+1}e.exports=e.exports.default=function(e){return(e||"")+""+r+n().toString(36)},e.exports.process=function(e){return(e||"")+r+n().toString(36)},e.exports.time=function(e){return(e||"")+n().toString(36)}}).call(this,r(7))},function(e,t,r){"use strict";t.byteLength=function(e){var t=c(e),r=t[0],n=t[1];return 3*(r+n)/4-n},t.toByteArray=function(e){var t,r,n=c(e),o=n[0],f=n[1],s=new a(function(e,t,r){return 3*(t+r)/4-r}(0,o,f)),u=0,h=f>0?o-4:o;for(r=0;r<h;r+=4)t=i[e.charCodeAt(r)]<<18|i[e.charCodeAt(r+1)]<<12|i[e.charCodeAt(r+2)]<<6|i[e.charCodeAt(r+3)],s[u++]=t>>16&255,s[u++]=t>>8&255,s[u++]=255&t;2===f&&(t=i[e.charCodeAt(r)]<<2|i[e.charCodeAt(r+1)]>>4,s[u++]=255&t);1===f&&(t=i[e.charCodeAt(r)]<<10|i[e.charCodeAt(r+1)]<<4|i[e.charCodeAt(r+2)]>>2,s[u++]=t>>8&255,s[u++]=255&t);return s},t.fromByteArray=function(e){for(var t,r=e.length,i=r%3,a=[],o=0,f=r-i;o<f;o+=16383)a.push(u(e,o,o+16383>f?f:o+16383));1===i?(t=e[r-1],a.push(n[t>>2]+n[t<<4&63]+"==")):2===i&&(t=(e[r-2]<<8)+e[r-1],a.push(n[t>>10]+n[t>>4&63]+n[t<<2&63]+"="));return a.join("")};for(var n=[],i=[],a="undefined"!=typeof Uint8Array?Uint8Array:Array,o="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",f=0,s=o.length;f<s;++f)n[f]=o[f],i[o.charCodeAt(f)]=f;function c(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var r=e.indexOf("=");return-1===r&&(r=t),[r,r===t?0:4-r%4]}function u(e,t,r){for(var i,a,o=[],f=t;f<r;f+=3)i=(e[f]<<16&16711680)+(e[f+1]<<8&65280)+(255&e[f+2]),o.push(n[(a=i)>>18&63]+n[a>>12&63]+n[a>>6&63]+n[63&a]);return o.join("")}i["-".charCodeAt(0)]=62,i["_".charCodeAt(0)]=63},function(e,t){t.read=function(e,t,r,n,i){var a,o,f=8*i-n-1,s=(1<<f)-1,c=s>>1,u=-7,h=r?i-1:0,d=r?-1:1,l=e[t+h];for(h+=d,a=l&(1<<-u)-1,l>>=-u,u+=f;u>0;a=256*a+e[t+h],h+=d,u-=8);for(o=a&(1<<-u)-1,a>>=-u,u+=n;u>0;o=256*o+e[t+h],h+=d,u-=8);if(0===a)a=1-c;else{if(a===s)return o?NaN:1/0*(l?-1:1);o+=Math.pow(2,n),a-=c}return(l?-1:1)*o*Math.pow(2,a-n)},t.write=function(e,t,r,n,i,a){var o,f,s,c=8*a-i-1,u=(1<<c)-1,h=u>>1,d=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,l=n?0:a-1,p=n?1:-1,b=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(f=isNaN(t)?1:0,o=u):(o=Math.floor(Math.log(t)/Math.LN2),t*(s=Math.pow(2,-o))<1&&(o--,s*=2),(t+=o+h>=1?d/s:d*Math.pow(2,1-h))*s>=2&&(o++,s/=2),o+h>=u?(f=0,o=u):o+h>=1?(f=(t*s-1)*Math.pow(2,i),o+=h):(f=t*Math.pow(2,h-1)*Math.pow(2,i),o=0));i>=8;e[r+l]=255&f,l+=p,f/=256,i-=8);for(o=o<<i|f,c+=i;c>0;e[r+l]=255&o,l+=p,o/=256,c-=8);e[r+l-p]|=128*b}},function(e,t){var r={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==r.call(e)}},function(e,t,r){(function(t){const n=r(84),i=r(166);function a(e,t){if(!e)throw new Error(t||"assertion")}function o(e){return u(e),BigInt("0x"+e.toString("hex"))}function f(e,t,r){if(1n===r)return 0;let n=1n;for(e=function(e,t){let r=e%t;return r<0n&&(r+=t),r}(e,r);t>0;)t%2n===1n&&(n=n*e%r),t>>=1n,e=e**2n%r;return n}function s(e){d(e);let r=e.toString(16);return r.length%2&&(r="0"+r),t.from(r,"hex")}function c(e,r){return d(e),function(e,r){u(e,"n");let n=r-e.length;a(n>-1,"Negative padding.  Very uncomfortable.");let o=t.alloc(r);return o.fill(0,0,n),e.copy(o,n),i.equal(o.length,r),o}(s(e),r.N_length_bits/8)}function u(e,r){r=r||"arg",a(t.isBuffer(e),r+" must be a buffer")}function h(e,r,n){n=n||"arg",a(t.isBuffer(e),"Type error: "+n+" must be a buffer"),e.length!=r.N_length_bits/8&&a(!1,`${n} was ${e.length}, expected ${r.N_length_bits/8}`)}function d(e){i("bigint"==typeof e)}function l(e,r,i,a){u(r,"salt (salt)"),u(i,"identity (I)"),u(a,"password (P)");let f=n.createHash(e.hash).update(t.concat([i,t.from(":"),a])).digest();return o(n.createHash(e.hash).update(r).update(f).digest())}function p(e){return o(n.createHash(e.hash).update(c(e.N,e)).update(c(e.g,e)).digest())}let b=r(76).promisify(n.randomBytes);function y(e,t,r){return h(t,e,"A"),h(r,e,"B"),o(n.createHash(e.hash).update(t).update(r).digest())}function g(e,t){return h(t,e,"S"),n.createHash(e.hash).update(t).digest()}function m(e,t,r,i){return h(t,e,"A"),h(r,e,"B"),h(i,e,"S"),n.createHash(e.hash).update(t).update(r).update(i).digest()}function v(e,t,r,i){return h(t,e,"A"),u(r,"M"),u(i,"K"),n.createHash(e.hash).update(t).update(r).update(i).digest()}function _(e,t){let r=e.length-t.length;if(r)return!1;for(let n=0;n<e.length;n++)r|=e[n]^t[n];return 0===r}e.exports={params:r(77),genKey:async function(e=32){return await b(e)},computeVerifier:function(e,t,r,n){return u(t,"salt (salt)"),u(r,"identity (I)"),u(n,"password (P)"),c(f(e.g,l(e,t,r,n),e.N),e)},Client:class{constructor(e,t,r,n,i){u(t,"salt (salt)"),u(r,"identity (I)"),u(n,"password (P)"),u(i,"secret1"),this._private={params:e,k_num:p(e),x_num:l(e,t,r,n),a_num:o(i)},this._private.A_buf=function(e,t){return d(t),c(f(e.g,t,e.N),e)}(e,this._private.a_num)}computeA(){return this._private.A_buf}setB(e){let t=this._private,r=o(e),n=y(t.params,t.A_buf,e),i=function(e,t,r,n,i,a){d(t),d(r),d(n),d(i),d(a);let o=e.g,s=e.N;if(i<=0||s<=i)throw new Error("invalid server-supplied 'B', must be 1..N-1");return c(f(i-t*f(o,r,s),n+a*r,s)%s,e)}(t.params,t.k_num,t.x_num,t.a_num,r,n);t.K_buf=g(t.params,i),t.M1_buf=m(t.params,t.A_buf,e,i),t.M2_buf=v(t.params,t.A_buf,t.M1_buf,t.K_buf),t.u_num=n,t.S_buf=i}computeM1(){if(void 0===this._private.M1_buf)throw new Error("incomplete protocol");return this._private.M1_buf}checkM2(e){if(!_(this._private.M2_buf,e))throw new Error("server is not authentic")}computeK(){if(void 0===this._private.K_buf)throw new Error("incomplete protocol");return this._private.K_buf}},Server:class{constructor(e,t,r){u(t,"verifier"),u(r,"secret2"),this._private={params:e,k_num:p(e),b_num:o(r),v_num:o(t)},this._private.B_buf=function(e,t,r,n){d(r),d(t),d(n);let i=e.N;return c((t*r+f(e.g,n,i))%i,e)}(e,this._private.k_num,this._private.v_num,this._private.b_num)}computeB(){return this._private.B_buf}setA(e){let t=this._private,r=o(e),n=y(t.params,e,t.B_buf),i=function(e,t,r,n,i){d(t),d(r),d(n),d(i);let a=e.N;if(r<=0n||a<=r)throw new Error("invalid client-supplied 'A', must be 1..N-1");return c(f(r*f(t,i,a),n,a)%a,e)}(t.params,t.v_num,r,t.b_num,n);t.K_buf=g(t.params,i),t.M1_buf=m(t.params,e,t.B_buf,i),t.M2_buf=v(t.params,e,t.M1_buf,t.K_buf),t.u_num=n,t.S_buf=i}checkM1(e){if(void 0===this._private.M1_buf)throw new Error("incomplete protocol");if(!_(this._private.M1_buf,e))throw new Error("client did not use the same password");return this._private.M2_buf}computeK(){if(void 0===this._private.K_buf)throw new Error("incomplete protocol");return this._private.K_buf}},bigIntToBuffer:s,bufferToBigInt:o}}).call(this,r(3).Buffer)},function(e,t,r){"use strict";t.randomBytes=t.rng=t.pseudoRandomBytes=t.prng=r(12),t.createHash=t.Hash=r(14),t.createHmac=t.Hmac=r(49);var n=r(102),i=Object.keys(n),a=["sha1","sha224","sha256","sha384","sha512","md5","rmd160"].concat(i);t.getHashes=function(){return a};var o=r(52);t.pbkdf2=o.pbkdf2,t.pbkdf2Sync=o.pbkdf2Sync;var f=r(104);t.Cipher=f.Cipher,t.createCipher=f.createCipher,t.Cipheriv=f.Cipheriv,t.createCipheriv=f.createCipheriv,t.Decipher=f.Decipher,t.createDecipher=f.createDecipher,t.Decipheriv=f.Decipheriv,t.createDecipheriv=f.createDecipheriv,t.getCiphers=f.getCiphers,t.listCiphers=f.listCiphers;var s=r(121);t.DiffieHellmanGroup=s.DiffieHellmanGroup,t.createDiffieHellmanGroup=s.createDiffieHellmanGroup,t.getDiffieHellman=s.getDiffieHellman,t.createDiffieHellman=s.createDiffieHellman,t.DiffieHellman=s.DiffieHellman;var c=r(127);t.createSign=c.createSign,t.Sign=c.Sign,t.createVerify=c.createVerify,t.Verify=c.Verify,t.createECDH=r(161);var u=r(162);t.publicEncrypt=u.publicEncrypt,t.privateEncrypt=u.privateEncrypt,t.publicDecrypt=u.publicDecrypt,t.privateDecrypt=u.privateDecrypt;var h=r(165);t.randomFill=h.randomFill,t.randomFillSync=h.randomFillSync,t.createCredentials=function(){throw new Error(["sorry, createCredentials is not implemented yet","we accept pull requests","https://github.com/crypto-browserify/crypto-browserify"].join("\n"))},t.constants={DH_CHECK_P_NOT_SAFE_PRIME:2,DH_CHECK_P_NOT_PRIME:1,DH_UNABLE_TO_CHECK_GENERATOR:4,DH_NOT_SUITABLE_GENERATOR:8,NPN_ENABLED:1,ALPN_ENABLED:1,RSA_PKCS1_PADDING:1,RSA_SSLV23_PADDING:2,RSA_NO_PADDING:3,RSA_PKCS1_OAEP_PADDING:4,RSA_X931_PADDING:5,RSA_PKCS1_PSS_PADDING:6,POINT_CONVERSION_COMPRESSED:2,POINT_CONVERSION_UNCOMPRESSED:4,POINT_CONVERSION_HYBRID:6}},function(e,t){var r={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==r.call(e)}},function(e,t){},function(e,t,r){"use strict";var n=r(1).Buffer,i=r(88);e.exports=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.head=null,this.tail=null,this.length=0}return e.prototype.push=function(e){var t={data:e,next:null};this.length>0?this.tail.next=t:this.head=t,this.tail=t,++this.length},e.prototype.unshift=function(e){var t={data:e,next:this.head};0===this.length&&(this.tail=t),this.head=t,++this.length},e.prototype.shift=function(){if(0!==this.length){var e=this.head.data;return 1===this.length?this.head=this.tail=null:this.head=this.head.next,--this.length,e}},e.prototype.clear=function(){this.head=this.tail=null,this.length=0},e.prototype.join=function(e){if(0===this.length)return"";for(var t=this.head,r=""+t.data;t=t.next;)r+=e+t.data;return r},e.prototype.concat=function(e){if(0===this.length)return n.alloc(0);if(1===this.length)return this.head.data;for(var t,r,i,a=n.allocUnsafe(e>>>0),o=this.head,f=0;o;)t=o.data,r=a,i=f,t.copy(r,i),f+=o.data.length,o=o.next;return a},e}(),i&&i.inspect&&i.inspect.custom&&(e.exports.prototype[i.inspect.custom]=function(){var e=i.inspect({length:this.length});return this.constructor.name+" "+e})},function(e,t){},function(e,t,r){(function(e){var n=void 0!==e&&e||"undefined"!=typeof self&&self||window,i=Function.prototype.apply;function a(e,t){this._id=e,this._clearFn=t}t.setTimeout=function(){return new a(i.call(setTimeout,n,arguments),clearTimeout)},t.setInterval=function(){return new a(i.call(setInterval,n,arguments),clearInterval)},t.clearTimeout=t.clearInterval=function(e){e&&e.close()},a.prototype.unref=a.prototype.ref=function(){},a.prototype.close=function(){this._clearFn.call(n,this._id)},t.enroll=function(e,t){clearTimeout(e._idleTimeoutId),e._idleTimeout=t},t.unenroll=function(e){clearTimeout(e._idleTimeoutId),e._idleTimeout=-1},t._unrefActive=t.active=function(e){clearTimeout(e._idleTimeoutId);var t=e._idleTimeout;t>=0&&(e._idleTimeoutId=setTimeout((function(){e._onTimeout&&e._onTimeout()}),t))},r(90),t.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==e&&e.setImmediate||this&&this.setImmediate,t.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==e&&e.clearImmediate||this&&this.clearImmediate}).call(this,r(6))},function(e,t,r){(function(e,t){!function(e,r){"use strict";if(!e.setImmediate){var n,i,a,o,f,s=1,c={},u=!1,h=e.document,d=Object.getPrototypeOf&&Object.getPrototypeOf(e);d=d&&d.setTimeout?d:e,"[object process]"==={}.toString.call(e.process)?n=function(e){t.nextTick((function(){p(e)}))}:!function(){if(e.postMessage&&!e.importScripts){var t=!0,r=e.onmessage;return e.onmessage=function(){t=!1},e.postMessage("","*"),e.onmessage=r,t}}()?e.MessageChannel?((a=new MessageChannel).port1.onmessage=function(e){p(e.data)},n=function(e){a.port2.postMessage(e)}):h&&"onreadystatechange"in h.createElement("script")?(i=h.documentElement,n=function(e){var t=h.createElement("script");t.onreadystatechange=function(){p(e),t.onreadystatechange=null,i.removeChild(t),t=null},i.appendChild(t)}):n=function(e){setTimeout(p,0,e)}:(o="setImmediate$"+Math.random()+"$",f=function(t){t.source===e&&"string"==typeof t.data&&0===t.data.indexOf(o)&&p(+t.data.slice(o.length))},e.addEventListener?e.addEventListener("message",f,!1):e.attachEvent("onmessage",f),n=function(t){e.postMessage(o+t,"*")}),d.setImmediate=function(e){"function"!=typeof e&&(e=new Function(""+e));for(var t=new Array(arguments.length-1),r=0;r<t.length;r++)t[r]=arguments[r+1];var i={callback:e,args:t};return c[s]=i,n(s),s++},d.clearImmediate=l}function l(e){delete c[e]}function p(e){if(u)setTimeout(p,0,e);else{var t=c[e];if(t){u=!0;try{!function(e){var t=e.callback,n=e.args;switch(n.length){case 0:t();break;case 1:t(n[0]);break;case 2:t(n[0],n[1]);break;case 3:t(n[0],n[1],n[2]);break;default:t.apply(r,n)}}(t)}finally{l(e),u=!1}}}}}("undefined"==typeof self?void 0===e?this:e:self)}).call(this,r(6),r(7))},function(e,t,r){(function(t){function r(e){try{if(!t.localStorage)return!1}catch(e){return!1}var r=t.localStorage[e];return null!=r&&"true"===String(r).toLowerCase()}e.exports=function(e,t){if(r("noDeprecation"))return e;var n=!1;return function(){if(!n){if(r("throwDeprecation"))throw new Error(t);r("traceDeprecation")?console.trace(t):console.warn(t),n=!0}return e.apply(this,arguments)}}}).call(this,r(6))},function(e,t,r){"use strict";e.exports=a;var n=r(46),i=r(15);function a(e){if(!(this instanceof a))return new a(e);n.call(this,e)}i.inherits=r(0),i.inherits(a,n),a.prototype._transform=function(e,t,r){r(null,e)}},function(e,t,r){e.exports=r(30)},function(e,t,r){e.exports=r(11)},function(e,t,r){e.exports=r(29).Transform},function(e,t,r){e.exports=r(29).PassThrough},function(e,t,r){var n=r(0),i=r(13),a=r(1).Buffer,o=[1518500249,1859775393,-1894007588,-899497514],f=new Array(80);function s(){this.init(),this._w=f,i.call(this,64,56)}function c(e){return e<<30|e>>>2}function u(e,t,r,n){return 0===e?t&r|~t&n:2===e?t&r|t&n|r&n:t^r^n}n(s,i),s.prototype.init=function(){return this._a=1732584193,this._b=4023233417,this._c=2562383102,this._d=271733878,this._e=3285377520,this},s.prototype._update=function(e){for(var t,r=this._w,n=0|this._a,i=0|this._b,a=0|this._c,f=0|this._d,s=0|this._e,h=0;h<16;++h)r[h]=e.readInt32BE(4*h);for(;h<80;++h)r[h]=r[h-3]^r[h-8]^r[h-14]^r[h-16];for(var d=0;d<80;++d){var l=~~(d/20),p=0|((t=n)<<5|t>>>27)+u(l,i,a,f)+s+r[d]+o[l];s=f,f=a,a=c(i),i=n,n=p}this._a=n+this._a|0,this._b=i+this._b|0,this._c=a+this._c|0,this._d=f+this._d|0,this._e=s+this._e|0},s.prototype._hash=function(){var e=a.allocUnsafe(20);return e.writeInt32BE(0|this._a,0),e.writeInt32BE(0|this._b,4),e.writeInt32BE(0|this._c,8),e.writeInt32BE(0|this._d,12),e.writeInt32BE(0|this._e,16),e},e.exports=s},function(e,t,r){var n=r(0),i=r(13),a=r(1).Buffer,o=[1518500249,1859775393,-1894007588,-899497514],f=new Array(80);function s(){this.init(),this._w=f,i.call(this,64,56)}function c(e){return e<<5|e>>>27}function u(e){return e<<30|e>>>2}function h(e,t,r,n){return 0===e?t&r|~t&n:2===e?t&r|t&n|r&n:t^r^n}n(s,i),s.prototype.init=function(){return this._a=1732584193,this._b=4023233417,this._c=2562383102,this._d=271733878,this._e=3285377520,this},s.prototype._update=function(e){for(var t,r=this._w,n=0|this._a,i=0|this._b,a=0|this._c,f=0|this._d,s=0|this._e,d=0;d<16;++d)r[d]=e.readInt32BE(4*d);for(;d<80;++d)r[d]=(t=r[d-3]^r[d-8]^r[d-14]^r[d-16])<<1|t>>>31;for(var l=0;l<80;++l){var p=~~(l/20),b=c(n)+h(p,i,a,f)+s+r[l]+o[p]|0;s=f,f=a,a=u(i),i=n,n=b}this._a=n+this._a|0,this._b=i+this._b|0,this._c=a+this._c|0,this._d=f+this._d|0,this._e=s+this._e|0},s.prototype._hash=function(){var e=a.allocUnsafe(20);return e.writeInt32BE(0|this._a,0),e.writeInt32BE(0|this._b,4),e.writeInt32BE(0|this._c,8),e.writeInt32BE(0|this._d,12),e.writeInt32BE(0|this._e,16),e},e.exports=s},function(e,t,r){var n=r(0),i=r(47),a=r(13),o=r(1).Buffer,f=new Array(64);function s(){this.init(),this._w=f,a.call(this,64,56)}n(s,i),s.prototype.init=function(){return this._a=3238371032,this._b=914150663,this._c=812702999,this._d=4144912697,this._e=4290775857,this._f=1750603025,this._g=1694076839,this._h=3204075428,this},s.prototype._hash=function(){var e=o.allocUnsafe(28);return e.writeInt32BE(this._a,0),e.writeInt32BE(this._b,4),e.writeInt32BE(this._c,8),e.writeInt32BE(this._d,12),e.writeInt32BE(this._e,16),e.writeInt32BE(this._f,20),e.writeInt32BE(this._g,24),e},e.exports=s},function(e,t,r){var n=r(0),i=r(48),a=r(13),o=r(1).Buffer,f=new Array(160);function s(){this.init(),this._w=f,a.call(this,128,112)}n(s,i),s.prototype.init=function(){return this._ah=3418070365,this._bh=1654270250,this._ch=2438529370,this._dh=355462360,this._eh=1731405415,this._fh=2394180231,this._gh=3675008525,this._hh=1203062813,this._al=3238371032,this._bl=914150663,this._cl=812702999,this._dl=4144912697,this._el=4290775857,this._fl=1750603025,this._gl=1694076839,this._hl=3204075428,this},s.prototype._hash=function(){var e=o.allocUnsafe(48);function t(t,r,n){e.writeInt32BE(t,n),e.writeInt32BE(r,n+4)}return t(this._ah,this._al,0),t(this._bh,this._bl,8),t(this._ch,this._cl,16),t(this._dh,this._dl,24),t(this._eh,this._el,32),t(this._fh,this._fl,40),e},e.exports=s},function(e,t,r){"use strict";var n=r(0),i=r(1).Buffer,a=r(9),o=i.alloc(128),f=64;function s(e,t){a.call(this,"digest"),"string"==typeof t&&(t=i.from(t)),this._alg=e,this._key=t,t.length>f?t=e(t):t.length<f&&(t=i.concat([t,o],f));for(var r=this._ipad=i.allocUnsafe(f),n=this._opad=i.allocUnsafe(f),s=0;s<f;s++)r[s]=54^t[s],n[s]=92^t[s];this._hash=[r]}n(s,a),s.prototype._update=function(e){this._hash.push(e)},s.prototype._final=function(){var e=this._alg(i.concat(this._hash));return this._alg(i.concat([this._opad,e]))},e.exports=s},function(e,t,r){e.exports=r(51)},function(e,t,r){(function(t,n){var i,a=r(53),o=r(54),f=r(55),s=r(1).Buffer,c=t.crypto&&t.crypto.subtle,u={sha:"SHA-1","sha-1":"SHA-1",sha1:"SHA-1",sha256:"SHA-256","sha-256":"SHA-256",sha384:"SHA-384","sha-384":"SHA-384","sha-512":"SHA-512",sha512:"SHA-512"},h=[];function d(e,t,r,n,i){return c.importKey("raw",e,{name:"PBKDF2"},!1,["deriveBits"]).then((function(e){return c.deriveBits({name:"PBKDF2",salt:t,iterations:r,hash:{name:i}},e,n<<3)})).then((function(e){return s.from(e)}))}e.exports=function(e,r,l,p,b,y){"function"==typeof b&&(y=b,b=void 0);var g=u[(b=b||"sha1").toLowerCase()];if(!g||"function"!=typeof t.Promise)return n.nextTick((function(){var t;try{t=f(e,r,l,p,b)}catch(e){return y(e)}y(null,t)}));if(a(e,r,l,p),"function"!=typeof y)throw new Error("No callback provided to pbkdf2");s.isBuffer(e)||(e=s.from(e,o)),s.isBuffer(r)||(r=s.from(r,o)),function(e,t){e.then((function(e){n.nextTick((function(){t(null,e)}))}),(function(e){n.nextTick((function(){t(e)}))}))}(function(e){if(t.process&&!t.process.browser)return Promise.resolve(!1);if(!c||!c.importKey||!c.deriveBits)return Promise.resolve(!1);if(void 0!==h[e])return h[e];var r=d(i=i||s.alloc(8),i,10,128,e).then((function(){return!0})).catch((function(){return!1}));return h[e]=r,r}(g).then((function(t){return t?d(e,r,l,p,g):f(e,r,l,p,b)})),y)}}).call(this,r(6),r(7))},function(e,t,r){var n=r(105),i=r(35),a=r(36),o=r(120),f=r(23);function s(e,t,r){if(e=e.toLowerCase(),a[e])return i.createCipheriv(e,t,r);if(o[e])return new n({key:t,iv:r,mode:e});throw new TypeError("invalid suite type")}function c(e,t,r){if(e=e.toLowerCase(),a[e])return i.createDecipheriv(e,t,r);if(o[e])return new n({key:t,iv:r,mode:e,decrypt:!0});throw new TypeError("invalid suite type")}t.createCipher=t.Cipher=function(e,t){var r,n;if(e=e.toLowerCase(),a[e])r=a[e].key,n=a[e].iv;else{if(!o[e])throw new TypeError("invalid suite type");r=8*o[e].key,n=o[e].iv}var i=f(t,!1,r,n);return s(e,i.key,i.iv)},t.createCipheriv=t.Cipheriv=s,t.createDecipher=t.Decipher=function(e,t){var r,n;if(e=e.toLowerCase(),a[e])r=a[e].key,n=a[e].iv;else{if(!o[e])throw new TypeError("invalid suite type");r=8*o[e].key,n=o[e].iv}var i=f(t,!1,r,n);return c(e,i.key,i.iv)},t.createDecipheriv=t.Decipheriv=c,t.listCiphers=t.getCiphers=function(){return Object.keys(o).concat(i.getCiphers())}},function(e,t,r){var n=r(9),i=r(34),a=r(0),o=r(1).Buffer,f={"des-ede3-cbc":i.CBC.instantiate(i.EDE),"des-ede3":i.EDE,"des-ede-cbc":i.CBC.instantiate(i.EDE),"des-ede":i.EDE,"des-cbc":i.CBC.instantiate(i.DES),"des-ecb":i.DES};function s(e){n.call(this);var t,r=e.mode.toLowerCase(),i=f[r];t=e.decrypt?"decrypt":"encrypt";var a=e.key;o.isBuffer(a)||(a=o.from(a)),"des-ede"!==r&&"des-ede-cbc"!==r||(a=o.concat([a,a.slice(0,8)]));var s=e.iv;o.isBuffer(s)||(s=o.from(s)),this._des=i.create({key:a,iv:s,type:t})}f.des=f["des-cbc"],f.des3=f["des-ede3-cbc"],e.exports=s,a(s,n),s.prototype._update=function(e){return o.from(this._des.update(e))},s.prototype._final=function(){return o.from(this._des.final())}},function(e,t,r){"use strict";t.readUInt32BE=function(e,t){return(e[0+t]<<24|e[1+t]<<16|e[2+t]<<8|e[3+t])>>>0},t.writeUInt32BE=function(e,t,r){e[0+r]=t>>>24,e[1+r]=t>>>16&255,e[2+r]=t>>>8&255,e[3+r]=255&t},t.ip=function(e,t,r,n){for(var i=0,a=0,o=6;o>=0;o-=2){for(var f=0;f<=24;f+=8)i<<=1,i|=t>>>f+o&1;for(f=0;f<=24;f+=8)i<<=1,i|=e>>>f+o&1}for(o=6;o>=0;o-=2){for(f=1;f<=25;f+=8)a<<=1,a|=t>>>f+o&1;for(f=1;f<=25;f+=8)a<<=1,a|=e>>>f+o&1}r[n+0]=i>>>0,r[n+1]=a>>>0},t.rip=function(e,t,r,n){for(var i=0,a=0,o=0;o<4;o++)for(var f=24;f>=0;f-=8)i<<=1,i|=t>>>f+o&1,i<<=1,i|=e>>>f+o&1;for(o=4;o<8;o++)for(f=24;f>=0;f-=8)a<<=1,a|=t>>>f+o&1,a<<=1,a|=e>>>f+o&1;r[n+0]=i>>>0,r[n+1]=a>>>0},t.pc1=function(e,t,r,n){for(var i=0,a=0,o=7;o>=5;o--){for(var f=0;f<=24;f+=8)i<<=1,i|=t>>f+o&1;for(f=0;f<=24;f+=8)i<<=1,i|=e>>f+o&1}for(f=0;f<=24;f+=8)i<<=1,i|=t>>f+o&1;for(o=1;o<=3;o++){for(f=0;f<=24;f+=8)a<<=1,a|=t>>f+o&1;for(f=0;f<=24;f+=8)a<<=1,a|=e>>f+o&1}for(f=0;f<=24;f+=8)a<<=1,a|=e>>f+o&1;r[n+0]=i>>>0,r[n+1]=a>>>0},t.r28shl=function(e,t){return e<<t&268435455|e>>>28-t};var n=[14,11,17,4,27,23,25,0,13,22,7,18,5,9,16,24,2,20,12,21,1,8,15,26,15,4,25,19,9,1,26,16,5,11,23,8,12,7,17,0,22,3,10,14,6,20,27,24];t.pc2=function(e,t,r,i){for(var a=0,o=0,f=n.length>>>1,s=0;s<f;s++)a<<=1,a|=e>>>n[s]&1;for(s=f;s<n.length;s++)o<<=1,o|=t>>>n[s]&1;r[i+0]=a>>>0,r[i+1]=o>>>0},t.expand=function(e,t,r){var n=0,i=0;n=(1&e)<<5|e>>>27;for(var a=23;a>=15;a-=4)n<<=6,n|=e>>>a&63;for(a=11;a>=3;a-=4)i|=e>>>a&63,i<<=6;i|=(31&e)<<1|e>>>31,t[r+0]=n>>>0,t[r+1]=i>>>0};var i=[14,0,4,15,13,7,1,4,2,14,15,2,11,13,8,1,3,10,10,6,6,12,12,11,5,9,9,5,0,3,7,8,4,15,1,12,14,8,8,2,13,4,6,9,2,1,11,7,15,5,12,11,9,3,7,14,3,10,10,0,5,6,0,13,15,3,1,13,8,4,14,7,6,15,11,2,3,8,4,14,9,12,7,0,2,1,13,10,12,6,0,9,5,11,10,5,0,13,14,8,7,10,11,1,10,3,4,15,13,4,1,2,5,11,8,6,12,7,6,12,9,0,3,5,2,14,15,9,10,13,0,7,9,0,14,9,6,3,3,4,15,6,5,10,1,2,13,8,12,5,7,14,11,12,4,11,2,15,8,1,13,1,6,10,4,13,9,0,8,6,15,9,3,8,0,7,11,4,1,15,2,14,12,3,5,11,10,5,14,2,7,12,7,13,13,8,14,11,3,5,0,6,6,15,9,0,10,3,1,4,2,7,8,2,5,12,11,1,12,10,4,14,15,9,10,3,6,15,9,0,0,6,12,10,11,1,7,13,13,8,15,9,1,4,3,5,14,11,5,12,2,7,8,2,4,14,2,14,12,11,4,2,1,12,7,4,10,7,11,13,6,1,8,5,5,0,3,15,15,10,13,3,0,9,14,8,9,6,4,11,2,8,1,12,11,7,10,1,13,14,7,2,8,13,15,6,9,15,12,0,5,9,6,10,3,4,0,5,14,3,12,10,1,15,10,4,15,2,9,7,2,12,6,9,8,5,0,6,13,1,3,13,4,14,14,0,7,11,5,3,11,8,9,4,14,3,15,2,5,12,2,9,8,5,12,15,3,10,7,11,0,14,4,1,10,7,1,6,13,0,11,8,6,13,4,13,11,0,2,11,14,7,15,4,0,9,8,1,13,10,3,14,12,3,9,5,7,12,5,2,10,15,6,8,1,6,1,6,4,11,11,13,13,8,12,1,3,4,7,10,14,7,10,9,15,5,6,0,8,15,0,14,5,2,9,3,2,12,13,1,2,15,8,13,4,8,6,10,15,3,11,7,1,4,10,12,9,5,3,6,14,11,5,0,0,14,12,9,7,2,7,2,11,1,4,14,1,7,9,4,12,10,14,8,2,13,0,15,6,12,10,9,13,0,15,3,3,5,5,6,8,11];t.substitute=function(e,t){for(var r=0,n=0;n<4;n++){r<<=4,r|=i[64*n+(e>>>18-6*n&63)]}for(n=0;n<4;n++){r<<=4,r|=i[256+64*n+(t>>>18-6*n&63)]}return r>>>0};var a=[16,25,12,11,3,20,4,15,31,17,9,6,27,14,1,22,30,24,8,18,0,5,29,23,13,19,2,26,10,21,28,7];t.permute=function(e){for(var t=0,r=0;r<a.length;r++)t<<=1,t|=e>>>a[r]&1;return t>>>0},t.padSplit=function(e,t,r){for(var n=e.toString(2);n.length<t;)n="0"+n;for(var i=[],a=0;a<t;a+=r)i.push(n.slice(a,a+r));return i.join(" ")}},function(e,t,r){"use strict";var n=r(4);function i(e){this.options=e,this.type=this.options.type,this.blockSize=8,this._init(),this.buffer=new Array(this.blockSize),this.bufferOff=0}e.exports=i,i.prototype._init=function(){},i.prototype.update=function(e){return 0===e.length?[]:"decrypt"===this.type?this._updateDecrypt(e):this._updateEncrypt(e)},i.prototype._buffer=function(e,t){for(var r=Math.min(this.buffer.length-this.bufferOff,e.length-t),n=0;n<r;n++)this.buffer[this.bufferOff+n]=e[t+n];return this.bufferOff+=r,r},i.prototype._flushBuffer=function(e,t){return this._update(this.buffer,0,e,t),this.bufferOff=0,this.blockSize},i.prototype._updateEncrypt=function(e){var t=0,r=0,n=(this.bufferOff+e.length)/this.blockSize|0,i=new Array(n*this.blockSize);0!==this.bufferOff&&(t+=this._buffer(e,t),this.bufferOff===this.buffer.length&&(r+=this._flushBuffer(i,r)));for(var a=e.length-(e.length-t)%this.blockSize;t<a;t+=this.blockSize)this._update(e,t,i,r),r+=this.blockSize;for(;t<e.length;t++,this.bufferOff++)this.buffer[this.bufferOff]=e[t];return i},i.prototype._updateDecrypt=function(e){for(var t=0,r=0,n=Math.ceil((this.bufferOff+e.length)/this.blockSize)-1,i=new Array(n*this.blockSize);n>0;n--)t+=this._buffer(e,t),r+=this._flushBuffer(i,r);return t+=this._buffer(e,t),i},i.prototype.final=function(e){var t,r;return e&&(t=this.update(e)),r="encrypt"===this.type?this._finalEncrypt():this._finalDecrypt(),t?t.concat(r):r},i.prototype._pad=function(e,t){if(0===t)return!1;for(;t<e.length;)e[t++]=0;return!0},i.prototype._finalEncrypt=function(){if(!this._pad(this.buffer,this.bufferOff))return[];var e=new Array(this.blockSize);return this._update(this.buffer,0,e,0),e},i.prototype._unpad=function(e){return e},i.prototype._finalDecrypt=function(){n.equal(this.bufferOff,this.blockSize,"Not enough data to decrypt");var e=new Array(this.blockSize);return this._flushBuffer(e,0),this._unpad(e)}},function(e,t,r){"use strict";var n=r(4),i=r(0),a=r(34),o=a.utils,f=a.Cipher;function s(){this.tmp=new Array(2),this.keys=null}function c(e){f.call(this,e);var t=new s;this._desState=t,this.deriveKeys(t,e.key)}i(c,f),e.exports=c,c.create=function(e){return new c(e)};var u=[1,1,2,2,2,2,2,2,1,2,2,2,2,2,2,1];c.prototype.deriveKeys=function(e,t){e.keys=new Array(32),n.equal(t.length,this.blockSize,"Invalid key length");var r=o.readUInt32BE(t,0),i=o.readUInt32BE(t,4);o.pc1(r,i,e.tmp,0),r=e.tmp[0],i=e.tmp[1];for(var a=0;a<e.keys.length;a+=2){var f=u[a>>>1];r=o.r28shl(r,f),i=o.r28shl(i,f),o.pc2(r,i,e.keys,a)}},c.prototype._update=function(e,t,r,n){var i=this._desState,a=o.readUInt32BE(e,t),f=o.readUInt32BE(e,t+4);o.ip(a,f,i.tmp,0),a=i.tmp[0],f=i.tmp[1],"encrypt"===this.type?this._encrypt(i,a,f,i.tmp,0):this._decrypt(i,a,f,i.tmp,0),a=i.tmp[0],f=i.tmp[1],o.writeUInt32BE(r,a,n),o.writeUInt32BE(r,f,n+4)},c.prototype._pad=function(e,t){for(var r=e.length-t,n=t;n<e.length;n++)e[n]=r;return!0},c.prototype._unpad=function(e){for(var t=e[e.length-1],r=e.length-t;r<e.length;r++)n.equal(e[r],t);return e.slice(0,e.length-t)},c.prototype._encrypt=function(e,t,r,n,i){for(var a=t,f=r,s=0;s<e.keys.length;s+=2){var c=e.keys[s],u=e.keys[s+1];o.expand(f,e.tmp,0),c^=e.tmp[0],u^=e.tmp[1];var h=o.substitute(c,u),d=f;f=(a^o.permute(h))>>>0,a=d}o.rip(f,a,n,i)},c.prototype._decrypt=function(e,t,r,n,i){for(var a=r,f=t,s=e.keys.length-2;s>=0;s-=2){var c=e.keys[s],u=e.keys[s+1];o.expand(a,e.tmp,0),c^=e.tmp[0],u^=e.tmp[1];var h=o.substitute(c,u),d=a;a=(f^o.permute(h))>>>0,f=d}o.rip(a,f,n,i)}},function(e,t,r){"use strict";var n=r(4),i=r(0),a={};function o(e){n.equal(e.length,8,"Invalid IV length"),this.iv=new Array(8);for(var t=0;t<this.iv.length;t++)this.iv[t]=e[t]}t.instantiate=function(e){function t(t){e.call(this,t),this._cbcInit()}i(t,e);for(var r=Object.keys(a),n=0;n<r.length;n++){var o=r[n];t.prototype[o]=a[o]}return t.create=function(e){return new t(e)},t},a._cbcInit=function(){var e=new o(this.options.iv);this._cbcState=e},a._update=function(e,t,r,n){var i=this._cbcState,a=this.constructor.super_.prototype,o=i.iv;if("encrypt"===this.type){for(var f=0;f<this.blockSize;f++)o[f]^=e[t+f];a._update.call(this,o,0,r,n);for(f=0;f<this.blockSize;f++)o[f]=r[n+f]}else{a._update.call(this,e,t,r,n);for(f=0;f<this.blockSize;f++)r[n+f]^=o[f];for(f=0;f<this.blockSize;f++)o[f]=e[t+f]}}},function(e,t,r){"use strict";var n=r(4),i=r(0),a=r(34),o=a.Cipher,f=a.DES;function s(e,t){n.equal(t.length,24,"Invalid key length");var r=t.slice(0,8),i=t.slice(8,16),a=t.slice(16,24);this.ciphers="encrypt"===e?[f.create({type:"encrypt",key:r}),f.create({type:"decrypt",key:i}),f.create({type:"encrypt",key:a})]:[f.create({type:"decrypt",key:a}),f.create({type:"encrypt",key:i}),f.create({type:"decrypt",key:r})]}function c(e){o.call(this,e);var t=new s(this.type,this.options.key);this._edeState=t}i(c,o),e.exports=c,c.create=function(e){return new c(e)},c.prototype._update=function(e,t,r,n){var i=this._edeState;i.ciphers[0]._update(e,t,r,n),i.ciphers[1]._update(r,n,r,n),i.ciphers[2]._update(r,n,r,n)},c.prototype._pad=f.prototype._pad,c.prototype._unpad=f.prototype._unpad},function(e,t,r){var n=r(36),i=r(59),a=r(1).Buffer,o=r(60),f=r(9),s=r(22),c=r(23);function u(e,t,r){f.call(this),this._cache=new d,this._cipher=new s.AES(t),this._prev=a.from(r),this._mode=e,this._autopadding=!0}r(0)(u,f),u.prototype._update=function(e){var t,r;this._cache.add(e);for(var n=[];t=this._cache.get();)r=this._mode.encrypt(this,t),n.push(r);return a.concat(n)};var h=a.alloc(16,16);function d(){this.cache=a.allocUnsafe(0)}function l(e,t,r){var f=n[e.toLowerCase()];if(!f)throw new TypeError("invalid suite type");if("string"==typeof t&&(t=a.from(t)),t.length!==f.key/8)throw new TypeError("invalid key length "+t.length);if("string"==typeof r&&(r=a.from(r)),"GCM"!==f.mode&&r.length!==f.iv)throw new TypeError("invalid iv length "+r.length);return"stream"===f.type?new o(f.module,t,r):"auth"===f.type?new i(f.module,t,r):new u(f.module,t,r)}u.prototype._final=function(){var e=this._cache.flush();if(this._autopadding)return e=this._mode.encrypt(this,e),this._cipher.scrub(),e;if(!e.equals(h))throw this._cipher.scrub(),new Error("data not multiple of block length")},u.prototype.setAutoPadding=function(e){return this._autopadding=!!e,this},d.prototype.add=function(e){this.cache=a.concat([this.cache,e])},d.prototype.get=function(){if(this.cache.length>15){var e=this.cache.slice(0,16);return this.cache=this.cache.slice(16),e}return null},d.prototype.flush=function(){for(var e=16-this.cache.length,t=a.allocUnsafe(e),r=-1;++r<e;)t.writeUInt8(e,r);return a.concat([this.cache,t])},t.createCipheriv=l,t.createCipher=function(e,t){var r=n[e.toLowerCase()];if(!r)throw new TypeError("invalid suite type");var i=c(t,!1,r.key,r.iv);return l(e,i.key,i.iv)}},function(e,t){t.encrypt=function(e,t){return e._cipher.encryptBlock(t)},t.decrypt=function(e,t){return e._cipher.decryptBlock(t)}},function(e,t,r){var n=r(16);t.encrypt=function(e,t){var r=n(t,e._prev);return e._prev=e._cipher.encryptBlock(r),e._prev},t.decrypt=function(e,t){var r=e._prev;e._prev=t;var i=e._cipher.decryptBlock(t);return n(i,r)}},function(e,t,r){var n=r(1).Buffer,i=r(16);function a(e,t,r){var a=t.length,o=i(t,e._cache);return e._cache=e._cache.slice(a),e._prev=n.concat([e._prev,r?t:o]),o}t.encrypt=function(e,t,r){for(var i,o=n.allocUnsafe(0);t.length;){if(0===e._cache.length&&(e._cache=e._cipher.encryptBlock(e._prev),e._prev=n.allocUnsafe(0)),!(e._cache.length<=t.length)){o=n.concat([o,a(e,t,r)]);break}i=e._cache.length,o=n.concat([o,a(e,t.slice(0,i),r)]),t=t.slice(i)}return o}},function(e,t,r){var n=r(1).Buffer;function i(e,t,r){var i=e._cipher.encryptBlock(e._prev)[0]^t;return e._prev=n.concat([e._prev.slice(1),n.from([r?t:i])]),i}t.encrypt=function(e,t,r){for(var a=t.length,o=n.allocUnsafe(a),f=-1;++f<a;)o[f]=i(e,t[f],r);return o}},function(e,t,r){var n=r(1).Buffer;function i(e,t,r){for(var n,i,o=-1,f=0;++o<8;)n=t&1<<7-o?128:0,f+=(128&(i=e._cipher.encryptBlock(e._prev)[0]^n))>>o%8,e._prev=a(e._prev,r?n:i);return f}function a(e,t){var r=e.length,i=-1,a=n.allocUnsafe(e.length);for(e=n.concat([e,n.from([t])]);++i<r;)a[i]=e[i]<<1|e[i+1]>>7;return a}t.encrypt=function(e,t,r){for(var a=t.length,o=n.allocUnsafe(a),f=-1;++f<a;)o[f]=i(e,t[f],r);return o}},function(e,t,r){(function(e){var n=r(16);function i(e){return e._prev=e._cipher.encryptBlock(e._prev),e._prev}t.encrypt=function(t,r){for(;t._cache.length<r.length;)t._cache=e.concat([t._cache,i(t)]);var a=t._cache.slice(0,r.length);return t._cache=t._cache.slice(r.length),n(r,a)}}).call(this,r(3).Buffer)},function(e,t,r){var n=r(1).Buffer,i=n.alloc(16,0);function a(e){var t=n.allocUnsafe(16);return t.writeUInt32BE(e[0]>>>0,0),t.writeUInt32BE(e[1]>>>0,4),t.writeUInt32BE(e[2]>>>0,8),t.writeUInt32BE(e[3]>>>0,12),t}function o(e){this.h=e,this.state=n.alloc(16,0),this.cache=n.allocUnsafe(0)}o.prototype.ghash=function(e){for(var t=-1;++t<e.length;)this.state[t]^=e[t];this._multiply()},o.prototype._multiply=function(){for(var e,t,r,n=[(e=this.h).readUInt32BE(0),e.readUInt32BE(4),e.readUInt32BE(8),e.readUInt32BE(12)],i=[0,0,0,0],o=-1;++o<128;){for(0!=(this.state[~~(o/8)]&1<<7-o%8)&&(i[0]^=n[0],i[1]^=n[1],i[2]^=n[2],i[3]^=n[3]),r=0!=(1&n[3]),t=3;t>0;t--)n[t]=n[t]>>>1|(1&n[t-1])<<31;n[0]=n[0]>>>1,r&&(n[0]=n[0]^225<<24)}this.state=a(i)},o.prototype.update=function(e){var t;for(this.cache=n.concat([this.cache,e]);this.cache.length>=16;)t=this.cache.slice(0,16),this.cache=this.cache.slice(16),this.ghash(t)},o.prototype.final=function(e,t){return this.cache.length&&this.ghash(n.concat([this.cache,i],16)),this.ghash(a([0,e,0,t])),this.state},e.exports=o},function(e,t,r){var n=r(59),i=r(1).Buffer,a=r(36),o=r(60),f=r(9),s=r(22),c=r(23);function u(e,t,r){f.call(this),this._cache=new h,this._last=void 0,this._cipher=new s.AES(t),this._prev=i.from(r),this._mode=e,this._autopadding=!0}function h(){this.cache=i.allocUnsafe(0)}function d(e,t,r){var f=a[e.toLowerCase()];if(!f)throw new TypeError("invalid suite type");if("string"==typeof r&&(r=i.from(r)),"GCM"!==f.mode&&r.length!==f.iv)throw new TypeError("invalid iv length "+r.length);if("string"==typeof t&&(t=i.from(t)),t.length!==f.key/8)throw new TypeError("invalid key length "+t.length);return"stream"===f.type?new o(f.module,t,r,!0):"auth"===f.type?new n(f.module,t,r,!0):new u(f.module,t,r)}r(0)(u,f),u.prototype._update=function(e){var t,r;this._cache.add(e);for(var n=[];t=this._cache.get(this._autopadding);)r=this._mode.decrypt(this,t),n.push(r);return i.concat(n)},u.prototype._final=function(){var e=this._cache.flush();if(this._autopadding)return function(e){var t=e[15];if(t<1||t>16)throw new Error("unable to decrypt data");var r=-1;for(;++r<t;)if(e[r+(16-t)]!==t)throw new Error("unable to decrypt data");if(16===t)return;return e.slice(0,16-t)}(this._mode.decrypt(this,e));if(e)throw new Error("data not multiple of block length")},u.prototype.setAutoPadding=function(e){return this._autopadding=!!e,this},h.prototype.add=function(e){this.cache=i.concat([this.cache,e])},h.prototype.get=function(e){var t;if(e){if(this.cache.length>16)return t=this.cache.slice(0,16),this.cache=this.cache.slice(16),t}else if(this.cache.length>=16)return t=this.cache.slice(0,16),this.cache=this.cache.slice(16),t;return null},h.prototype.flush=function(){if(this.cache.length)return this.cache},t.createDecipher=function(e,t){var r=a[e.toLowerCase()];if(!r)throw new TypeError("invalid suite type");var n=c(t,!1,r.key,r.iv);return d(e,n.key,n.iv)},t.createDecipheriv=d},function(e,t){t["des-ecb"]={key:8,iv:0},t["des-cbc"]=t.des={key:8,iv:8},t["des-ede3-cbc"]=t.des3={key:24,iv:8},t["des-ede3"]={key:24,iv:0},t["des-ede-cbc"]={key:16,iv:8},t["des-ede"]={key:16,iv:0}},function(e,t,r){(function(e){var n=r(61),i=r(125),a=r(126);var o={binary:!0,hex:!0,base64:!0};t.DiffieHellmanGroup=t.createDiffieHellmanGroup=t.getDiffieHellman=function(t){var r=new e(i[t].prime,"hex"),n=new e(i[t].gen,"hex");return new a(r,n)},t.createDiffieHellman=t.DiffieHellman=function t(r,i,f,s){return e.isBuffer(i)||void 0===o[i]?t(r,"binary",i,f):(i=i||"binary",s=s||"binary",f=f||new e([2]),e.isBuffer(f)||(f=new e(f,s)),"number"==typeof r?new a(n(r,f),f,!0):(e.isBuffer(r)||(r=new e(r,i)),new a(r,f,!0)))}}).call(this,r(3).Buffer)},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t){},function(e,t){},function(e){e.exports=JSON.parse('{"modp1":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff"},"modp2":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff"},"modp5":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff"},"modp14":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff"},"modp15":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff"},"modp16":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff"},"modp17":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff"},"modp18":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff"}}')},function(e,t,r){(function(t){var n=r(2),i=new(r(62)),a=new n(24),o=new n(11),f=new n(10),s=new n(3),c=new n(7),u=r(61),h=r(12);function d(e,r){return r=r||"utf8",t.isBuffer(e)||(e=new t(e,r)),this._pub=new n(e),this}function l(e,r){return r=r||"utf8",t.isBuffer(e)||(e=new t(e,r)),this._priv=new n(e),this}e.exports=b;var p={};function b(e,t,r){this.setGenerator(t),this.__prime=new n(e),this._prime=n.mont(this.__prime),this._primeLen=e.length,this._pub=void 0,this._priv=void 0,this._primeCode=void 0,r?(this.setPublicKey=d,this.setPrivateKey=l):this._primeCode=8}function y(e,r){var n=new t(e.toArray());return r?n.toString(r):n}Object.defineProperty(b.prototype,"verifyError",{enumerable:!0,get:function(){return"number"!=typeof this._primeCode&&(this._primeCode=function(e,t){var r=t.toString("hex"),n=[r,e.toString(16)].join("_");if(n in p)return p[n];var h,d=0;if(e.isEven()||!u.simpleSieve||!u.fermatTest(e)||!i.test(e))return d+=1,d+="02"===r||"05"===r?8:4,p[n]=d,d;switch(i.test(e.shrn(1))||(d+=2),r){case"02":e.mod(a).cmp(o)&&(d+=8);break;case"05":(h=e.mod(f)).cmp(s)&&h.cmp(c)&&(d+=8);break;default:d+=4}return p[n]=d,d}(this.__prime,this.__gen)),this._primeCode}}),b.prototype.generateKeys=function(){return this._priv||(this._priv=new n(h(this._primeLen))),this._pub=this._gen.toRed(this._prime).redPow(this._priv).fromRed(),this.getPublicKey()},b.prototype.computeSecret=function(e){var r=(e=(e=new n(e)).toRed(this._prime)).redPow(this._priv).fromRed(),i=new t(r.toArray()),a=this.getPrime();if(i.length<a.length){var o=new t(a.length-i.length);o.fill(0),i=t.concat([o,i])}return i},b.prototype.getPublicKey=function(e){return y(this._pub,e)},b.prototype.getPrivateKey=function(e){return y(this._priv,e)},b.prototype.getPrime=function(e){return y(this.__prime,e)},b.prototype.getGenerator=function(e){return y(this._gen,e)},b.prototype.setGenerator=function(e,r){return r=r||"utf8",t.isBuffer(e)||(e=new t(e,r)),this.__gen=e,this._gen=new n(e),this}}).call(this,r(3).Buffer)},function(e,t,r){(function(t){var n=r(14),i=r(27),a=r(0),o=r(128),f=r(160),s=r(51);function c(e){i.Writable.call(this);var t=s[e];if(!t)throw new Error("Unknown message digest");this._hashType=t.hash,this._hash=n(t.hash),this._tag=t.id,this._signType=t.sign}function u(e){i.Writable.call(this);var t=s[e];if(!t)throw new Error("Unknown message digest");this._hash=n(t.hash),this._tag=t.id,this._signType=t.sign}function h(e){return new c(e)}function d(e){return new u(e)}Object.keys(s).forEach((function(e){s[e].id=new t(s[e].id,"hex"),s[e.toLowerCase()]=s[e]})),a(c,i.Writable),c.prototype._write=function(e,t,r){this._hash.update(e),r()},c.prototype.update=function(e,r){return"string"==typeof e&&(e=new t(e,r)),this._hash.update(e),this},c.prototype.sign=function(e,t){this.end();var r=this._hash.digest(),n=o(r,e,this._hashType,this._signType,this._tag);return t?n.toString(t):n},a(u,i.Writable),u.prototype._write=function(e,t,r){this._hash.update(e),r()},u.prototype.update=function(e,r){return"string"==typeof e&&(e=new t(e,r)),this._hash.update(e),this},u.prototype.verify=function(e,r,n){"string"==typeof r&&(r=new t(r,n)),this.end();var i=this._hash.digest();return f(r,i,e,this._signType,this._tag)},e.exports={Sign:h,Verify:d,createSign:h,createVerify:d}}).call(this,r(3).Buffer)},function(e,t,r){(function(t){var n=r(49),i=r(38),a=r(39).ec,o=r(2),f=r(25),s=r(72);function c(e,r,i,a){if((e=new t(e.toArray())).length<r.byteLength()){var o=new t(r.byteLength()-e.length);o.fill(0),e=t.concat([o,e])}var f=i.length,s=function(e,r){e=(e=u(e,r)).mod(r);var n=new t(e.toArray());if(n.length<r.byteLength()){var i=new t(r.byteLength()-n.length);i.fill(0),n=t.concat([i,n])}return n}(i,r),c=new t(f);c.fill(1);var h=new t(f);return h.fill(0),h=n(a,h).update(c).update(new t([0])).update(e).update(s).digest(),c=n(a,h).update(c).digest(),{k:h=n(a,h).update(c).update(new t([1])).update(e).update(s).digest(),v:c=n(a,h).update(c).digest()}}function u(e,t){var r=new o(e),n=(e.length<<3)-t.bitLength();return n>0&&r.ishrn(n),r}function h(e,r,i){var a,o;do{for(a=new t(0);8*a.length<e.bitLength();)r.v=n(i,r.k).update(r.v).digest(),a=t.concat([a,r.v]);o=u(a,e),r.k=n(i,r.k).update(r.v).update(new t([0])).digest(),r.v=n(i,r.k).update(r.v).digest()}while(-1!==o.cmp(e));return o}function d(e,t,r,n){return e.toRed(o.mont(r)).redPow(t).fromRed().mod(n)}e.exports=function(e,r,n,l,p){var b=f(r);if(b.curve){if("ecdsa"!==l&&"ecdsa/rsa"!==l)throw new Error("wrong private key type");return function(e,r){var n=s[r.curve.join(".")];if(!n)throw new Error("unknown curve "+r.curve.join("."));var i=new a(n).keyFromPrivate(r.privateKey).sign(e);return new t(i.toDER())}(e,b)}if("dsa"===b.type){if("dsa"!==l)throw new Error("wrong private key type");return function(e,r,n){var i,a=r.params.priv_key,f=r.params.p,s=r.params.q,l=r.params.g,p=new o(0),b=u(e,s).mod(s),y=!1,g=c(a,s,e,n);for(;!1===y;)i=h(s,g,n),p=d(l,i,f,s),0===(y=i.invm(s).imul(b.add(a.mul(p))).mod(s)).cmpn(0)&&(y=!1,p=new o(0));return function(e,r){e=e.toArray(),r=r.toArray(),128&e[0]&&(e=[0].concat(e));128&r[0]&&(r=[0].concat(r));var n=[48,e.length+r.length+4,2,e.length];return n=n.concat(e,[2,r.length],r),new t(n)}(p,y)}(e,b,n)}if("rsa"!==l&&"ecdsa/rsa"!==l)throw new Error("wrong private key type");e=t.concat([p,e]);for(var y=b.modulus.byteLength(),g=[0,1];e.length+g.length+1<y;)g.push(255);g.push(0);for(var m=-1;++m<e.length;)g.push(e[m]);return i(g,b)},e.exports.getKey=c,e.exports.makeKey=h}).call(this,r(3).Buffer)},function(e){e.exports=JSON.parse('{"_from":"elliptic@^6.0.0","_id":"elliptic@6.5.1","_inBundle":false,"_integrity":"sha512-xvJINNLbTeWQjrl6X+7eQCrIy/YPv5XCpKW6kB5mKvtnGILoLDcySuwomfdzt0BMdLNVnuRNTuzKNHj0bva1Cg==","_location":"/elliptic","_phantomChildren":{},"_requested":{"type":"range","registry":true,"raw":"elliptic@^6.0.0","name":"elliptic","escapedName":"elliptic","rawSpec":"^6.0.0","saveSpec":null,"fetchSpec":"^6.0.0"},"_requiredBy":["/browserify-sign","/create-ecdh"],"_resolved":"https://registry.npmjs.org/elliptic/-/elliptic-6.5.1.tgz","_shasum":"c380f5f909bf1b9b4428d028cd18d3b0efd6b52b","_spec":"elliptic@^6.0.0","_where":"/Users/ksusha/Documents/Code/Andersen2/Yura/chat/node_modules/browserify-sign","author":{"name":"Fedor Indutny","email":"fedor@indutny.com"},"bugs":{"url":"https://github.com/indutny/elliptic/issues"},"bundleDependencies":false,"dependencies":{"bn.js":"^4.4.0","brorand":"^1.0.1","hash.js":"^1.0.0","hmac-drbg":"^1.0.0","inherits":"^2.0.1","minimalistic-assert":"^1.0.0","minimalistic-crypto-utils":"^1.0.0"},"deprecated":false,"description":"EC cryptography","devDependencies":{"brfs":"^1.4.3","coveralls":"^3.0.4","grunt":"^1.0.4","grunt-browserify":"^5.0.0","grunt-cli":"^1.2.0","grunt-contrib-connect":"^1.0.0","grunt-contrib-copy":"^1.0.0","grunt-contrib-uglify":"^1.0.1","grunt-mocha-istanbul":"^3.0.1","grunt-saucelabs":"^9.0.1","istanbul":"^0.4.2","jscs":"^3.0.7","jshint":"^2.6.0","mocha":"^6.1.4"},"files":["lib"],"homepage":"https://github.com/indutny/elliptic","keywords":["EC","Elliptic","curve","Cryptography"],"license":"MIT","main":"lib/elliptic.js","name":"elliptic","repository":{"type":"git","url":"git+ssh://git@github.com/indutny/elliptic.git"},"scripts":{"jscs":"jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js","jshint":"jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js","lint":"npm run jscs && npm run jshint","test":"npm run lint && npm run unit","unit":"istanbul test _mocha --reporter=spec test/index.js","version":"grunt dist && git add dist/"},"version":"6.5.1"}')},function(e,t,r){"use strict";var n=r(5),i=r(2),a=r(0),o=r(24),f=n.assert;function s(e){o.call(this,"short",e),this.a=new i(e.a,16).toRed(this.red),this.b=new i(e.b,16).toRed(this.red),this.tinv=this.two.redInvm(),this.zeroA=0===this.a.fromRed().cmpn(0),this.threeA=0===this.a.fromRed().sub(this.p).cmpn(-3),this.endo=this._getEndomorphism(e),this._endoWnafT1=new Array(4),this._endoWnafT2=new Array(4)}function c(e,t,r,n){o.BasePoint.call(this,e,"affine"),null===t&&null===r?(this.x=null,this.y=null,this.inf=!0):(this.x=new i(t,16),this.y=new i(r,16),n&&(this.x.forceRed(this.curve.red),this.y.forceRed(this.curve.red)),this.x.red||(this.x=this.x.toRed(this.curve.red)),this.y.red||(this.y=this.y.toRed(this.curve.red)),this.inf=!1)}function u(e,t,r,n){o.BasePoint.call(this,e,"jacobian"),null===t&&null===r&&null===n?(this.x=this.curve.one,this.y=this.curve.one,this.z=new i(0)):(this.x=new i(t,16),this.y=new i(r,16),this.z=new i(n,16)),this.x.red||(this.x=this.x.toRed(this.curve.red)),this.y.red||(this.y=this.y.toRed(this.curve.red)),this.z.red||(this.z=this.z.toRed(this.curve.red)),this.zOne=this.z===this.curve.one}a(s,o),e.exports=s,s.prototype._getEndomorphism=function(e){if(this.zeroA&&this.g&&this.n&&1===this.p.modn(3)){var t,r;if(e.beta)t=new i(e.beta,16).toRed(this.red);else{var n=this._getEndoRoots(this.p);t=(t=n[0].cmp(n[1])<0?n[0]:n[1]).toRed(this.red)}if(e.lambda)r=new i(e.lambda,16);else{var a=this._getEndoRoots(this.n);0===this.g.mul(a[0]).x.cmp(this.g.x.redMul(t))?r=a[0]:(r=a[1],f(0===this.g.mul(r).x.cmp(this.g.x.redMul(t))))}return{beta:t,lambda:r,basis:e.basis?e.basis.map((function(e){return{a:new i(e.a,16),b:new i(e.b,16)}})):this._getEndoBasis(r)}}},s.prototype._getEndoRoots=function(e){var t=e===this.p?this.red:i.mont(e),r=new i(2).toRed(t).redInvm(),n=r.redNeg(),a=new i(3).toRed(t).redNeg().redSqrt().redMul(r);return[n.redAdd(a).fromRed(),n.redSub(a).fromRed()]},s.prototype._getEndoBasis=function(e){for(var t,r,n,a,o,f,s,c,u,h=this.n.ushrn(Math.floor(this.n.bitLength()/2)),d=e,l=this.n.clone(),p=new i(1),b=new i(0),y=new i(0),g=new i(1),m=0;0!==d.cmpn(0);){var v=l.div(d);c=l.sub(v.mul(d)),u=y.sub(v.mul(p));var _=g.sub(v.mul(b));if(!n&&c.cmp(h)<0)t=s.neg(),r=p,n=c.neg(),a=u;else if(n&&2==++m)break;s=c,l=d,d=c,y=p,p=u,g=b,b=_}o=c.neg(),f=u;var w=n.sqr().add(a.sqr());return o.sqr().add(f.sqr()).cmp(w)>=0&&(o=t,f=r),n.negative&&(n=n.neg(),a=a.neg()),o.negative&&(o=o.neg(),f=f.neg()),[{a:n,b:a},{a:o,b:f}]},s.prototype._endoSplit=function(e){var t=this.endo.basis,r=t[0],n=t[1],i=n.b.mul(e).divRound(this.n),a=r.b.neg().mul(e).divRound(this.n),o=i.mul(r.a),f=a.mul(n.a),s=i.mul(r.b),c=a.mul(n.b);return{k1:e.sub(o).sub(f),k2:s.add(c).neg()}},s.prototype.pointFromX=function(e,t){(e=new i(e,16)).red||(e=e.toRed(this.red));var r=e.redSqr().redMul(e).redIAdd(e.redMul(this.a)).redIAdd(this.b),n=r.redSqrt();if(0!==n.redSqr().redSub(r).cmp(this.zero))throw new Error("invalid point");var a=n.fromRed().isOdd();return(t&&!a||!t&&a)&&(n=n.redNeg()),this.point(e,n)},s.prototype.validate=function(e){if(e.inf)return!0;var t=e.x,r=e.y,n=this.a.redMul(t),i=t.redSqr().redMul(t).redIAdd(n).redIAdd(this.b);return 0===r.redSqr().redISub(i).cmpn(0)},s.prototype._endoWnafMulAdd=function(e,t,r){for(var n=this._endoWnafT1,i=this._endoWnafT2,a=0;a<e.length;a++){var o=this._endoSplit(t[a]),f=e[a],s=f._getBeta();o.k1.negative&&(o.k1.ineg(),f=f.neg(!0)),o.k2.negative&&(o.k2.ineg(),s=s.neg(!0)),n[2*a]=f,n[2*a+1]=s,i[2*a]=o.k1,i[2*a+1]=o.k2}for(var c=this._wnafMulAdd(1,n,i,2*a,r),u=0;u<2*a;u++)n[u]=null,i[u]=null;return c},a(c,o.BasePoint),s.prototype.point=function(e,t,r){return new c(this,e,t,r)},s.prototype.pointFromJSON=function(e,t){return c.fromJSON(this,e,t)},c.prototype._getBeta=function(){if(this.curve.endo){var e=this.precomputed;if(e&&e.beta)return e.beta;var t=this.curve.point(this.x.redMul(this.curve.endo.beta),this.y);if(e){var r=this.curve,n=function(e){return r.point(e.x.redMul(r.endo.beta),e.y)};e.beta=t,t.precomputed={beta:null,naf:e.naf&&{wnd:e.naf.wnd,points:e.naf.points.map(n)},doubles:e.doubles&&{step:e.doubles.step,points:e.doubles.points.map(n)}}}return t}},c.prototype.toJSON=function(){return this.precomputed?[this.x,this.y,this.precomputed&&{doubles:this.precomputed.doubles&&{step:this.precomputed.doubles.step,points:this.precomputed.doubles.points.slice(1)},naf:this.precomputed.naf&&{wnd:this.precomputed.naf.wnd,points:this.precomputed.naf.points.slice(1)}}]:[this.x,this.y]},c.fromJSON=function(e,t,r){"string"==typeof t&&(t=JSON.parse(t));var n=e.point(t[0],t[1],r);if(!t[2])return n;function i(t){return e.point(t[0],t[1],r)}var a=t[2];return n.precomputed={beta:null,doubles:a.doubles&&{step:a.doubles.step,points:[n].concat(a.doubles.points.map(i))},naf:a.naf&&{wnd:a.naf.wnd,points:[n].concat(a.naf.points.map(i))}},n},c.prototype.inspect=function(){return this.isInfinity()?"<EC Point Infinity>":"<EC Point x: "+this.x.fromRed().toString(16,2)+" y: "+this.y.fromRed().toString(16,2)+">"},c.prototype.isInfinity=function(){return this.inf},c.prototype.add=function(e){if(this.inf)return e;if(e.inf)return this;if(this.eq(e))return this.dbl();if(this.neg().eq(e))return this.curve.point(null,null);if(0===this.x.cmp(e.x))return this.curve.point(null,null);var t=this.y.redSub(e.y);0!==t.cmpn(0)&&(t=t.redMul(this.x.redSub(e.x).redInvm()));var r=t.redSqr().redISub(this.x).redISub(e.x),n=t.redMul(this.x.redSub(r)).redISub(this.y);return this.curve.point(r,n)},c.prototype.dbl=function(){if(this.inf)return this;var e=this.y.redAdd(this.y);if(0===e.cmpn(0))return this.curve.point(null,null);var t=this.curve.a,r=this.x.redSqr(),n=e.redInvm(),i=r.redAdd(r).redIAdd(r).redIAdd(t).redMul(n),a=i.redSqr().redISub(this.x.redAdd(this.x)),o=i.redMul(this.x.redSub(a)).redISub(this.y);return this.curve.point(a,o)},c.prototype.getX=function(){return this.x.fromRed()},c.prototype.getY=function(){return this.y.fromRed()},c.prototype.mul=function(e){return e=new i(e,16),this.isInfinity()?this:this._hasDoubles(e)?this.curve._fixedNafMul(this,e):this.curve.endo?this.curve._endoWnafMulAdd([this],[e]):this.curve._wnafMul(this,e)},c.prototype.mulAdd=function(e,t,r){var n=[this,t],i=[e,r];return this.curve.endo?this.curve._endoWnafMulAdd(n,i):this.curve._wnafMulAdd(1,n,i,2)},c.prototype.jmulAdd=function(e,t,r){var n=[this,t],i=[e,r];return this.curve.endo?this.curve._endoWnafMulAdd(n,i,!0):this.curve._wnafMulAdd(1,n,i,2,!0)},c.prototype.eq=function(e){return this===e||this.inf===e.inf&&(this.inf||0===this.x.cmp(e.x)&&0===this.y.cmp(e.y))},c.prototype.neg=function(e){if(this.inf)return this;var t=this.curve.point(this.x,this.y.redNeg());if(e&&this.precomputed){var r=this.precomputed,n=function(e){return e.neg()};t.precomputed={naf:r.naf&&{wnd:r.naf.wnd,points:r.naf.points.map(n)},doubles:r.doubles&&{step:r.doubles.step,points:r.doubles.points.map(n)}}}return t},c.prototype.toJ=function(){return this.inf?this.curve.jpoint(null,null,null):this.curve.jpoint(this.x,this.y,this.curve.one)},a(u,o.BasePoint),s.prototype.jpoint=function(e,t,r){return new u(this,e,t,r)},u.prototype.toP=function(){if(this.isInfinity())return this.curve.point(null,null);var e=this.z.redInvm(),t=e.redSqr(),r=this.x.redMul(t),n=this.y.redMul(t).redMul(e);return this.curve.point(r,n)},u.prototype.neg=function(){return this.curve.jpoint(this.x,this.y.redNeg(),this.z)},u.prototype.add=function(e){if(this.isInfinity())return e;if(e.isInfinity())return this;var t=e.z.redSqr(),r=this.z.redSqr(),n=this.x.redMul(t),i=e.x.redMul(r),a=this.y.redMul(t.redMul(e.z)),o=e.y.redMul(r.redMul(this.z)),f=n.redSub(i),s=a.redSub(o);if(0===f.cmpn(0))return 0!==s.cmpn(0)?this.curve.jpoint(null,null,null):this.dbl();var c=f.redSqr(),u=c.redMul(f),h=n.redMul(c),d=s.redSqr().redIAdd(u).redISub(h).redISub(h),l=s.redMul(h.redISub(d)).redISub(a.redMul(u)),p=this.z.redMul(e.z).redMul(f);return this.curve.jpoint(d,l,p)},u.prototype.mixedAdd=function(e){if(this.isInfinity())return e.toJ();if(e.isInfinity())return this;var t=this.z.redSqr(),r=this.x,n=e.x.redMul(t),i=this.y,a=e.y.redMul(t).redMul(this.z),o=r.redSub(n),f=i.redSub(a);if(0===o.cmpn(0))return 0!==f.cmpn(0)?this.curve.jpoint(null,null,null):this.dbl();var s=o.redSqr(),c=s.redMul(o),u=r.redMul(s),h=f.redSqr().redIAdd(c).redISub(u).redISub(u),d=f.redMul(u.redISub(h)).redISub(i.redMul(c)),l=this.z.redMul(o);return this.curve.jpoint(h,d,l)},u.prototype.dblp=function(e){if(0===e)return this;if(this.isInfinity())return this;if(!e)return this.dbl();if(this.curve.zeroA||this.curve.threeA){for(var t=this,r=0;r<e;r++)t=t.dbl();return t}var n=this.curve.a,i=this.curve.tinv,a=this.x,o=this.y,f=this.z,s=f.redSqr().redSqr(),c=o.redAdd(o);for(r=0;r<e;r++){var u=a.redSqr(),h=c.redSqr(),d=h.redSqr(),l=u.redAdd(u).redIAdd(u).redIAdd(n.redMul(s)),p=a.redMul(h),b=l.redSqr().redISub(p.redAdd(p)),y=p.redISub(b),g=l.redMul(y);g=g.redIAdd(g).redISub(d);var m=c.redMul(f);r+1<e&&(s=s.redMul(d)),a=b,f=m,c=g}return this.curve.jpoint(a,c.redMul(i),f)},u.prototype.dbl=function(){return this.isInfinity()?this:this.curve.zeroA?this._zeroDbl():this.curve.threeA?this._threeDbl():this._dbl()},u.prototype._zeroDbl=function(){var e,t,r;if(this.zOne){var n=this.x.redSqr(),i=this.y.redSqr(),a=i.redSqr(),o=this.x.redAdd(i).redSqr().redISub(n).redISub(a);o=o.redIAdd(o);var f=n.redAdd(n).redIAdd(n),s=f.redSqr().redISub(o).redISub(o),c=a.redIAdd(a);c=(c=c.redIAdd(c)).redIAdd(c),e=s,t=f.redMul(o.redISub(s)).redISub(c),r=this.y.redAdd(this.y)}else{var u=this.x.redSqr(),h=this.y.redSqr(),d=h.redSqr(),l=this.x.redAdd(h).redSqr().redISub(u).redISub(d);l=l.redIAdd(l);var p=u.redAdd(u).redIAdd(u),b=p.redSqr(),y=d.redIAdd(d);y=(y=y.redIAdd(y)).redIAdd(y),e=b.redISub(l).redISub(l),t=p.redMul(l.redISub(e)).redISub(y),r=(r=this.y.redMul(this.z)).redIAdd(r)}return this.curve.jpoint(e,t,r)},u.prototype._threeDbl=function(){var e,t,r;if(this.zOne){var n=this.x.redSqr(),i=this.y.redSqr(),a=i.redSqr(),o=this.x.redAdd(i).redSqr().redISub(n).redISub(a);o=o.redIAdd(o);var f=n.redAdd(n).redIAdd(n).redIAdd(this.curve.a),s=f.redSqr().redISub(o).redISub(o);e=s;var c=a.redIAdd(a);c=(c=c.redIAdd(c)).redIAdd(c),t=f.redMul(o.redISub(s)).redISub(c),r=this.y.redAdd(this.y)}else{var u=this.z.redSqr(),h=this.y.redSqr(),d=this.x.redMul(h),l=this.x.redSub(u).redMul(this.x.redAdd(u));l=l.redAdd(l).redIAdd(l);var p=d.redIAdd(d),b=(p=p.redIAdd(p)).redAdd(p);e=l.redSqr().redISub(b),r=this.y.redAdd(this.z).redSqr().redISub(h).redISub(u);var y=h.redSqr();y=(y=(y=y.redIAdd(y)).redIAdd(y)).redIAdd(y),t=l.redMul(p.redISub(e)).redISub(y)}return this.curve.jpoint(e,t,r)},u.prototype._dbl=function(){var e=this.curve.a,t=this.x,r=this.y,n=this.z,i=n.redSqr().redSqr(),a=t.redSqr(),o=r.redSqr(),f=a.redAdd(a).redIAdd(a).redIAdd(e.redMul(i)),s=t.redAdd(t),c=(s=s.redIAdd(s)).redMul(o),u=f.redSqr().redISub(c.redAdd(c)),h=c.redISub(u),d=o.redSqr();d=(d=(d=d.redIAdd(d)).redIAdd(d)).redIAdd(d);var l=f.redMul(h).redISub(d),p=r.redAdd(r).redMul(n);return this.curve.jpoint(u,l,p)},u.prototype.trpl=function(){if(!this.curve.zeroA)return this.dbl().add(this);var e=this.x.redSqr(),t=this.y.redSqr(),r=this.z.redSqr(),n=t.redSqr(),i=e.redAdd(e).redIAdd(e),a=i.redSqr(),o=this.x.redAdd(t).redSqr().redISub(e).redISub(n),f=(o=(o=(o=o.redIAdd(o)).redAdd(o).redIAdd(o)).redISub(a)).redSqr(),s=n.redIAdd(n);s=(s=(s=s.redIAdd(s)).redIAdd(s)).redIAdd(s);var c=i.redIAdd(o).redSqr().redISub(a).redISub(f).redISub(s),u=t.redMul(c);u=(u=u.redIAdd(u)).redIAdd(u);var h=this.x.redMul(f).redISub(u);h=(h=h.redIAdd(h)).redIAdd(h);var d=this.y.redMul(c.redMul(s.redISub(c)).redISub(o.redMul(f)));d=(d=(d=d.redIAdd(d)).redIAdd(d)).redIAdd(d);var l=this.z.redAdd(o).redSqr().redISub(r).redISub(f);return this.curve.jpoint(h,d,l)},u.prototype.mul=function(e,t){return e=new i(e,t),this.curve._wnafMul(this,e)},u.prototype.eq=function(e){if("affine"===e.type)return this.eq(e.toJ());if(this===e)return!0;var t=this.z.redSqr(),r=e.z.redSqr();if(0!==this.x.redMul(r).redISub(e.x.redMul(t)).cmpn(0))return!1;var n=t.redMul(this.z),i=r.redMul(e.z);return 0===this.y.redMul(i).redISub(e.y.redMul(n)).cmpn(0)},u.prototype.eqXToP=function(e){var t=this.z.redSqr(),r=e.toRed(this.curve.red).redMul(t);if(0===this.x.cmp(r))return!0;for(var n=e.clone(),i=this.curve.redN.redMul(t);;){if(n.iadd(this.curve.n),n.cmp(this.curve.p)>=0)return!1;if(r.redIAdd(i),0===this.x.cmp(r))return!0}},u.prototype.inspect=function(){return this.isInfinity()?"<EC JPoint Infinity>":"<EC JPoint x: "+this.x.toString(16,2)+" y: "+this.y.toString(16,2)+" z: "+this.z.toString(16,2)+">"},u.prototype.isInfinity=function(){return 0===this.z.cmpn(0)}},function(e,t,r){"use strict";var n=r(2),i=r(0),a=r(24),o=r(5);function f(e){a.call(this,"mont",e),this.a=new n(e.a,16).toRed(this.red),this.b=new n(e.b,16).toRed(this.red),this.i4=new n(4).toRed(this.red).redInvm(),this.two=new n(2).toRed(this.red),this.a24=this.i4.redMul(this.a.redAdd(this.two))}function s(e,t,r){a.BasePoint.call(this,e,"projective"),null===t&&null===r?(this.x=this.curve.one,this.z=this.curve.zero):(this.x=new n(t,16),this.z=new n(r,16),this.x.red||(this.x=this.x.toRed(this.curve.red)),this.z.red||(this.z=this.z.toRed(this.curve.red)))}i(f,a),e.exports=f,f.prototype.validate=function(e){var t=e.normalize().x,r=t.redSqr(),n=r.redMul(t).redAdd(r.redMul(this.a)).redAdd(t);return 0===n.redSqrt().redSqr().cmp(n)},i(s,a.BasePoint),f.prototype.decodePoint=function(e,t){return this.point(o.toArray(e,t),1)},f.prototype.point=function(e,t){return new s(this,e,t)},f.prototype.pointFromJSON=function(e){return s.fromJSON(this,e)},s.prototype.precompute=function(){},s.prototype._encode=function(){return this.getX().toArray("be",this.curve.p.byteLength())},s.fromJSON=function(e,t){return new s(e,t[0],t[1]||e.one)},s.prototype.inspect=function(){return this.isInfinity()?"<EC Point Infinity>":"<EC Point x: "+this.x.fromRed().toString(16,2)+" z: "+this.z.fromRed().toString(16,2)+">"},s.prototype.isInfinity=function(){return 0===this.z.cmpn(0)},s.prototype.dbl=function(){var e=this.x.redAdd(this.z).redSqr(),t=this.x.redSub(this.z).redSqr(),r=e.redSub(t),n=e.redMul(t),i=r.redMul(t.redAdd(this.curve.a24.redMul(r)));return this.curve.point(n,i)},s.prototype.add=function(){throw new Error("Not supported on Montgomery curve")},s.prototype.diffAdd=function(e,t){var r=this.x.redAdd(this.z),n=this.x.redSub(this.z),i=e.x.redAdd(e.z),a=e.x.redSub(e.z).redMul(r),o=i.redMul(n),f=t.z.redMul(a.redAdd(o).redSqr()),s=t.x.redMul(a.redISub(o).redSqr());return this.curve.point(f,s)},s.prototype.mul=function(e){for(var t=e.clone(),r=this,n=this.curve.point(null,null),i=[];0!==t.cmpn(0);t.iushrn(1))i.push(t.andln(1));for(var a=i.length-1;a>=0;a--)0===i[a]?(r=r.diffAdd(n,this),n=n.dbl()):(n=r.diffAdd(n,this),r=r.dbl());return n},s.prototype.mulAdd=function(){throw new Error("Not supported on Montgomery curve")},s.prototype.jumlAdd=function(){throw new Error("Not supported on Montgomery curve")},s.prototype.eq=function(e){return 0===this.getX().cmp(e.getX())},s.prototype.normalize=function(){return this.x=this.x.redMul(this.z.redInvm()),this.z=this.curve.one,this},s.prototype.getX=function(){return this.normalize(),this.x.fromRed()}},function(e,t,r){"use strict";var n=r(5),i=r(2),a=r(0),o=r(24),f=n.assert;function s(e){this.twisted=1!=(0|e.a),this.mOneA=this.twisted&&-1==(0|e.a),this.extended=this.mOneA,o.call(this,"edwards",e),this.a=new i(e.a,16).umod(this.red.m),this.a=this.a.toRed(this.red),this.c=new i(e.c,16).toRed(this.red),this.c2=this.c.redSqr(),this.d=new i(e.d,16).toRed(this.red),this.dd=this.d.redAdd(this.d),f(!this.twisted||0===this.c.fromRed().cmpn(1)),this.oneC=1==(0|e.c)}function c(e,t,r,n,a){o.BasePoint.call(this,e,"projective"),null===t&&null===r&&null===n?(this.x=this.curve.zero,this.y=this.curve.one,this.z=this.curve.one,this.t=this.curve.zero,this.zOne=!0):(this.x=new i(t,16),this.y=new i(r,16),this.z=n?new i(n,16):this.curve.one,this.t=a&&new i(a,16),this.x.red||(this.x=this.x.toRed(this.curve.red)),this.y.red||(this.y=this.y.toRed(this.curve.red)),this.z.red||(this.z=this.z.toRed(this.curve.red)),this.t&&!this.t.red&&(this.t=this.t.toRed(this.curve.red)),this.zOne=this.z===this.curve.one,this.curve.extended&&!this.t&&(this.t=this.x.redMul(this.y),this.zOne||(this.t=this.t.redMul(this.z.redInvm()))))}a(s,o),e.exports=s,s.prototype._mulA=function(e){return this.mOneA?e.redNeg():this.a.redMul(e)},s.prototype._mulC=function(e){return this.oneC?e:this.c.redMul(e)},s.prototype.jpoint=function(e,t,r,n){return this.point(e,t,r,n)},s.prototype.pointFromX=function(e,t){(e=new i(e,16)).red||(e=e.toRed(this.red));var r=e.redSqr(),n=this.c2.redSub(this.a.redMul(r)),a=this.one.redSub(this.c2.redMul(this.d).redMul(r)),o=n.redMul(a.redInvm()),f=o.redSqrt();if(0!==f.redSqr().redSub(o).cmp(this.zero))throw new Error("invalid point");var s=f.fromRed().isOdd();return(t&&!s||!t&&s)&&(f=f.redNeg()),this.point(e,f)},s.prototype.pointFromY=function(e,t){(e=new i(e,16)).red||(e=e.toRed(this.red));var r=e.redSqr(),n=r.redSub(this.c2),a=r.redMul(this.d).redMul(this.c2).redSub(this.a),o=n.redMul(a.redInvm());if(0===o.cmp(this.zero)){if(t)throw new Error("invalid point");return this.point(this.zero,e)}var f=o.redSqrt();if(0!==f.redSqr().redSub(o).cmp(this.zero))throw new Error("invalid point");return f.fromRed().isOdd()!==t&&(f=f.redNeg()),this.point(f,e)},s.prototype.validate=function(e){if(e.isInfinity())return!0;e.normalize();var t=e.x.redSqr(),r=e.y.redSqr(),n=t.redMul(this.a).redAdd(r),i=this.c2.redMul(this.one.redAdd(this.d.redMul(t).redMul(r)));return 0===n.cmp(i)},a(c,o.BasePoint),s.prototype.pointFromJSON=function(e){return c.fromJSON(this,e)},s.prototype.point=function(e,t,r,n){return new c(this,e,t,r,n)},c.fromJSON=function(e,t){return new c(e,t[0],t[1],t[2])},c.prototype.inspect=function(){return this.isInfinity()?"<EC Point Infinity>":"<EC Point x: "+this.x.fromRed().toString(16,2)+" y: "+this.y.fromRed().toString(16,2)+" z: "+this.z.fromRed().toString(16,2)+">"},c.prototype.isInfinity=function(){return 0===this.x.cmpn(0)&&(0===this.y.cmp(this.z)||this.zOne&&0===this.y.cmp(this.curve.c))},c.prototype._extDbl=function(){var e=this.x.redSqr(),t=this.y.redSqr(),r=this.z.redSqr();r=r.redIAdd(r);var n=this.curve._mulA(e),i=this.x.redAdd(this.y).redSqr().redISub(e).redISub(t),a=n.redAdd(t),o=a.redSub(r),f=n.redSub(t),s=i.redMul(o),c=a.redMul(f),u=i.redMul(f),h=o.redMul(a);return this.curve.point(s,c,h,u)},c.prototype._projDbl=function(){var e,t,r,n=this.x.redAdd(this.y).redSqr(),i=this.x.redSqr(),a=this.y.redSqr();if(this.curve.twisted){var o=(c=this.curve._mulA(i)).redAdd(a);if(this.zOne)e=n.redSub(i).redSub(a).redMul(o.redSub(this.curve.two)),t=o.redMul(c.redSub(a)),r=o.redSqr().redSub(o).redSub(o);else{var f=this.z.redSqr(),s=o.redSub(f).redISub(f);e=n.redSub(i).redISub(a).redMul(s),t=o.redMul(c.redSub(a)),r=o.redMul(s)}}else{var c=i.redAdd(a);f=this.curve._mulC(this.z).redSqr(),s=c.redSub(f).redSub(f);e=this.curve._mulC(n.redISub(c)).redMul(s),t=this.curve._mulC(c).redMul(i.redISub(a)),r=c.redMul(s)}return this.curve.point(e,t,r)},c.prototype.dbl=function(){return this.isInfinity()?this:this.curve.extended?this._extDbl():this._projDbl()},c.prototype._extAdd=function(e){var t=this.y.redSub(this.x).redMul(e.y.redSub(e.x)),r=this.y.redAdd(this.x).redMul(e.y.redAdd(e.x)),n=this.t.redMul(this.curve.dd).redMul(e.t),i=this.z.redMul(e.z.redAdd(e.z)),a=r.redSub(t),o=i.redSub(n),f=i.redAdd(n),s=r.redAdd(t),c=a.redMul(o),u=f.redMul(s),h=a.redMul(s),d=o.redMul(f);return this.curve.point(c,u,d,h)},c.prototype._projAdd=function(e){var t,r,n=this.z.redMul(e.z),i=n.redSqr(),a=this.x.redMul(e.x),o=this.y.redMul(e.y),f=this.curve.d.redMul(a).redMul(o),s=i.redSub(f),c=i.redAdd(f),u=this.x.redAdd(this.y).redMul(e.x.redAdd(e.y)).redISub(a).redISub(o),h=n.redMul(s).redMul(u);return this.curve.twisted?(t=n.redMul(c).redMul(o.redSub(this.curve._mulA(a))),r=s.redMul(c)):(t=n.redMul(c).redMul(o.redSub(a)),r=this.curve._mulC(s).redMul(c)),this.curve.point(h,t,r)},c.prototype.add=function(e){return this.isInfinity()?e:e.isInfinity()?this:this.curve.extended?this._extAdd(e):this._projAdd(e)},c.prototype.mul=function(e){return this._hasDoubles(e)?this.curve._fixedNafMul(this,e):this.curve._wnafMul(this,e)},c.prototype.mulAdd=function(e,t,r){return this.curve._wnafMulAdd(1,[this,t],[e,r],2,!1)},c.prototype.jmulAdd=function(e,t,r){return this.curve._wnafMulAdd(1,[this,t],[e,r],2,!0)},c.prototype.normalize=function(){if(this.zOne)return this;var e=this.z.redInvm();return this.x=this.x.redMul(e),this.y=this.y.redMul(e),this.t&&(this.t=this.t.redMul(e)),this.z=this.curve.one,this.zOne=!0,this},c.prototype.neg=function(){return this.curve.point(this.x.redNeg(),this.y,this.z,this.t&&this.t.redNeg())},c.prototype.getX=function(){return this.normalize(),this.x.fromRed()},c.prototype.getY=function(){return this.normalize(),this.y.fromRed()},c.prototype.eq=function(e){return this===e||0===this.getX().cmp(e.getX())&&0===this.getY().cmp(e.getY())},c.prototype.eqXToP=function(e){var t=e.toRed(this.curve.red).redMul(this.z);if(0===this.x.cmp(t))return!0;for(var r=e.clone(),n=this.curve.redN.redMul(this.z);;){if(r.iadd(this.curve.n),r.cmp(this.curve.p)>=0)return!1;if(t.redIAdd(n),0===this.x.cmp(t))return!0}},c.prototype.toP=c.prototype.normalize,c.prototype.mixedAdd=c.prototype.add},function(e,t,r){"use strict";t.sha1=r(134),t.sha224=r(135),t.sha256=r(66),t.sha384=r(136),t.sha512=r(67)},function(e,t,r){"use strict";var n=r(8),i=r(17),a=r(65),o=n.rotl32,f=n.sum32,s=n.sum32_5,c=a.ft_1,u=i.BlockHash,h=[1518500249,1859775393,2400959708,3395469782];function d(){if(!(this instanceof d))return new d;u.call(this),this.h=[1732584193,4023233417,2562383102,271733878,3285377520],this.W=new Array(80)}n.inherits(d,u),e.exports=d,d.blockSize=512,d.outSize=160,d.hmacStrength=80,d.padLength=64,d.prototype._update=function(e,t){for(var r=this.W,n=0;n<16;n++)r[n]=e[t+n];for(;n<r.length;n++)r[n]=o(r[n-3]^r[n-8]^r[n-14]^r[n-16],1);var i=this.h[0],a=this.h[1],u=this.h[2],d=this.h[3],l=this.h[4];for(n=0;n<r.length;n++){var p=~~(n/20),b=s(o(i,5),c(p,a,u,d),l,r[n],h[p]);l=d,d=u,u=o(a,30),a=i,i=b}this.h[0]=f(this.h[0],i),this.h[1]=f(this.h[1],a),this.h[2]=f(this.h[2],u),this.h[3]=f(this.h[3],d),this.h[4]=f(this.h[4],l)},d.prototype._digest=function(e){return"hex"===e?n.toHex32(this.h,"big"):n.split32(this.h,"big")}},function(e,t,r){"use strict";var n=r(8),i=r(66);function a(){if(!(this instanceof a))return new a;i.call(this),this.h=[3238371032,914150663,812702999,4144912697,4290775857,1750603025,1694076839,3204075428]}n.inherits(a,i),e.exports=a,a.blockSize=512,a.outSize=224,a.hmacStrength=192,a.padLength=64,a.prototype._digest=function(e){return"hex"===e?n.toHex32(this.h.slice(0,7),"big"):n.split32(this.h.slice(0,7),"big")}},function(e,t,r){"use strict";var n=r(8),i=r(67);function a(){if(!(this instanceof a))return new a;i.call(this),this.h=[3418070365,3238371032,1654270250,914150663,2438529370,812702999,355462360,4144912697,1731405415,4290775857,2394180231,1750603025,3675008525,1694076839,1203062813,3204075428]}n.inherits(a,i),e.exports=a,a.blockSize=1024,a.outSize=384,a.hmacStrength=192,a.padLength=128,a.prototype._digest=function(e){return"hex"===e?n.toHex32(this.h.slice(0,12),"big"):n.split32(this.h.slice(0,12),"big")}},function(e,t,r){"use strict";var n=r(8),i=r(17),a=n.rotl32,o=n.sum32,f=n.sum32_3,s=n.sum32_4,c=i.BlockHash;function u(){if(!(this instanceof u))return new u;c.call(this),this.h=[1732584193,4023233417,2562383102,271733878,3285377520],this.endian="little"}function h(e,t,r,n){return e<=15?t^r^n:e<=31?t&r|~t&n:e<=47?(t|~r)^n:e<=63?t&n|r&~n:t^(r|~n)}function d(e){return e<=15?0:e<=31?1518500249:e<=47?1859775393:e<=63?2400959708:2840853838}function l(e){return e<=15?1352829926:e<=31?1548603684:e<=47?1836072691:e<=63?2053994217:0}n.inherits(u,c),t.ripemd160=u,u.blockSize=512,u.outSize=160,u.hmacStrength=192,u.padLength=64,u.prototype._update=function(e,t){for(var r=this.h[0],n=this.h[1],i=this.h[2],c=this.h[3],u=this.h[4],m=r,v=n,_=i,w=c,E=u,A=0;A<80;A++){var S=o(a(s(r,h(A,n,i,c),e[p[A]+t],d(A)),y[A]),u);r=u,u=c,c=a(i,10),i=n,n=S,S=o(a(s(m,h(79-A,v,_,w),e[b[A]+t],l(A)),g[A]),E),m=E,E=w,w=a(_,10),_=v,v=S}S=f(this.h[1],i,w),this.h[1]=f(this.h[2],c,E),this.h[2]=f(this.h[3],u,m),this.h[3]=f(this.h[4],r,v),this.h[4]=f(this.h[0],n,_),this.h[0]=S},u.prototype._digest=function(e){return"hex"===e?n.toHex32(this.h,"little"):n.split32(this.h,"little")};var p=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,7,4,13,1,10,6,15,3,12,0,9,5,2,14,11,8,3,10,14,4,9,15,8,1,2,7,0,6,13,11,5,12,1,9,11,10,0,8,12,4,13,3,7,15,14,5,6,2,4,0,5,9,7,12,2,10,14,1,3,8,11,6,15,13],b=[5,14,7,0,9,2,11,4,13,6,15,8,1,10,3,12,6,11,3,7,0,13,5,10,14,15,8,12,4,9,1,2,15,5,1,3,7,14,6,9,11,8,12,2,10,0,4,13,8,6,4,1,3,11,15,0,5,12,2,13,9,7,10,14,12,15,10,4,1,5,8,7,6,2,13,14,0,3,9,11],y=[11,14,15,12,5,8,7,9,11,13,14,15,6,7,9,8,7,6,8,13,11,9,7,15,7,12,15,9,11,7,13,12,11,13,6,7,14,9,13,15,14,8,13,6,5,12,7,5,11,12,14,15,14,15,9,8,9,14,5,6,8,6,5,12,9,15,5,11,6,8,13,12,5,12,13,14,11,8,5,6],g=[8,9,9,11,13,15,15,5,7,7,8,11,14,14,12,6,9,13,15,7,12,8,9,11,7,7,12,7,6,15,13,11,9,7,15,11,8,6,6,14,12,13,5,14,13,13,7,5,15,5,8,11,14,14,6,14,6,9,12,9,12,5,15,8,8,5,12,9,12,5,14,6,8,13,6,5,15,13,11,11]},function(e,t,r){"use strict";var n=r(8),i=r(4);function a(e,t,r){if(!(this instanceof a))return new a(e,t,r);this.Hash=e,this.blockSize=e.blockSize/8,this.outSize=e.outSize/8,this.inner=null,this.outer=null,this._init(n.toArray(t,r))}e.exports=a,a.prototype._init=function(e){e.length>this.blockSize&&(e=(new this.Hash).update(e).digest()),i(e.length<=this.blockSize);for(var t=e.length;t<this.blockSize;t++)e.push(0);for(t=0;t<e.length;t++)e[t]^=54;for(this.inner=(new this.Hash).update(e),t=0;t<e.length;t++)e[t]^=106;this.outer=(new this.Hash).update(e)},a.prototype.update=function(e,t){return this.inner.update(e,t),this},a.prototype.digest=function(e){return this.outer.update(this.inner.digest()),this.outer.digest(e)}},function(e,t){e.exports={doubles:{step:4,points:[["e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a","f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821"],["8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508","11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf"],["175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739","d3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695"],["363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640","4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9"],["8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c","4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36"],["723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda","96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f"],["eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa","5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999"],["100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0","cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09"],["e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d","9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d"],["feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d","e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088"],["da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1","9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d"],["53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0","5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8"],["8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047","10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a"],["385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862","283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453"],["6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7","7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160"],["3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd","56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0"],["85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83","7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6"],["948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a","53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589"],["6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8","bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17"],["e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d","4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda"],["e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725","7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd"],["213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754","4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2"],["4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c","17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6"],["fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6","6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f"],["76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39","c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01"],["c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891","893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3"],["d895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b","febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f"],["b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03","2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7"],["e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d","eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78"],["a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070","7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1"],["90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4","e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150"],["8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da","662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82"],["e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11","1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc"],["8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e","efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b"],["e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41","2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51"],["b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef","67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45"],["d68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8","db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120"],["324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d","648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84"],["4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96","35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d"],["9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd","ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d"],["6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5","9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8"],["a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266","40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8"],["7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71","34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac"],["928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac","c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f"],["85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751","1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962"],["ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e","493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907"],["827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241","c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec"],["eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3","be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d"],["e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f","4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414"],["1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19","aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd"],["146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be","b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0"],["fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9","6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811"],["da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2","8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1"],["a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13","7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c"],["174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c","ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73"],["959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba","2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd"],["d2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151","e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405"],["64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073","d99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589"],["8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458","38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e"],["13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b","69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27"],["bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366","d3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1"],["8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa","40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482"],["8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0","620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945"],["dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787","7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573"],["f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e","ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82"]]},naf:{wnd:7,points:[["f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9","388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672"],["2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4","d8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6"],["5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc","6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da"],["acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe","cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37"],["774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb","d984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b"],["f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8","ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81"],["d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e","581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58"],["defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34","4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77"],["2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c","85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a"],["352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5","321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c"],["2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f","2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67"],["9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714","73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402"],["daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729","a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55"],["c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db","2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482"],["6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4","e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82"],["1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5","b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396"],["605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479","2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49"],["62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d","80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf"],["80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f","1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a"],["7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb","d0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7"],["d528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9","eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933"],["49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963","758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a"],["77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74","958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6"],["f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530","e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37"],["463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b","5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e"],["f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247","cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6"],["caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1","cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476"],["2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120","4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40"],["7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435","91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61"],["754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18","673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683"],["e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8","59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5"],["186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb","3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b"],["df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f","55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417"],["5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143","efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868"],["290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba","e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a"],["af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45","f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6"],["766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a","744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996"],["59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e","c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e"],["f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8","e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d"],["7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c","30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2"],["948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519","e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e"],["7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab","100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437"],["3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca","ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311"],["d3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf","8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4"],["1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610","68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575"],["733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4","f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d"],["15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c","d56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d"],["a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940","edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629"],["e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980","a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06"],["311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3","66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374"],["34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf","9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee"],["f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63","4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1"],["d7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448","fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b"],["32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf","5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661"],["7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5","8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6"],["ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6","8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e"],["16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5","5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d"],["eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99","f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc"],["78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51","f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4"],["494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5","42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c"],["a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5","204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b"],["c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997","4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913"],["841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881","73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154"],["5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5","39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865"],["36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66","d2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc"],["336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726","ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224"],["8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede","6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e"],["1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94","60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6"],["85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31","3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511"],["29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51","b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b"],["a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252","ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2"],["4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5","cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c"],["d24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b","6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3"],["ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4","322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d"],["af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f","6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700"],["e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889","2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4"],["591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246","b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196"],["11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984","998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4"],["3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a","b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257"],["cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030","bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13"],["c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197","6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096"],["c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593","c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38"],["a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef","21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f"],["347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38","60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448"],["da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a","49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a"],["c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111","5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4"],["4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502","7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437"],["3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea","be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7"],["cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26","8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d"],["b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986","39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a"],["d4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e","62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54"],["48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4","25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77"],["dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda","ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517"],["6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859","cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10"],["e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f","f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125"],["eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c","6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e"],["13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942","fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1"],["ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a","1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2"],["b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80","5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423"],["ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d","438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8"],["8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1","cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758"],["52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63","c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375"],["e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352","6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d"],["7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193","ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec"],["5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00","9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0"],["32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58","ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c"],["e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7","d3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4"],["8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8","c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f"],["4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e","67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649"],["3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d","cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826"],["674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b","299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5"],["d32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f","f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87"],["30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6","462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b"],["be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297","62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc"],["93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a","7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c"],["b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c","ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f"],["d5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52","4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a"],["d3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb","bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46"],["463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065","bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f"],["7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917","603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03"],["74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9","cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08"],["30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3","553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8"],["9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57","712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373"],["176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66","ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3"],["75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8","9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8"],["809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721","9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1"],["1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180","4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9"]]}}},function(e,t,r){"use strict";var n=r(2),i=r(141),a=r(5),o=r(40),f=r(37),s=a.assert,c=r(142),u=r(143);function h(e){if(!(this instanceof h))return new h(e);"string"==typeof e&&(s(o.hasOwnProperty(e),"Unknown curve "+e),e=o[e]),e instanceof o.PresetCurve&&(e={curve:e}),this.curve=e.curve.curve,this.n=this.curve.n,this.nh=this.n.ushrn(1),this.g=this.curve.g,this.g=e.curve.g,this.g.precompute(e.curve.n.bitLength()+1),this.hash=e.hash||e.curve.hash}e.exports=h,h.prototype.keyPair=function(e){return new c(this,e)},h.prototype.keyFromPrivate=function(e,t){return c.fromPrivate(this,e,t)},h.prototype.keyFromPublic=function(e,t){return c.fromPublic(this,e,t)},h.prototype.genKeyPair=function(e){e||(e={});for(var t=new i({hash:this.hash,pers:e.pers,persEnc:e.persEnc||"utf8",entropy:e.entropy||f(this.hash.hmacStrength),entropyEnc:e.entropy&&e.entropyEnc||"utf8",nonce:this.n.toArray()}),r=this.n.byteLength(),a=this.n.sub(new n(2));;){var o=new n(t.generate(r));if(!(o.cmp(a)>0))return o.iaddn(1),this.keyFromPrivate(o)}},h.prototype._truncateToN=function(e,t){var r=8*e.byteLength()-this.n.bitLength();return r>0&&(e=e.ushrn(r)),!t&&e.cmp(this.n)>=0?e.sub(this.n):e},h.prototype.sign=function(e,t,r,a){"object"==typeof r&&(a=r,r=null),a||(a={}),t=this.keyFromPrivate(t,r),e=this._truncateToN(new n(e,16));for(var o=this.n.byteLength(),f=t.getPrivate().toArray("be",o),s=e.toArray("be",o),c=new i({hash:this.hash,entropy:f,nonce:s,pers:a.pers,persEnc:a.persEnc||"utf8"}),h=this.n.sub(new n(1)),d=0;;d++){var l=a.k?a.k(d):new n(c.generate(this.n.byteLength()));if(!((l=this._truncateToN(l,!0)).cmpn(1)<=0||l.cmp(h)>=0)){var p=this.g.mul(l);if(!p.isInfinity()){var b=p.getX(),y=b.umod(this.n);if(0!==y.cmpn(0)){var g=l.invm(this.n).mul(y.mul(t.getPrivate()).iadd(e));if(0!==(g=g.umod(this.n)).cmpn(0)){var m=(p.getY().isOdd()?1:0)|(0!==b.cmp(y)?2:0);return a.canonical&&g.cmp(this.nh)>0&&(g=this.n.sub(g),m^=1),new u({r:y,s:g,recoveryParam:m})}}}}}},h.prototype.verify=function(e,t,r,i){e=this._truncateToN(new n(e,16)),r=this.keyFromPublic(r,i);var a=(t=new u(t,"hex")).r,o=t.s;if(a.cmpn(1)<0||a.cmp(this.n)>=0)return!1;if(o.cmpn(1)<0||o.cmp(this.n)>=0)return!1;var f,s=o.invm(this.n),c=s.mul(e).umod(this.n),h=s.mul(a).umod(this.n);return this.curve._maxwellTrick?!(f=this.g.jmulAdd(c,r.getPublic(),h)).isInfinity()&&f.eqXToP(a):!(f=this.g.mulAdd(c,r.getPublic(),h)).isInfinity()&&0===f.getX().umod(this.n).cmp(a)},h.prototype.recoverPubKey=function(e,t,r,i){s((3&r)===r,"The recovery param is more than two bits"),t=new u(t,i);var a=this.n,o=new n(e),f=t.r,c=t.s,h=1&r,d=r>>1;if(f.cmp(this.curve.p.umod(this.curve.n))>=0&&d)throw new Error("Unable to find sencond key candinate");f=d?this.curve.pointFromX(f.add(this.curve.n),h):this.curve.pointFromX(f,h);var l=t.r.invm(a),p=a.sub(o).mul(l).umod(a),b=c.mul(l).umod(a);return this.g.mulAdd(p,f,b)},h.prototype.getKeyRecoveryParam=function(e,t,r,n){if(null!==(t=new u(t,n)).recoveryParam)return t.recoveryParam;for(var i=0;i<4;i++){var a;try{a=this.recoverPubKey(e,t,i)}catch(e){continue}if(a.eq(r))return i}throw new Error("Unable to find valid recovery factor")}},function(e,t,r){"use strict";var n=r(41),i=r(63),a=r(4);function o(e){if(!(this instanceof o))return new o(e);this.hash=e.hash,this.predResist=!!e.predResist,this.outLen=this.hash.outSize,this.minEntropy=e.minEntropy||this.hash.hmacStrength,this._reseed=null,this.reseedInterval=null,this.K=null,this.V=null;var t=i.toArray(e.entropy,e.entropyEnc||"hex"),r=i.toArray(e.nonce,e.nonceEnc||"hex"),n=i.toArray(e.pers,e.persEnc||"hex");a(t.length>=this.minEntropy/8,"Not enough entropy. Minimum is: "+this.minEntropy+" bits"),this._init(t,r,n)}e.exports=o,o.prototype._init=function(e,t,r){var n=e.concat(t).concat(r);this.K=new Array(this.outLen/8),this.V=new Array(this.outLen/8);for(var i=0;i<this.V.length;i++)this.K[i]=0,this.V[i]=1;this._update(n),this._reseed=1,this.reseedInterval=281474976710656},o.prototype._hmac=function(){return new n.hmac(this.hash,this.K)},o.prototype._update=function(e){var t=this._hmac().update(this.V).update([0]);e&&(t=t.update(e)),this.K=t.digest(),this.V=this._hmac().update(this.V).digest(),e&&(this.K=this._hmac().update(this.V).update([1]).update(e).digest(),this.V=this._hmac().update(this.V).digest())},o.prototype.reseed=function(e,t,r,n){"string"!=typeof t&&(n=r,r=t,t=null),e=i.toArray(e,t),r=i.toArray(r,n),a(e.length>=this.minEntropy/8,"Not enough entropy. Minimum is: "+this.minEntropy+" bits"),this._update(e.concat(r||[])),this._reseed=1},o.prototype.generate=function(e,t,r,n){if(this._reseed>this.reseedInterval)throw new Error("Reseed is required");"string"!=typeof t&&(n=r,r=t,t=null),r&&(r=i.toArray(r,n||"hex"),this._update(r));for(var a=[];a.length<e;)this.V=this._hmac().update(this.V).digest(),a=a.concat(this.V);var o=a.slice(0,e);return this._update(r),this._reseed++,i.encode(o,t)}},function(e,t,r){"use strict";var n=r(2),i=r(5).assert;function a(e,t){this.ec=e,this.priv=null,this.pub=null,t.priv&&this._importPrivate(t.priv,t.privEnc),t.pub&&this._importPublic(t.pub,t.pubEnc)}e.exports=a,a.fromPublic=function(e,t,r){return t instanceof a?t:new a(e,{pub:t,pubEnc:r})},a.fromPrivate=function(e,t,r){return t instanceof a?t:new a(e,{priv:t,privEnc:r})},a.prototype.validate=function(){var e=this.getPublic();return e.isInfinity()?{result:!1,reason:"Invalid public key"}:e.validate()?e.mul(this.ec.curve.n).isInfinity()?{result:!0,reason:null}:{result:!1,reason:"Public key * N != O"}:{result:!1,reason:"Public key is not a point"}},a.prototype.getPublic=function(e,t){return"string"==typeof e&&(t=e,e=null),this.pub||(this.pub=this.ec.g.mul(this.priv)),t?this.pub.encode(t,e):this.pub},a.prototype.getPrivate=function(e){return"hex"===e?this.priv.toString(16,2):this.priv},a.prototype._importPrivate=function(e,t){this.priv=new n(e,t||16),this.priv=this.priv.umod(this.ec.curve.n)},a.prototype._importPublic=function(e,t){if(e.x||e.y)return"mont"===this.ec.curve.type?i(e.x,"Need x coordinate"):"short"!==this.ec.curve.type&&"edwards"!==this.ec.curve.type||i(e.x&&e.y,"Need both x and y coordinate"),void(this.pub=this.ec.curve.point(e.x,e.y));this.pub=this.ec.curve.decodePoint(e,t)},a.prototype.derive=function(e){return e.mul(this.priv).getX()},a.prototype.sign=function(e,t,r){return this.ec.sign(e,this,t,r)},a.prototype.verify=function(e,t){return this.ec.verify(e,t,this)},a.prototype.inspect=function(){return"<Key priv: "+(this.priv&&this.priv.toString(16,2))+" pub: "+(this.pub&&this.pub.inspect())+" >"}},function(e,t,r){"use strict";var n=r(2),i=r(5),a=i.assert;function o(e,t){if(e instanceof o)return e;this._importDER(e,t)||(a(e.r&&e.s,"Signature without r or s"),this.r=new n(e.r,16),this.s=new n(e.s,16),void 0===e.recoveryParam?this.recoveryParam=null:this.recoveryParam=e.recoveryParam)}function f(){this.place=0}function s(e,t){var r=e[t.place++];if(!(128&r))return r;for(var n=15&r,i=0,a=0,o=t.place;a<n;a++,o++)i<<=8,i|=e[o];return t.place=o,i}function c(e){for(var t=0,r=e.length-1;!e[t]&&!(128&e[t+1])&&t<r;)t++;return 0===t?e:e.slice(t)}function u(e,t){if(t<128)e.push(t);else{var r=1+(Math.log(t)/Math.LN2>>>3);for(e.push(128|r);--r;)e.push(t>>>(r<<3)&255);e.push(t)}}e.exports=o,o.prototype._importDER=function(e,t){e=i.toArray(e,t);var r=new f;if(48!==e[r.place++])return!1;if(s(e,r)+r.place!==e.length)return!1;if(2!==e[r.place++])return!1;var a=s(e,r),o=e.slice(r.place,a+r.place);if(r.place+=a,2!==e[r.place++])return!1;var c=s(e,r);if(e.length!==c+r.place)return!1;var u=e.slice(r.place,c+r.place);return 0===o[0]&&128&o[1]&&(o=o.slice(1)),0===u[0]&&128&u[1]&&(u=u.slice(1)),this.r=new n(o),this.s=new n(u),this.recoveryParam=null,!0},o.prototype.toDER=function(e){var t=this.r.toArray(),r=this.s.toArray();for(128&t[0]&&(t=[0].concat(t)),128&r[0]&&(r=[0].concat(r)),t=c(t),r=c(r);!(r[0]||128&r[1]);)r=r.slice(1);var n=[2];u(n,t.length),(n=n.concat(t)).push(2),u(n,r.length);var a=n.concat(r),o=[48];return u(o,a.length),o=o.concat(a),i.encode(o,e)}},function(e,t,r){"use strict";var n=r(41),i=r(40),a=r(5),o=a.assert,f=a.parseBytes,s=r(145),c=r(146);function u(e){if(o("ed25519"===e,"only tested with ed25519 so far"),!(this instanceof u))return new u(e);e=i[e].curve;this.curve=e,this.g=e.g,this.g.precompute(e.n.bitLength()+1),this.pointClass=e.point().constructor,this.encodingLength=Math.ceil(e.n.bitLength()/8),this.hash=n.sha512}e.exports=u,u.prototype.sign=function(e,t){e=f(e);var r=this.keyFromSecret(t),n=this.hashInt(r.messagePrefix(),e),i=this.g.mul(n),a=this.encodePoint(i),o=this.hashInt(a,r.pubBytes(),e).mul(r.priv()),s=n.add(o).umod(this.curve.n);return this.makeSignature({R:i,S:s,Rencoded:a})},u.prototype.verify=function(e,t,r){e=f(e),t=this.makeSignature(t);var n=this.keyFromPublic(r),i=this.hashInt(t.Rencoded(),n.pubBytes(),e),a=this.g.mul(t.S());return t.R().add(n.pub().mul(i)).eq(a)},u.prototype.hashInt=function(){for(var e=this.hash(),t=0;t<arguments.length;t++)e.update(arguments[t]);return a.intFromLE(e.digest()).umod(this.curve.n)},u.prototype.keyFromPublic=function(e){return s.fromPublic(this,e)},u.prototype.keyFromSecret=function(e){return s.fromSecret(this,e)},u.prototype.makeSignature=function(e){return e instanceof c?e:new c(this,e)},u.prototype.encodePoint=function(e){var t=e.getY().toArray("le",this.encodingLength);return t[this.encodingLength-1]|=e.getX().isOdd()?128:0,t},u.prototype.decodePoint=function(e){var t=(e=a.parseBytes(e)).length-1,r=e.slice(0,t).concat(-129&e[t]),n=0!=(128&e[t]),i=a.intFromLE(r);return this.curve.pointFromY(i,n)},u.prototype.encodeInt=function(e){return e.toArray("le",this.encodingLength)},u.prototype.decodeInt=function(e){return a.intFromLE(e)},u.prototype.isPoint=function(e){return e instanceof this.pointClass}},function(e,t,r){"use strict";var n=r(5),i=n.assert,a=n.parseBytes,o=n.cachedProperty;function f(e,t){this.eddsa=e,this._secret=a(t.secret),e.isPoint(t.pub)?this._pub=t.pub:this._pubBytes=a(t.pub)}f.fromPublic=function(e,t){return t instanceof f?t:new f(e,{pub:t})},f.fromSecret=function(e,t){return t instanceof f?t:new f(e,{secret:t})},f.prototype.secret=function(){return this._secret},o(f,"pubBytes",(function(){return this.eddsa.encodePoint(this.pub())})),o(f,"pub",(function(){return this._pubBytes?this.eddsa.decodePoint(this._pubBytes):this.eddsa.g.mul(this.priv())})),o(f,"privBytes",(function(){var e=this.eddsa,t=this.hash(),r=e.encodingLength-1,n=t.slice(0,e.encodingLength);return n[0]&=248,n[r]&=127,n[r]|=64,n})),o(f,"priv",(function(){return this.eddsa.decodeInt(this.privBytes())})),o(f,"hash",(function(){return this.eddsa.hash().update(this.secret()).digest()})),o(f,"messagePrefix",(function(){return this.hash().slice(this.eddsa.encodingLength)})),f.prototype.sign=function(e){return i(this._secret,"KeyPair can only verify"),this.eddsa.sign(e,this)},f.prototype.verify=function(e,t){return this.eddsa.verify(e,t,this)},f.prototype.getSecret=function(e){return i(this._secret,"KeyPair is public only"),n.encode(this.secret(),e)},f.prototype.getPublic=function(e){return n.encode(this.pubBytes(),e)},e.exports=f},function(e,t,r){"use strict";var n=r(2),i=r(5),a=i.assert,o=i.cachedProperty,f=i.parseBytes;function s(e,t){this.eddsa=e,"object"!=typeof t&&(t=f(t)),Array.isArray(t)&&(t={R:t.slice(0,e.encodingLength),S:t.slice(e.encodingLength)}),a(t.R&&t.S,"Signature without R or S"),e.isPoint(t.R)&&(this._R=t.R),t.S instanceof n&&(this._S=t.S),this._Rencoded=Array.isArray(t.R)?t.R:t.Rencoded,this._Sencoded=Array.isArray(t.S)?t.S:t.Sencoded}o(s,"S",(function(){return this.eddsa.decodeInt(this.Sencoded())})),o(s,"R",(function(){return this.eddsa.decodePoint(this.Rencoded())})),o(s,"Rencoded",(function(){return this.eddsa.encodePoint(this.R())})),o(s,"Sencoded",(function(){return this.eddsa.encodeInt(this.S())})),s.prototype.toBytes=function(){return this.Rencoded().concat(this.Sencoded())},s.prototype.toHex=function(){return i.encode(this.toBytes(),"hex").toUpperCase()},e.exports=s},function(e,t,r){"use strict";var n=r(18);t.certificate=r(157);var i=n.define("RSAPrivateKey",(function(){this.seq().obj(this.key("version").int(),this.key("modulus").int(),this.key("publicExponent").int(),this.key("privateExponent").int(),this.key("prime1").int(),this.key("prime2").int(),this.key("exponent1").int(),this.key("exponent2").int(),this.key("coefficient").int())}));t.RSAPrivateKey=i;var a=n.define("RSAPublicKey",(function(){this.seq().obj(this.key("modulus").int(),this.key("publicExponent").int())}));t.RSAPublicKey=a;var o=n.define("SubjectPublicKeyInfo",(function(){this.seq().obj(this.key("algorithm").use(f),this.key("subjectPublicKey").bitstr())}));t.PublicKey=o;var f=n.define("AlgorithmIdentifier",(function(){this.seq().obj(this.key("algorithm").objid(),this.key("none").null_().optional(),this.key("curve").objid().optional(),this.key("params").seq().obj(this.key("p").int(),this.key("q").int(),this.key("g").int()).optional())})),s=n.define("PrivateKeyInfo",(function(){this.seq().obj(this.key("version").int(),this.key("algorithm").use(f),this.key("subjectPrivateKey").octstr())}));t.PrivateKey=s;var c=n.define("EncryptedPrivateKeyInfo",(function(){this.seq().obj(this.key("algorithm").seq().obj(this.key("id").objid(),this.key("decrypt").seq().obj(this.key("kde").seq().obj(this.key("id").objid(),this.key("kdeparams").seq().obj(this.key("salt").octstr(),this.key("iters").int())),this.key("cipher").seq().obj(this.key("algo").objid(),this.key("iv").octstr()))),this.key("subjectPrivateKey").octstr())}));t.EncryptedPrivateKey=c;var u=n.define("DSAPrivateKey",(function(){this.seq().obj(this.key("version").int(),this.key("p").int(),this.key("q").int(),this.key("g").int(),this.key("pub_key").int(),this.key("priv_key").int())}));t.DSAPrivateKey=u,t.DSAparam=n.define("DSAparam",(function(){this.int()}));var h=n.define("ECPrivateKey",(function(){this.seq().obj(this.key("version").int(),this.key("privateKey").octstr(),this.key("parameters").optional().explicit(0).use(d),this.key("publicKey").optional().explicit(1).bitstr())}));t.ECPrivateKey=h;var d=n.define("ECParameters",(function(){this.choice({namedCurve:this.objid()})}));t.signature=n.define("signature",(function(){this.seq().obj(this.key("r").int(),this.key("s").int())}))},function(e,t,r){var n=r(18),i=r(0);function a(e,t){this.name=e,this.body=t,this.decoders={},this.encoders={}}t.define=function(e,t){return new a(e,t)},a.prototype._createNamed=function(e){var t;try{t=r(149).runInThisContext("(function "+this.name+"(entity) {\n  this._initNamed(entity);\n})")}catch(e){t=function(e){this._initNamed(e)}}return i(t,e),t.prototype._initNamed=function(t){e.call(this,t)},new t(this)},a.prototype._getDecoder=function(e){return e=e||"der",this.decoders.hasOwnProperty(e)||(this.decoders[e]=this._createNamed(n.decoders[e])),this.decoders[e]},a.prototype.decode=function(e,t,r){return this._getDecoder(t).decode(e,r)},a.prototype._getEncoder=function(e){return e=e||"der",this.encoders.hasOwnProperty(e)||(this.encoders[e]=this._createNamed(n.encoders[e])),this.encoders[e]},a.prototype.encode=function(e,t,r){return this._getEncoder(t).encode(e,r)}},function(module,exports){var indexOf=function(e,t){if(e.indexOf)return e.indexOf(t);for(var r=0;r<e.length;r++)if(e[r]===t)return r;return-1},Object_keys=function(e){if(Object.keys)return Object.keys(e);var t=[];for(var r in e)t.push(r);return t},forEach=function(e,t){if(e.forEach)return e.forEach(t);for(var r=0;r<e.length;r++)t(e[r],r,e)},defineProp=function(){try{return Object.defineProperty({},"_",{}),function(e,t,r){Object.defineProperty(e,t,{writable:!0,enumerable:!1,configurable:!0,value:r})}}catch(e){return function(e,t,r){e[t]=r}}}(),globals=["Array","Boolean","Date","Error","EvalError","Function","Infinity","JSON","Math","NaN","Number","Object","RangeError","ReferenceError","RegExp","String","SyntaxError","TypeError","URIError","decodeURI","decodeURIComponent","encodeURI","encodeURIComponent","escape","eval","isFinite","isNaN","parseFloat","parseInt","undefined","unescape"];function Context(){}Context.prototype={};var Script=exports.Script=function(e){if(!(this instanceof Script))return new Script(e);this.code=e};Script.prototype.runInContext=function(e){if(!(e instanceof Context))throw new TypeError("needs a 'context' argument.");var t=document.createElement("iframe");t.style||(t.style={}),t.style.display="none",document.body.appendChild(t);var r=t.contentWindow,n=r.eval,i=r.execScript;!n&&i&&(i.call(r,"null"),n=r.eval),forEach(Object_keys(e),(function(t){r[t]=e[t]})),forEach(globals,(function(t){e[t]&&(r[t]=e[t])}));var a=Object_keys(r),o=n.call(r,this.code);return forEach(Object_keys(r),(function(t){(t in e||-1===indexOf(a,t))&&(e[t]=r[t])})),forEach(globals,(function(t){t in e||defineProp(e,t,r[t])})),document.body.removeChild(t),o},Script.prototype.runInThisContext=function(){return eval(this.code)},Script.prototype.runInNewContext=function(e){var t=Script.createContext(e),r=this.runInContext(t);return e&&forEach(Object_keys(t),(function(r){e[r]=t[r]})),r},forEach(Object_keys(Script.prototype),(function(e){exports[e]=Script[e]=function(t){var r=Script(t);return r[e].apply(r,[].slice.call(arguments,1))}})),exports.isContext=function(e){return e instanceof Context},exports.createScript=function(e){return exports.Script(e)},exports.createContext=Script.createContext=function(e){var t=new Context;return"object"==typeof e&&forEach(Object_keys(e),(function(r){t[r]=e[r]})),t}},function(e,t,r){var n=r(0);function i(e){this._reporterState={obj:null,path:[],options:e||{},errors:[]}}function a(e,t){this.path=e,this.rethrow(t)}t.Reporter=i,i.prototype.isError=function(e){return e instanceof a},i.prototype.save=function(){var e=this._reporterState;return{obj:e.obj,pathLen:e.path.length}},i.prototype.restore=function(e){var t=this._reporterState;t.obj=e.obj,t.path=t.path.slice(0,e.pathLen)},i.prototype.enterKey=function(e){return this._reporterState.path.push(e)},i.prototype.exitKey=function(e){var t=this._reporterState;t.path=t.path.slice(0,e-1)},i.prototype.leaveKey=function(e,t,r){var n=this._reporterState;this.exitKey(e),null!==n.obj&&(n.obj[t]=r)},i.prototype.path=function(){return this._reporterState.path.join("/")},i.prototype.enterObject=function(){var e=this._reporterState,t=e.obj;return e.obj={},t},i.prototype.leaveObject=function(e){var t=this._reporterState,r=t.obj;return t.obj=e,r},i.prototype.error=function(e){var t,r=this._reporterState,n=e instanceof a;if(t=n?e:new a(r.path.map((function(e){return"["+JSON.stringify(e)+"]"})).join(""),e.message||e,e.stack),!r.options.partial)throw t;return n||r.errors.push(t),t},i.prototype.wrapResult=function(e){var t=this._reporterState;return t.options.partial?{result:this.isError(e)?null:e,errors:t.errors}:e},n(a,Error),a.prototype.rethrow=function(e){if(this.message=e+" at: "+(this.path||"(shallow)"),Error.captureStackTrace&&Error.captureStackTrace(this,a),!this.stack)try{throw new Error(this.message)}catch(e){this.stack=e.stack}return this}},function(e,t,r){var n=r(19).Reporter,i=r(19).EncoderBuffer,a=r(19).DecoderBuffer,o=r(4),f=["seq","seqof","set","setof","objid","bool","gentime","utctime","null_","enum","int","objDesc","bitstr","bmpstr","charstr","genstr","graphstr","ia5str","iso646str","numstr","octstr","printstr","t61str","unistr","utf8str","videostr"],s=["key","obj","use","optional","explicit","implicit","def","choice","any","contains"].concat(f);function c(e,t){var r={};this._baseState=r,r.enc=e,r.parent=t||null,r.children=null,r.tag=null,r.args=null,r.reverseArgs=null,r.choice=null,r.optional=!1,r.any=!1,r.obj=!1,r.use=null,r.useDecoder=null,r.key=null,r.default=null,r.explicit=null,r.implicit=null,r.contains=null,r.parent||(r.children=[],this._wrap())}e.exports=c;var u=["enc","parent","children","tag","args","reverseArgs","choice","optional","any","obj","use","alteredUse","key","default","explicit","implicit","contains"];c.prototype.clone=function(){var e=this._baseState,t={};u.forEach((function(r){t[r]=e[r]}));var r=new this.constructor(t.parent);return r._baseState=t,r},c.prototype._wrap=function(){var e=this._baseState;s.forEach((function(t){this[t]=function(){var r=new this.constructor(this);return e.children.push(r),r[t].apply(r,arguments)}}),this)},c.prototype._init=function(e){var t=this._baseState;o(null===t.parent),e.call(this),t.children=t.children.filter((function(e){return e._baseState.parent===this}),this),o.equal(t.children.length,1,"Root node can have only one child")},c.prototype._useArgs=function(e){var t=this._baseState,r=e.filter((function(e){return e instanceof this.constructor}),this);e=e.filter((function(e){return!(e instanceof this.constructor)}),this),0!==r.length&&(o(null===t.children),t.children=r,r.forEach((function(e){e._baseState.parent=this}),this)),0!==e.length&&(o(null===t.args),t.args=e,t.reverseArgs=e.map((function(e){if("object"!=typeof e||e.constructor!==Object)return e;var t={};return Object.keys(e).forEach((function(r){r==(0|r)&&(r|=0);var n=e[r];t[n]=r})),t})))},["_peekTag","_decodeTag","_use","_decodeStr","_decodeObjid","_decodeTime","_decodeNull","_decodeInt","_decodeBool","_decodeList","_encodeComposite","_encodeStr","_encodeObjid","_encodeTime","_encodeNull","_encodeInt","_encodeBool"].forEach((function(e){c.prototype[e]=function(){var t=this._baseState;throw new Error(e+" not implemented for encoding: "+t.enc)}})),f.forEach((function(e){c.prototype[e]=function(){var t=this._baseState,r=Array.prototype.slice.call(arguments);return o(null===t.tag),t.tag=e,this._useArgs(r),this}})),c.prototype.use=function(e){o(e);var t=this._baseState;return o(null===t.use),t.use=e,this},c.prototype.optional=function(){return this._baseState.optional=!0,this},c.prototype.def=function(e){var t=this._baseState;return o(null===t.default),t.default=e,t.optional=!0,this},c.prototype.explicit=function(e){var t=this._baseState;return o(null===t.explicit&&null===t.implicit),t.explicit=e,this},c.prototype.implicit=function(e){var t=this._baseState;return o(null===t.explicit&&null===t.implicit),t.implicit=e,this},c.prototype.obj=function(){var e=this._baseState,t=Array.prototype.slice.call(arguments);return e.obj=!0,0!==t.length&&this._useArgs(t),this},c.prototype.key=function(e){var t=this._baseState;return o(null===t.key),t.key=e,this},c.prototype.any=function(){return this._baseState.any=!0,this},c.prototype.choice=function(e){var t=this._baseState;return o(null===t.choice),t.choice=e,this._useArgs(Object.keys(e).map((function(t){return e[t]}))),this},c.prototype.contains=function(e){var t=this._baseState;return o(null===t.use),t.contains=e,this},c.prototype._decode=function(e,t){var r=this._baseState;if(null===r.parent)return e.wrapResult(r.children[0]._decode(e,t));var n,i=r.default,o=!0,f=null;if(null!==r.key&&(f=e.enterKey(r.key)),r.optional){var s=null;if(null!==r.explicit?s=r.explicit:null!==r.implicit?s=r.implicit:null!==r.tag&&(s=r.tag),null!==s||r.any){if(o=this._peekTag(e,s,r.any),e.isError(o))return o}else{var c=e.save();try{null===r.choice?this._decodeGeneric(r.tag,e,t):this._decodeChoice(e,t),o=!0}catch(e){o=!1}e.restore(c)}}if(r.obj&&o&&(n=e.enterObject()),o){if(null!==r.explicit){var u=this._decodeTag(e,r.explicit);if(e.isError(u))return u;e=u}var h=e.offset;if(null===r.use&&null===r.choice){if(r.any)c=e.save();var d=this._decodeTag(e,null!==r.implicit?r.implicit:r.tag,r.any);if(e.isError(d))return d;r.any?i=e.raw(c):e=d}if(t&&t.track&&null!==r.tag&&t.track(e.path(),h,e.length,"tagged"),t&&t.track&&null!==r.tag&&t.track(e.path(),e.offset,e.length,"content"),i=r.any?i:null===r.choice?this._decodeGeneric(r.tag,e,t):this._decodeChoice(e,t),e.isError(i))return i;if(r.any||null!==r.choice||null===r.children||r.children.forEach((function(r){r._decode(e,t)})),r.contains&&("octstr"===r.tag||"bitstr"===r.tag)){var l=new a(i);i=this._getUse(r.contains,e._reporterState.obj)._decode(l,t)}}return r.obj&&o&&(i=e.leaveObject(n)),null===r.key||null===i&&!0!==o?null!==f&&e.exitKey(f):e.leaveKey(f,r.key,i),i},c.prototype._decodeGeneric=function(e,t,r){var n=this._baseState;return"seq"===e||"set"===e?null:"seqof"===e||"setof"===e?this._decodeList(t,e,n.args[0],r):/str$/.test(e)?this._decodeStr(t,e,r):"objid"===e&&n.args?this._decodeObjid(t,n.args[0],n.args[1],r):"objid"===e?this._decodeObjid(t,null,null,r):"gentime"===e||"utctime"===e?this._decodeTime(t,e,r):"null_"===e?this._decodeNull(t,r):"bool"===e?this._decodeBool(t,r):"objDesc"===e?this._decodeStr(t,e,r):"int"===e||"enum"===e?this._decodeInt(t,n.args&&n.args[0],r):null!==n.use?this._getUse(n.use,t._reporterState.obj)._decode(t,r):t.error("unknown tag: "+e)},c.prototype._getUse=function(e,t){var r=this._baseState;return r.useDecoder=this._use(e,t),o(null===r.useDecoder._baseState.parent),r.useDecoder=r.useDecoder._baseState.children[0],r.implicit!==r.useDecoder._baseState.implicit&&(r.useDecoder=r.useDecoder.clone(),r.useDecoder._baseState.implicit=r.implicit),r.useDecoder},c.prototype._decodeChoice=function(e,t){var r=this._baseState,n=null,i=!1;return Object.keys(r.choice).some((function(a){var o=e.save(),f=r.choice[a];try{var s=f._decode(e,t);if(e.isError(s))return!1;n={type:a,value:s},i=!0}catch(t){return e.restore(o),!1}return!0}),this),i?n:e.error("Choice not matched")},c.prototype._createEncoderBuffer=function(e){return new i(e,this.reporter)},c.prototype._encode=function(e,t,r){var n=this._baseState;if(null===n.default||n.default!==e){var i=this._encodeValue(e,t,r);if(void 0!==i&&!this._skipDefault(i,t,r))return i}},c.prototype._encodeValue=function(e,t,r){var i=this._baseState;if(null===i.parent)return i.children[0]._encode(e,t||new n);var a=null;if(this.reporter=t,i.optional&&void 0===e){if(null===i.default)return;e=i.default}var o=null,f=!1;if(i.any)a=this._createEncoderBuffer(e);else if(i.choice)a=this._encodeChoice(e,t);else if(i.contains)o=this._getUse(i.contains,r)._encode(e,t),f=!0;else if(i.children)o=i.children.map((function(r){if("null_"===r._baseState.tag)return r._encode(null,t,e);if(null===r._baseState.key)return t.error("Child should have a key");var n=t.enterKey(r._baseState.key);if("object"!=typeof e)return t.error("Child expected, but input is not object");var i=r._encode(e[r._baseState.key],t,e);return t.leaveKey(n),i}),this).filter((function(e){return e})),o=this._createEncoderBuffer(o);else if("seqof"===i.tag||"setof"===i.tag){if(!i.args||1!==i.args.length)return t.error("Too many args for : "+i.tag);if(!Array.isArray(e))return t.error("seqof/setof, but data is not Array");var s=this.clone();s._baseState.implicit=null,o=this._createEncoderBuffer(e.map((function(r){var n=this._baseState;return this._getUse(n.args[0],e)._encode(r,t)}),s))}else null!==i.use?a=this._getUse(i.use,r)._encode(e,t):(o=this._encodePrimitive(i.tag,e),f=!0);if(!i.any&&null===i.choice){var c=null!==i.implicit?i.implicit:i.tag,u=null===i.implicit?"universal":"context";null===c?null===i.use&&t.error("Tag could be omitted only for .use()"):null===i.use&&(a=this._encodeComposite(c,f,u,o))}return null!==i.explicit&&(a=this._encodeComposite(i.explicit,!1,"context",a)),a},c.prototype._encodeChoice=function(e,t){var r=this._baseState,n=r.choice[e.type];return n||o(!1,e.type+" not found in "+JSON.stringify(Object.keys(r.choice))),n._encode(e.value,t)},c.prototype._encodePrimitive=function(e,t){var r=this._baseState;if(/str$/.test(e))return this._encodeStr(t,e);if("objid"===e&&r.args)return this._encodeObjid(t,r.reverseArgs[0],r.args[1]);if("objid"===e)return this._encodeObjid(t,null,null);if("gentime"===e||"utctime"===e)return this._encodeTime(t,e);if("null_"===e)return this._encodeNull();if("int"===e||"enum"===e)return this._encodeInt(t,r.args&&r.reverseArgs[0]);if("bool"===e)return this._encodeBool(t);if("objDesc"===e)return this._encodeStr(t,e);throw new Error("Unsupported tag: "+e)},c.prototype._isNumstr=function(e){return/^[0-9 ]*$/.test(e)},c.prototype._isPrintstr=function(e){return/^[A-Za-z0-9 '\(\)\+,\-\.\/:=\?]*$/.test(e)}},function(e,t,r){var n=r(69);t.tagClass={0:"universal",1:"application",2:"context",3:"private"},t.tagClassByName=n._reverse(t.tagClass),t.tag={0:"end",1:"bool",2:"int",3:"bitstr",4:"octstr",5:"null_",6:"objid",7:"objDesc",8:"external",9:"real",10:"enum",11:"embed",12:"utf8str",13:"relativeOid",16:"seq",17:"set",18:"numstr",19:"printstr",20:"t61str",21:"videostr",22:"ia5str",23:"utctime",24:"gentime",25:"graphstr",26:"iso646str",27:"genstr",28:"unistr",29:"charstr",30:"bmpstr"},t.tagByName=n._reverse(t.tag)},function(e,t,r){var n=t;n.der=r(70),n.pem=r(154)},function(e,t,r){var n=r(0),i=r(3).Buffer,a=r(70);function o(e){a.call(this,e),this.enc="pem"}n(o,a),e.exports=o,o.prototype.decode=function(e,t){for(var r=e.toString().split(/[\r\n]+/g),n=t.label.toUpperCase(),o=/^-----(BEGIN|END) ([^-]+)-----$/,f=-1,s=-1,c=0;c<r.length;c++){var u=r[c].match(o);if(null!==u&&u[2]===n){if(-1!==f){if("END"!==u[1])break;s=c;break}if("BEGIN"!==u[1])break;f=c}}if(-1===f||-1===s)throw new Error("PEM section not found for: "+n);var h=r.slice(f+1,s).join("");h.replace(/[^a-z0-9\+\/=]+/gi,"");var d=new i(h,"base64");return a.prototype.decode.call(this,d,t)}},function(e,t,r){var n=t;n.der=r(71),n.pem=r(156)},function(e,t,r){var n=r(0),i=r(71);function a(e){i.call(this,e),this.enc="pem"}n(a,i),e.exports=a,a.prototype.encode=function(e,t){for(var r=i.prototype.encode.call(this,e).toString("base64"),n=["-----BEGIN "+t.label+"-----"],a=0;a<r.length;a+=64)n.push(r.slice(a,a+64));return n.push("-----END "+t.label+"-----"),n.join("\n")}},function(e,t,r){"use strict";var n=r(18),i=n.define("Time",(function(){this.choice({utcTime:this.utctime(),generalTime:this.gentime()})})),a=n.define("AttributeTypeValue",(function(){this.seq().obj(this.key("type").objid(),this.key("value").any())})),o=n.define("AlgorithmIdentifier",(function(){this.seq().obj(this.key("algorithm").objid(),this.key("parameters").optional(),this.key("curve").objid().optional())})),f=n.define("SubjectPublicKeyInfo",(function(){this.seq().obj(this.key("algorithm").use(o),this.key("subjectPublicKey").bitstr())})),s=n.define("RelativeDistinguishedName",(function(){this.setof(a)})),c=n.define("RDNSequence",(function(){this.seqof(s)})),u=n.define("Name",(function(){this.choice({rdnSequence:this.use(c)})})),h=n.define("Validity",(function(){this.seq().obj(this.key("notBefore").use(i),this.key("notAfter").use(i))})),d=n.define("Extension",(function(){this.seq().obj(this.key("extnID").objid(),this.key("critical").bool().def(!1),this.key("extnValue").octstr())})),l=n.define("TBSCertificate",(function(){this.seq().obj(this.key("version").explicit(0).int().optional(),this.key("serialNumber").int(),this.key("signature").use(o),this.key("issuer").use(u),this.key("validity").use(h),this.key("subject").use(u),this.key("subjectPublicKeyInfo").use(f),this.key("issuerUniqueID").implicit(1).bitstr().optional(),this.key("subjectUniqueID").implicit(2).bitstr().optional(),this.key("extensions").explicit(3).seqof(d).optional())})),p=n.define("X509Certificate",(function(){this.seq().obj(this.key("tbsCertificate").use(l),this.key("signatureAlgorithm").use(o),this.key("signatureValue").bitstr())}));e.exports=p},function(e){e.exports=JSON.parse('{"2.16.840.1.101.3.4.1.1":"aes-128-ecb","2.16.840.1.101.3.4.1.2":"aes-128-cbc","2.16.840.1.101.3.4.1.3":"aes-128-ofb","2.16.840.1.101.3.4.1.4":"aes-128-cfb","2.16.840.1.101.3.4.1.21":"aes-192-ecb","2.16.840.1.101.3.4.1.22":"aes-192-cbc","2.16.840.1.101.3.4.1.23":"aes-192-ofb","2.16.840.1.101.3.4.1.24":"aes-192-cfb","2.16.840.1.101.3.4.1.41":"aes-256-ecb","2.16.840.1.101.3.4.1.42":"aes-256-cbc","2.16.840.1.101.3.4.1.43":"aes-256-ofb","2.16.840.1.101.3.4.1.44":"aes-256-cfb"}')},function(e,t,r){var n=/Proc-Type: 4,ENCRYPTED[\n\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\n\r]+([0-9A-z\n\r\+\/\=]+)[\n\r]+/m,i=/^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----/m,a=/^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----([0-9A-z\n\r\+\/\=]+)-----END \1-----$/m,o=r(23),f=r(35),s=r(1).Buffer;e.exports=function(e,t){var r,c=e.toString(),u=c.match(n);if(u){var h="aes"+u[1],d=s.from(u[2],"hex"),l=s.from(u[3].replace(/[\r\n]/g,""),"base64"),p=o(t,d.slice(0,8),parseInt(u[1],10)).key,b=[],y=f.createDecipheriv(h,p,d);b.push(y.update(l)),b.push(y.final()),r=s.concat(b)}else{var g=c.match(a);r=new s(g[2].replace(/[\r\n]/g,""),"base64")}return{tag:c.match(i)[1],data:r}}},function(e,t,r){(function(t){var n=r(2),i=r(39).ec,a=r(25),o=r(72);function f(e,t){if(e.cmpn(0)<=0)throw new Error("invalid sig");if(e.cmp(t)>=t)throw new Error("invalid sig")}e.exports=function(e,r,s,c,u){var h=a(s);if("ec"===h.type){if("ecdsa"!==c&&"ecdsa/rsa"!==c)throw new Error("wrong public key type");return function(e,t,r){var n=o[r.data.algorithm.curve.join(".")];if(!n)throw new Error("unknown curve "+r.data.algorithm.curve.join("."));var a=new i(n),f=r.data.subjectPrivateKey.data;return a.verify(t,e,f)}(e,r,h)}if("dsa"===h.type){if("dsa"!==c)throw new Error("wrong public key type");return function(e,t,r){var i=r.data.p,o=r.data.q,s=r.data.g,c=r.data.pub_key,u=a.signature.decode(e,"der"),h=u.s,d=u.r;f(h,o),f(d,o);var l=n.mont(i),p=h.invm(o);return 0===s.toRed(l).redPow(new n(t).mul(p).mod(o)).fromRed().mul(c.toRed(l).redPow(d.mul(p).mod(o)).fromRed()).mod(i).mod(o).cmp(d)}(e,r,h)}if("rsa"!==c&&"ecdsa/rsa"!==c)throw new Error("wrong public key type");r=t.concat([u,r]);for(var d=h.modulus.byteLength(),l=[1],p=0;r.length+l.length+2<d;)l.push(255),p++;l.push(0);for(var b=-1;++b<r.length;)l.push(r[b]);l=new t(l);var y=n.mont(h.modulus);e=(e=new n(e).toRed(y)).redPow(new n(h.publicExponent)),e=new t(e.fromRed().toArray());var g=p<8?1:0;for(d=Math.min(e.length,l.length),e.length!==l.length&&(g=1),b=-1;++b<d;)g|=e[b]^l[b];return 0===g}}).call(this,r(3).Buffer)},function(e,t,r){(function(t){var n=r(39),i=r(2);e.exports=function(e){return new o(e)};var a={secp256k1:{name:"secp256k1",byteLength:32},secp224r1:{name:"p224",byteLength:28},prime256v1:{name:"p256",byteLength:32},prime192v1:{name:"p192",byteLength:24},ed25519:{name:"ed25519",byteLength:32},secp384r1:{name:"p384",byteLength:48},secp521r1:{name:"p521",byteLength:66}};function o(e){this.curveType=a[e],this.curveType||(this.curveType={name:e}),this.curve=new n.ec(this.curveType.name),this.keys=void 0}function f(e,r,n){Array.isArray(e)||(e=e.toArray());var i=new t(e);if(n&&i.length<n){var a=new t(n-i.length);a.fill(0),i=t.concat([a,i])}return r?i.toString(r):i}a.p224=a.secp224r1,a.p256=a.secp256r1=a.prime256v1,a.p192=a.secp192r1=a.prime192v1,a.p384=a.secp384r1,a.p521=a.secp521r1,o.prototype.generateKeys=function(e,t){return this.keys=this.curve.genKeyPair(),this.getPublicKey(e,t)},o.prototype.computeSecret=function(e,r,n){return r=r||"utf8",t.isBuffer(e)||(e=new t(e,r)),f(this.curve.keyFromPublic(e).getPublic().mul(this.keys.getPrivate()).getX(),n,this.curveType.byteLength)},o.prototype.getPublicKey=function(e,t){var r=this.keys.getPublic("compressed"===t,!0);return"hybrid"===t&&(r[r.length-1]%2?r[0]=7:r[0]=6),f(r,e)},o.prototype.getPrivateKey=function(e){return f(this.keys.getPrivate(),e)},o.prototype.setPublicKey=function(e,r){return r=r||"utf8",t.isBuffer(e)||(e=new t(e,r)),this.keys._importPublic(e),this},o.prototype.setPrivateKey=function(e,r){r=r||"utf8",t.isBuffer(e)||(e=new t(e,r));var n=new i(e);return n=n.toString(16),this.keys=this.curve.genKeyPair(),this.keys._importPrivate(n),this}}).call(this,r(3).Buffer)},function(e,t,r){t.publicEncrypt=r(163),t.privateDecrypt=r(164),t.privateEncrypt=function(e,r){return t.publicEncrypt(e,r,!0)},t.publicDecrypt=function(e,r){return t.privateDecrypt(e,r,!0)}},function(e,t,r){var n=r(25),i=r(12),a=r(14),o=r(73),f=r(74),s=r(2),c=r(75),u=r(38),h=r(1).Buffer;e.exports=function(e,t,r){var d;d=e.padding?e.padding:r?1:4;var l,p=n(e);if(4===d)l=function(e,t){var r=e.modulus.byteLength(),n=t.length,c=a("sha1").update(h.alloc(0)).digest(),u=c.length,d=2*u;if(n>r-d-2)throw new Error("message too long");var l=h.alloc(r-n-d-2),p=r-u-1,b=i(u),y=f(h.concat([c,l,h.alloc(1,1),t],p),o(b,p)),g=f(b,o(y,u));return new s(h.concat([h.alloc(1),g,y],r))}(p,t);else if(1===d)l=function(e,t,r){var n,a=t.length,o=e.modulus.byteLength();if(a>o-11)throw new Error("message too long");n=r?h.alloc(o-a-3,255):function(e){var t,r=h.allocUnsafe(e),n=0,a=i(2*e),o=0;for(;n<e;)o===a.length&&(a=i(2*e),o=0),(t=a[o++])&&(r[n++]=t);return r}(o-a-3);return new s(h.concat([h.from([0,r?1:2]),n,h.alloc(1),t],o))}(p,t,r);else{if(3!==d)throw new Error("unknown padding");if((l=new s(t)).cmp(p.modulus)>=0)throw new Error("data too long for modulus")}return r?u(l,p):c(l,p)}},function(e,t,r){var n=r(25),i=r(73),a=r(74),o=r(2),f=r(38),s=r(14),c=r(75),u=r(1).Buffer;e.exports=function(e,t,r){var h;h=e.padding?e.padding:r?1:4;var d,l=n(e),p=l.modulus.byteLength();if(t.length>p||new o(t).cmp(l.modulus)>=0)throw new Error("decryption error");d=r?c(new o(t),l):f(t,l);var b=u.alloc(p-d.length);if(d=u.concat([b,d],p),4===h)return function(e,t){var r=e.modulus.byteLength(),n=s("sha1").update(u.alloc(0)).digest(),o=n.length;if(0!==t[0])throw new Error("decryption error");var f=t.slice(1,o+1),c=t.slice(o+1),h=a(f,i(c,o)),d=a(c,i(h,r-o-1));if(function(e,t){e=u.from(e),t=u.from(t);var r=0,n=e.length;e.length!==t.length&&(r++,n=Math.min(e.length,t.length));var i=-1;for(;++i<n;)r+=e[i]^t[i];return r}(n,d.slice(0,o)))throw new Error("decryption error");var l=o;for(;0===d[l];)l++;if(1!==d[l++])throw new Error("decryption error");return d.slice(l)}(l,d);if(1===h)return function(e,t,r){var n=t.slice(0,2),i=2,a=0;for(;0!==t[i++];)if(i>=t.length){a++;break}var o=t.slice(2,i-1);("0002"!==n.toString("hex")&&!r||"0001"!==n.toString("hex")&&r)&&a++;o.length<8&&a++;if(a)throw new Error("decryption error");return t.slice(i)}(0,d,r);if(3===h)return d;throw new Error("unknown padding")}},function(e,t,r){"use strict";(function(e,n){function i(){throw new Error("secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11")}var a=r(1),o=r(12),f=a.Buffer,s=a.kMaxLength,c=e.crypto||e.msCrypto,u=Math.pow(2,32)-1;function h(e,t){if("number"!=typeof e||e!=e)throw new TypeError("offset must be a number");if(e>u||e<0)throw new TypeError("offset must be a uint32");if(e>s||e>t)throw new RangeError("offset out of range")}function d(e,t,r){if("number"!=typeof e||e!=e)throw new TypeError("size must be a number");if(e>u||e<0)throw new TypeError("size must be a uint32");if(e+t>r||e>s)throw new RangeError("buffer too small")}function l(e,t,r,i){if(n.browser){var a=e.buffer,f=new Uint8Array(a,t,r);return c.getRandomValues(f),i?void n.nextTick((function(){i(null,e)})):e}if(!i)return o(r).copy(e,t),e;o(r,(function(r,n){if(r)return i(r);n.copy(e,t),i(null,e)}))}c&&c.getRandomValues||!n.browser?(t.randomFill=function(t,r,n,i){if(!(f.isBuffer(t)||t instanceof e.Uint8Array))throw new TypeError('"buf" argument must be a Buffer or Uint8Array');if("function"==typeof r)i=r,r=0,n=t.length;else if("function"==typeof n)i=n,n=t.length-r;else if("function"!=typeof i)throw new TypeError('"cb" argument must be a function');return h(r,t.length),d(n,r,t.length),l(t,r,n,i)},t.randomFillSync=function(t,r,n){void 0===r&&(r=0);if(!(f.isBuffer(t)||t instanceof e.Uint8Array))throw new TypeError('"buf" argument must be a Buffer or Uint8Array');h(r,t.length),void 0===n&&(n=t.length-r);return d(n,r,t.length),l(t,r,n)}):(t.randomFill=i,t.randomFillSync=i)}).call(this,r(6),r(7))},function(e,t,r){"use strict";(function(t){var n=r(167);
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */function i(e,t){if(e===t)return 0;for(var r=e.length,n=t.length,i=0,a=Math.min(r,n);i<a;++i)if(e[i]!==t[i]){r=e[i],n=t[i];break}return r<n?-1:n<r?1:0}function a(e){return t.Buffer&&"function"==typeof t.Buffer.isBuffer?t.Buffer.isBuffer(e):!(null==e||!e._isBuffer)}var o=r(76),f=Object.prototype.hasOwnProperty,s=Array.prototype.slice,c="foo"===function(){}.name;function u(e){return Object.prototype.toString.call(e)}function h(e){return!a(e)&&("function"==typeof t.ArrayBuffer&&("function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(e):!!e&&(e instanceof DataView||!!(e.buffer&&e.buffer instanceof ArrayBuffer))))}var d=e.exports=m,l=/\s*function\s+([^\(\s]*)\s*/;function p(e){if(o.isFunction(e)){if(c)return e.name;var t=e.toString().match(l);return t&&t[1]}}function b(e,t){return"string"==typeof e?e.length<t?e:e.slice(0,t):e}function y(e){if(c||!o.isFunction(e))return o.inspect(e);var t=p(e);return"[Function"+(t?": "+t:"")+"]"}function g(e,t,r,n,i){throw new d.AssertionError({message:r,actual:e,expected:t,operator:n,stackStartFunction:i})}function m(e,t){e||g(e,!0,t,"==",d.ok)}function v(e,t,r,n){if(e===t)return!0;if(a(e)&&a(t))return 0===i(e,t);if(o.isDate(e)&&o.isDate(t))return e.getTime()===t.getTime();if(o.isRegExp(e)&&o.isRegExp(t))return e.source===t.source&&e.global===t.global&&e.multiline===t.multiline&&e.lastIndex===t.lastIndex&&e.ignoreCase===t.ignoreCase;if(null!==e&&"object"==typeof e||null!==t&&"object"==typeof t){if(h(e)&&h(t)&&u(e)===u(t)&&!(e instanceof Float32Array||e instanceof Float64Array))return 0===i(new Uint8Array(e.buffer),new Uint8Array(t.buffer));if(a(e)!==a(t))return!1;var f=(n=n||{actual:[],expected:[]}).actual.indexOf(e);return-1!==f&&f===n.expected.indexOf(t)||(n.actual.push(e),n.expected.push(t),function(e,t,r,n){if(null==e||null==t)return!1;if(o.isPrimitive(e)||o.isPrimitive(t))return e===t;if(r&&Object.getPrototypeOf(e)!==Object.getPrototypeOf(t))return!1;var i=_(e),a=_(t);if(i&&!a||!i&&a)return!1;if(i)return e=s.call(e),t=s.call(t),v(e,t,r);var f,c,u=A(e),h=A(t);if(u.length!==h.length)return!1;for(u.sort(),h.sort(),c=u.length-1;c>=0;c--)if(u[c]!==h[c])return!1;for(c=u.length-1;c>=0;c--)if(f=u[c],!v(e[f],t[f],r,n))return!1;return!0}(e,t,r,n))}return r?e===t:e==t}function _(e){return"[object Arguments]"==Object.prototype.toString.call(e)}function w(e,t){if(!e||!t)return!1;if("[object RegExp]"==Object.prototype.toString.call(t))return t.test(e);try{if(e instanceof t)return!0}catch(e){}return!Error.isPrototypeOf(t)&&!0===t.call({},e)}function E(e,t,r,n){var i;if("function"!=typeof t)throw new TypeError('"block" argument must be a function');"string"==typeof r&&(n=r,r=null),i=function(e){var t;try{e()}catch(e){t=e}return t}(t),n=(r&&r.name?" ("+r.name+").":".")+(n?" "+n:"."),e&&!i&&g(i,r,"Missing expected exception"+n);var a="string"==typeof n,f=!e&&i&&!r;if((!e&&o.isError(i)&&a&&w(i,r)||f)&&g(i,r,"Got unwanted exception"+n),e&&i&&r&&!w(i,r)||!e&&i)throw i}d.AssertionError=function(e){this.name="AssertionError",this.actual=e.actual,this.expected=e.expected,this.operator=e.operator,e.message?(this.message=e.message,this.generatedMessage=!1):(this.message=function(e){return b(y(e.actual),128)+" "+e.operator+" "+b(y(e.expected),128)}(this),this.generatedMessage=!0);var t=e.stackStartFunction||g;if(Error.captureStackTrace)Error.captureStackTrace(this,t);else{var r=new Error;if(r.stack){var n=r.stack,i=p(t),a=n.indexOf("\n"+i);if(a>=0){var o=n.indexOf("\n",a+1);n=n.substring(o+1)}this.stack=n}}},o.inherits(d.AssertionError,Error),d.fail=g,d.ok=m,d.equal=function(e,t,r){e!=t&&g(e,t,r,"==",d.equal)},d.notEqual=function(e,t,r){e==t&&g(e,t,r,"!=",d.notEqual)},d.deepEqual=function(e,t,r){v(e,t,!1)||g(e,t,r,"deepEqual",d.deepEqual)},d.deepStrictEqual=function(e,t,r){v(e,t,!0)||g(e,t,r,"deepStrictEqual",d.deepStrictEqual)},d.notDeepEqual=function(e,t,r){v(e,t,!1)&&g(e,t,r,"notDeepEqual",d.notDeepEqual)},d.notDeepStrictEqual=function e(t,r,n){v(t,r,!0)&&g(t,r,n,"notDeepStrictEqual",e)},d.strictEqual=function(e,t,r){e!==t&&g(e,t,r,"===",d.strictEqual)},d.notStrictEqual=function(e,t,r){e===t&&g(e,t,r,"!==",d.notStrictEqual)},d.throws=function(e,t,r){E(!0,e,t,r)},d.doesNotThrow=function(e,t,r){E(!1,e,t,r)},d.ifError=function(e){if(e)throw e},d.strict=n((function e(t,r){t||g(t,!0,r,"==",e)}),d,{equal:d.strictEqual,deepEqual:d.deepStrictEqual,notEqual:d.notStrictEqual,notDeepEqual:d.notDeepStrictEqual}),d.strict.strict=d.strict;var A=Object.keys||function(e){var t=[];for(var r in e)f.call(e,r)&&t.push(r);return t}}).call(this,r(6))},function(e,t,r){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var n=Object.getOwnPropertySymbols,i=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable;function o(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},r=0;r<10;r++)t["_"+String.fromCharCode(r)]=r;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var n={};return"abcdefghijklmnopqrst".split("").forEach((function(e){n[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},n)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var r,f,s=o(e),c=1;c<arguments.length;c++){for(var u in r=Object(arguments[c]))i.call(r,u)&&(s[u]=r[u]);if(n){f=n(r);for(var h=0;h<f.length;h++)a.call(r,f[h])&&(s[f[h]]=r[f[h]])}}return s}},function(e,t){e.exports=function(e){return e&&"object"==typeof e&&"function"==typeof e.copy&&"function"==typeof e.fill&&"function"==typeof e.readUInt8}},function(e,t){"function"==typeof Object.create?e.exports=function(e,t){e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}})}:e.exports=function(e,t){e.super_=t;var r=function(){};r.prototype=t.prototype,e.prototype=new r,e.prototype.constructor=e}},function(e,t,r){"use strict";r.r(t);var n=r(78);r(20);class i{constructor(){this.nickName="",this.email="",this.password="",this.userId=""}initUser(e){this.nickName=e.name,this.email=e.email,this.password=e.password,this.userId=e.userId,this.c=e.c}}const a=Vue.component("Chat",{template:'\n  <div id="chatApp">\n    <div v-for="item in messages">\n      {{ item.username }} : {{ item.message }}\n    </div>\n    <input v-model=\'message\' id="messageEnterBox" autocomplete="off" />\n    <button v-on:click=\'sendMessage\'>Send</button>\n  </div>\n  ',data:function(){return{message:"",user:null,socket:null,messages:[{username:"admin",message:"Nice to meet you here!"}]}},created:function(){this.getAuthData(),this.socket=io("http://localhost:3000"),this.$data.user=new i,this.socket.on("initUser",e=>{const t=JSON.parse(e);this.$data.user.initUser(t.incomeData)}),this.socket.on("push_message",e=>{const t=JSON.parse(e);this.$data.messages.push(t)})},methods:{sendMessage:function(){const e={message:this.$data.message,username:this.$data.user.nickName,userId:this.$data.user.userId};this.socket.emit("push_message",JSON.stringify(e)),this.$data.message=""}}}),o=[{path:"/",component:n.a,name:"register"},{path:"/chat",component:a,name:"chat",params:!0}],f=new VueRouter({routes:o});new Vue({el:"#app",router:f})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2luaGVyaXRzL2luaGVyaXRzX2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NhZmUtYnVmZmVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ibi5qcy9saWIvYm4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL25vZGUtbGlicy1icm93c2VyL25vZGVfbW9kdWxlcy9idWZmZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21pbmltYWxpc3RpYy1hc3NlcnQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VsbGlwdGljL2xpYi9lbGxpcHRpYy91dGlscy5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hhc2guanMvbGliL2hhc2gvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NpcGhlci1iYXNlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zcnAtYmlnaW50L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL19zdHJlYW1fZHVwbGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYW5kb21ieXRlcy9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zaGEuanMvaGFzaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3JlYXRlLWhhc2gvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS11dGlsLWlzL2xpYi91dGlsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9idWZmZXIteG9yL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oYXNoLmpzL2xpYi9oYXNoL2NvbW1vbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXNuMS5qcy9saWIvYXNuMS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXNuMS5qcy9saWIvYXNuMS9iYXNlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9idWZmZXItanNvbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvY2Vzcy1uZXh0aWNrLWFyZ3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL2Flcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXZwX2J5dGVzdG9rZXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VsbGlwdGljL2xpYi9lbGxpcHRpYy9jdXJ2ZS9iYXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wYXJzZS1hc24xL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tZDUuanMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0cmVhbS1icm93c2VyaWZ5L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ldmVudHMvZXZlbnRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vcmVhZGFibGUtYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX3dyaXRhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHJpbmdfZGVjb2Rlci9saWIvc3RyaW5nX2RlY29kZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JpcGVtZDE2MC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2hhLmpzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kZXMuanMvbGliL2Rlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvbW9kZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jyb3JhbmQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktcnNhL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbGxpcHRpYy9saWIvZWxsaXB0aWMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VsbGlwdGljL2xpYi9lbGxpcHRpYy9jdXJ2ZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hhc2guanMvbGliL2hhc2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hhc2gtYmFzZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX3JlYWRhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL2ludGVybmFsL3N0cmVhbXMvc3RyZWFtLWJyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvaW50ZXJuYWwvc3RyZWFtcy9kZXN0cm95LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL19zdHJlYW1fdHJhbnNmb3JtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zaGEuanMvc2hhMjU2LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zaGEuanMvc2hhNTEyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jcmVhdGUtaG1hYy9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jcmVhdGUtaGFzaC9tZDUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Bia2RmMi9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wYmtkZjIvbGliL3ByZWNvbmRpdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGJrZGYyL2xpYi9kZWZhdWx0LWVuY29kaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wYmtkZjIvbGliL3N5bmMtYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvbW9kZXMvY3RyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9pbmNyMzIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL2F1dGhDaXBoZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL3N0cmVhbUNpcGhlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGlmZmllLWhlbGxtYW4vbGliL2dlbmVyYXRlUHJpbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21pbGxlci1yYWJpbi9saWIvbXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21pbmltYWxpc3RpYy1jcnlwdG8tdXRpbHMvbGliL3V0aWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbGxpcHRpYy9saWIvZWxsaXB0aWMvY3VydmUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hhc2guanMvbGliL2hhc2gvc2hhL2NvbW1vbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGFzaC5qcy9saWIvaGFzaC9zaGEvMjU2LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oYXNoLmpzL2xpYi9oYXNoL3NoYS81MTIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FzbjEuanMvbGliL2FzbjEvYmFzZS9idWZmZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FzbjEuanMvbGliL2FzbjEvY29uc3RhbnRzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hc24xLmpzL2xpYi9hc24xL2RlY29kZXJzL2Rlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXNuMS5qcy9saWIvYXNuMS9lbmNvZGVycy9kZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3B1YmxpYy1lbmNyeXB0L21nZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHVibGljLWVuY3J5cHQveG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wdWJsaWMtZW5jcnlwdC93aXRoUHVibGljLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy91dGlsL3V0aWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NycC1iaWdpbnQvbGliL3BhcmFtcy5qcyIsIndlYnBhY2s6Ly8vLi9wdWJsaWMvY2hhdC9SZWdpc3Rlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdW5pcWlkL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYXNlNjQtanMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2llZWU3NTQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL25vZGUtbGlicy1icm93c2VyL25vZGVfbW9kdWxlcy9pc2FycmF5L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zcnAtYmlnaW50L2xpYi9zcnAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbm9kZV9tb2R1bGVzL2lzYXJyYXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvaW50ZXJuYWwvc3RyZWFtcy9CdWZmZXJMaXN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90aW1lcnMtYnJvd3NlcmlmeS9tYWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZXRpbW1lZGlhdGUvc2V0SW1tZWRpYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy91dGlsLWRlcHJlY2F0ZS9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL19zdHJlYW1fcGFzc3Rocm91Z2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS93cml0YWJsZS1icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vZHVwbGV4LWJyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS90cmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9wYXNzdGhyb3VnaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2hhLmpzL3NoYS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2hhLmpzL3NoYTEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NoYS5qcy9zaGEyMjQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NoYS5qcy9zaGEzODQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NyZWF0ZS1obWFjL2xlZ2FjeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL2FsZ29zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wYmtkZjIvbGliL2FzeW5jLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWNpcGhlci9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWRlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGVzLmpzL2xpYi9kZXMvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Rlcy5qcy9saWIvZGVzL2NpcGhlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGVzLmpzL2xpYi9kZXMvZGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kZXMuanMvbGliL2Rlcy9jYmMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Rlcy5qcy9saWIvZGVzL2VkZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvZW5jcnlwdGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9tb2Rlcy9lY2IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL21vZGVzL2NiYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvbW9kZXMvY2ZiLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9tb2Rlcy9jZmI4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9tb2Rlcy9jZmIxLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9tb2Rlcy9vZmIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL2doYXNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9kZWNyeXB0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktZGVzL21vZGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kaWZmaWUtaGVsbG1hbi9icm93c2VyLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RpZmZpZS1oZWxsbWFuL2xpYi9kaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL2Jyb3dzZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktc2lnbi9icm93c2VyL3NpZ24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VsbGlwdGljL2xpYi9lbGxpcHRpYy9jdXJ2ZS9zaG9ydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZWxsaXB0aWMvbGliL2VsbGlwdGljL2N1cnZlL21vbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VsbGlwdGljL2xpYi9lbGxpcHRpYy9jdXJ2ZS9lZHdhcmRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oYXNoLmpzL2xpYi9oYXNoL3NoYS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGFzaC5qcy9saWIvaGFzaC9zaGEvMS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGFzaC5qcy9saWIvaGFzaC9zaGEvMjI0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oYXNoLmpzL2xpYi9oYXNoL3NoYS8zODQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hhc2guanMvbGliL2hhc2gvcmlwZW1kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oYXNoLmpzL2xpYi9oYXNoL2htYWMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VsbGlwdGljL2xpYi9lbGxpcHRpYy9wcmVjb21wdXRlZC9zZWNwMjU2azEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VsbGlwdGljL2xpYi9lbGxpcHRpYy9lYy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaG1hYy1kcmJnL2xpYi9obWFjLWRyYmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VsbGlwdGljL2xpYi9lbGxpcHRpYy9lYy9rZXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VsbGlwdGljL2xpYi9lbGxpcHRpYy9lYy9zaWduYXR1cmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VsbGlwdGljL2xpYi9lbGxpcHRpYy9lZGRzYS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZWxsaXB0aWMvbGliL2VsbGlwdGljL2VkZHNhL2tleS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZWxsaXB0aWMvbGliL2VsbGlwdGljL2VkZHNhL3NpZ25hdHVyZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGFyc2UtYXNuMS9hc24xLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hc24xLmpzL2xpYi9hc24xL2FwaS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdm0tYnJvd3NlcmlmeS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXNuMS5qcy9saWIvYXNuMS9iYXNlL3JlcG9ydGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hc24xLmpzL2xpYi9hc24xL2Jhc2Uvbm9kZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXNuMS5qcy9saWIvYXNuMS9jb25zdGFudHMvZGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hc24xLmpzL2xpYi9hc24xL2RlY29kZXJzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hc24xLmpzL2xpYi9hc24xL2RlY29kZXJzL3BlbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXNuMS5qcy9saWIvYXNuMS9lbmNvZGVycy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXNuMS5qcy9saWIvYXNuMS9lbmNvZGVycy9wZW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3BhcnNlLWFzbjEvY2VydGlmaWNhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3BhcnNlLWFzbjEvZml4UHJvYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL2Jyb3dzZXIvdmVyaWZ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jcmVhdGUtZWNkaC9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wdWJsaWMtZW5jcnlwdC9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wdWJsaWMtZW5jcnlwdC9wdWJsaWNFbmNyeXB0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wdWJsaWMtZW5jcnlwdC9wcml2YXRlRGVjcnlwdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmFuZG9tZmlsbC9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hc3NlcnQvYXNzZXJ0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vYmplY3QtYXNzaWduL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy91dGlsL3N1cHBvcnQvaXNCdWZmZXJCcm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy91dGlsL25vZGVfbW9kdWxlcy9pbmhlcml0cy9pbmhlcml0c19icm93c2VyLmpzIiwid2VicGFjazovLy8uL3B1YmxpYy9jaGF0L0NoYXQuanMiLCJ3ZWJwYWNrOi8vLy4vcHVibGljL2NoYXQvYXBwLmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiY3RvciIsInN1cGVyQ3RvciIsInN1cGVyXyIsImNvbnN0cnVjdG9yIiwid3JpdGFibGUiLCJjb25maWd1cmFibGUiLCJUZW1wQ3RvciIsImJ1ZmZlciIsIkJ1ZmZlciIsImNvcHlQcm9wcyIsInNyYyIsImRzdCIsIlNhZmVCdWZmZXIiLCJhcmciLCJlbmNvZGluZ09yT2Zmc2V0IiwibGVuZ3RoIiwiZnJvbSIsImFsbG9jIiwiYWxsb2NVbnNhZmUiLCJhbGxvY1Vuc2FmZVNsb3ciLCJUeXBlRXJyb3IiLCJzaXplIiwiZmlsbCIsImVuY29kaW5nIiwiYnVmIiwidW5kZWZpbmVkIiwiU2xvd0J1ZmZlciIsImFzc2VydCIsInZhbCIsIm1zZyIsIkVycm9yIiwiaW5oZXJpdHMiLCJCTiIsIm51bWJlciIsImJhc2UiLCJlbmRpYW4iLCJpc0JOIiwidGhpcyIsIm5lZ2F0aXZlIiwid29yZHMiLCJyZWQiLCJfaW5pdCIsIndvcmRTaXplIiwiZSIsInBhcnNlSGV4Iiwic3RyIiwic3RhcnQiLCJlbmQiLCJsZW4iLCJNYXRoIiwibWluIiwiY2hhckNvZGVBdCIsInBhcnNlQmFzZSIsIm11bCIsIm51bSIsIkFycmF5IiwiaXNBcnJheSIsIm1heCIsImxlZnQiLCJyaWdodCIsImNtcCIsIl9pbml0TnVtYmVyIiwiX2luaXRBcnJheSIsInRvU3RyaW5nIiwicmVwbGFjZSIsIl9wYXJzZUhleCIsIl9wYXJzZUJhc2UiLCJzdHJpcCIsInRvQXJyYXkiLCJjZWlsIiwiaiIsInciLCJvZmYiLCJsaW1iTGVuIiwibGltYlBvdyIsInRvdGFsIiwibW9kIiwid29yZCIsImltdWxuIiwiX2lhZGRuIiwicG93IiwiY29weSIsImRlc3QiLCJjbG9uZSIsIl9leHBhbmQiLCJfbm9ybVNpZ24iLCJpbnNwZWN0IiwiemVyb3MiLCJncm91cFNpemVzIiwiZ3JvdXBCYXNlcyIsInNtYWxsTXVsVG8iLCJzZWxmIiwib3V0IiwiYSIsImIiLCJsbyIsImNhcnJ5IiwiayIsIm5jYXJyeSIsInJ3b3JkIiwibWF4SiIsInBhZGRpbmciLCJncm91cFNpemUiLCJncm91cEJhc2UiLCJpc1plcm8iLCJtb2RuIiwiaWRpdm4iLCJ0b051bWJlciIsInJldCIsInRvSlNPTiIsInRvQnVmZmVyIiwidG9BcnJheUxpa2UiLCJBcnJheVR5cGUiLCJieXRlTGVuZ3RoIiwicmVxTGVuZ3RoIiwibGl0dGxlRW5kaWFuIiwicmVzIiwicSIsImFuZGxuIiwiaXVzaHJuIiwiY2x6MzIiLCJfY291bnRCaXRzIiwiX3plcm9CaXRzIiwiYml0TGVuZ3RoIiwiaGkiLCJ6ZXJvQml0cyIsInRvVHdvcyIsIndpZHRoIiwiYWJzIiwiaW5vdG4iLCJpYWRkbiIsImZyb21Ud29zIiwidGVzdG4iLCJub3RuIiwiaW5lZyIsImlzTmVnIiwibmVnIiwiaXVvciIsImlvciIsIm9yIiwidW9yIiwiaXVhbmQiLCJpYW5kIiwiYW5kIiwidWFuZCIsIml1eG9yIiwiaXhvciIsInhvciIsInV4b3IiLCJieXRlc05lZWRlZCIsImJpdHNMZWZ0Iiwic2V0biIsImJpdCIsIndiaXQiLCJpYWRkIiwiaXN1YiIsImFkZCIsInN1YiIsImNvbWIxME11bFRvIiwibWlkIiwiYTAiLCJhbDAiLCJhaDAiLCJhMSIsImFsMSIsImFoMSIsImEyIiwiYWwyIiwiYWgyIiwiYTMiLCJhbDMiLCJhaDMiLCJhNCIsImFsNCIsImFoNCIsImE1IiwiYWw1IiwiYWg1IiwiYTYiLCJhbDYiLCJhaDYiLCJhNyIsImFsNyIsImFoNyIsImE4IiwiYWw4IiwiYWg4IiwiYTkiLCJhbDkiLCJhaDkiLCJiMCIsImJsMCIsImJoMCIsImIxIiwiYmwxIiwiYmgxIiwiYjIiLCJibDIiLCJiaDIiLCJiMyIsImJsMyIsImJoMyIsImI0IiwiYmw0IiwiYmg0IiwiYjUiLCJibDUiLCJiaDUiLCJiNiIsImJsNiIsImJoNiIsImI3IiwiYmw3IiwiYmg3IiwiYjgiLCJibDgiLCJiaDgiLCJiOSIsImJsOSIsImJoOSIsIncwIiwiaW11bCIsIncxIiwidzIiLCJ3MyIsInc0IiwidzUiLCJ3NiIsInc3IiwidzgiLCJ3OSIsIncxMCIsIncxMSIsIncxMiIsIncxMyIsIncxNCIsIncxNSIsIncxNiIsIncxNyIsIncxOCIsImp1bWJvTXVsVG8iLCJGRlRNIiwibXVscCIsIngiLCJ5IiwibXVsVG8iLCJobmNhcnJ5IiwiYmlnTXVsVG8iLCJtYWtlUkJUIiwiTiIsInJldkJpbiIsInJiIiwicGVybXV0ZSIsInJidCIsInJ3cyIsIml3cyIsInJ0d3MiLCJpdHdzIiwidHJhbnNmb3JtIiwicnR3ZGYiLCJjb3MiLCJQSSIsIml0d2RmIiwic2luIiwicnR3ZGZfIiwiaXR3ZGZfIiwicmUiLCJpZSIsInJvIiwiaW8iLCJyeCIsImd1ZXNzTGVuMTNiIiwib2RkIiwiY29uanVnYXRlIiwibm9ybWFsaXplMTNiIiwid3MiLCJyb3VuZCIsImNvbnZlcnQxM2IiLCJzdHViIiwicGgiLCJfIiwicndzdCIsIml3c3QiLCJucndzIiwibnJ3c3QiLCJuaXdzdCIsInJtd3MiLCJtdWxmIiwibXVsbiIsInNxciIsImlzcXIiLCJ0b0JpdEFycmF5IiwiaXVzaGxuIiwiYml0cyIsImNhcnJ5TWFzayIsIm5ld0NhcnJ5IiwiaXNobG4iLCJoaW50IiwiZXh0ZW5kZWQiLCJoIiwibWFzayIsIm1hc2tlZFdvcmRzIiwiaXNocm4iLCJzaGxuIiwidXNobG4iLCJzaHJuIiwidXNocm4iLCJpbWFza24iLCJtYXNrbiIsImlzdWJuIiwiYWRkbiIsInN1Ym4iLCJpYWJzIiwiX2lzaGxuc3VibXVsIiwic2hpZnQiLCJfd29yZERpdiIsImJoaSIsImRpZmYiLCJxaiIsImRpdiIsImRpdm1vZCIsInBvc2l0aXZlIiwiZGl2biIsInVtb2QiLCJkaXZSb3VuZCIsImRtIiwiaGFsZiIsInIyIiwiYWNjIiwiZWdjZCIsIkEiLCJCIiwiQyIsIkQiLCJnIiwiaXNFdmVuIiwieXAiLCJ4cCIsImltIiwiaXNPZGQiLCJqbSIsImdjZCIsIl9pbnZtcCIsIngxIiwieDIiLCJkZWx0YSIsImNtcG4iLCJpbnZtIiwiYmluY24iLCJ1Y21wIiwiZ3RuIiwiZ3QiLCJndGVuIiwiZ3RlIiwibHRuIiwibHQiLCJsdGVuIiwibHRlIiwiZXFuIiwiZXEiLCJSZWQiLCJ0b1JlZCIsImN0eCIsImNvbnZlcnRUbyIsIl9mb3JjZVJlZCIsImZyb21SZWQiLCJjb252ZXJ0RnJvbSIsImZvcmNlUmVkIiwicmVkQWRkIiwicmVkSUFkZCIsInJlZFN1YiIsInJlZElTdWIiLCJyZWRTaGwiLCJzaGwiLCJyZWRNdWwiLCJfdmVyaWZ5MiIsInJlZElNdWwiLCJyZWRTcXIiLCJfdmVyaWZ5MSIsInJlZElTcXIiLCJyZWRTcXJ0Iiwic3FydCIsInJlZEludm0iLCJyZWROZWciLCJyZWRQb3ciLCJwcmltZXMiLCJrMjU2IiwicDIyNCIsInAxOTIiLCJwMjU1MTkiLCJNUHJpbWUiLCJ0bXAiLCJfdG1wIiwiSzI1NiIsIlAyMjQiLCJQMTkyIiwiUDI1NTE5IiwicHJpbWUiLCJfcHJpbWUiLCJNb250IiwiaW1vZCIsInJpbnYiLCJtaW52IiwiaXJlZHVjZSIsInJsZW4iLCJzcGxpdCIsImltdWxLIiwiaW5wdXQiLCJvdXRwdXQiLCJvdXRMZW4iLCJwcmV2IiwibmV4dCIsIm1vZDMiLCJvbmUiLCJuT25lIiwibHBvdyIsInoiLCJpbnYiLCJ3bmQiLCJjdXJyZW50IiwiY3VycmVudExlbiIsIm1vbnQiLCJ1IiwiYmFzZTY0IiwiaWVlZTc1NCIsImtNYXhMZW5ndGgiLCJUWVBFRF9BUlJBWV9TVVBQT1JUIiwiY3JlYXRlQnVmZmVyIiwidGhhdCIsIlJhbmdlRXJyb3IiLCJVaW50OEFycmF5IiwiX19wcm90b19fIiwiQXJyYXlCdWZmZXIiLCJhcnJheSIsImJ5dGVPZmZzZXQiLCJmcm9tQXJyYXlMaWtlIiwiZnJvbUFycmF5QnVmZmVyIiwic3RyaW5nIiwiaXNFbmNvZGluZyIsImFjdHVhbCIsIndyaXRlIiwic2xpY2UiLCJmcm9tU3RyaW5nIiwib2JqIiwiaXNCdWZmZXIiLCJjaGVja2VkIiwidHlwZSIsImRhdGEiLCJmcm9tT2JqZWN0IiwiYXNzZXJ0U2l6ZSIsImlzVmlldyIsImxvd2VyZWRDYXNlIiwidXRmOFRvQnl0ZXMiLCJiYXNlNjRUb0J5dGVzIiwidG9Mb3dlckNhc2UiLCJzbG93VG9TdHJpbmciLCJoZXhTbGljZSIsInV0ZjhTbGljZSIsImFzY2lpU2xpY2UiLCJsYXRpbjFTbGljZSIsImJhc2U2NFNsaWNlIiwidXRmMTZsZVNsaWNlIiwic3dhcCIsImJpZGlyZWN0aW9uYWxJbmRleE9mIiwiZGlyIiwiaXNOYU4iLCJhcnJheUluZGV4T2YiLCJpbmRleE9mIiwibGFzdEluZGV4T2YiLCJhcnIiLCJpbmRleFNpemUiLCJhcnJMZW5ndGgiLCJ2YWxMZW5ndGgiLCJTdHJpbmciLCJyZWFkIiwicmVhZFVJbnQxNkJFIiwiZm91bmRJbmRleCIsImZvdW5kIiwiaGV4V3JpdGUiLCJvZmZzZXQiLCJOdW1iZXIiLCJyZW1haW5pbmciLCJzdHJMZW4iLCJwYXJzZWQiLCJwYXJzZUludCIsInN1YnN0ciIsInV0ZjhXcml0ZSIsImJsaXRCdWZmZXIiLCJhc2NpaVdyaXRlIiwiYnl0ZUFycmF5IiwicHVzaCIsImFzY2lpVG9CeXRlcyIsImxhdGluMVdyaXRlIiwiYmFzZTY0V3JpdGUiLCJ1Y3MyV3JpdGUiLCJ1bml0cyIsInV0ZjE2bGVUb0J5dGVzIiwiZnJvbUJ5dGVBcnJheSIsInNlY29uZEJ5dGUiLCJ0aGlyZEJ5dGUiLCJmb3VydGhCeXRlIiwidGVtcENvZGVQb2ludCIsImZpcnN0Qnl0ZSIsImNvZGVQb2ludCIsImJ5dGVzUGVyU2VxdWVuY2UiLCJjb2RlUG9pbnRzIiwiTUFYX0FSR1VNRU5UU19MRU5HVEgiLCJmcm9tQ2hhckNvZGUiLCJhcHBseSIsImRlY29kZUNvZGVQb2ludHNBcnJheSIsIklOU1BFQ1RfTUFYX0JZVEVTIiwiZ2xvYmFsIiwiZm9vIiwic3ViYXJyYXkiLCJ0eXBlZEFycmF5U3VwcG9ydCIsInBvb2xTaXplIiwiX2F1Z21lbnQiLCJzcGVjaWVzIiwiX2lzQnVmZmVyIiwiY29tcGFyZSIsImNvbmNhdCIsImxpc3QiLCJwb3MiLCJzd2FwMTYiLCJzd2FwMzIiLCJzd2FwNjQiLCJhcmd1bWVudHMiLCJlcXVhbHMiLCJtYXRjaCIsImpvaW4iLCJ0YXJnZXQiLCJ0aGlzU3RhcnQiLCJ0aGlzRW5kIiwidGhpc0NvcHkiLCJ0YXJnZXRDb3B5IiwiaW5jbHVkZXMiLCJpc0Zpbml0ZSIsIl9hcnIiLCJ0b0hleCIsImJ5dGVzIiwiY2hlY2tPZmZzZXQiLCJleHQiLCJjaGVja0ludCIsIm9iamVjdFdyaXRlVUludDE2Iiwib2JqZWN0V3JpdGVVSW50MzIiLCJjaGVja0lFRUU3NTQiLCJ3cml0ZUZsb2F0Iiwibm9Bc3NlcnQiLCJ3cml0ZURvdWJsZSIsIm5ld0J1ZiIsInNsaWNlTGVuIiwicmVhZFVJbnRMRSIsInJlYWRVSW50QkUiLCJyZWFkVUludDgiLCJyZWFkVUludDE2TEUiLCJyZWFkVUludDMyTEUiLCJyZWFkVUludDMyQkUiLCJyZWFkSW50TEUiLCJyZWFkSW50QkUiLCJyZWFkSW50OCIsInJlYWRJbnQxNkxFIiwicmVhZEludDE2QkUiLCJyZWFkSW50MzJMRSIsInJlYWRJbnQzMkJFIiwicmVhZEZsb2F0TEUiLCJyZWFkRmxvYXRCRSIsInJlYWREb3VibGVMRSIsInJlYWREb3VibGVCRSIsIndyaXRlVUludExFIiwid3JpdGVVSW50QkUiLCJ3cml0ZVVJbnQ4IiwiZmxvb3IiLCJ3cml0ZVVJbnQxNkxFIiwid3JpdGVVSW50MTZCRSIsIndyaXRlVUludDMyTEUiLCJ3cml0ZVVJbnQzMkJFIiwid3JpdGVJbnRMRSIsImxpbWl0Iiwid3JpdGVJbnRCRSIsIndyaXRlSW50OCIsIndyaXRlSW50MTZMRSIsIndyaXRlSW50MTZCRSIsIndyaXRlSW50MzJMRSIsIndyaXRlSW50MzJCRSIsIndyaXRlRmxvYXRMRSIsIndyaXRlRmxvYXRCRSIsIndyaXRlRG91YmxlTEUiLCJ3cml0ZURvdWJsZUJFIiwidGFyZ2V0U3RhcnQiLCJzZXQiLCJjb2RlIiwiSU5WQUxJRF9CQVNFNjRfUkUiLCJJbmZpbml0eSIsImxlYWRTdXJyb2dhdGUiLCJ0b0J5dGVBcnJheSIsInRyaW0iLCJzdHJpbmd0cmltIiwiYmFzZTY0Y2xlYW4iLCJlcXVhbCIsInV0aWxzIiwibWluQXNzZXJ0IiwibWluVXRpbHMiLCJ6ZXJvMiIsImVuY29kZSIsImdldE5BRiIsIm5hZiIsImdldEpTRiIsImsxIiwiazIiLCJqc2YiLCJkMSIsImQyIiwidTEiLCJ1MiIsIm04IiwibTE0IiwibTI0IiwiY2FjaGVkUHJvcGVydHkiLCJjb21wdXRlciIsInBhcnNlQnl0ZXMiLCJpbnRGcm9tTEUiLCJGdW5jdGlvbiIsIndpbmRvdyIsImNhY2hlZFNldFRpbWVvdXQiLCJjYWNoZWRDbGVhclRpbWVvdXQiLCJwcm9jZXNzIiwiZGVmYXVsdFNldFRpbW91dCIsImRlZmF1bHRDbGVhclRpbWVvdXQiLCJydW5UaW1lb3V0IiwiZnVuIiwic2V0VGltZW91dCIsImNsZWFyVGltZW91dCIsImN1cnJlbnRRdWV1ZSIsInF1ZXVlIiwiZHJhaW5pbmciLCJxdWV1ZUluZGV4IiwiY2xlYW5VcE5leHRUaWNrIiwiZHJhaW5RdWV1ZSIsInRpbWVvdXQiLCJydW4iLCJtYXJrZXIiLCJydW5DbGVhclRpbWVvdXQiLCJJdGVtIiwibm9vcCIsIm5leHRUaWNrIiwiYXJncyIsInRpdGxlIiwiYnJvd3NlciIsImVudiIsImFyZ3YiLCJ2ZXJzaW9uIiwidmVyc2lvbnMiLCJvbiIsImFkZExpc3RlbmVyIiwib25jZSIsInJlbW92ZUxpc3RlbmVyIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwiZW1pdCIsInByZXBlbmRMaXN0ZW5lciIsInByZXBlbmRPbmNlTGlzdGVuZXIiLCJsaXN0ZW5lcnMiLCJiaW5kaW5nIiwiY3dkIiwiY2hkaXIiLCJ1bWFzayIsImlzU3Vycm9nYXRlUGFpciIsImh0b25sIiwiemVybzgiLCJlbmMiLCJ0b0hleDMyIiwiam9pbjMyIiwic3BsaXQzMiIsInJvdHIzMiIsInJvdGwzMiIsInN1bTMyIiwic3VtMzJfMyIsInN1bTMyXzQiLCJzdW0zMl81Iiwic3VtNjQiLCJhaCIsImFsIiwiYmgiLCJzdW02NF9oaSIsImJsIiwic3VtNjRfbG8iLCJzdW02NF80X2hpIiwiY2giLCJjbCIsImRoIiwiZGwiLCJzdW02NF80X2xvIiwic3VtNjRfNV9oaSIsImVoIiwiZWwiLCJzdW02NF81X2xvIiwicm90cjY0X2hpIiwicm90cjY0X2xvIiwic2hyNjRfaGkiLCJzaHI2NF9sbyIsIlRyYW5zZm9ybSIsIlN0cmluZ0RlY29kZXIiLCJDaXBoZXJCYXNlIiwiaGFzaE1vZGUiLCJfZmluYWxPckRpZ2VzdCIsImZpbmFsIiwiX2ZpbmFsIiwiX19maW5hbCIsIl9kZWNvZGVyIiwiX2VuY29kaW5nIiwidXBkYXRlIiwiaW5wdXRFbmMiLCJvdXRwdXRFbmMiLCJvdXREYXRhIiwiX3VwZGF0ZSIsIl90b1N0cmluZyIsInNldEF1dG9QYWRkaW5nIiwiZ2V0QXV0aFRhZyIsInNldEF1dGhUYWciLCJzZXRBQUQiLCJfdHJhbnNmb3JtIiwiZXJyIiwiX2ZsdXNoIiwiZG9uZSIsImZpbiIsInBhcmFtcyIsInBuYSIsIm9iamVjdEtleXMiLCJrZXlzIiwiRHVwbGV4IiwidXRpbCIsIlJlYWRhYmxlIiwiV3JpdGFibGUiLCJ2IiwibWV0aG9kIiwib3B0aW9ucyIsInJlYWRhYmxlIiwiYWxsb3dIYWxmT3BlbiIsIm9uZW5kIiwiX3dyaXRhYmxlU3RhdGUiLCJlbmRlZCIsIm9uRW5kTlQiLCJoaWdoV2F0ZXJNYXJrIiwiX3JlYWRhYmxlU3RhdGUiLCJkZXN0cm95ZWQiLCJfZGVzdHJveSIsImNiIiwiTUFYX0JZVEVTIiwiTUFYX1VJTlQzMiIsImNyeXB0byIsIm1zQ3J5cHRvIiwiZ2V0UmFuZG9tVmFsdWVzIiwiZ2VuZXJhdGVkIiwiSGFzaCIsImJsb2NrU2l6ZSIsImZpbmFsU2l6ZSIsIl9ibG9jayIsIl9maW5hbFNpemUiLCJfYmxvY2tTaXplIiwiX2xlbiIsImJsb2NrIiwiYWNjdW0iLCJhc3NpZ25lZCIsInJlbWFpbmRlciIsImRpZ2VzdCIsInJlbSIsImxvd0JpdHMiLCJoaWdoQml0cyIsImhhc2giLCJfaGFzaCIsIk1ENSIsIlJJUEVNRDE2MCIsInNoYSIsIkJhc2UiLCJhbGciLCJvYmplY3RUb1N0cmluZyIsImlzQm9vbGVhbiIsImlzTnVsbCIsImlzTnVsbE9yVW5kZWZpbmVkIiwiaXNOdW1iZXIiLCJpc1N0cmluZyIsImlzU3ltYm9sIiwiaXNVbmRlZmluZWQiLCJpc1JlZ0V4cCIsImlzT2JqZWN0IiwiaXNEYXRlIiwiaXNFcnJvciIsImlzRnVuY3Rpb24iLCJpc1ByaW1pdGl2ZSIsIkJsb2NrSGFzaCIsInBlbmRpbmciLCJwZW5kaW5nVG90YWwiLCJvdXRTaXplIiwiaG1hY1N0cmVuZ3RoIiwicGFkTGVuZ3RoIiwiX2RlbHRhOCIsIl9kZWx0YTMyIiwiX3BhZCIsIl9kaWdlc3QiLCJhc24xIiwiYmlnbnVtIiwiZGVmaW5lIiwiY29uc3RhbnRzIiwiZGVjb2RlcnMiLCJlbmNvZGVycyIsIlJlcG9ydGVyIiwiRGVjb2RlckJ1ZmZlciIsIkVuY29kZXJCdWZmZXIiLCJOb2RlIiwicmVwbGFjZXIiLCJpc0J1ZmZlckxpa2UiLCJyZXZpdmVyIiwic3RhcnRzV2l0aCIsInN0cmluZ2lmeSIsIkpTT04iLCJzcGFjZSIsInBhcnNlIiwidGV4dCIsImZuIiwiYXJnMSIsImFyZzIiLCJhcmczIiwiYXNVSW50MzJBcnJheSIsInNjcnViVmVjIiwiY3J5cHRCbG9jayIsIk0iLCJrZXlTY2hlZHVsZSIsIlNVQl9NSVgiLCJTQk9YIiwiblJvdW5kcyIsInQwIiwidDEiLCJ0MiIsInQzIiwiU1VCX01JWDAiLCJTVUJfTUlYMSIsIlNVQl9NSVgyIiwiU1VCX01JWDMiLCJzMCIsInMxIiwiczIiLCJzMyIsImtzUm93IiwiUkNPTiIsIkciLCJJTlZfU0JPWCIsIklOVl9TVUJfTUlYIiwieGkiLCJzeCIsIng0IiwieDgiLCJBRVMiLCJfa2V5IiwiX3Jlc2V0Iiwia2V5U2l6ZSIsImtleVdvcmRzIiwia3NSb3dzIiwiaW52S2V5U2NoZWR1bGUiLCJpayIsImtzUiIsInR0IiwiX25Sb3VuZHMiLCJfa2V5U2NoZWR1bGUiLCJfaW52S2V5U2NoZWR1bGUiLCJlbmNyeXB0QmxvY2tSYXciLCJlbmNyeXB0QmxvY2siLCJkZWNyeXB0QmxvY2siLCJtMSIsInNjcnViIiwicGFzc3dvcmQiLCJzYWx0Iiwia2V5Qml0cyIsIml2TGVuIiwia2V5TGVuIiwiaXYiLCJ1c2VkIiwia2V5U3RhcnQiLCJpdlN0YXJ0IiwiQmFzZUN1cnZlIiwiY29uZiIsInplcm8iLCJ0d28iLCJwb2ludEZyb21KU09OIiwiZ1JlZCIsIl93bmFmVDEiLCJfd25hZlQyIiwiX3duYWZUMyIsIl93bmFmVDQiLCJhZGp1c3RDb3VudCIsInJlZE4iLCJfbWF4d2VsbFRyaWNrIiwiQmFzZVBvaW50IiwiY3VydmUiLCJwcmVjb21wdXRlZCIsInBvaW50IiwidmFsaWRhdGUiLCJfZml4ZWROYWZNdWwiLCJkb3VibGVzIiwiX2dldERvdWJsZXMiLCJJIiwic3RlcCIsInJlcHIiLCJuYWZXIiwianBvaW50IiwibWl4ZWRBZGQiLCJwb2ludHMiLCJ0b1AiLCJfd25hZk11bCIsIm5hZlBvaW50cyIsIl9nZXROQUZQb2ludHMiLCJkYmxwIiwiX3duYWZNdWxBZGQiLCJkZWZXIiwiY29lZmZzIiwiamFjb2JpYW5SZXN1bHQiLCJ3bmRXaWR0aCIsImNvbWIiLCJ0b0oiLCJpbmRleCIsImphIiwiamIiLCJkZWNvZGVQb2ludCIsInBvaW50RnJvbVgiLCJlbmNvZGVDb21wcmVzc2VkIiwiX2VuY29kZSIsImNvbXBhY3QiLCJnZXRYIiwiZ2V0WSIsInByZWNvbXB1dGUiLCJwb3dlciIsImJldGEiLCJfZ2V0QmV0YSIsIl9oYXNEb3VibGVzIiwiZGJsIiwiYWVzaWQiLCJmaXhQcm9jIiwiY2lwaGVycyIsImNvbXBhdCIsInBhcnNlS2V5cyIsInBhc3NwaHJhc2UiLCJzdWJ0eXBlIiwibmRhdGEiLCJzdHJpcHBlZCIsInRhZyIsImNlcnRpZmljYXRlIiwiZGVjb2RlIiwidGJzQ2VydGlmaWNhdGUiLCJzdWJqZWN0UHVibGljS2V5SW5mbyIsIlB1YmxpY0tleSIsImFsZ29yaXRobSIsIlJTQVB1YmxpY0tleSIsInN1YmplY3RQdWJsaWNLZXkiLCJzdWJqZWN0UHJpdmF0ZUtleSIsInB1Yl9rZXkiLCJEU0FwYXJhbSIsImRlY3J5cHQiLCJrZGUiLCJrZGVwYXJhbXMiLCJpdGVycyIsImFsZ28iLCJjaXBoZXIiLCJjaXBoZXJUZXh0Iiwia2V5bGVuIiwicGJrZGYyU3luYyIsImNyZWF0ZURlY2lwaGVyaXYiLCJFbmNyeXB0ZWRQcml2YXRlS2V5IiwiUHJpdmF0ZUtleSIsIlJTQVByaXZhdGVLZXkiLCJwcml2YXRlS2V5IiwiRUNQcml2YXRlS2V5IiwicHJpdl9rZXkiLCJEU0FQcml2YXRlS2V5IiwicGFyYW1ldGVycyIsInNpZ25hdHVyZSIsIkhhc2hCYXNlIiwiQVJSQVkxNiIsIl9hIiwiX2IiLCJfYyIsIl9kIiwicm90bCIsImZuRiIsImZuRyIsImZuSCIsImZuSSIsIl9ibG9ja09mZnNldCIsIl9sZW5ndGgiLCJTdHJlYW0iLCJFRSIsIkV2ZW50RW1pdHRlciIsIlBhc3NUaHJvdWdoIiwicGlwZSIsInNvdXJjZSIsIm9uZGF0YSIsImNodW5rIiwicGF1c2UiLCJvbmRyYWluIiwicmVzdW1lIiwiX2lzU3RkaW8iLCJvbmNsb3NlIiwiZGlkT25FbmQiLCJkZXN0cm95Iiwib25lcnJvciIsImVyIiwiY2xlYW51cCIsImxpc3RlbmVyQ291bnQiLCJSZWZsZWN0T3duS2V5cyIsIlIiLCJSZWZsZWN0IiwiUmVmbGVjdEFwcGx5IiwicmVjZWl2ZXIiLCJvd25LZXlzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsIk51bWJlcklzTmFOIiwiaW5pdCIsIl9ldmVudHMiLCJfZXZlbnRzQ291bnQiLCJfbWF4TGlzdGVuZXJzIiwiZGVmYXVsdE1heExpc3RlbmVycyIsIiRnZXRNYXhMaXN0ZW5lcnMiLCJfYWRkTGlzdGVuZXIiLCJsaXN0ZW5lciIsInByZXBlbmQiLCJldmVudHMiLCJleGlzdGluZyIsIndhcm5pbmciLCJuZXdMaXN0ZW5lciIsInVuc2hpZnQiLCJ3YXJuZWQiLCJlbWl0dGVyIiwiY291bnQiLCJjb25zb2xlIiwid2FybiIsIm9uY2VXcmFwcGVyIiwiZmlyZWQiLCJ3cmFwRm4iLCJfb25jZVdyYXAiLCJzdGF0ZSIsIndyYXBwZWQiLCJfbGlzdGVuZXJzIiwidW53cmFwIiwiZXZsaXN0ZW5lciIsInVud3JhcExpc3RlbmVycyIsImFycmF5Q2xvbmUiLCJnZXRQcm90b3R5cGVPZiIsInNldE1heExpc3RlbmVycyIsImdldE1heExpc3RlbmVycyIsImRvRXJyb3IiLCJlcnJvciIsIm1lc3NhZ2UiLCJjb250ZXh0IiwiaGFuZGxlciIsInBvc2l0aW9uIiwib3JpZ2luYWxMaXN0ZW5lciIsInBvcCIsInNwbGljZU9uZSIsInJhd0xpc3RlbmVycyIsImV2ZW50TmFtZXMiLCJDb3JrZWRSZXF1ZXN0IiwiX3RoaXMiLCJlbnRyeSIsImZpbmlzaCIsImNvcmtSZXEiLCJjYWxsYmFjayIsInBlbmRpbmdjYiIsImNvcmtlZFJlcXVlc3RzRnJlZSIsIm9uQ29ya2VkRmluaXNoIiwiYXN5bmNXcml0ZSIsInNldEltbWVkaWF0ZSIsIldyaXRhYmxlU3RhdGUiLCJpbnRlcm5hbFV0aWwiLCJkZXByZWNhdGUiLCJPdXJVaW50OEFycmF5IiwicmVhbEhhc0luc3RhbmNlIiwiZGVzdHJveUltcGwiLCJub3AiLCJzdHJlYW0iLCJpc0R1cGxleCIsIm9iamVjdE1vZGUiLCJ3cml0YWJsZU9iamVjdE1vZGUiLCJod20iLCJ3cml0YWJsZUh3bSIsIndyaXRhYmxlSGlnaFdhdGVyTWFyayIsImRlZmF1bHRId20iLCJmaW5hbENhbGxlZCIsIm5lZWREcmFpbiIsImVuZGluZyIsImZpbmlzaGVkIiwibm9EZWNvZGUiLCJkZWNvZGVTdHJpbmdzIiwiZGVmYXVsdEVuY29kaW5nIiwid3JpdGluZyIsImNvcmtlZCIsInN5bmMiLCJidWZmZXJQcm9jZXNzaW5nIiwib253cml0ZSIsIndyaXRlY2IiLCJ3cml0ZWxlbiIsIm9ud3JpdGVTdGF0ZVVwZGF0ZSIsImZpbmlzaE1heWJlIiwiZXJyb3JFbWl0dGVkIiwib253cml0ZUVycm9yIiwibmVlZEZpbmlzaCIsImJ1ZmZlcmVkUmVxdWVzdCIsImNsZWFyQnVmZmVyIiwiYWZ0ZXJXcml0ZSIsImxhc3RCdWZmZXJlZFJlcXVlc3QiLCJwcmVmaW5pc2hlZCIsImJ1ZmZlcmVkUmVxdWVzdENvdW50IiwiX3dyaXRlIiwid3JpdGV2IiwiX3dyaXRldiIsImRvV3JpdGUiLCJvbndyaXRlRHJhaW4iLCJob2xkZXIiLCJhbGxCdWZmZXJzIiwiaXNCdWYiLCJjYWxsRmluYWwiLCJuZWVkIiwicHJlZmluaXNoIiwiZ2V0QnVmZmVyIiwiaGFzSW5zdGFuY2UiLCJfdWludDhBcnJheVRvQnVmZmVyIiwid3JpdGVBZnRlckVuZCIsInZhbGlkIiwidmFsaWRDaHVuayIsIm5ld0NodW5rIiwiZGVjb2RlQ2h1bmsiLCJsYXN0Iiwid3JpdGVPckJ1ZmZlciIsImNvcmsiLCJ1bmNvcmsiLCJzZXREZWZhdWx0RW5jb2RpbmciLCJlbmRXcml0YWJsZSIsIl91bmRlc3Ryb3kiLCJ1bmRlc3Ryb3kiLCJuYiIsIm5lbmMiLCJyZXRyaWVkIiwiX25vcm1hbGl6ZUVuY29kaW5nIiwibm9ybWFsaXplRW5jb2RpbmciLCJ1dGYxNlRleHQiLCJ1dGYxNkVuZCIsImZpbGxMYXN0IiwidXRmOEZpbGxMYXN0IiwiYmFzZTY0VGV4dCIsImJhc2U2NEVuZCIsInNpbXBsZVdyaXRlIiwic2ltcGxlRW5kIiwibGFzdE5lZWQiLCJsYXN0VG90YWwiLCJsYXN0Q2hhciIsInV0ZjhDaGVja0J5dGUiLCJieXRlIiwidXRmOENoZWNrRXh0cmFCeXRlcyIsInV0ZjhDaGVja0luY29tcGxldGUiLCJ6bCIsInpyIiwic2wiLCJzciIsImhsIiwiaHIiLCJfZSIsImZuMSIsImZuMiIsImZuMyIsImZuNCIsImZuNSIsImFyIiwiYnIiLCJjciIsImRyIiwidGwiLCJ0ciIsIkFsZ29yaXRobSIsInNoYTEiLCJzaGEyMjQiLCJzaGEyNTYiLCJzaGEzODQiLCJzaGE1MTIiLCJDaXBoZXIiLCJERVMiLCJDQkMiLCJFREUiLCJkZWNpcGhlcnMiLCJtb2RlcyIsImNyZWF0ZUNpcGhlciIsImNyZWF0ZUNpcGhlcml2IiwiQ2lwaGVyaXYiLCJjcmVhdGVEZWNpcGhlciIsIkRlY2lwaGVyIiwiRGVjaXBoZXJpdiIsImxpc3RDaXBoZXJzIiwiZ2V0Q2lwaGVycyIsIm1vZGVNb2R1bGVzIiwiRUNCIiwiQ0ZCIiwiQ0ZCOCIsIkNGQjEiLCJPRkIiLCJDVFIiLCJHQ00iLCJSYW5kIiwicmFuZCIsImdlbmVyYXRlIiwiX3JhbmQiLCJnZXRCeXRlcyIsImdldEJ5dGUiLCJyYW5kb21CeXRlcyIsImNydCIsInByaXYiLCJibGluZHMiLCJnZXRyIiwiYmxpbmRlciIsImJuIiwibW9kdWx1cyIsInB1YmxpY0V4cG9uZW50IiwidW5ibGluZGVyIiwiYmxpbmQiLCJibGluZGVkIiwiYzEiLCJwcmltZTEiLCJjMiIsInByaW1lMiIsInFpbnYiLCJjb2VmZmljaWVudCIsImV4cG9uZW50MSIsIm0yIiwiZXhwb25lbnQyIiwiZWxsaXB0aWMiLCJjdXJ2ZXMiLCJlYyIsImVkZHNhIiwicHJlIiwiUHJlc2V0Q3VydmUiLCJzaG9ydCIsImVkd2FyZHMiLCJpc0luZmluaXR5IiwiZGVmaW5lQ3VydmUiLCJsYW1iZGEiLCJiYXNpcyIsImNvbW1vbiIsInJpcGVtZCIsImhtYWMiLCJyaXBlbWQxNjAiLCJfZmluYWxpemVkIiwicHJlZml4IiwidGhyb3dJZk5vdFN0cmluZ09yQnVmZmVyIiwiUmVhZGFibGVTdGF0ZSIsIkVFbGlzdGVuZXJDb3VudCIsImRlYnVnVXRpbCIsImRlYnVnIiwiZGVidWdsb2ciLCJCdWZmZXJMaXN0Iiwia1Byb3h5RXZlbnRzIiwicmVhZGFibGVPYmplY3RNb2RlIiwicmVhZGFibGVId20iLCJyZWFkYWJsZUhpZ2hXYXRlck1hcmsiLCJwaXBlcyIsInBpcGVzQ291bnQiLCJmbG93aW5nIiwiZW5kRW1pdHRlZCIsInJlYWRpbmciLCJuZWVkUmVhZGFibGUiLCJlbWl0dGVkUmVhZGFibGUiLCJyZWFkYWJsZUxpc3RlbmluZyIsInJlc3VtZVNjaGVkdWxlZCIsImF3YWl0RHJhaW4iLCJyZWFkaW5nTW9yZSIsImRlY29kZXIiLCJfcmVhZCIsInJlYWRhYmxlQWRkQ2h1bmsiLCJhZGRUb0Zyb250Iiwic2tpcENodW5rQ2hlY2siLCJlbWl0UmVhZGFibGUiLCJvbkVvZkNodW5rIiwiY2h1bmtJbnZhbGlkIiwiYWRkQ2h1bmsiLCJtYXliZVJlYWRNb3JlIiwibmVlZE1vcmVEYXRhIiwiaXNQYXVzZWQiLCJzZXRFbmNvZGluZyIsIk1BWF9IV00iLCJob3dNdWNoVG9SZWFkIiwiaGVhZCIsImNvbXB1dGVOZXdIaWdoV2F0ZXJNYXJrIiwiZW1pdFJlYWRhYmxlXyIsImZsb3ciLCJtYXliZVJlYWRNb3JlXyIsIm5SZWFkaW5nTmV4dFRpY2siLCJyZXN1bWVfIiwiZnJvbUxpc3QiLCJjbGVhciIsImhhc1N0cmluZ3MiLCJ0YWlsIiwiY29weUZyb21CdWZmZXJTdHJpbmciLCJjb3B5RnJvbUJ1ZmZlciIsImZyb21MaXN0UGFydGlhbCIsImVuZFJlYWRhYmxlIiwiZW5kUmVhZGFibGVOVCIsInhzIiwibk9yaWciLCJkb1JlYWQiLCJwaXBlT3B0cyIsImVuZEZuIiwic3Rkb3V0Iiwic3RkZXJyIiwidW5waXBlIiwib251bnBpcGUiLCJ1bnBpcGVJbmZvIiwiaGFzVW5waXBlZCIsIm9uZmluaXNoIiwiY2xlYW5lZFVwIiwicGlwZU9uRHJhaW4iLCJpbmNyZWFzZWRBd2FpdERyYWluIiwiZXZlbnQiLCJkZXN0cyIsInNwbGljZSIsImV2Iiwid3JhcCIsInBhdXNlZCIsIl9mcm9tTGlzdCIsImVtaXRFcnJvck5UIiwicmVhZGFibGVEZXN0cm95ZWQiLCJ3cml0YWJsZURlc3Ryb3llZCIsImFmdGVyVHJhbnNmb3JtIiwidHMiLCJfdHJhbnNmb3JtU3RhdGUiLCJ0cmFuc2Zvcm1pbmciLCJ3cml0ZWNodW5rIiwicnMiLCJuZWVkVHJhbnNmb3JtIiwid3JpdGVlbmNvZGluZyIsImZsdXNoIiwiX3RoaXMyIiwiZXJyMiIsIksiLCJXIiwiU2hhMjU2IiwiX3ciLCJtYWoiLCJzaWdtYTAiLCJzaWdtYTEiLCJnYW1tYTAiLCJfZiIsIl9nIiwiX2giLCJmIiwiVDEiLCJUMiIsIkgiLCJTaGE1MTIiLCJDaCIsInhsIiwiR2FtbWEwIiwiR2FtbWEwbCIsIkdhbW1hMSIsIkdhbW1hMWwiLCJnZXRDYXJyeSIsIl9haCIsIl9iaCIsIl9jaCIsIl9kaCIsIl9laCIsIl9maCIsIl9naCIsIl9oaCIsIl9hbCIsIl9ibCIsIl9jbCIsIl9kbCIsIl9lbCIsIl9mbCIsIl9nbCIsIl9obCIsImZoIiwiZ2giLCJoaCIsImZsIiwiZ2wiLCJ4aCIsImdhbW1hMGwiLCJnYW1tYTEiLCJnYW1tYTFsIiwiV2k3aCIsIldpN2wiLCJXaTE2aCIsIldpMTZsIiwiV2lsIiwiV2loIiwibWFqaCIsIm1hamwiLCJzaWdtYTBoIiwic2lnbWEwbCIsInNpZ21hMWgiLCJzaWdtYTFsIiwiS2loIiwiS2lsIiwiY2hoIiwiY2hsIiwidDFsIiwidDFoIiwidDJsIiwidDJoIiwid3JpdGVJbnQ2NEJFIiwiTGVnYWN5IiwibWQ1IiwiWkVST1MiLCJIbWFjIiwiYmxvY2tzaXplIiwiX2FsZyIsImlwYWQiLCJfaXBhZCIsIm9wYWQiLCJfb3BhZCIsInBia2RmMiIsImNoZWNrQnVmZmVyIiwiaXRlcmF0aW9ucyIsIk1BWF9BTExPQyIsImNoZWNrUGFyYW1ldGVycyIsInNpemVzIiwicm1kMTYwIiwic2FsdExlbiIsImdldERpZ2VzdCIsImlwYWQxIiwiaXBhZDIiLCJESyIsImJsb2NrMSIsImRlc3RQb3MiLCJoTGVuIiwiVCIsIlUiLCJpbmNyMzIiLCJnZXRCbG9jayIsIl9jaXBoZXIiLCJfcHJldiIsImVuY3J5cHQiLCJjaHVua051bSIsIl9jYWNoZSIsInBhZCIsIml0ZW0iLCJhZXMiLCJHSEFTSCIsIlN0cmVhbUNpcGhlciIsImNrIiwiX2doYXNoIiwiX2ZpbklEIiwiZ2hhc2giLCJ0b1BhZCIsIml2Qml0cyIsImNhbGNJdiIsIl9zZWNDYWNoZSIsIl9kZWNyeXB0IiwiX2FsZW4iLCJfbW9kZSIsIl9hdXRoVGFnIiwiX2NhbGxlZCIsInJ1bXAiLCJ4b3JUZXN0IiwiZmluZFByaW1lIiwic2ltcGxlU2lldmUiLCJmZXJtYXRUZXN0IiwiVFdFTlRZRk9VUiIsIm1pbGxlclJhYmluIiwiT05FIiwiVFdPIiwiRklWRSIsIlRFTiIsIlRIUkVFIiwiRUxFVkVOIiwiRk9VUiIsIl9nZXRQcmltZXMiLCJnZW4iLCJuMiIsInRlc3QiLCJicm9yYW5kIiwiTWlsbGVyUmFiaW4iLCJfcmFuZGJlbG93IiwibWluX2J5dGVzIiwiX3JhbmRyYW5nZSIsInN0b3AiLCJyb25lIiwibjEiLCJybjEiLCJnZXREaXZpc29yIiwiY2gzMiIsIm1hajMyIiwicDMyIiwiZnRfMSIsInMwXzI1NiIsInMxXzI1NiIsImcwXzI1NiIsImcxXzI1NiIsInNoYUNvbW1vbiIsInNoYTI1Nl9LIiwiU0hBMjU2Iiwic2hhNTEyX0siLCJTSEE1MTIiLCJjaDY0X2hpIiwieWgiLCJ5bCIsInpoIiwiY2g2NF9sbyIsIm1hajY0X2hpIiwibWFqNjRfbG8iLCJzMF81MTJfaGkiLCJzMF81MTJfbG8iLCJzMV81MTJfaGkiLCJzMV81MTJfbG8iLCJnMF81MTJfaGkiLCJnMF81MTJfbG8iLCJnMV81MTJfaGkiLCJnMV81MTJfbG8iLCJfcHJlcGFyZUJsb2NrIiwiYzBfaGkiLCJjMF9sbyIsImMxX2hpIiwiYzFfbG8iLCJjMl9oaSIsImMyX2xvIiwiYzNfaGkiLCJjM19sbyIsImM0X2hpIiwiYzRfbG8iLCJUMV9oaSIsIlQxX2xvIiwiVDJfaGkiLCJUMl9sbyIsInJlcG9ydGVyIiwibWFwIiwic2F2ZSIsInJlc3RvcmUiLCJpc0VtcHR5IiwiZmFpbCIsInNraXAiLCJfcmVwb3J0ZXJTdGF0ZSIsInJhdyIsImZvckVhY2giLCJfcmV2ZXJzZSIsImRlciIsIkRFUkRlY29kZXIiLCJlbnRpdHkiLCJ0cmVlIiwiREVSTm9kZSIsImJvZHkiLCJwYXJlbnQiLCJkZXJEZWNvZGVUYWciLCJjbHMiLCJ0YWdDbGFzcyIsInByaW1pdGl2ZSIsIm9jdCIsInRhZ1N0ciIsImRlckRlY29kZUxlbiIsIl9kZWNvZGUiLCJfcGVla1RhZyIsImFueSIsImRlY29kZWRUYWciLCJfZGVjb2RlVGFnIiwiX3NraXBVbnRpbEVuZCIsIl9kZWNvZGVMaXN0IiwicmVzdWx0IiwicG9zc2libGVFbmQiLCJfZGVjb2RlU3RyIiwidW51c2VkIiwibnVtc3RyIiwiX2lzTnVtc3RyIiwicHJpbnRzdHIiLCJfaXNQcmludHN0ciIsIl9kZWNvZGVPYmppZCIsInZhbHVlcyIsInJlbGF0aXZlIiwiaWRlbnRpZmllcnMiLCJpZGVudCIsInN1YmlkZW50IiwiZmlyc3QiLCJzZWNvbmQiLCJfZGVjb2RlVGltZSIsInllYXIiLCJtb24iLCJkYXkiLCJob3VyIiwic2VjIiwiRGF0ZSIsIlVUQyIsIl9kZWNvZGVOdWxsIiwiX2RlY29kZUJvb2wiLCJfZGVjb2RlSW50IiwiX3VzZSIsIl9nZXREZWNvZGVyIiwiREVSRW5jb2RlciIsIl9lbmNvZGVDb21wb3NpdGUiLCJjb250ZW50IiwiaGVhZGVyIiwiZW5jb2RlZFRhZyIsInRhZ0J5TmFtZSIsInRhZ0NsYXNzQnlOYW1lIiwiZW5jb2RlVGFnIiwiX2NyZWF0ZUVuY29kZXJCdWZmZXIiLCJsZW5PY3RldHMiLCJfZW5jb2RlU3RyIiwiX2VuY29kZU9iamlkIiwiaWQiLCJvYmppZCIsIl9lbmNvZGVUaW1lIiwidGltZSIsImRhdGUiLCJnZXRGdWxsWWVhciIsImdldFVUQ01vbnRoIiwiZ2V0VVRDRGF0ZSIsImdldFVUQ0hvdXJzIiwiZ2V0VVRDTWludXRlcyIsImdldFVUQ1NlY29uZHMiLCJfZW5jb2RlTnVsbCIsIl9lbmNvZGVJbnQiLCJudW1BcnJheSIsInNpZ24iLCJfZW5jb2RlQm9vbCIsIl9nZXRFbmNvZGVyIiwiX3NraXBEZWZhdWx0IiwiZGF0YUJ1ZmZlciIsIl9iYXNlU3RhdGUiLCJkZWZhdWx0QnVmZmVyIiwiX2VuY29kZVZhbHVlIiwiY3JlYXRlSGFzaCIsImkyb3BzIiwic2VlZCIsInBhZGRlZE1zZyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZXNjcmlwdG9ycyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImZvcm1hdFJlZ0V4cCIsImZvcm1hdCIsIm9iamVjdHMiLCJub0RlcHJlY2F0aW9uIiwidGhyb3dEZXByZWNhdGlvbiIsInRyYWNlRGVwcmVjYXRpb24iLCJ0cmFjZSIsImRlYnVnRW52aXJvbiIsImRlYnVncyIsIm9wdHMiLCJzZWVuIiwic3R5bGl6ZSIsInN0eWxpemVOb0NvbG9yIiwiZGVwdGgiLCJjb2xvcnMiLCJzaG93SGlkZGVuIiwiX2V4dGVuZCIsImN1c3RvbUluc3BlY3QiLCJzdHlsaXplV2l0aENvbG9yIiwiZm9ybWF0VmFsdWUiLCJzdHlsZVR5cGUiLCJzdHlsZSIsInN0eWxlcyIsInJlY3Vyc2VUaW1lcyIsInNpbXBsZSIsImZvcm1hdFByaW1pdGl2ZSIsInZpc2libGVLZXlzIiwiaWR4IiwiYXJyYXlUb0hhc2giLCJmb3JtYXRFcnJvciIsIlJlZ0V4cCIsImJyYWNlcyIsInRvVVRDU3RyaW5nIiwiZm9ybWF0UHJvcGVydHkiLCJmb3JtYXRBcnJheSIsInJlZHVjZSIsImN1ciIsIm51bUxpbmVzRXN0IiwicmVkdWNlVG9TaW5nbGVTdHJpbmciLCJkZXNjIiwibGluZSIsIk5PREVfREVCVUciLCJ0b1VwcGVyQ2FzZSIsInBpZCIsIm1vbnRocyIsInRpbWVzdGFtcCIsImdldEhvdXJzIiwiZ2V0TWludXRlcyIsImdldFNlY29uZHMiLCJnZXREYXRlIiwiZ2V0TW9udGgiLCJwcm9wIiwibG9nIiwib3JpZ2luIiwia0N1c3RvbVByb21pc2lmaWVkU3ltYm9sIiwiY2FsbGJhY2tpZnlPblJlamVjdGVkIiwicmVhc29uIiwibmV3UmVhc29uIiwicHJvbWlzaWZ5Iiwib3JpZ2luYWwiLCJwcm9taXNlUmVzb2x2ZSIsInByb21pc2VSZWplY3QiLCJwcm9taXNlIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJzZXRQcm90b3R5cGVPZiIsImRlZmluZVByb3BlcnRpZXMiLCJjdXN0b20iLCJjYWxsYmFja2lmeSIsImNhbGxiYWNraWZpZWQiLCJtYXliZUNiIiwidGhlbiIsInJlaiIsImhleCIsIkJpZ0ludCIsIjEwMjQiLCJOX2xlbmd0aF9iaXRzIiwiMTUzNiIsIjIwNDgiLCIzMDcyIiwiNDA5NiIsIjYyNDQiLCI4MTkyIiwiUmVnaXN0ZXIiLCJWdWUiLCJjb21wb25lbnQiLCJ0ZW1wbGF0ZSIsIm5hbWVUZXh0UmVnaXN0ZXIiLCJwYXNzVGV4dFJlZ2lzdGVyIiwiZW1haWxUZXh0UmVnaXN0ZXIiLCJidXR0b25UZXh0UmVnaXN0ZXIiLCJuYW1lVGV4dExvZ2luIiwicGFzc1RleHRMb2dpbiIsImJ1dHRvblRleHRMb2dpbiIsImVtYWlsIiwibWV0aG9kcyIsImluaXRSZWdpc3RlciIsImFzeW5jIiwic2VjcmV0MSIsImdlbktleSIsIiRkYXRhIiwiaWRlbnRpdHkiLCJ2ZXJpZmllciIsImNvbXB1dGVWZXJpZmllciIsIkNsaWVudCIsInJlcXVlc3ROYW1lIiwiZmV0Y2giLCJoZWFkZXJzIiwicmVzcG9uc2UyIiwiZ2V0QXV0aERhdGEiLCJyZXNwb25zZSIsInNldEIiLCJNMSIsImNvbXB1dGVNMSIsInNwckEiLCJjb21wdXRlQSIsInJlc3VsdDIiLCJidWZmZXJSZXN1bHQiLCJjb21wdXRlSyIsIm5vdyIsImRlZmF1bHQiLCJiNjQiLCJsZW5zIiwiZ2V0TGVucyIsInZhbGlkTGVuIiwicGxhY2VIb2xkZXJzTGVuIiwiQXJyIiwiX2J5dGVMZW5ndGgiLCJjdXJCeXRlIiwicmV2TG9va3VwIiwidWludDgiLCJleHRyYUJ5dGVzIiwicGFydHMiLCJsZW4yIiwiZW5jb2RlQ2h1bmsiLCJsb29rdXAiLCJpc0xFIiwibUxlbiIsIm5CeXRlcyIsImVMZW4iLCJlTWF4IiwiZUJpYXMiLCJuQml0cyIsIk5hTiIsInJ0IiwiTE4yIiwiYXNzZXJ0XyIsImJ1ZmZlclRvQmlnSW50IiwiYXNzZXJ0SXNCdWZmZXIiLCJwb3dtIiwiYmlnSW50VG9CdWZmZXIiLCJhc3NlcnRJc0JpZ0ludCIsInBhZFRvTiIsInBhZFRvIiwiYXJnTmFtZSIsImFzc2VydElzTkJ1ZmZlciIsImdldHgiLCJQIiwiaGFzaElQIiwiZ2V0ayIsInJhbmRvbUJ5dGVzQXN5bmMiLCJnZXR1IiwiZ2V0SyIsIlNCdWYiLCJnZXRNMSIsIkFCdWYiLCJCQnVmIiwiZ2V0TTIiLCJNQnVmIiwiS0J1ZiIsImJ1ZjEiLCJidWYyIiwibWlzbWF0Y2giLCJzYWx0QnVmIiwiaWRlbnRpdHlCdWYiLCJwYXNzd29yZEJ1ZiIsInNlY3JldDFCdWYiLCJfcHJpdmF0ZSIsImtfbnVtIiwieF9udW0iLCJhX251bSIsIkFfYnVmIiwiYU51bSIsImdldEEiLCJCTnVtIiwidU51bSIsImtOdW0iLCJ4TnVtIiwiY2xpZW50R2V0UyIsIktfYnVmIiwiTTFfYnVmIiwiTTJfYnVmIiwidV9udW0iLCJTX2J1ZiIsInNlcnZlck0yQnVmIiwiU2VydmVyIiwidmVyaWZpZXJCdWYiLCJzZWNyZXQyQnVmIiwiYl9udW0iLCJ2X251bSIsIkJfYnVmIiwiZ2V0QiIsIkFOdW0iLCJ2TnVtIiwiYk51bSIsInNlcnZlckdldFMiLCJjbGllbnRNMUJ1ZiIsInJuZyIsInBzZXVkb1JhbmRvbUJ5dGVzIiwicHJuZyIsImNyZWF0ZUhtYWMiLCJhbGdvcyIsImFsZ29LZXlzIiwiaGFzaGVzIiwiZ2V0SGFzaGVzIiwiRGlmZmllSGVsbG1hbkdyb3VwIiwiY3JlYXRlRGlmZmllSGVsbG1hbkdyb3VwIiwiZ2V0RGlmZmllSGVsbG1hbiIsImNyZWF0ZURpZmZpZUhlbGxtYW4iLCJEaWZmaWVIZWxsbWFuIiwiY3JlYXRlU2lnbiIsIlNpZ24iLCJjcmVhdGVWZXJpZnkiLCJWZXJpZnkiLCJjcmVhdGVFQ0RIIiwicHVibGljRW5jcnlwdCIsInByaXZhdGVFbmNyeXB0IiwicHVibGljRGVjcnlwdCIsInByaXZhdGVEZWNyeXB0IiwicmYiLCJyYW5kb21GaWxsIiwicmFuZG9tRmlsbFN5bmMiLCJjcmVhdGVDcmVkZW50aWFscyIsImluc3RhbmNlIiwiQ29uc3RydWN0b3IiLCJfY2xhc3NDYWxsQ2hlY2siLCJUaW1lb3V0IiwiY2xlYXJGbiIsIl9pZCIsIl9jbGVhckZuIiwic2NvcGUiLCJzZXRJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJjbG9zZSIsInVucmVmIiwicmVmIiwiZW5yb2xsIiwibXNlY3MiLCJfaWRsZVRpbWVvdXRJZCIsIl9pZGxlVGltZW91dCIsInVuZW5yb2xsIiwiX3VucmVmQWN0aXZlIiwiYWN0aXZlIiwiX29uVGltZW91dCIsImNsZWFySW1tZWRpYXRlIiwicmVnaXN0ZXJJbW1lZGlhdGUiLCJodG1sIiwiY2hhbm5lbCIsIm1lc3NhZ2VQcmVmaXgiLCJvbkdsb2JhbE1lc3NhZ2UiLCJuZXh0SGFuZGxlIiwidGFza3NCeUhhbmRsZSIsImN1cnJlbnRseVJ1bm5pbmdBVGFzayIsImRvYyIsImRvY3VtZW50IiwiYXR0YWNoVG8iLCJoYW5kbGUiLCJydW5JZlByZXNlbnQiLCJwb3N0TWVzc2FnZSIsImltcG9ydFNjcmlwdHMiLCJwb3N0TWVzc2FnZUlzQXN5bmNocm9ub3VzIiwib2xkT25NZXNzYWdlIiwib25tZXNzYWdlIiwiY2FuVXNlUG9zdE1lc3NhZ2UiLCJNZXNzYWdlQ2hhbm5lbCIsInBvcnQxIiwicG9ydDIiLCJjcmVhdGVFbGVtZW50IiwiZG9jdW1lbnRFbGVtZW50Iiwic2NyaXB0Iiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVtb3ZlQ2hpbGQiLCJhcHBlbmRDaGlsZCIsInJhbmRvbSIsImFkZEV2ZW50TGlzdGVuZXIiLCJhdHRhY2hFdmVudCIsInRhc2siLCJjb25maWciLCJsb2NhbFN0b3JhZ2UiLCJTaGEiLCJyb3RsMzAiLCJmdCIsIlNoYTEiLCJyb3RsNSIsIlNoYTIyNCIsIlNoYTM4NCIsIlpFUk9fQlVGIiwic3VidGxlIiwidG9Ccm93c2VyIiwiY2hlY2tzIiwiYnJvd3NlclBia2RmMiIsImltcG9ydEtleSIsImRlcml2ZUJpdHMiLCJyZXNvbHZlUHJvbWlzZSIsInByb20iLCJjYXRjaCIsImNoZWNrTmF0aXZlIiwicmVzcCIsImFlc01vZGVzIiwiZGVzTW9kZXMiLCJlYnRrIiwic3VpdGUiLCJkZXMiLCJpbnN0YW50aWF0ZSIsIm1vZGVOYW1lIiwiX2RlcyIsImRlczMiLCJpcCIsImluTCIsImluUiIsIm91dEwiLCJvdXRSIiwicmlwIiwicGMxIiwicjI4c2hsIiwicGMydGFibGUiLCJwYzIiLCJleHBhbmQiLCJzVGFibGUiLCJzdWJzdGl0dXRlIiwicGVybXV0ZVRhYmxlIiwicGFkU3BsaXQiLCJncm91cCIsImJ1ZmZlck9mZiIsIl91cGRhdGVEZWNyeXB0IiwiX3VwZGF0ZUVuY3J5cHQiLCJfYnVmZmVyIiwiX2ZsdXNoQnVmZmVyIiwiaW5wdXRPZmYiLCJvdXRwdXRPZmYiLCJfZmluYWxFbmNyeXB0IiwiX2ZpbmFsRGVjcnlwdCIsIl91bnBhZCIsIkRFU1N0YXRlIiwiX2Rlc1N0YXRlIiwiZGVyaXZlS2V5cyIsInNoaWZ0VGFibGUiLCJrTCIsImtSIiwiaW5wIiwiaW5PZmYiLCJvdXRPZmYiLCJfZW5jcnlwdCIsImxTdGFydCIsInJTdGFydCIsImtleUwiLCJrZXlSIiwicHJvdG8iLCJDQkNTdGF0ZSIsIl9jYmNJbml0IiwiX2NiY1N0YXRlIiwic3VwZXJQcm90byIsIkVERVN0YXRlIiwiazMiLCJfZWRlU3RhdGUiLCJNT0RFUyIsIkF1dGhDaXBoZXIiLCJTcGxpdHRlciIsIl9hdXRvcGFkZGluZyIsInRoaW5nIiwiUEFERElORyIsImNhY2hlIiwic2V0VG8iLCJwYWRCdWZmIiwiZW5jcnlwdFN0YXJ0IiwiZW5jcnlwdEJ5dGUiLCJieXRlUGFyYW0iLCJzaGlmdEluIiwiWkVST0VTIiwiZnJvbUFycmF5IiwiX211bHRpcGx5IiwibHNiVmkiLCJWaSIsIlppIiwiYWJsIiwiX2xhc3QiLCJwYWRkZWQiLCJ1bnBhZCIsImF1dG9QYWRkaW5nIiwiREgiLCJFTkNPRElOR1MiLCJnZW5lcmF0b3IiLCJnZW5jIiwiZ2VuZXJhdGVQcmltZSIsIndlYnBhY2tQb2x5ZmlsbCIsInBhdGhzIiwiY2hpbGRyZW4iLCJTRVZFTiIsInNldFB1YmxpY0tleSIsInB1YiIsIl9wdWIiLCJzZXRQcml2YXRlS2V5IiwiX3ByaXYiLCJwcmltZUNhY2hlIiwibWFsbGVhYmxlIiwic2V0R2VuZXJhdG9yIiwiX19wcmltZSIsIl9wcmltZUxlbiIsIl9wcmltZUNvZGUiLCJmb3JtYXRSZXR1cm5WYWx1ZSIsImNoZWNrUHJpbWUiLCJfX2dlbiIsImdlbmVyYXRlS2V5cyIsIl9nZW4iLCJnZXRQdWJsaWNLZXkiLCJjb21wdXRlU2VjcmV0Iiwib3RoZXIiLCJzZWNyZXQiLCJnZXRQcmltZSIsImZyb250IiwiZ2V0UHJpdmF0ZUtleSIsImdldEdlbmVyYXRvciIsInZlcmlmeSIsImFsZ29yaXRobXMiLCJfaGFzaFR5cGUiLCJfdGFnIiwiX3NpZ25UeXBlIiwic2lnIiwiRUMiLCJnZXRLZXkiLCJobGVuIiwiaGJpdHMiLCJiaXRzMmludCIsImJpdHMyb2N0ZXRzIiwib2JpdHMiLCJtYWtlS2V5Iiwia3YiLCJtYWtlUiIsImhhc2hUeXBlIiwic2lnblR5cGUiLCJjdXJ2ZUlkIiwia2V5RnJvbVByaXZhdGUiLCJ0b0RFUiIsImVjU2lnbiIsImRzYVNpZ24iLCJTaG9ydEN1cnZlIiwidGludiIsInplcm9BIiwidGhyZWVBIiwiZW5kbyIsIl9nZXRFbmRvbW9ycGhpc20iLCJfZW5kb1duYWZUMSIsIl9lbmRvV25hZlQyIiwiUG9pbnQiLCJpc1JlZCIsImluZiIsIkpQb2ludCIsInpPbmUiLCJiZXRhcyIsIl9nZXRFbmRvUm9vdHMiLCJsYW1iZGFzIiwidmVjIiwiX2dldEVuZG9CYXNpcyIsIm50aW52IiwicHJldlIiLCJhcHJ4U3FydCIsInkxIiwieTIiLCJsZW4xIiwiX2VuZG9TcGxpdCIsInYxIiwidjIiLCJwMSIsInAyIiwicTEiLCJxMiIsImF4IiwicmhzIiwiX2VuZG9XbmFmTXVsQWRkIiwibnBvaW50cyIsIm5jb2VmZnMiLCJmcm9tSlNPTiIsImVuZG9NdWwiLCJvYmoycG9pbnQiLCJueCIsIm55IiwieXMxIiwiZHlpbnYiLCJtdWxBZGQiLCJqbXVsQWRkIiwiX3ByZWNvbXB1dGUiLCJuZWdhdGUiLCJ6aW52IiwiemludjIiLCJheSIsInB6MiIsInoyIiwiaDIiLCJoMyIsIm56IiwiangiLCJqeSIsImp6Iiwiano0IiwianlkIiwiangyIiwianlkMiIsImp5ZDQiLCJkbnkiLCJfemVyb0RibCIsIl90aHJlZURibCIsIl9kYmwiLCJ4eCIsInl5IiwieXl5eSIsInl5eXk4IiwiYzgiLCJnYW1tYSIsImFscGhhIiwiYmV0YTQiLCJiZXRhOCIsImdnYW1tYTgiLCJqeTIiLCJqeGQ0IiwianlkOCIsInRycGwiLCJ6eiIsIm1tIiwiZWUiLCJ5eXU0Iiwia2Jhc2UiLCJ6MyIsInB6MyIsImVxWFRvUCIsInpzIiwieGMiLCJNb250Q3VydmUiLCJpNCIsImEyNCIsIm5vcm1hbGl6ZSIsImFhIiwiYmIiLCJkaWZmQWRkIiwiZGEiLCJqdW1sQWRkIiwiRWR3YXJkc0N1cnZlIiwidHdpc3RlZCIsIm1PbmVBIiwiZGQiLCJvbmVDIiwiX211bEEiLCJfbXVsQyIsImxocyIsInBvaW50RnJvbVkiLCJfZXh0RGJsIiwibnQiLCJfcHJvakRibCIsIl9leHRBZGQiLCJfcHJvakFkZCIsInppIiwic2hhMV9LIiwiU0hBMSIsIlNIQTIyNCIsIlNIQTM4NCIsIktoIiwiRSIsIkFoIiwiQmgiLCJEaCIsIkVoIiwicmgiLCJzaCIsImlubmVyIiwib3V0ZXIiLCJIbWFjRFJCRyIsIktleVBhaXIiLCJTaWduYXR1cmUiLCJuaCIsImtleVBhaXIiLCJmcm9tUHJpdmF0ZSIsImtleUZyb21QdWJsaWMiLCJmcm9tUHVibGljIiwiZ2VuS2V5UGFpciIsImRyYmciLCJwZXJzIiwicGVyc0VuYyIsImVudHJvcHkiLCJlbnRyb3B5RW5jIiwibm9uY2UiLCJuczIiLCJfdHJ1bmNhdGVUb04iLCJ0cnVuY09ubHkiLCJia2V5IiwiZ2V0UHJpdmF0ZSIsIm5zMSIsIml0ZXIiLCJrcCIsImtwWCIsInJlY292ZXJ5UGFyYW0iLCJjYW5vbmljYWwiLCJzaW52IiwiZ2V0UHVibGljIiwicmVjb3ZlclB1YktleSIsImlzWU9kZCIsImlzU2Vjb25kS2V5IiwickludiIsImdldEtleVJlY292ZXJ5UGFyYW0iLCJRIiwiUXByaW1lIiwicHJlZFJlc2lzdCIsIm1pbkVudHJvcHkiLCJfcmVzZWVkIiwicmVzZWVkSW50ZXJ2YWwiLCJWIiwibm9uY2VFbmMiLCJfaG1hYyIsImttYWMiLCJyZXNlZWQiLCJhZGRFbmMiLCJ0ZW1wIiwiX2ltcG9ydFByaXZhdGUiLCJwcml2RW5jIiwiX2ltcG9ydFB1YmxpYyIsInB1YkVuYyIsImRlcml2ZSIsIl9pbXBvcnRERVIiLCJQb3NpdGlvbiIsInBsYWNlIiwiZ2V0TGVuZ3RoIiwiaW5pdGlhbCIsIm9jdGV0TGVuIiwicm1QYWRkaW5nIiwiY29uc3RydWN0TGVuZ3RoIiwib2N0ZXRzIiwic2xlbiIsImJhY2tIYWxmIiwiRUREU0EiLCJwb2ludENsYXNzIiwiZW5jb2RpbmdMZW5ndGgiLCJrZXlGcm9tU2VjcmV0IiwiaGFzaEludCIsIlJlbmNvZGVkIiwiZW5jb2RlUG9pbnQiLCJzXyIsInB1YkJ5dGVzIiwiUyIsIm1ha2VTaWduYXR1cmUiLCJTRyIsImZyb21TZWNyZXQiLCJsYXN0SXgiLCJub3JtZWQiLCJ4SXNPZGQiLCJlbmNvZGVJbnQiLCJkZWNvZGVJbnQiLCJpc1BvaW50IiwiX3NlY3JldCIsIl9wdWJCeXRlcyIsInByaXZCeXRlcyIsImdldFNlY3JldCIsIl9SIiwiX1MiLCJfUmVuY29kZWQiLCJfU2VuY29kZWQiLCJTZW5jb2RlZCIsInRvQnl0ZXMiLCJzZXEiLCJpbnQiLCJ1c2UiLCJBbGdvcml0aG1JZGVudGlmaWVyIiwiYml0c3RyIiwibnVsbF8iLCJvcHRpb25hbCIsIlByaXZhdGVLZXlJbmZvIiwib2N0c3RyIiwiRW5jcnlwdGVkUHJpdmF0ZUtleUluZm8iLCJleHBsaWNpdCIsIkVDUGFyYW1ldGVycyIsImNob2ljZSIsIm5hbWVkQ3VydmUiLCJFbnRpdHkiLCJfY3JlYXRlTmFtZWQiLCJuYW1lZCIsInJ1bkluVGhpc0NvbnRleHQiLCJfaW5pdE5hbWVkIiwiT2JqZWN0X2tleXMiLCJkZWZpbmVQcm9wIiwiZ2xvYmFscyIsIkNvbnRleHQiLCJTY3JpcHQiLCJydW5JbkNvbnRleHQiLCJpZnJhbWUiLCJkaXNwbGF5Iiwid2luIiwiY29udGVudFdpbmRvdyIsIndFdmFsIiwiZXZhbCIsIndFeGVjU2NyaXB0IiwiZXhlY1NjcmlwdCIsIndpbktleXMiLCJydW5Jbk5ld0NvbnRleHQiLCJjcmVhdGVDb250ZXh0IiwiaXNDb250ZXh0IiwiY3JlYXRlU2NyaXB0IiwicGF0aCIsImVycm9ycyIsIlJlcG9ydGVyRXJyb3IiLCJyZXRocm93IiwicGF0aExlbiIsImVudGVyS2V5IiwiZXhpdEtleSIsImxlYXZlS2V5IiwiZW50ZXJPYmplY3QiLCJsZWF2ZU9iamVjdCIsImluaGVyaXRlZCIsImVsZW0iLCJzdGFjayIsInBhcnRpYWwiLCJ3cmFwUmVzdWx0IiwiY2FwdHVyZVN0YWNrVHJhY2UiLCJ0YWdzIiwicmV2ZXJzZUFyZ3MiLCJ1c2VEZWNvZGVyIiwiaW1wbGljaXQiLCJjb250YWlucyIsIl93cmFwIiwic3RhdGVQcm9wcyIsImNzdGF0ZSIsImZpbHRlciIsImNoaWxkIiwiX3VzZUFyZ3MiLCJkZWYiLCJuZXdLZXkiLCJwcmV2T2JqIiwicHJlc2VudCIsInByZXZLZXkiLCJfZGVjb2RlR2VuZXJpYyIsIl9kZWNvZGVDaG9pY2UiLCJ0cmFjayIsIl9nZXRVc2UiLCJzb21lIiwibm9kZSIsIl9lbmNvZGVDaG9pY2UiLCJfZW5jb2RlUHJpbWl0aXZlIiwiMCIsIjEiLCIyIiwiMyIsInBlbSIsIlBFTURlY29kZXIiLCJsaW5lcyIsImxhYmVsIiwiUEVNRW5jb2RlciIsImFzbiIsIlRpbWUiLCJ1dGNUaW1lIiwidXRjdGltZSIsImdlbmVyYWxUaW1lIiwiZ2VudGltZSIsIkF0dHJpYnV0ZVR5cGVWYWx1ZSIsIlN1YmplY3RQdWJsaWNLZXlJbmZvIiwiUmVsYXRpdmVEaXN0aW5ndWlzaGVkTmFtZSIsInNldG9mIiwiUkROU2VxdWVuY2UiLCJzZXFvZiIsIk5hbWUiLCJyZG5TZXF1ZW5jZSIsIlZhbGlkaXR5IiwiRXh0ZW5zaW9uIiwiYm9vbCIsIlRCU0NlcnRpZmljYXRlIiwiWDUwOUNlcnRpZmljYXRlIiwiZmluZFByb2MiLCJzdGFydFJlZ2V4IiwiZnVsbFJlZ2V4IiwiZXZwIiwib2tleSIsImRlY3J5cHRlZCIsImNpcGhlcktleSIsIm1hdGNoMiIsImNoZWNrVmFsdWUiLCJwdWJrZXkiLCJlY1ZlcmlmeSIsInVucGFja2VkIiwibW9udHAiLCJkc2FWZXJpZnkiLCJwYWROdW0iLCJFQ0RIIiwiYWxpYXNlcyIsInNlY3AyNTZrMSIsInNlY3AyMjRyMSIsInByaW1lMjU2djEiLCJwcmltZTE5MnYxIiwiZWQyNTUxOSIsInNlY3AzODRyMSIsInNlY3A1MjFyMSIsImN1cnZlVHlwZSIsInAyNTYiLCJzZWNwMjU2cjEiLCJzZWNwMTkycjEiLCJwMzg0IiwicDUyMSIsImluZW5jIiwibWdmIiwid2l0aFB1YmxpYyIsInB1YmxpY0tleSIsInJldmVyc2UiLCJpSGFzaCIsImhMZW4yIiwicHMiLCJkYmxlbiIsIm1hc2tlZERiIiwibWFza2VkU2VlZCIsIm9hZXAiLCJub25aZXJvIiwicGtjczEiLCJ6QnVmZmVyIiwiZGIiLCJkaWYiLCJzdGF0dXMiLCJvbGRCcm93c2VyIiwic2FmZUJ1ZmZlciIsInJhbmRvbWJ5dGVzIiwia0J1ZmZlck1heExlbmd0aCIsImtNYXhVaW50MzIiLCJhc3NlcnRPZmZzZXQiLCJhY3R1YWxGaWxsIiwib3VyQnVmIiwidWludCIsIm9iamVjdEFzc2lnbiIsImhhc093biIsInBTbGljZSIsImZ1bmN0aW9uc0hhdmVOYW1lcyIsInBUb1N0cmluZyIsImFycmJ1ZiIsIkRhdGFWaWV3Iiwib2siLCJyZWdleCIsImdldE5hbWUiLCJmdW5jIiwidHJ1bmNhdGUiLCJzb21ldGhpbmciLCJyYXduYW1lIiwiZXhwZWN0ZWQiLCJvcGVyYXRvciIsInN0YWNrU3RhcnRGdW5jdGlvbiIsIkFzc2VydGlvbkVycm9yIiwiX2RlZXBFcXVhbCIsInN0cmljdCIsIm1lbW9zIiwiZ2V0VGltZSIsIm11bHRpbGluZSIsImxhc3RJbmRleCIsImlnbm9yZUNhc2UiLCJGbG9hdDMyQXJyYXkiLCJGbG9hdDY0QXJyYXkiLCJhY3R1YWxJbmRleCIsImFjdHVhbFZpc2l0ZWRPYmplY3RzIiwiYUlzQXJncyIsImlzQXJndW1lbnRzIiwiYklzQXJncyIsImthIiwia2IiLCJzb3J0Iiwib2JqRXF1aXYiLCJleHBlY3RlZEV4Y2VwdGlvbiIsImlzUHJvdG90eXBlT2YiLCJfdGhyb3dzIiwic2hvdWxkVGhyb3ciLCJfdHJ5QmxvY2siLCJ1c2VyUHJvdmlkZWRNZXNzYWdlIiwiaXNVbmV4cGVjdGVkRXhjZXB0aW9uIiwiZ2VuZXJhdGVkTWVzc2FnZSIsImdldE1lc3NhZ2UiLCJmbl9uYW1lIiwibmV4dF9saW5lIiwic3Vic3RyaW5nIiwibm90RXF1YWwiLCJkZWVwRXF1YWwiLCJkZWVwU3RyaWN0RXF1YWwiLCJub3REZWVwRXF1YWwiLCJub3REZWVwU3RyaWN0RXF1YWwiLCJzdHJpY3RFcXVhbCIsIm5vdFN0cmljdEVxdWFsIiwidGhyb3dzIiwiZG9lc05vdFRocm93IiwiaWZFcnJvciIsInByb3BJc0VudW1lcmFibGUiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsInRvT2JqZWN0IiwiYXNzaWduIiwidGVzdDEiLCJ0ZXN0MiIsInRlc3QzIiwibGV0dGVyIiwic2hvdWxkVXNlTmF0aXZlIiwic3ltYm9scyIsInRvIiwiVXNlciIsIm5pY2tOYW1lIiwidXNlcklkIiwiQ2hhdCIsInVzZXIiLCJzb2NrZXQiLCJtZXNzYWdlcyIsInVzZXJuYW1lIiwiY3JlYXRlZCIsInVzZXJEYXRhIiwiaW5pdFVzZXIiLCJpbmNvbWVEYXRhIiwic2VuZE1lc3NhZ2UiLCJyb3V0ZXMiLCJyb3V0ZXIiLCJWdWVSb3V0ZXIiXSwibWFwcGluZ3MiOiJhQUNFLElBQUlBLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVDLFFBR25DLElBQUlDLEVBQVNKLEVBQWlCRSxHQUFZLENBQ3pDRyxFQUFHSCxFQUNISSxHQUFHLEVBQ0hILFFBQVMsSUFVVixPQU5BSSxFQUFRTCxHQUFVTSxLQUFLSixFQUFPRCxRQUFTQyxFQUFRQSxFQUFPRCxRQUFTRixHQUcvREcsRUFBT0UsR0FBSSxFQUdKRixFQUFPRCxRQUtmRixFQUFvQlEsRUFBSUYsRUFHeEJOLEVBQW9CUyxFQUFJVixFQUd4QkMsRUFBb0JVLEVBQUksU0FBU1IsRUFBU1MsRUFBTUMsR0FDM0NaLEVBQW9CYSxFQUFFWCxFQUFTUyxJQUNsQ0csT0FBT0MsZUFBZWIsRUFBU1MsRUFBTSxDQUFFSyxZQUFZLEVBQU1DLElBQUtMLEtBS2hFWixFQUFvQmtCLEVBQUksU0FBU2hCLEdBQ1gsb0JBQVhpQixRQUEwQkEsT0FBT0MsYUFDMUNOLE9BQU9DLGVBQWViLEVBQVNpQixPQUFPQyxZQUFhLENBQUVDLE1BQU8sV0FFN0RQLE9BQU9DLGVBQWViLEVBQVMsYUFBYyxDQUFFbUIsT0FBTyxLQVF2RHJCLEVBQW9Cc0IsRUFBSSxTQUFTRCxFQUFPRSxHQUV2QyxHQURVLEVBQVBBLElBQVVGLEVBQVFyQixFQUFvQnFCLElBQy9CLEVBQVBFLEVBQVUsT0FBT0YsRUFDcEIsR0FBVyxFQUFQRSxHQUE4QixpQkFBVkYsR0FBc0JBLEdBQVNBLEVBQU1HLFdBQVksT0FBT0gsRUFDaEYsSUFBSUksRUFBS1gsT0FBT1ksT0FBTyxNQUd2QixHQUZBMUIsRUFBb0JrQixFQUFFTyxHQUN0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R0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsR0FBSSxHQUFJLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQ25ELEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQ2xELEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEdBQ2xELEdBQUksR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLElBR2hEQyxFQUFLLENBQ1AsR0FBSSxHQUFJLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSSxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFDckQsRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxHQUFJLEVBQUcsR0FBSSxHQUFJLEVBQUcsR0FBSSxFQUFHLEdBQUksR0FDcEQsR0FBSSxHQUFJLEVBQUcsRUFBRyxHQUFJLEVBQUcsR0FBSSxHQUFJLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFDckQsR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FDcEQsRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsR0FBSSxHQUFJLEdBQUksR0FBSSxFQUFHLEVBQUcsR0FHbkRDLEVBQUssQ0FDUCxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUksR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJLEdBQUksR0FBSSxFQUNyRCxFQUFHLEdBQUksR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksR0FB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RyxFQUFHLEVBQ3BELEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBRWxELEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQ2pELEVBQUcsRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFJLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQ3BELEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQ2pELEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLEdBRXBELEVBQUcsR0FBSSxHQUFJLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEVBQ25ELEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsR0FBSSxHQUFJLEVBQUcsR0FBSSxHQUFJLEVBQ25ELEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUksR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQ3BELEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBRWpELEVBQUcsR0FBSSxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQ3BELEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUksR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQ2xELEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQ25ELEdBQUksRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBRWxELEdBQUksR0FBSSxFQUFHLEdBQUksR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQ25ELEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEVBQ25ELEVBQUcsRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEdBQ2xELEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLEdBRWxELEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQ25ELEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQ2xELEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSSxHQUFJLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQ3BELEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBRWpELEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQ25ELEdBQUks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R0FDbEQsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksR0FDbEQsR0FBSSxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsSUFHaEQxcEUsRUFBSSxDQUNOLEdBQUksR0FBSSxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUksR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQ3JELEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsR0FBSSxFQUFHLEdBQUksR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLEdBQ3BELEdBQUksR0FBSSxFQUFHLEVBQUcsR0FBSSxFQUFHLEdBQUksR0FBSSxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQ3JELEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQ3BELEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEdBQUksR0FBSSxHQUFJLEdBQUksRUFBRyxFQUFHLEdBR25EMnBFLEVBQUssQ0FDUCxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUksR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJLEdBQUksR0FBSSxFQUNyRCxFQUFHLEdBQUksR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksR0FBSSxHQUNwRCxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSSxHQUFJLEVBQUcsR0FBSSxHQUFJLEdBQUksRUFBRyxFQUNyRCxHQUFJLEVBQUcsRUFBRyxHQUFJLEdBQUksR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksRUFB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RixDQUNFLG1FQUNBLG1FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLGtFQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxrRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0EsbUVBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLGtFQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxzRUFJTjNTLElBQUssQ0FDSDNMLElBQUssRUFDTHNlLE9BQVEsQ0FDTixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxtRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0EsbUVBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0EsbUVBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0EsbUVBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLGtFQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0EsbUVBRUYsQ0FDRSxtRUFDQSxtRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG1FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxtRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0Usa0VBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0EsbUVBRUYsQ0FDRSxtRUFDQSxtRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxrRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0EsbUVBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG1FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxrRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLGlFQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLGtFQUNBLG9FQUVGLENBQ0UsbUVBQ0EsbUVBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxtRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxtRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0EsbUVBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxtRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNB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QUs4cEQsTUFBTWl5QixLQUFLRixRQUUxQjc3RSxLQUFLZzhFLE9BQU9wMUQsS0FBSyxlQUFnQjRKLEtBQUtELFVBQVU3VyxJQUNoRDFaLEtBQUs4cEQsTUFBTTFxQixRQUFVLE9DekRyQm85QyxFQUFTLENBQ2IsQ0FBRS9NLEtBQU0sSUFBSzFtQixVQUFXRixFQUFBLEVBQVUzc0QsS0FBTSxZQUN4QyxDQUFFdXpFLEtBQU0sUUFBUzFtQixVQUFXK3lCLEVBQU01L0UsS0FBTSxPQUFRNnVCLFFBQVEsSUFHcEQweEQsRUFBUyxJQUFJQyxVQUFVLENBQzNCRixXQUdGLElBQUkxekIsSUFBSSxDQUNOOS9CLEdBQUksT0FDSnl6RCxPQUFRQSIsImZpbGUiOiJhcHAuYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDE3MCk7XG4iLCJpZiAodHlwZW9mIE9iamVjdC5jcmVhdGUgPT09ICdmdW5jdGlvbicpIHtcbiAgLy8gaW1wbGVtZW50YXRpb24gZnJvbSBzdGFuZGFyZCBub2RlLmpzICd1dGlsJyBtb2R1bGVcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmhlcml0cyhjdG9yLCBzdXBlckN0b3IpIHtcbiAgICBpZiAoc3VwZXJDdG9yKSB7XG4gICAgICBjdG9yLnN1cGVyXyA9IHN1cGVyQ3RvclxuICAgICAgY3Rvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ3Rvci5wcm90b3R5cGUsIHtcbiAgICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgICB2YWx1ZTogY3RvcixcbiAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG4gIH07XG59IGVsc2Uge1xuICAvLyBvbGQgc2Nob29sIHNoaW0gZm9yIG9sZCBicm93c2Vyc1xuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIGlmIChzdXBlckN0b3IpIHtcbiAgICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yXG4gICAgICB2YXIgVGVtcEN0b3IgPSBmdW5jdGlvbiAoKSB7fVxuICAgICAgVGVtcEN0b3IucHJvdG90eXBlID0gc3VwZXJDdG9yLnByb3RvdHlwZVxuICAgICAgY3Rvci5wcm90b3R5cGUgPSBuZXcgVGVtcEN0b3IoKVxuICAgICAgY3Rvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBjdG9yXG4gICAgfVxuICB9XG59XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBub2RlL25vLWRlcHJlY2F0ZWQtYXBpICovXG52YXIgYnVmZmVyID0gcmVxdWlyZSgnYnVmZmVyJylcbnZhciBCdWZmZXIgPSBidWZmZXIuQnVmZmVyXG5cbi8vIGFsdGVybmF0aXZlIHRvIHVzaW5nIE9iamVjdC5rZXlzIGZvciBvbGQgYnJvd3NlcnNcbmZ1bmN0aW9uIGNvcHlQcm9wcyAoc3JjLCBkc3QpIHtcbiAgZm9yICh2YXIga2V5IGluIHNyYykge1xuICAgIGRzdFtrZXldID0gc3JjW2tleV1cbiAgfVxufVxuaWYgKEJ1ZmZlci5mcm9tICYmIEJ1ZmZlci5hbGxvYyAmJiBCdWZmZXIuYWxsb2NVbnNhZmUgJiYgQnVmZmVyLmFsbG9jVW5zYWZlU2xvdykge1xuICBtb2R1bGUuZXhwb3J0cyA9IGJ1ZmZlclxufSBlbHNlIHtcbiAgLy8gQ29weSBwcm9wZXJ0aWVzIGZyb20gcmVxdWlyZSgnYnVmZmVyJylcbiAgY29weVByb3BzKGJ1ZmZlciwgZXhwb3J0cylcbiAgZXhwb3J0cy5CdWZmZXIgPSBTYWZlQnVmZmVyXG59XG5cbmZ1bmN0aW9uIFNhZmVCdWZmZXIgKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBCdWZmZXIoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59XG5cbi8vIENvcHkgc3RhdGljIG1ldGhvZHMgZnJvbSBCdWZmZXJcbmNvcHlQcm9wcyhCdWZmZXIsIFNhZmVCdWZmZXIpXG5cblNhZmVCdWZmZXIuZnJvbSA9IGZ1bmN0aW9uIChhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAodHlwZW9mIGFyZyA9PT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IG5vdCBiZSBhIG51bWJlcicpXG4gIH1cbiAgcmV0dXJuIEJ1ZmZlcihhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuU2FmZUJ1ZmZlci5hbGxvYyA9IGZ1bmN0aW9uIChzaXplLCBmaWxsLCBlbmNvZGluZykge1xuICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIG51bWJlcicpXG4gIH1cbiAgdmFyIGJ1ZiA9IEJ1ZmZlcihzaXplKVxuICBpZiAoZmlsbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGJ1Zi5maWxsKGZpbGwsIGVuY29kaW5nKVxuICAgIH0gZWxzZSB7XG4gICAgICBidWYuZmlsbChmaWxsKVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBidWYuZmlsbCgwKVxuICB9XG4gIHJldHVybiBidWZcbn1cblxuU2FmZUJ1ZmZlci5hbGxvY1Vuc2FmZSA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfVxuICByZXR1cm4gQnVmZmVyKHNpemUpXG59XG5cblNhZmVCdWZmZXIuYWxsb2NVbnNhZmVTbG93ID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKVxuICB9XG4gIHJldHVybiBidWZmZXIuU2xvd0J1ZmZlcihzaXplKVxufVxuIiwiKGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vIFV0aWxzXG4gIGZ1bmN0aW9uIGFzc2VydCAodmFsLCBtc2cpIHtcbiAgICBpZiAoIXZhbCkgdGhyb3cgbmV3IEVycm9yKG1zZyB8fCAnQXNzZXJ0aW9uIGZhaWxlZCcpO1xuICB9XG5cbiAgLy8gQ291bGQgdXNlIGBpbmhlcml0c2AgbW9kdWxlLCBidXQgZG9uJ3Qgd2FudCB0byBtb3ZlIGZyb20gc2luZ2xlIGZpbGVcbiAgLy8gYXJjaGl0ZWN0dXJlIHlldC5cbiAgZnVuY3Rpb24gaW5oZXJpdHMgKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yO1xuICAgIHZhciBUZW1wQ3RvciA9IGZ1bmN0aW9uICgpIHt9O1xuICAgIFRlbXBDdG9yLnByb3RvdHlwZSA9IHN1cGVyQ3Rvci5wcm90b3R5cGU7XG4gICAgY3Rvci5wcm90b3R5cGUgPSBuZXcgVGVtcEN0b3IoKTtcbiAgICBjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGN0b3I7XG4gIH1cblxuICAvLyBCTlxuXG4gIGZ1bmN0aW9uIEJOIChudW1iZXIsIGJhc2UsIGVuZGlhbikge1xuICAgIGlmIChCTi5pc0JOKG51bWJlcikpIHtcbiAgICAgIHJldHVybiBudW1iZXI7XG4gICAgfVxuXG4gICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgdGhpcy53b3JkcyA9IG51bGw7XG4gICAgdGhpcy5sZW5ndGggPSAwO1xuXG4gICAgLy8gUmVkdWN0aW9uIGNvbnRleHRcbiAgICB0aGlzLnJlZCA9IG51bGw7XG5cbiAgICBpZiAobnVtYmVyICE9PSBudWxsKSB7XG4gICAgICBpZiAoYmFzZSA9PT0gJ2xlJyB8fCBiYXNlID09PSAnYmUnKSB7XG4gICAgICAgIGVuZGlhbiA9IGJhc2U7XG4gICAgICAgIGJhc2UgPSAxMDtcbiAgICAgIH1cblxuICAgICAgdGhpcy5faW5pdChudW1iZXIgfHwgMCwgYmFzZSB8fCAxMCwgZW5kaWFuIHx8ICdiZScpO1xuICAgIH1cbiAgfVxuICBpZiAodHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IEJOO1xuICB9IGVsc2Uge1xuICAgIGV4cG9ydHMuQk4gPSBCTjtcbiAgfVxuXG4gIEJOLkJOID0gQk47XG4gIEJOLndvcmRTaXplID0gMjY7XG5cbiAgdmFyIEJ1ZmZlcjtcbiAgdHJ5IHtcbiAgICBCdWZmZXIgPSByZXF1aXJlKCdidWZmZXInKS5CdWZmZXI7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgfVxuXG4gIEJOLmlzQk4gPSBmdW5jdGlvbiBpc0JOIChudW0pIHtcbiAgICBpZiAobnVtIGluc3RhbmNlb2YgQk4pIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBudW0gIT09IG51bGwgJiYgdHlwZW9mIG51bSA9PT0gJ29iamVjdCcgJiZcbiAgICAgIG51bS5jb25zdHJ1Y3Rvci53b3JkU2l6ZSA9PT0gQk4ud29yZFNpemUgJiYgQXJyYXkuaXNBcnJheShudW0ud29yZHMpO1xuICB9O1xuXG4gIEJOLm1heCA9IGZ1bmN0aW9uIG1heCAobGVmdCwgcmlnaHQpIHtcbiAgICBpZiAobGVmdC5jbXAocmlnaHQpID4gMCkgcmV0dXJuIGxlZnQ7XG4gICAgcmV0dXJuIHJpZ2h0O1xuICB9O1xuXG4gIEJOLm1pbiA9IGZ1bmN0aW9uIG1pbiAobGVmdCwgcmlnaHQpIHtcbiAgICBpZiAobGVmdC5jbXAocmlnaHQpIDwgMCkgcmV0dXJuIGxlZnQ7XG4gICAgcmV0dXJuIHJpZ2h0O1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5faW5pdCA9IGZ1bmN0aW9uIGluaXQgKG51bWJlciwgYmFzZSwgZW5kaWFuKSB7XG4gICAgaWYgKHR5cGVvZiBudW1iZXIgPT09ICdudW1iZXInKSB7XG4gICAgICByZXR1cm4gdGhpcy5faW5pdE51bWJlcihudW1iZXIsIGJhc2UsIGVuZGlhbik7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBudW1iZXIgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXR1cm4gdGhpcy5faW5pdEFycmF5KG51bWJlciwgYmFzZSwgZW5kaWFuKTtcbiAgICB9XG5cbiAgICBpZiAoYmFzZSA9PT0gJ2hleCcpIHtcbiAgICAgIGJhc2UgPSAxNjtcbiAgICB9XG4gICAgYXNzZXJ0KGJhc2UgPT09IChiYXNlIHwgMCkgJiYgYmFzZSA+PSAyICYmIGJhc2UgPD0gMzYpO1xuXG4gICAgbnVtYmVyID0gbnVtYmVyLnRvU3RyaW5nKCkucmVwbGFjZSgvXFxzKy9nLCAnJyk7XG4gICAgdmFyIHN0YXJ0ID0gMDtcbiAgICBpZiAobnVtYmVyWzBdID09PSAnLScpIHtcbiAgICAgIHN0YXJ0Kys7XG4gICAgfVxuXG4gICAgaWYgKGJhc2UgPT09IDE2KSB7XG4gICAgICB0aGlzLl9wYXJzZUhleChudW1iZXIsIHN0YXJ0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fcGFyc2VCYXNlKG51bWJlciwgYmFzZSwgc3RhcnQpO1xuICAgIH1cblxuICAgIGlmIChudW1iZXJbMF0gPT09ICctJykge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG4gICAgfVxuXG4gICAgdGhpcy5zdHJpcCgpO1xuXG4gICAgaWYgKGVuZGlhbiAhPT0gJ2xlJykgcmV0dXJuO1xuXG4gICAgdGhpcy5faW5pdEFycmF5KHRoaXMudG9BcnJheSgpLCBiYXNlLCBlbmRpYW4pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5faW5pdE51bWJlciA9IGZ1bmN0aW9uIF9pbml0TnVtYmVyIChudW1iZXIsIGJhc2UsIGVuZGlhbikge1xuICAgIGlmIChudW1iZXIgPCAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICAgIG51bWJlciA9IC1udW1iZXI7XG4gICAgfVxuICAgIGlmIChudW1iZXIgPCAweDQwMDAwMDApIHtcbiAgICAgIHRoaXMud29yZHMgPSBbIG51bWJlciAmIDB4M2ZmZmZmZiBdO1xuICAgICAgdGhpcy5sZW5ndGggPSAxO1xuICAgIH0gZWxzZSBpZiAobnVtYmVyIDwgMHgxMDAwMDAwMDAwMDAwMCkge1xuICAgICAgdGhpcy53b3JkcyA9IFtcbiAgICAgICAgbnVtYmVyICYgMHgzZmZmZmZmLFxuICAgICAgICAobnVtYmVyIC8gMHg0MDAwMDAwKSAmIDB4M2ZmZmZmZlxuICAgICAgXTtcbiAgICAgIHRoaXMubGVuZ3RoID0gMjtcbiAgICB9IGVsc2Uge1xuICAgICAgYXNzZXJ0KG51bWJlciA8IDB4MjAwMDAwMDAwMDAwMDApOyAvLyAyIF4gNTMgKHVuc2FmZSlcbiAgICAgIHRoaXMud29yZHMgPSBbXG4gICAgICAgIG51bWJlciAmIDB4M2ZmZmZmZixcbiAgICAgICAgKG51bWJlciAvIDB4NDAwMDAwMCkgJiAweDNmZmZmZmYsXG4gICAgICAgIDFcbiAgICAgIF07XG4gICAgICB0aGlzLmxlbmd0aCA9IDM7XG4gICAgfVxuXG4gICAgaWYgKGVuZGlhbiAhPT0gJ2xlJykgcmV0dXJuO1xuXG4gICAgLy8gUmV2ZXJzZSB0aGUgYnl0ZXNcbiAgICB0aGlzLl9pbml0QXJyYXkodGhpcy50b0FycmF5KCksIGJhc2UsIGVuZGlhbik7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9pbml0QXJyYXkgPSBmdW5jdGlvbiBfaW5pdEFycmF5IChudW1iZXIsIGJhc2UsIGVuZGlhbikge1xuICAgIC8vIFBlcmhhcHMgYSBVaW50OEFycmF5XG4gICAgYXNzZXJ0KHR5cGVvZiBudW1iZXIubGVuZ3RoID09PSAnbnVtYmVyJyk7XG4gICAgaWYgKG51bWJlci5sZW5ndGggPD0gMCkge1xuICAgICAgdGhpcy53b3JkcyA9IFsgMCBdO1xuICAgICAgdGhpcy5sZW5ndGggPSAxO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdGhpcy5sZW5ndGggPSBNYXRoLmNlaWwobnVtYmVyLmxlbmd0aCAvIDMpO1xuICAgIHRoaXMud29yZHMgPSBuZXcgQXJyYXkodGhpcy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IDA7XG4gICAgfVxuXG4gICAgdmFyIGosIHc7XG4gICAgdmFyIG9mZiA9IDA7XG4gICAgaWYgKGVuZGlhbiA9PT0gJ2JlJykge1xuICAgICAgZm9yIChpID0gbnVtYmVyLmxlbmd0aCAtIDEsIGogPSAwOyBpID49IDA7IGkgLT0gMykge1xuICAgICAgICB3ID0gbnVtYmVyW2ldIHwgKG51bWJlcltpIC0gMV0gPDwgOCkgfCAobnVtYmVyW2kgLSAyXSA8PCAxNik7XG4gICAgICAgIHRoaXMud29yZHNbal0gfD0gKHcgPDwgb2ZmKSAmIDB4M2ZmZmZmZjtcbiAgICAgICAgdGhpcy53b3Jkc1tqICsgMV0gPSAodyA+Pj4gKDI2IC0gb2ZmKSkgJiAweDNmZmZmZmY7XG4gICAgICAgIG9mZiArPSAyNDtcbiAgICAgICAgaWYgKG9mZiA+PSAyNikge1xuICAgICAgICAgIG9mZiAtPSAyNjtcbiAgICAgICAgICBqKys7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGVuZGlhbiA9PT0gJ2xlJykge1xuICAgICAgZm9yIChpID0gMCwgaiA9IDA7IGkgPCBudW1iZXIubGVuZ3RoOyBpICs9IDMpIHtcbiAgICAgICAgdyA9IG51bWJlcltpXSB8IChudW1iZXJbaSArIDFdIDw8IDgpIHwgKG51bWJlcltpICsgMl0gPDwgMTYpO1xuICAgICAgICB0aGlzLndvcmRzW2pdIHw9ICh3IDw8IG9mZikgJiAweDNmZmZmZmY7XG4gICAgICAgIHRoaXMud29yZHNbaiArIDFdID0gKHcgPj4+ICgyNiAtIG9mZikpICYgMHgzZmZmZmZmO1xuICAgICAgICBvZmYgKz0gMjQ7XG4gICAgICAgIGlmIChvZmYgPj0gMjYpIHtcbiAgICAgICAgICBvZmYgLT0gMjY7XG4gICAgICAgICAgaisrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgZnVuY3Rpb24gcGFyc2VIZXggKHN0ciwgc3RhcnQsIGVuZCkge1xuICAgIHZhciByID0gMDtcbiAgICB2YXIgbGVuID0gTWF0aC5taW4oc3RyLmxlbmd0aCwgZW5kKTtcbiAgICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBsZW47IGkrKykge1xuICAgICAgdmFyIGMgPSBzdHIuY2hhckNvZGVBdChpKSAtIDQ4O1xuXG4gICAgICByIDw8PSA0O1xuXG4gICAgICAvLyAnYScgLSAnZidcbiAgICAgIGlmIChjID49IDQ5ICYmIGMgPD0gNTQpIHtcbiAgICAgICAgciB8PSBjIC0gNDkgKyAweGE7XG5cbiAgICAgIC8vICdBJyAtICdGJ1xuICAgICAgfSBlbHNlIGlmIChjID49IDE3ICYmIGMgPD0gMjIpIHtcbiAgICAgICAgciB8PSBjIC0gMTcgKyAweGE7XG5cbiAgICAgIC8vICcwJyAtICc5J1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgciB8PSBjICYgMHhmO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcjtcbiAgfVxuXG4gIEJOLnByb3RvdHlwZS5fcGFyc2VIZXggPSBmdW5jdGlvbiBfcGFyc2VIZXggKG51bWJlciwgc3RhcnQpIHtcbiAgICAvLyBDcmVhdGUgcG9zc2libHkgYmlnZ2VyIGFycmF5IHRvIGVuc3VyZSB0aGF0IGl0IGZpdHMgdGhlIG51bWJlclxuICAgIHRoaXMubGVuZ3RoID0gTWF0aC5jZWlsKChudW1iZXIubGVuZ3RoIC0gc3RhcnQpIC8gNik7XG4gICAgdGhpcy53b3JkcyA9IG5ldyBBcnJheSh0aGlzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gMDtcbiAgICB9XG5cbiAgICB2YXIgaiwgdztcbiAgICAvLyBTY2FuIDI0LWJpdCBjaHVua3MgYW5kIGFkZCB0aGVtIHRvIHRoZSBudW1iZXJcbiAgICB2YXIgb2ZmID0gMDtcbiAgICBmb3IgKGkgPSBudW1iZXIubGVuZ3RoIC0gNiwgaiA9IDA7IGkgPj0gc3RhcnQ7IGkgLT0gNikge1xuICAgICAgdyA9IHBhcnNlSGV4KG51bWJlciwgaSwgaSArIDYpO1xuICAgICAgdGhpcy53b3Jkc1tqXSB8PSAodyA8PCBvZmYpICYgMHgzZmZmZmZmO1xuICAgICAgLy8gTk9URTogYDB4M2ZmZmZmYCBpcyBpbnRlbnRpb25hbCBoZXJlLCAyNmJpdHMgbWF4IHNoaWZ0ICsgMjRiaXQgaGV4IGxpbWJcbiAgICAgIHRoaXMud29yZHNbaiArIDFdIHw9IHcgPj4+ICgyNiAtIG9mZikgJiAweDNmZmZmZjtcbiAgICAgIG9mZiArPSAyNDtcbiAgICAgIGlmIChvZmYgPj0gMjYpIHtcbiAgICAgICAgb2ZmIC09IDI2O1xuICAgICAgICBqKys7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChpICsgNiAhPT0gc3RhcnQpIHtcbiAgICAgIHcgPSBwYXJzZUhleChudW1iZXIsIHN0YXJ0LCBpICsgNik7XG4gICAgICB0aGlzLndvcmRzW2pdIHw9ICh3IDw8IG9mZikgJiAweDNmZmZmZmY7XG4gICAgICB0aGlzLndvcmRzW2ogKyAxXSB8PSB3ID4+PiAoMjYgLSBvZmYpICYgMHgzZmZmZmY7XG4gICAgfVxuICAgIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBmdW5jdGlvbiBwYXJzZUJhc2UgKHN0ciwgc3RhcnQsIGVuZCwgbXVsKSB7XG4gICAgdmFyIHIgPSAwO1xuICAgIHZhciBsZW4gPSBNYXRoLm1pbihzdHIubGVuZ3RoLCBlbmQpO1xuICAgIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICB2YXIgYyA9IHN0ci5jaGFyQ29kZUF0KGkpIC0gNDg7XG5cbiAgICAgIHIgKj0gbXVsO1xuXG4gICAgICAvLyAnYSdcbiAgICAgIGlmIChjID49IDQ5KSB7XG4gICAgICAgIHIgKz0gYyAtIDQ5ICsgMHhhO1xuXG4gICAgICAvLyAnQSdcbiAgICAgIH0gZWxzZSBpZiAoYyA+PSAxNykge1xuICAgICAgICByICs9IGMgLSAxNyArIDB4YTtcblxuICAgICAgLy8gJzAnIC0gJzknXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByICs9IGM7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByO1xuICB9XG5cbiAgQk4ucHJvdG90eXBlLl9wYXJzZUJhc2UgPSBmdW5jdGlvbiBfcGFyc2VCYXNlIChudW1iZXIsIGJhc2UsIHN0YXJ0KSB7XG4gICAgLy8gSW5pdGlhbGl6ZSBhcyB6ZXJvXG4gICAgdGhpcy53b3JkcyA9IFsgMCBdO1xuICAgIHRoaXMubGVuZ3RoID0gMTtcblxuICAgIC8vIEZpbmQgbGVuZ3RoIG9mIGxpbWIgaW4gYmFzZVxuICAgIGZvciAodmFyIGxpbWJMZW4gPSAwLCBsaW1iUG93ID0gMTsgbGltYlBvdyA8PSAweDNmZmZmZmY7IGxpbWJQb3cgKj0gYmFzZSkge1xuICAgICAgbGltYkxlbisrO1xuICAgIH1cbiAgICBsaW1iTGVuLS07XG4gICAgbGltYlBvdyA9IChsaW1iUG93IC8gYmFzZSkgfCAwO1xuXG4gICAgdmFyIHRvdGFsID0gbnVtYmVyLmxlbmd0aCAtIHN0YXJ0O1xuICAgIHZhciBtb2QgPSB0b3RhbCAlIGxpbWJMZW47XG4gICAgdmFyIGVuZCA9IE1hdGgubWluKHRvdGFsLCB0b3RhbCAtIG1vZCkgKyBzdGFydDtcblxuICAgIHZhciB3b3JkID0gMDtcbiAgICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkgKz0gbGltYkxlbikge1xuICAgICAgd29yZCA9IHBhcnNlQmFzZShudW1iZXIsIGksIGkgKyBsaW1iTGVuLCBiYXNlKTtcblxuICAgICAgdGhpcy5pbXVsbihsaW1iUG93KTtcbiAgICAgIGlmICh0aGlzLndvcmRzWzBdICsgd29yZCA8IDB4NDAwMDAwMCkge1xuICAgICAgICB0aGlzLndvcmRzWzBdICs9IHdvcmQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9pYWRkbih3b3JkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAobW9kICE9PSAwKSB7XG4gICAgICB2YXIgcG93ID0gMTtcbiAgICAgIHdvcmQgPSBwYXJzZUJhc2UobnVtYmVyLCBpLCBudW1iZXIubGVuZ3RoLCBiYXNlKTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IG1vZDsgaSsrKSB7XG4gICAgICAgIHBvdyAqPSBiYXNlO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmltdWxuKHBvdyk7XG4gICAgICBpZiAodGhpcy53b3Jkc1swXSArIHdvcmQgPCAweDQwMDAwMDApIHtcbiAgICAgICAgdGhpcy53b3Jkc1swXSArPSB3b3JkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5faWFkZG4od29yZCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gY29weSAoZGVzdCkge1xuICAgIGRlc3Qud29yZHMgPSBuZXcgQXJyYXkodGhpcy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgZGVzdC53b3Jkc1tpXSA9IHRoaXMud29yZHNbaV07XG4gICAgfVxuICAgIGRlc3QubGVuZ3RoID0gdGhpcy5sZW5ndGg7XG4gICAgZGVzdC5uZWdhdGl2ZSA9IHRoaXMubmVnYXRpdmU7XG4gICAgZGVzdC5yZWQgPSB0aGlzLnJlZDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiBjbG9uZSAoKSB7XG4gICAgdmFyIHIgPSBuZXcgQk4obnVsbCk7XG4gICAgdGhpcy5jb3B5KHIpO1xuICAgIHJldHVybiByO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5fZXhwYW5kID0gZnVuY3Rpb24gX2V4cGFuZCAoc2l6ZSkge1xuICAgIHdoaWxlICh0aGlzLmxlbmd0aCA8IHNpemUpIHtcbiAgICAgIHRoaXMud29yZHNbdGhpcy5sZW5ndGgrK10gPSAwO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvLyBSZW1vdmUgbGVhZGluZyBgMGAgZnJvbSBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLnN0cmlwID0gZnVuY3Rpb24gc3RyaXAgKCkge1xuICAgIHdoaWxlICh0aGlzLmxlbmd0aCA+IDEgJiYgdGhpcy53b3Jkc1t0aGlzLmxlbmd0aCAtIDFdID09PSAwKSB7XG4gICAgICB0aGlzLmxlbmd0aC0tO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fbm9ybVNpZ24oKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX25vcm1TaWduID0gZnVuY3Rpb24gX25vcm1TaWduICgpIHtcbiAgICAvLyAtMCA9IDBcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDEgJiYgdGhpcy53b3Jkc1swXSA9PT0gMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gaW5zcGVjdCAoKSB7XG4gICAgcmV0dXJuICh0aGlzLnJlZCA/ICc8Qk4tUjogJyA6ICc8Qk46ICcpICsgdGhpcy50b1N0cmluZygxNikgKyAnPic7XG4gIH07XG5cbiAgLypcblxuICB2YXIgemVyb3MgPSBbXTtcbiAgdmFyIGdyb3VwU2l6ZXMgPSBbXTtcbiAgdmFyIGdyb3VwQmFzZXMgPSBbXTtcblxuICB2YXIgcyA9ICcnO1xuICB2YXIgaSA9IC0xO1xuICB3aGlsZSAoKytpIDwgQk4ud29yZFNpemUpIHtcbiAgICB6ZXJvc1tpXSA9IHM7XG4gICAgcyArPSAnMCc7XG4gIH1cbiAgZ3JvdXBTaXplc1swXSA9IDA7XG4gIGdyb3VwU2l6ZXNbMV0gPSAwO1xuICBncm91cEJhc2VzWzBdID0gMDtcbiAgZ3JvdXBCYXNlc1sxXSA9IDA7XG4gIHZhciBiYXNlID0gMiAtIDE7XG4gIHdoaWxlICgrK2Jhc2UgPCAzNiArIDEpIHtcbiAgICB2YXIgZ3JvdXBTaXplID0gMDtcbiAgICB2YXIgZ3JvdXBCYXNlID0gMTtcbiAgICB3aGlsZSAoZ3JvdXBCYXNlIDwgKDEgPDwgQk4ud29yZFNpemUpIC8gYmFzZSkge1xuICAgICAgZ3JvdXBCYXNlICo9IGJhc2U7XG4gICAgICBncm91cFNpemUgKz0gMTtcbiAgICB9XG4gICAgZ3JvdXBTaXplc1tiYXNlXSA9IGdyb3VwU2l6ZTtcbiAgICBncm91cEJhc2VzW2Jhc2VdID0gZ3JvdXBCYXNlO1xuICB9XG5cbiAgKi9cblxuICB2YXIgemVyb3MgPSBbXG4gICAgJycsXG4gICAgJzAnLFxuICAgICcwMCcsXG4gICAgJzAwMCcsXG4gICAgJzAwMDAnLFxuICAgICcwMDAwMCcsXG4gICAgJzAwMDAwMCcsXG4gICAgJzAwMDAwMDAnLFxuICAgICcwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnXG4gIF07XG5cbiAgdmFyIGdyb3VwU2l6ZXMgPSBbXG4gICAgMCwgMCxcbiAgICAyNSwgMTYsIDEyLCAxMSwgMTAsIDksIDgsXG4gICAgOCwgNywgNywgNywgNywgNiwgNixcbiAgICA2LCA2LCA2LCA2LCA2LCA1LCA1LFxuICAgIDUsIDUsIDUsIDUsIDUsIDUsIDUsXG4gICAgNSwgNSwgNSwgNSwgNSwgNSwgNVxuICBdO1xuXG4gIHZhciBncm91cEJhc2VzID0gW1xuICAgIDAsIDAsXG4gICAgMzM1NTQ0MzIsIDQzMDQ2NzIxLCAxNjc3NzIxNiwgNDg4MjgxMjUsIDYwNDY2MTc2LCA0MDM1MzYwNywgMTY3NzcyMTYsXG4gICAgNDMwNDY3MjEsIDEwMDAwMDAwLCAxOTQ4NzE3MSwgMzU4MzE4MDgsIDYyNzQ4NTE3LCA3NTI5NTM2LCAxMTM5MDYyNSxcbiAgICAxNjc3NzIxNiwgMjQxMzc1NjksIDM0MDEyMjI0LCA0NzA0NTg4MSwgNjQwMDAwMDAsIDQwODQxMDEsIDUxNTM2MzIsXG4gICAgNjQzNjM0MywgNzk2MjYyNCwgOTc2NTYyNSwgMTE4ODEzNzYsIDE0MzQ4OTA3LCAxNzIxMDM2OCwgMjA1MTExNDksXG4gICAgMjQzMDAwMDAsIDI4NjI5MTUxLCAzMzU1NDQzMiwgMzkxMzUzOTMsIDQ1NDM1NDI0LCA1MjUyMTg3NSwgNjA0NjYxNzZcbiAgXTtcblxuICBCTi5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyAoYmFzZSwgcGFkZGluZykge1xuICAgIGJhc2UgPSBiYXNlIHx8IDEwO1xuICAgIHBhZGRpbmcgPSBwYWRkaW5nIHwgMCB8fCAxO1xuXG4gICAgdmFyIG91dDtcbiAgICBpZiAoYmFzZSA9PT0gMTYgfHwgYmFzZSA9PT0gJ2hleCcpIHtcbiAgICAgIG91dCA9ICcnO1xuICAgICAgdmFyIG9mZiA9IDA7XG4gICAgICB2YXIgY2FycnkgPSAwO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciB3ID0gdGhpcy53b3Jkc1tpXTtcbiAgICAgICAgdmFyIHdvcmQgPSAoKCh3IDw8IG9mZikgfCBjYXJyeSkgJiAweGZmZmZmZikudG9TdHJpbmcoMTYpO1xuICAgICAgICBjYXJyeSA9ICh3ID4+PiAoMjQgLSBvZmYpKSAmIDB4ZmZmZmZmO1xuICAgICAgICBpZiAoY2FycnkgIT09IDAgfHwgaSAhPT0gdGhpcy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgb3V0ID0gemVyb3NbNiAtIHdvcmQubGVuZ3RoXSArIHdvcmQgKyBvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb3V0ID0gd29yZCArIG91dDtcbiAgICAgICAgfVxuICAgICAgICBvZmYgKz0gMjtcbiAgICAgICAgaWYgKG9mZiA+PSAyNikge1xuICAgICAgICAgIG9mZiAtPSAyNjtcbiAgICAgICAgICBpLS07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChjYXJyeSAhPT0gMCkge1xuICAgICAgICBvdXQgPSBjYXJyeS50b1N0cmluZygxNikgKyBvdXQ7XG4gICAgICB9XG4gICAgICB3aGlsZSAob3V0Lmxlbmd0aCAlIHBhZGRpbmcgIT09IDApIHtcbiAgICAgICAgb3V0ID0gJzAnICsgb3V0O1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgICAgb3V0ID0gJy0nICsgb3V0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG5cbiAgICBpZiAoYmFzZSA9PT0gKGJhc2UgfCAwKSAmJiBiYXNlID49IDIgJiYgYmFzZSA8PSAzNikge1xuICAgICAgLy8gdmFyIGdyb3VwU2l6ZSA9IE1hdGguZmxvb3IoQk4ud29yZFNpemUgKiBNYXRoLkxOMiAvIE1hdGgubG9nKGJhc2UpKTtcbiAgICAgIHZhciBncm91cFNpemUgPSBncm91cFNpemVzW2Jhc2VdO1xuICAgICAgLy8gdmFyIGdyb3VwQmFzZSA9IE1hdGgucG93KGJhc2UsIGdyb3VwU2l6ZSk7XG4gICAgICB2YXIgZ3JvdXBCYXNlID0gZ3JvdXBCYXNlc1tiYXNlXTtcbiAgICAgIG91dCA9ICcnO1xuICAgICAgdmFyIGMgPSB0aGlzLmNsb25lKCk7XG4gICAgICBjLm5lZ2F0aXZlID0gMDtcbiAgICAgIHdoaWxlICghYy5pc1plcm8oKSkge1xuICAgICAgICB2YXIgciA9IGMubW9kbihncm91cEJhc2UpLnRvU3RyaW5nKGJhc2UpO1xuICAgICAgICBjID0gYy5pZGl2bihncm91cEJhc2UpO1xuXG4gICAgICAgIGlmICghYy5pc1plcm8oKSkge1xuICAgICAgICAgIG91dCA9IHplcm9zW2dyb3VwU2l6ZSAtIHIubGVuZ3RoXSArIHIgKyBvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb3V0ID0gciArIG91dDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHRoaXMuaXNaZXJvKCkpIHtcbiAgICAgICAgb3V0ID0gJzAnICsgb3V0O1xuICAgICAgfVxuICAgICAgd2hpbGUgKG91dC5sZW5ndGggJSBwYWRkaW5nICE9PSAwKSB7XG4gICAgICAgIG91dCA9ICcwJyArIG91dDtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICAgIG91dCA9ICctJyArIG91dDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuXG4gICAgYXNzZXJ0KGZhbHNlLCAnQmFzZSBzaG91bGQgYmUgYmV0d2VlbiAyIGFuZCAzNicpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b051bWJlciA9IGZ1bmN0aW9uIHRvTnVtYmVyICgpIHtcbiAgICB2YXIgcmV0ID0gdGhpcy53b3Jkc1swXTtcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDIpIHtcbiAgICAgIHJldCArPSB0aGlzLndvcmRzWzFdICogMHg0MDAwMDAwO1xuICAgIH0gZWxzZSBpZiAodGhpcy5sZW5ndGggPT09IDMgJiYgdGhpcy53b3Jkc1syXSA9PT0gMHgwMSkge1xuICAgICAgLy8gTk9URTogYXQgdGhpcyBzdGFnZSBpdCBpcyBrbm93biB0aGF0IHRoZSB0b3AgYml0IGlzIHNldFxuICAgICAgcmV0ICs9IDB4MTAwMDAwMDAwMDAwMDAgKyAodGhpcy53b3Jkc1sxXSAqIDB4NDAwMDAwMCk7XG4gICAgfSBlbHNlIGlmICh0aGlzLmxlbmd0aCA+IDIpIHtcbiAgICAgIGFzc2VydChmYWxzZSwgJ051bWJlciBjYW4gb25seSBzYWZlbHkgc3RvcmUgdXAgdG8gNTMgYml0cycpO1xuICAgIH1cbiAgICByZXR1cm4gKHRoaXMubmVnYXRpdmUgIT09IDApID8gLXJldCA6IHJldDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OICgpIHtcbiAgICByZXR1cm4gdGhpcy50b1N0cmluZygxNik7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnRvQnVmZmVyID0gZnVuY3Rpb24gdG9CdWZmZXIgKGVuZGlhbiwgbGVuZ3RoKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBCdWZmZXIgIT09ICd1bmRlZmluZWQnKTtcbiAgICByZXR1cm4gdGhpcy50b0FycmF5TGlrZShCdWZmZXIsIGVuZGlhbiwgbGVuZ3RoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudG9BcnJheSA9IGZ1bmN0aW9uIHRvQXJyYXkgKGVuZGlhbiwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIHRoaXMudG9BcnJheUxpa2UoQXJyYXksIGVuZGlhbiwgbGVuZ3RoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudG9BcnJheUxpa2UgPSBmdW5jdGlvbiB0b0FycmF5TGlrZSAoQXJyYXlUeXBlLCBlbmRpYW4sIGxlbmd0aCkge1xuICAgIHZhciBieXRlTGVuZ3RoID0gdGhpcy5ieXRlTGVuZ3RoKCk7XG4gICAgdmFyIHJlcUxlbmd0aCA9IGxlbmd0aCB8fCBNYXRoLm1heCgxLCBieXRlTGVuZ3RoKTtcbiAgICBhc3NlcnQoYnl0ZUxlbmd0aCA8PSByZXFMZW5ndGgsICdieXRlIGFycmF5IGxvbmdlciB0aGFuIGRlc2lyZWQgbGVuZ3RoJyk7XG4gICAgYXNzZXJ0KHJlcUxlbmd0aCA+IDAsICdSZXF1ZXN0ZWQgYXJyYXkgbGVuZ3RoIDw9IDAnKTtcblxuICAgIHRoaXMuc3RyaXAoKTtcbiAgICB2YXIgbGl0dGxlRW5kaWFuID0gZW5kaWFuID09PSAnbGUnO1xuICAgIHZhciByZXMgPSBuZXcgQXJyYXlUeXBlKHJlcUxlbmd0aCk7XG5cbiAgICB2YXIgYiwgaTtcbiAgICB2YXIgcSA9IHRoaXMuY2xvbmUoKTtcbiAgICBpZiAoIWxpdHRsZUVuZGlhbikge1xuICAgICAgLy8gQXNzdW1lIGJpZy1lbmRpYW5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCByZXFMZW5ndGggLSBieXRlTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmVzW2ldID0gMDtcbiAgICAgIH1cblxuICAgICAgZm9yIChpID0gMDsgIXEuaXNaZXJvKCk7IGkrKykge1xuICAgICAgICBiID0gcS5hbmRsbigweGZmKTtcbiAgICAgICAgcS5pdXNocm4oOCk7XG5cbiAgICAgICAgcmVzW3JlcUxlbmd0aCAtIGkgLSAxXSA9IGI7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAoaSA9IDA7ICFxLmlzWmVybygpOyBpKyspIHtcbiAgICAgICAgYiA9IHEuYW5kbG4oMHhmZik7XG4gICAgICAgIHEuaXVzaHJuKDgpO1xuXG4gICAgICAgIHJlc1tpXSA9IGI7XG4gICAgICB9XG5cbiAgICAgIGZvciAoOyBpIDwgcmVxTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmVzW2ldID0gMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIGlmIChNYXRoLmNsejMyKSB7XG4gICAgQk4ucHJvdG90eXBlLl9jb3VudEJpdHMgPSBmdW5jdGlvbiBfY291bnRCaXRzICh3KSB7XG4gICAgICByZXR1cm4gMzIgLSBNYXRoLmNsejMyKHcpO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgQk4ucHJvdG90eXBlLl9jb3VudEJpdHMgPSBmdW5jdGlvbiBfY291bnRCaXRzICh3KSB7XG4gICAgICB2YXIgdCA9IHc7XG4gICAgICB2YXIgciA9IDA7XG4gICAgICBpZiAodCA+PSAweDEwMDApIHtcbiAgICAgICAgciArPSAxMztcbiAgICAgICAgdCA+Pj49IDEzO1xuICAgICAgfVxuICAgICAgaWYgKHQgPj0gMHg0MCkge1xuICAgICAgICByICs9IDc7XG4gICAgICAgIHQgPj4+PSA3O1xuICAgICAgfVxuICAgICAgaWYgKHQgPj0gMHg4KSB7XG4gICAgICAgIHIgKz0gNDtcbiAgICAgICAgdCA+Pj49IDQ7XG4gICAgICB9XG4gICAgICBpZiAodCA+PSAweDAyKSB7XG4gICAgICAgIHIgKz0gMjtcbiAgICAgICAgdCA+Pj49IDI7XG4gICAgICB9XG4gICAgICByZXR1cm4gciArIHQ7XG4gICAgfTtcbiAgfVxuXG4gIEJOLnByb3RvdHlwZS5femVyb0JpdHMgPSBmdW5jdGlvbiBfemVyb0JpdHMgKHcpIHtcbiAgICAvLyBTaG9ydC1jdXRcbiAgICBpZiAodyA9PT0gMCkgcmV0dXJuIDI2O1xuXG4gICAgdmFyIHQgPSB3O1xuICAgIHZhciByID0gMDtcbiAgICBpZiAoKHQgJiAweDFmZmYpID09PSAwKSB7XG4gICAgICByICs9IDEzO1xuICAgICAgdCA+Pj49IDEzO1xuICAgIH1cbiAgICBpZiAoKHQgJiAweDdmKSA9PT0gMCkge1xuICAgICAgciArPSA3O1xuICAgICAgdCA+Pj49IDc7XG4gICAgfVxuICAgIGlmICgodCAmIDB4ZikgPT09IDApIHtcbiAgICAgIHIgKz0gNDtcbiAgICAgIHQgPj4+PSA0O1xuICAgIH1cbiAgICBpZiAoKHQgJiAweDMpID09PSAwKSB7XG4gICAgICByICs9IDI7XG4gICAgICB0ID4+Pj0gMjtcbiAgICB9XG4gICAgaWYgKCh0ICYgMHgxKSA9PT0gMCkge1xuICAgICAgcisrO1xuICAgIH1cbiAgICByZXR1cm4gcjtcbiAgfTtcblxuICAvLyBSZXR1cm4gbnVtYmVyIG9mIHVzZWQgYml0cyBpbiBhIEJOXG4gIEJOLnByb3RvdHlwZS5iaXRMZW5ndGggPSBmdW5jdGlvbiBiaXRMZW5ndGggKCkge1xuICAgIHZhciB3ID0gdGhpcy53b3Jkc1t0aGlzLmxlbmd0aCAtIDFdO1xuICAgIHZhciBoaSA9IHRoaXMuX2NvdW50Qml0cyh3KTtcbiAgICByZXR1cm4gKHRoaXMubGVuZ3RoIC0gMSkgKiAyNiArIGhpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHRvQml0QXJyYXkgKG51bSkge1xuICAgIHZhciB3ID0gbmV3IEFycmF5KG51bS5iaXRMZW5ndGgoKSk7XG5cbiAgICBmb3IgKHZhciBiaXQgPSAwOyBiaXQgPCB3Lmxlbmd0aDsgYml0KyspIHtcbiAgICAgIHZhciBvZmYgPSAoYml0IC8gMjYpIHwgMDtcbiAgICAgIHZhciB3Yml0ID0gYml0ICUgMjY7XG5cbiAgICAgIHdbYml0XSA9IChudW0ud29yZHNbb2ZmXSAmICgxIDw8IHdiaXQpKSA+Pj4gd2JpdDtcbiAgICB9XG5cbiAgICByZXR1cm4gdztcbiAgfVxuXG4gIC8vIE51bWJlciBvZiB0cmFpbGluZyB6ZXJvIGJpdHNcbiAgQk4ucHJvdG90eXBlLnplcm9CaXRzID0gZnVuY3Rpb24gemVyb0JpdHMgKCkge1xuICAgIGlmICh0aGlzLmlzWmVybygpKSByZXR1cm4gMDtcblxuICAgIHZhciByID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBiID0gdGhpcy5femVyb0JpdHModGhpcy53b3Jkc1tpXSk7XG4gICAgICByICs9IGI7XG4gICAgICBpZiAoYiAhPT0gMjYpIGJyZWFrO1xuICAgIH1cbiAgICByZXR1cm4gcjtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuYnl0ZUxlbmd0aCA9IGZ1bmN0aW9uIGJ5dGVMZW5ndGggKCkge1xuICAgIHJldHVybiBNYXRoLmNlaWwodGhpcy5iaXRMZW5ndGgoKSAvIDgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b1R3b3MgPSBmdW5jdGlvbiB0b1R3b3MgKHdpZHRoKSB7XG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIHJldHVybiB0aGlzLmFicygpLmlub3RuKHdpZHRoKS5pYWRkbigxKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZnJvbVR3b3MgPSBmdW5jdGlvbiBmcm9tVHdvcyAod2lkdGgpIHtcbiAgICBpZiAodGhpcy50ZXN0bih3aWR0aCAtIDEpKSB7XG4gICAgICByZXR1cm4gdGhpcy5ub3RuKHdpZHRoKS5pYWRkbigxKS5pbmVnKCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmNsb25lKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlzTmVnID0gZnVuY3Rpb24gaXNOZWcgKCkge1xuICAgIHJldHVybiB0aGlzLm5lZ2F0aXZlICE9PSAwO1xuICB9O1xuXG4gIC8vIFJldHVybiBuZWdhdGl2ZSBjbG9uZSBvZiBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLm5lZyA9IGZ1bmN0aW9uIG5lZyAoKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pbmVnKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmluZWcgPSBmdW5jdGlvbiBpbmVnICgpIHtcbiAgICBpZiAoIXRoaXMuaXNaZXJvKCkpIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgXj0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvLyBPciBgbnVtYCB3aXRoIGB0aGlzYCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaXVvciA9IGZ1bmN0aW9uIGl1b3IgKG51bSkge1xuICAgIHdoaWxlICh0aGlzLmxlbmd0aCA8IG51bS5sZW5ndGgpIHtcbiAgICAgIHRoaXMud29yZHNbdGhpcy5sZW5ndGgrK10gPSAwO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gdGhpcy53b3Jkc1tpXSB8IG51bS53b3Jkc1tpXTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pb3IgPSBmdW5jdGlvbiBpb3IgKG51bSkge1xuICAgIGFzc2VydCgodGhpcy5uZWdhdGl2ZSB8IG51bS5uZWdhdGl2ZSkgPT09IDApO1xuICAgIHJldHVybiB0aGlzLml1b3IobnVtKTtcbiAgfTtcblxuICAvLyBPciBgbnVtYCB3aXRoIGB0aGlzYFxuICBCTi5wcm90b3R5cGUub3IgPSBmdW5jdGlvbiBvciAobnVtKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5pb3IobnVtKTtcbiAgICByZXR1cm4gbnVtLmNsb25lKCkuaW9yKHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS51b3IgPSBmdW5jdGlvbiB1b3IgKG51bSkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiB0aGlzLmNsb25lKCkuaXVvcihudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5pdW9yKHRoaXMpO1xuICB9O1xuXG4gIC8vIEFuZCBgbnVtYCB3aXRoIGB0aGlzYCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaXVhbmQgPSBmdW5jdGlvbiBpdWFuZCAobnVtKSB7XG4gICAgLy8gYiA9IG1pbi1sZW5ndGgobnVtLCB0aGlzKVxuICAgIHZhciBiO1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHtcbiAgICAgIGIgPSBudW07XG4gICAgfSBlbHNlIHtcbiAgICAgIGIgPSB0aGlzO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYi5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IHRoaXMud29yZHNbaV0gJiBudW0ud29yZHNbaV07XG4gICAgfVxuXG4gICAgdGhpcy5sZW5ndGggPSBiLmxlbmd0aDtcblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlhbmQgPSBmdW5jdGlvbiBpYW5kIChudW0pIHtcbiAgICBhc3NlcnQoKHRoaXMubmVnYXRpdmUgfCBudW0ubmVnYXRpdmUpID09PSAwKTtcbiAgICByZXR1cm4gdGhpcy5pdWFuZChudW0pO1xuICB9O1xuXG4gIC8vIEFuZCBgbnVtYCB3aXRoIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuYW5kID0gZnVuY3Rpb24gYW5kIChudW0pIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gdGhpcy5jbG9uZSgpLmlhbmQobnVtKTtcbiAgICByZXR1cm4gbnVtLmNsb25lKCkuaWFuZCh0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudWFuZCA9IGZ1bmN0aW9uIHVhbmQgKG51bSkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiB0aGlzLmNsb25lKCkuaXVhbmQobnVtKTtcbiAgICByZXR1cm4gbnVtLmNsb25lKCkuaXVhbmQodGhpcyk7XG4gIH07XG5cbiAgLy8gWG9yIGBudW1gIHdpdGggYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pdXhvciA9IGZ1bmN0aW9uIGl1eG9yIChudW0pIHtcbiAgICAvLyBhLmxlbmd0aCA+IGIubGVuZ3RoXG4gICAgdmFyIGE7XG4gICAgdmFyIGI7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkge1xuICAgICAgYSA9IHRoaXM7XG4gICAgICBiID0gbnVtO1xuICAgIH0gZWxzZSB7XG4gICAgICBhID0gbnVtO1xuICAgICAgYiA9IHRoaXM7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gYS53b3Jkc1tpXSBeIGIud29yZHNbaV07XG4gICAgfVxuXG4gICAgaWYgKHRoaXMgIT09IGEpIHtcbiAgICAgIGZvciAoOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gYS53b3Jkc1tpXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmxlbmd0aCA9IGEubGVuZ3RoO1xuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXhvciA9IGZ1bmN0aW9uIGl4b3IgKG51bSkge1xuICAgIGFzc2VydCgodGhpcy5uZWdhdGl2ZSB8IG51bS5uZWdhdGl2ZSkgPT09IDApO1xuICAgIHJldHVybiB0aGlzLml1eG9yKG51bSk7XG4gIH07XG5cbiAgLy8gWG9yIGBudW1gIHdpdGggYHRoaXNgXG4gIEJOLnByb3RvdHlwZS54b3IgPSBmdW5jdGlvbiB4b3IgKG51bSkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiB0aGlzLmNsb25lKCkuaXhvcihudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5peG9yKHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS51eG9yID0gZnVuY3Rpb24gdXhvciAobnVtKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5pdXhvcihudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5pdXhvcih0aGlzKTtcbiAgfTtcblxuICAvLyBOb3QgYGB0aGlzYGAgd2l0aCBgYHdpZHRoYGAgYml0d2lkdGhcbiAgQk4ucHJvdG90eXBlLmlub3RuID0gZnVuY3Rpb24gaW5vdG4gKHdpZHRoKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiB3aWR0aCA9PT0gJ251bWJlcicgJiYgd2lkdGggPj0gMCk7XG5cbiAgICB2YXIgYnl0ZXNOZWVkZWQgPSBNYXRoLmNlaWwod2lkdGggLyAyNikgfCAwO1xuICAgIHZhciBiaXRzTGVmdCA9IHdpZHRoICUgMjY7XG5cbiAgICAvLyBFeHRlbmQgdGhlIGJ1ZmZlciB3aXRoIGxlYWRpbmcgemVyb2VzXG4gICAgdGhpcy5fZXhwYW5kKGJ5dGVzTmVlZGVkKTtcblxuICAgIGlmIChiaXRzTGVmdCA+IDApIHtcbiAgICAgIGJ5dGVzTmVlZGVkLS07XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIGNvbXBsZXRlIHdvcmRzXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBieXRlc05lZWRlZDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gfnRoaXMud29yZHNbaV0gJiAweDNmZmZmZmY7XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIHRoZSByZXNpZHVlXG4gICAgaWYgKGJpdHNMZWZ0ID4gMCkge1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IH50aGlzLndvcmRzW2ldICYgKDB4M2ZmZmZmZiA+PiAoMjYgLSBiaXRzTGVmdCkpO1xuICAgIH1cblxuICAgIC8vIEFuZCByZW1vdmUgbGVhZGluZyB6ZXJvZXNcbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5ub3RuID0gZnVuY3Rpb24gbm90biAod2lkdGgpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlub3RuKHdpZHRoKTtcbiAgfTtcblxuICAvLyBTZXQgYGJpdGAgb2YgYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5zZXRuID0gZnVuY3Rpb24gc2V0biAoYml0LCB2YWwpIHtcbiAgICBhc3NlcnQodHlwZW9mIGJpdCA9PT0gJ251bWJlcicgJiYgYml0ID49IDApO1xuXG4gICAgdmFyIG9mZiA9IChiaXQgLyAyNikgfCAwO1xuICAgIHZhciB3Yml0ID0gYml0ICUgMjY7XG5cbiAgICB0aGlzLl9leHBhbmQob2ZmICsgMSk7XG5cbiAgICBpZiAodmFsKSB7XG4gICAgICB0aGlzLndvcmRzW29mZl0gPSB0aGlzLndvcmRzW29mZl0gfCAoMSA8PCB3Yml0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy53b3Jkc1tvZmZdID0gdGhpcy53b3Jkc1tvZmZdICYgfigxIDw8IHdiaXQpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgLy8gQWRkIGBudW1gIHRvIGB0aGlzYCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaWFkZCA9IGZ1bmN0aW9uIGlhZGQgKG51bSkge1xuICAgIHZhciByO1xuXG4gICAgLy8gbmVnYXRpdmUgKyBwb3NpdGl2ZVxuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwICYmIG51bS5uZWdhdGl2ZSA9PT0gMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgICByID0gdGhpcy5pc3ViKG51bSk7XG4gICAgICB0aGlzLm5lZ2F0aXZlIF49IDE7XG4gICAgICByZXR1cm4gdGhpcy5fbm9ybVNpZ24oKTtcblxuICAgIC8vIHBvc2l0aXZlICsgbmVnYXRpdmVcbiAgICB9IGVsc2UgaWYgKHRoaXMubmVnYXRpdmUgPT09IDAgJiYgbnVtLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICBudW0ubmVnYXRpdmUgPSAwO1xuICAgICAgciA9IHRoaXMuaXN1YihudW0pO1xuICAgICAgbnVtLm5lZ2F0aXZlID0gMTtcbiAgICAgIHJldHVybiByLl9ub3JtU2lnbigpO1xuICAgIH1cblxuICAgIC8vIGEubGVuZ3RoID4gYi5sZW5ndGhcbiAgICB2YXIgYSwgYjtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSB7XG4gICAgICBhID0gdGhpcztcbiAgICAgIGIgPSBudW07XG4gICAgfSBlbHNlIHtcbiAgICAgIGEgPSBudW07XG4gICAgICBiID0gdGhpcztcbiAgICB9XG5cbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYi5sZW5ndGg7IGkrKykge1xuICAgICAgciA9IChhLndvcmRzW2ldIHwgMCkgKyAoYi53b3Jkc1tpXSB8IDApICsgY2Fycnk7XG4gICAgICB0aGlzLndvcmRzW2ldID0gciAmIDB4M2ZmZmZmZjtcbiAgICAgIGNhcnJ5ID0gciA+Pj4gMjY7XG4gICAgfVxuICAgIGZvciAoOyBjYXJyeSAhPT0gMCAmJiBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgciA9IChhLndvcmRzW2ldIHwgMCkgKyBjYXJyeTtcbiAgICAgIHRoaXMud29yZHNbaV0gPSByICYgMHgzZmZmZmZmO1xuICAgICAgY2FycnkgPSByID4+PiAyNjtcbiAgICB9XG5cbiAgICB0aGlzLmxlbmd0aCA9IGEubGVuZ3RoO1xuICAgIGlmIChjYXJyeSAhPT0gMCkge1xuICAgICAgdGhpcy53b3Jkc1t0aGlzLmxlbmd0aF0gPSBjYXJyeTtcbiAgICAgIHRoaXMubGVuZ3RoKys7XG4gICAgLy8gQ29weSB0aGUgcmVzdCBvZiB0aGUgd29yZHNcbiAgICB9IGVsc2UgaWYgKGEgIT09IHRoaXMpIHtcbiAgICAgIGZvciAoOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gYS53b3Jkc1tpXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvLyBBZGQgYG51bWAgdG8gYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQgKG51bSkge1xuICAgIHZhciByZXM7XG4gICAgaWYgKG51bS5uZWdhdGl2ZSAhPT0gMCAmJiB0aGlzLm5lZ2F0aXZlID09PSAwKSB7XG4gICAgICBudW0ubmVnYXRpdmUgPSAwO1xuICAgICAgcmVzID0gdGhpcy5zdWIobnVtKTtcbiAgICAgIG51bS5uZWdhdGl2ZSBePSAxO1xuICAgICAgcmV0dXJuIHJlcztcbiAgICB9IGVsc2UgaWYgKG51bS5uZWdhdGl2ZSA9PT0gMCAmJiB0aGlzLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgIHJlcyA9IG51bS5zdWIodGhpcyk7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICAgIHJldHVybiByZXM7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5pYWRkKG51bSk7XG5cbiAgICByZXR1cm4gbnVtLmNsb25lKCkuaWFkZCh0aGlzKTtcbiAgfTtcblxuICAvLyBTdWJ0cmFjdCBgbnVtYCBmcm9tIGB0aGlzYCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaXN1YiA9IGZ1bmN0aW9uIGlzdWIgKG51bSkge1xuICAgIC8vIHRoaXMgLSAoLW51bSkgPSB0aGlzICsgbnVtXG4gICAgaWYgKG51bS5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgbnVtLm5lZ2F0aXZlID0gMDtcbiAgICAgIHZhciByID0gdGhpcy5pYWRkKG51bSk7XG4gICAgICBudW0ubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHIuX25vcm1TaWduKCk7XG5cbiAgICAvLyAtdGhpcyAtIG51bSA9IC0odGhpcyArIG51bSlcbiAgICB9IGVsc2UgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgICAgdGhpcy5pYWRkKG51bSk7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICAgIHJldHVybiB0aGlzLl9ub3JtU2lnbigpO1xuICAgIH1cblxuICAgIC8vIEF0IHRoaXMgcG9pbnQgYm90aCBudW1iZXJzIGFyZSBwb3NpdGl2ZVxuICAgIHZhciBjbXAgPSB0aGlzLmNtcChudW0pO1xuXG4gICAgLy8gT3B0aW1pemF0aW9uIC0gemVyb2lmeVxuICAgIGlmIChjbXAgPT09IDApIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgICAgdGhpcy5sZW5ndGggPSAxO1xuICAgICAgdGhpcy53b3Jkc1swXSA9IDA7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBhID4gYlxuICAgIHZhciBhLCBiO1xuICAgIGlmIChjbXAgPiAwKSB7XG4gICAgICBhID0gdGhpcztcbiAgICAgIGIgPSBudW07XG4gICAgfSBlbHNlIHtcbiAgICAgIGEgPSBudW07XG4gICAgICBiID0gdGhpcztcbiAgICB9XG5cbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYi5sZW5ndGg7IGkrKykge1xuICAgICAgciA9IChhLndvcmRzW2ldIHwgMCkgLSAoYi53b3Jkc1tpXSB8IDApICsgY2Fycnk7XG4gICAgICBjYXJyeSA9IHIgPj4gMjY7XG4gICAgICB0aGlzLndvcmRzW2ldID0gciAmIDB4M2ZmZmZmZjtcbiAgICB9XG4gICAgZm9yICg7IGNhcnJ5ICE9PSAwICYmIGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICByID0gKGEud29yZHNbaV0gfCAwKSArIGNhcnJ5O1xuICAgICAgY2FycnkgPSByID4+IDI2O1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IHIgJiAweDNmZmZmZmY7XG4gICAgfVxuXG4gICAgLy8gQ29weSByZXN0IG9mIHRoZSB3b3Jkc1xuICAgIGlmIChjYXJyeSA9PT0gMCAmJiBpIDwgYS5sZW5ndGggJiYgYSAhPT0gdGhpcykge1xuICAgICAgZm9yICg7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSBhLndvcmRzW2ldO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMubGVuZ3RoID0gTWF0aC5tYXgodGhpcy5sZW5ndGgsIGkpO1xuXG4gICAgaWYgKGEgIT09IHRoaXMpIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgLy8gU3VidHJhY3QgYG51bWAgZnJvbSBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLnN1YiA9IGZ1bmN0aW9uIHN1YiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pc3ViKG51bSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gc21hbGxNdWxUbyAoc2VsZiwgbnVtLCBvdXQpIHtcbiAgICBvdXQubmVnYXRpdmUgPSBudW0ubmVnYXRpdmUgXiBzZWxmLm5lZ2F0aXZlO1xuICAgIHZhciBsZW4gPSAoc2VsZi5sZW5ndGggKyBudW0ubGVuZ3RoKSB8IDA7XG4gICAgb3V0Lmxlbmd0aCA9IGxlbjtcbiAgICBsZW4gPSAobGVuIC0gMSkgfCAwO1xuXG4gICAgLy8gUGVlbCBvbmUgaXRlcmF0aW9uIChjb21waWxlciBjYW4ndCBkbyBpdCwgYmVjYXVzZSBvZiBjb2RlIGNvbXBsZXhpdHkpXG4gICAgdmFyIGEgPSBzZWxmLndvcmRzWzBdIHwgMDtcbiAgICB2YXIgYiA9IG51bS53b3Jkc1swXSB8IDA7XG4gICAgdmFyIHIgPSBhICogYjtcblxuICAgIHZhciBsbyA9IHIgJiAweDNmZmZmZmY7XG4gICAgdmFyIGNhcnJ5ID0gKHIgLyAweDQwMDAwMDApIHwgMDtcbiAgICBvdXQud29yZHNbMF0gPSBsbztcblxuICAgIGZvciAodmFyIGsgPSAxOyBrIDwgbGVuOyBrKyspIHtcbiAgICAgIC8vIFN1bSBhbGwgd29yZHMgd2l0aCB0aGUgc2FtZSBgaSArIGogPSBrYCBhbmQgYWNjdW11bGF0ZSBgbmNhcnJ5YCxcbiAgICAgIC8vIG5vdGUgdGhhdCBuY2FycnkgY291bGQgYmUgPj0gMHgzZmZmZmZmXG4gICAgICB2YXIgbmNhcnJ5ID0gY2FycnkgPj4+IDI2O1xuICAgICAgdmFyIHJ3b3JkID0gY2FycnkgJiAweDNmZmZmZmY7XG4gICAgICB2YXIgbWF4SiA9IE1hdGgubWluKGssIG51bS5sZW5ndGggLSAxKTtcbiAgICAgIGZvciAodmFyIGogPSBNYXRoLm1heCgwLCBrIC0gc2VsZi5sZW5ndGggKyAxKTsgaiA8PSBtYXhKOyBqKyspIHtcbiAgICAgICAgdmFyIGkgPSAoayAtIGopIHwgMDtcbiAgICAgICAgYSA9IHNlbGYud29yZHNbaV0gfCAwO1xuICAgICAgICBiID0gbnVtLndvcmRzW2pdIHwgMDtcbiAgICAgICAgciA9IGEgKiBiICsgcndvcmQ7XG4gICAgICAgIG5jYXJyeSArPSAociAvIDB4NDAwMDAwMCkgfCAwO1xuICAgICAgICByd29yZCA9IHIgJiAweDNmZmZmZmY7XG4gICAgICB9XG4gICAgICBvdXQud29yZHNba10gPSByd29yZCB8IDA7XG4gICAgICBjYXJyeSA9IG5jYXJyeSB8IDA7XG4gICAgfVxuICAgIGlmIChjYXJyeSAhPT0gMCkge1xuICAgICAgb3V0LndvcmRzW2tdID0gY2FycnkgfCAwO1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXQubGVuZ3RoLS07XG4gICAgfVxuXG4gICAgcmV0dXJuIG91dC5zdHJpcCgpO1xuICB9XG5cbiAgLy8gVE9ETyhpbmR1dG55KTogaXQgbWF5IGJlIHJlYXNvbmFibGUgdG8gb21pdCBpdCBmb3IgdXNlcnMgd2hvIGRvbid0IG5lZWRcbiAgLy8gdG8gd29yayB3aXRoIDI1Ni1iaXQgbnVtYmVycywgb3RoZXJ3aXNlIGl0IGdpdmVzIDIwJSBpbXByb3ZlbWVudCBmb3IgMjU2LWJpdFxuICAvLyBtdWx0aXBsaWNhdGlvbiAobGlrZSBlbGxpcHRpYyBzZWNwMjU2azEpLlxuICB2YXIgY29tYjEwTXVsVG8gPSBmdW5jdGlvbiBjb21iMTBNdWxUbyAoc2VsZiwgbnVtLCBvdXQpIHtcbiAgICB2YXIgYSA9IHNlbGYud29yZHM7XG4gICAgdmFyIGIgPSBudW0ud29yZHM7XG4gICAgdmFyIG8gPSBvdXQud29yZHM7XG4gICAgdmFyIGMgPSAwO1xuICAgIHZhciBsbztcbiAgICB2YXIgbWlkO1xuICAgIHZhciBoaTtcbiAgICB2YXIgYTAgPSBhWzBdIHwgMDtcbiAgICB2YXIgYWwwID0gYTAgJiAweDFmZmY7XG4gICAgdmFyIGFoMCA9IGEwID4+PiAxMztcbiAgICB2YXIgYTEgPSBhWzFdIHwgMDtcbiAgICB2YXIgYWwxID0gYTEgJiAweDFmZmY7XG4gICAgdmFyIGFoMSA9IGExID4+PiAxMztcbiAgICB2YXIgYTIgPSBhWzJdIHwgMDtcbiAgICB2YXIgYWwyID0gYTIgJiAweDFmZmY7XG4gICAgdmFyIGFoMiA9IGEyID4+PiAxMztcbiAgICB2YXIgYTMgPSBhWzNdIHwgMDtcbiAgICB2YXIgYWwzID0gYTMgJiAweDFmZmY7XG4gICAgdmFyIGFoMyA9IGEzID4+PiAxMztcbiAgICB2YXIgYTQgPSBhWzRdIHwgMDtcbiAgICB2YXIgYWw0ID0gYTQgJiAweDFmZmY7XG4gICAgdmFyIGFoNCA9IGE0ID4+PiAxMztcbiAgICB2YXIgYTUgPSBhWzVdIHwgMDtcbiAgICB2YXIgYWw1ID0gYTUgJiAweDFmZmY7XG4gICAgdmFyIGFoNSA9IGE1ID4+PiAxMztcbiAgICB2YXIgYTYgPSBhWzZdIHwgMDtcbiAgICB2YXIgYWw2ID0gYTYgJiAweDFmZmY7XG4gICAgdmFyIGFoNiA9IGE2ID4+PiAxMztcbiAgICB2YXIgYTcgPSBhWzddIHwgMDtcbiAgICB2YXIgYWw3ID0gYTcgJiAweDFmZmY7XG4gICAgdmFyIGFoNyA9IGE3ID4+PiAxMztcbiAgICB2YXIgYTggPSBhWzhdIHwgMDtcbiAgICB2YXIgYWw4ID0gYTggJiAweDFmZmY7XG4gICAgdmFyIGFoOCA9IGE4ID4+PiAxMztcbiAgICB2YXIgYTkgPSBhWzldIHwgMDtcbiAgICB2YXIgYWw5ID0gYTkgJiAweDFmZmY7XG4gICAgdmFyIGFoOSA9IGE5ID4+PiAxMztcbiAgICB2YXIgYjAgPSBiWzBdIHwgMDtcbiAgICB2YXIgYmwwID0gYjAgJiAweDFmZmY7XG4gICAgdmFyIGJoMCA9IGIwID4+PiAxMztcbiAgICB2YXIgYjEgPSBiWzFdIHwgMDtcbiAgICB2YXIgYmwxID0gYjEgJiAweDFmZmY7XG4gICAgdmFyIGJoMSA9IGIxID4+PiAxMztcbiAgICB2YXIgYjIgPSBiWzJdIHwgMDtcbiAgICB2YXIgYmwyID0gYjIgJiAweDFmZmY7XG4gICAgdmFyIGJoMiA9IGIyID4+PiAxMztcbiAgICB2YXIgYjMgPSBiWzNdIHwgMDtcbiAgICB2YXIgYmwzID0gYjMgJiAweDFmZmY7XG4gICAgdmFyIGJoMyA9IGIzID4+PiAxMztcbiAgICB2YXIgYjQgPSBiWzRdIHwgMDtcbiAgICB2YXIgYmw0ID0gYjQgJiAweDFmZmY7XG4gICAgdmFyIGJoNCA9IGI0ID4+PiAxMztcbiAgICB2YXIgYjUgPSBiWzVdIHwgMDtcbiAgICB2YXIgYmw1ID0gYjUgJiAweDFmZmY7XG4gICAgdmFyIGJoNSA9IGI1ID4+PiAxMztcbiAgICB2YXIgYjYgPSBiWzZdIHwgMDtcbiAgICB2YXIgYmw2ID0gYjYgJiAweDFmZmY7XG4gICAgdmFyIGJoNiA9IGI2ID4+PiAxMztcbiAgICB2YXIgYjcgPSBiWzddIHwgMDtcbiAgICB2YXIgYmw3ID0gYjcgJiAweDFmZmY7XG4gICAgdmFyIGJoNyA9IGI3ID4+PiAxMztcbiAgICB2YXIgYjggPSBiWzhdIHwgMDtcbiAgICB2YXIgYmw4ID0gYjggJiAweDFmZmY7XG4gICAgdmFyIGJoOCA9IGI4ID4+PiAxMztcbiAgICB2YXIgYjkgPSBiWzldIHwgMDtcbiAgICB2YXIgYmw5ID0gYjkgJiAweDFmZmY7XG4gICAgdmFyIGJoOSA9IGI5ID4+PiAxMztcblxuICAgIG91dC5uZWdhdGl2ZSA9IHNlbGYubmVnYXRpdmUgXiBudW0ubmVnYXRpdmU7XG4gICAgb3V0Lmxlbmd0aCA9IDE5O1xuICAgIC8qIGsgPSAwICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWwwLCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDAsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDAsIGJoMCk7XG4gICAgdmFyIHcwID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MCA+Pj4gMjYpKSB8IDA7XG4gICAgdzAgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWwxLCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDEsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDEsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwwLCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDAsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMCwgYmgxKSkgfCAwO1xuICAgIHZhciB3MSA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzEgPj4+IDI2KSkgfCAwO1xuICAgIHcxICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMiAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsMiwgYmwwKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWwyLCBiaDApO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDApKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWgyLCBiaDApO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmwxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsMSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoMSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmgyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDIpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDIpKSB8IDA7XG4gICAgdmFyIHcyID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MiA+Pj4gMjYpKSB8IDA7XG4gICAgdzIgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAzICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWwzLCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDMsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDMsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDMpKSB8IDA7XG4gICAgdmFyIHczID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MyA+Pj4gMjYpKSB8IDA7XG4gICAgdzMgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA0ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw0LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDQsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDQsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDEsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMSwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgxLCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgxLCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwwLCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDAsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMCwgYmg0KSkgfCAwO1xuICAgIHZhciB3NCA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzQgPj4+IDI2KSkgfCAwO1xuICAgIHc0ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gNSAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsNSwgYmwwKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw1LCBiaDApO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDApKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg1LCBiaDApO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmwxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsMSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoMSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmgyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDIpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDIpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmwzKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmgzKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsNCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoNCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDUpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDUpKSB8IDA7XG4gICAgdmFyIHc1ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3NSA+Pj4gMjYpKSB8IDA7XG4gICAgdzUgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA2ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw2LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDYsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDYsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDYpKSB8IDA7XG4gICAgdmFyIHc2ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3NiA+Pj4gMjYpKSB8IDA7XG4gICAgdzYgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA3ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw3LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDcsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDcsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDEsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMSwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgxLCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgxLCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwwLCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDAsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMCwgYmg3KSkgfCAwO1xuICAgIHZhciB3NyA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzcgPj4+IDI2KSkgfCAwO1xuICAgIHc3ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gOCAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOCwgYmwwKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw4LCBiaDApO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDApKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg4LCBiaDApO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmwxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsMSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoMSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmgyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDIpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDIpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmwzKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmgzKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsNCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoNCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDUpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDUpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw2KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg2KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsNykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoNykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDgpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDgpKSB8IDA7XG4gICAgdmFyIHc4ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3OCA+Pj4gMjYpKSB8IDA7XG4gICAgdzggJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA5ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDkpKSB8IDA7XG4gICAgdmFyIHc5ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3OSA+Pj4gMjYpKSB8IDA7XG4gICAgdzkgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxMCAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmwxKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDEpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDEpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDEpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDEsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMSwgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgxLCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgxLCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxMCA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzEwID4+PiAyNikpIHwgMDtcbiAgICB3MTAgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxMSAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmwyKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDIpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDIpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDIpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzExID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTEgPj4+IDI2KSkgfCAwO1xuICAgIHcxMSAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDEyICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDMpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoMyk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsMykpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoMyk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxMiA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzEyID4+PiAyNikpIHwgMDtcbiAgICB3MTIgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxMyAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmw0KTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDQpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDQpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDQpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxMyA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzEzID4+PiAyNikpIHwgMDtcbiAgICB3MTMgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxNCAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmw1KTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDUpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDUpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDUpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzE0ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTQgPj4+IDI2KSkgfCAwO1xuICAgIHcxNCAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDE1ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDYpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoNik7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsNikpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoNik7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxNSA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzE1ID4+PiAyNikpIHwgMDtcbiAgICB3MTUgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxNiAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmw3KTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDcpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDcpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDcpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxNiA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzE2ID4+PiAyNikpIHwgMDtcbiAgICB3MTYgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxNyAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmw4KTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDgpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDgpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDgpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzE3ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTcgPj4+IDI2KSkgfCAwO1xuICAgIHcxNyAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDE4ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDkpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoOSk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsOSkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoOSk7XG4gICAgdmFyIHcxOCA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzE4ID4+PiAyNikpIHwgMDtcbiAgICB3MTggJj0gMHgzZmZmZmZmO1xuICAgIG9bMF0gPSB3MDtcbiAgICBvWzFdID0gdzE7XG4gICAgb1syXSA9IHcyO1xuICAgIG9bM10gPSB3MztcbiAgICBvWzRdID0gdzQ7XG4gICAgb1s1XSA9IHc1O1xuICAgIG9bNl0gPSB3NjtcbiAgICBvWzddID0gdzc7XG4gICAgb1s4XSA9IHc4O1xuICAgIG9bOV0gPSB3OTtcbiAgICBvWzEwXSA9IHcxMDtcbiAgICBvWzExXSA9IHcxMTtcbiAgICBvWzEyXSA9IHcxMjtcbiAgICBvWzEzXSA9IHcxMztcbiAgICBvWzE0XSA9IHcxNDtcbiAgICBvWzE1XSA9IHcxNTtcbiAgICBvWzE2XSA9IHcxNjtcbiAgICBvWzE3XSA9IHcxNztcbiAgICBvWzE4XSA9IHcxODtcbiAgICBpZiAoYyAhPT0gMCkge1xuICAgICAgb1sxOV0gPSBjO1xuICAgICAgb3V0Lmxlbmd0aCsrO1xuICAgIH1cbiAgICByZXR1cm4gb3V0O1xuICB9O1xuXG4gIC8vIFBvbHlmaWxsIGNvbWJcbiAgaWYgKCFNYXRoLmltdWwpIHtcbiAgICBjb21iMTBNdWxUbyA9IHNtYWxsTXVsVG87XG4gIH1cblxuICBmdW5jdGlvbiBiaWdNdWxUbyAoc2VsZiwgbnVtLCBvdXQpIHtcbiAgICBvdXQubmVnYXRpdmUgPSBudW0ubmVnYXRpdmUgXiBzZWxmLm5lZ2F0aXZlO1xuICAgIG91dC5sZW5ndGggPSBzZWxmLmxlbmd0aCArIG51bS5sZW5ndGg7XG5cbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIHZhciBobmNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBrID0gMDsgayA8IG91dC5sZW5ndGggLSAxOyBrKyspIHtcbiAgICAgIC8vIFN1bSBhbGwgd29yZHMgd2l0aCB0aGUgc2FtZSBgaSArIGogPSBrYCBhbmQgYWNjdW11bGF0ZSBgbmNhcnJ5YCxcbiAgICAgIC8vIG5vdGUgdGhhdCBuY2FycnkgY291bGQgYmUgPj0gMHgzZmZmZmZmXG4gICAgICB2YXIgbmNhcnJ5ID0gaG5jYXJyeTtcbiAgICAgIGhuY2FycnkgPSAwO1xuICAgICAgdmFyIHJ3b3JkID0gY2FycnkgJiAweDNmZmZmZmY7XG4gICAgICB2YXIgbWF4SiA9IE1hdGgubWluKGssIG51bS5sZW5ndGggLSAxKTtcbiAgICAgIGZvciAodmFyIGogPSBNYXRoLm1heCgwLCBrIC0gc2VsZi5sZW5ndGggKyAxKTsgaiA8PSBtYXhKOyBqKyspIHtcbiAgICAgICAgdmFyIGkgPSBrIC0gajtcbiAgICAgICAgdmFyIGEgPSBzZWxmLndvcmRzW2ldIHwgMDtcbiAgICAgICAgdmFyIGIgPSBudW0ud29yZHNbal0gfCAwO1xuICAgICAgICB2YXIgciA9IGEgKiBiO1xuXG4gICAgICAgIHZhciBsbyA9IHIgJiAweDNmZmZmZmY7XG4gICAgICAgIG5jYXJyeSA9IChuY2FycnkgKyAoKHIgLyAweDQwMDAwMDApIHwgMCkpIHwgMDtcbiAgICAgICAgbG8gPSAobG8gKyByd29yZCkgfCAwO1xuICAgICAgICByd29yZCA9IGxvICYgMHgzZmZmZmZmO1xuICAgICAgICBuY2FycnkgPSAobmNhcnJ5ICsgKGxvID4+PiAyNikpIHwgMDtcblxuICAgICAgICBobmNhcnJ5ICs9IG5jYXJyeSA+Pj4gMjY7XG4gICAgICAgIG5jYXJyeSAmPSAweDNmZmZmZmY7XG4gICAgICB9XG4gICAgICBvdXQud29yZHNba10gPSByd29yZDtcbiAgICAgIGNhcnJ5ID0gbmNhcnJ5O1xuICAgICAgbmNhcnJ5ID0gaG5jYXJyeTtcbiAgICB9XG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICBvdXQud29yZHNba10gPSBjYXJyeTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0Lmxlbmd0aC0tO1xuICAgIH1cblxuICAgIHJldHVybiBvdXQuc3RyaXAoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGp1bWJvTXVsVG8gKHNlbGYsIG51bSwgb3V0KSB7XG4gICAgdmFyIGZmdG0gPSBuZXcgRkZUTSgpO1xuICAgIHJldHVybiBmZnRtLm11bHAoc2VsZiwgbnVtLCBvdXQpO1xuICB9XG5cbiAgQk4ucHJvdG90eXBlLm11bFRvID0gZnVuY3Rpb24gbXVsVG8gKG51bSwgb3V0KSB7XG4gICAgdmFyIHJlcztcbiAgICB2YXIgbGVuID0gdGhpcy5sZW5ndGggKyBudW0ubGVuZ3RoO1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMTAgJiYgbnVtLmxlbmd0aCA9PT0gMTApIHtcbiAgICAgIHJlcyA9IGNvbWIxME11bFRvKHRoaXMsIG51bSwgb3V0KTtcbiAgICB9IGVsc2UgaWYgKGxlbiA8IDYzKSB7XG4gICAgICByZXMgPSBzbWFsbE11bFRvKHRoaXMsIG51bSwgb3V0KTtcbiAgICB9IGVsc2UgaWYgKGxlbiA8IDEwMjQpIHtcbiAgICAgIHJlcyA9IGJpZ011bFRvKHRoaXMsIG51bSwgb3V0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzID0ganVtYm9NdWxUbyh0aGlzLCBudW0sIG91dCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICAvLyBDb29sZXktVHVrZXkgYWxnb3JpdGhtIGZvciBGRlRcbiAgLy8gc2xpZ2h0bHkgcmV2aXNpdGVkIHRvIHJlbHkgb24gbG9vcGluZyBpbnN0ZWFkIG9mIHJlY3Vyc2lvblxuXG4gIGZ1bmN0aW9uIEZGVE0gKHgsIHkpIHtcbiAgICB0aGlzLnggPSB4O1xuICAgIHRoaXMueSA9IHk7XG4gIH1cblxuICBGRlRNLnByb3RvdHlwZS5tYWtlUkJUID0gZnVuY3Rpb24gbWFrZVJCVCAoTikge1xuICAgIHZhciB0ID0gbmV3IEFycmF5KE4pO1xuICAgIHZhciBsID0gQk4ucHJvdG90eXBlLl9jb3VudEJpdHMoTikgLSAxO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTjsgaSsrKSB7XG4gICAgICB0W2ldID0gdGhpcy5yZXZCaW4oaSwgbCwgTik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHQ7XG4gIH07XG5cbiAgLy8gUmV0dXJucyBiaW5hcnktcmV2ZXJzZWQgcmVwcmVzZW50YXRpb24gb2YgYHhgXG4gIEZGVE0ucHJvdG90eXBlLnJldkJpbiA9IGZ1bmN0aW9uIHJldkJpbiAoeCwgbCwgTikge1xuICAgIGlmICh4ID09PSAwIHx8IHggPT09IE4gLSAxKSByZXR1cm4geDtcblxuICAgIHZhciByYiA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgIHJiIHw9ICh4ICYgMSkgPDwgKGwgLSBpIC0gMSk7XG4gICAgICB4ID4+PSAxO1xuICAgIH1cblxuICAgIHJldHVybiByYjtcbiAgfTtcblxuICAvLyBQZXJmb3JtcyBcInR3ZWVkbGluZ1wiIHBoYXNlLCB0aGVyZWZvcmUgJ2VtdWxhdGluZydcbiAgLy8gYmVoYXZpb3VyIG9mIHRoZSByZWN1cnNpdmUgYWxnb3JpdGhtXG4gIEZGVE0ucHJvdG90eXBlLnBlcm11dGUgPSBmdW5jdGlvbiBwZXJtdXRlIChyYnQsIHJ3cywgaXdzLCBydHdzLCBpdHdzLCBOKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOOyBpKyspIHtcbiAgICAgIHJ0d3NbaV0gPSByd3NbcmJ0W2ldXTtcbiAgICAgIGl0d3NbaV0gPSBpd3NbcmJ0W2ldXTtcbiAgICB9XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUudHJhbnNmb3JtID0gZnVuY3Rpb24gdHJhbnNmb3JtIChyd3MsIGl3cywgcnR3cywgaXR3cywgTiwgcmJ0KSB7XG4gICAgdGhpcy5wZXJtdXRlKHJidCwgcndzLCBpd3MsIHJ0d3MsIGl0d3MsIE4pO1xuXG4gICAgZm9yICh2YXIgcyA9IDE7IHMgPCBOOyBzIDw8PSAxKSB7XG4gICAgICB2YXIgbCA9IHMgPDwgMTtcblxuICAgICAgdmFyIHJ0d2RmID0gTWF0aC5jb3MoMiAqIE1hdGguUEkgLyBsKTtcbiAgICAgIHZhciBpdHdkZiA9IE1hdGguc2luKDIgKiBNYXRoLlBJIC8gbCk7XG5cbiAgICAgIGZvciAodmFyIHAgPSAwOyBwIDwgTjsgcCArPSBsKSB7XG4gICAgICAgIHZhciBydHdkZl8gPSBydHdkZjtcbiAgICAgICAgdmFyIGl0d2RmXyA9IGl0d2RmO1xuXG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgczsgaisrKSB7XG4gICAgICAgICAgdmFyIHJlID0gcnR3c1twICsgal07XG4gICAgICAgICAgdmFyIGllID0gaXR3c1twICsgal07XG5cbiAgICAgICAgICB2YXIgcm8gPSBydHdzW3AgKyBqICsgc107XG4gICAgICAgICAgdmFyIGlvID0gaXR3c1twICsgaiArIHNdO1xuXG4gICAgICAgICAgdmFyIHJ4ID0gcnR3ZGZfICogcm8gLSBpdHdkZl8gKiBpbztcblxuICAgICAgICAgIGlvID0gcnR3ZGZfICogaW8gKyBpdHdkZl8gKiBybztcbiAgICAgICAgICBybyA9IHJ4O1xuXG4gICAgICAgICAgcnR3c1twICsgal0gPSByZSArIHJvO1xuICAgICAgICAgIGl0d3NbcCArIGpdID0gaWUgKyBpbztcblxuICAgICAgICAgIHJ0d3NbcCArIGogKyBzXSA9IHJlIC0gcm87XG4gICAgICAgICAgaXR3c1twICsgaiArIHNdID0gaWUgLSBpbztcblxuICAgICAgICAgIC8qIGpzaGludCBtYXhkZXB0aCA6IGZhbHNlICovXG4gICAgICAgICAgaWYgKGogIT09IGwpIHtcbiAgICAgICAgICAgIHJ4ID0gcnR3ZGYgKiBydHdkZl8gLSBpdHdkZiAqIGl0d2RmXztcblxuICAgICAgICAgICAgaXR3ZGZfID0gcnR3ZGYgKiBpdHdkZl8gKyBpdHdkZiAqIHJ0d2RmXztcbiAgICAgICAgICAgIHJ0d2RmXyA9IHJ4O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5ndWVzc0xlbjEzYiA9IGZ1bmN0aW9uIGd1ZXNzTGVuMTNiIChuLCBtKSB7XG4gICAgdmFyIE4gPSBNYXRoLm1heChtLCBuKSB8IDE7XG4gICAgdmFyIG9kZCA9IE4gJiAxO1xuICAgIHZhciBpID0gMDtcbiAgICBmb3IgKE4gPSBOIC8gMiB8IDA7IE47IE4gPSBOID4+PiAxKSB7XG4gICAgICBpKys7XG4gICAgfVxuXG4gICAgcmV0dXJuIDEgPDwgaSArIDEgKyBvZGQ7XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUuY29uanVnYXRlID0gZnVuY3Rpb24gY29uanVnYXRlIChyd3MsIGl3cywgTikge1xuICAgIGlmIChOIDw9IDEpIHJldHVybjtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTiAvIDI7IGkrKykge1xuICAgICAgdmFyIHQgPSByd3NbaV07XG5cbiAgICAgIHJ3c1tpXSA9IHJ3c1tOIC0gaSAtIDFdO1xuICAgICAgcndzW04gLSBpIC0gMV0gPSB0O1xuXG4gICAgICB0ID0gaXdzW2ldO1xuXG4gICAgICBpd3NbaV0gPSAtaXdzW04gLSBpIC0gMV07XG4gICAgICBpd3NbTiAtIGkgLSAxXSA9IC10O1xuICAgIH1cbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5ub3JtYWxpemUxM2IgPSBmdW5jdGlvbiBub3JtYWxpemUxM2IgKHdzLCBOKSB7XG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IE4gLyAyOyBpKyspIHtcbiAgICAgIHZhciB3ID0gTWF0aC5yb3VuZCh3c1syICogaSArIDFdIC8gTikgKiAweDIwMDAgK1xuICAgICAgICBNYXRoLnJvdW5kKHdzWzIgKiBpXSAvIE4pICtcbiAgICAgICAgY2Fycnk7XG5cbiAgICAgIHdzW2ldID0gdyAmIDB4M2ZmZmZmZjtcblxuICAgICAgaWYgKHcgPCAweDQwMDAwMDApIHtcbiAgICAgICAgY2FycnkgPSAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FycnkgPSB3IC8gMHg0MDAwMDAwIHwgMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gd3M7XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUuY29udmVydDEzYiA9IGZ1bmN0aW9uIGNvbnZlcnQxM2IgKHdzLCBsZW4sIHJ3cywgTikge1xuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgY2FycnkgPSBjYXJyeSArICh3c1tpXSB8IDApO1xuXG4gICAgICByd3NbMiAqIGldID0gY2FycnkgJiAweDFmZmY7IGNhcnJ5ID0gY2FycnkgPj4+IDEzO1xuICAgICAgcndzWzIgKiBpICsgMV0gPSBjYXJyeSAmIDB4MWZmZjsgY2FycnkgPSBjYXJyeSA+Pj4gMTM7XG4gICAgfVxuXG4gICAgLy8gUGFkIHdpdGggemVyb2VzXG4gICAgZm9yIChpID0gMiAqIGxlbjsgaSA8IE47ICsraSkge1xuICAgICAgcndzW2ldID0gMDtcbiAgICB9XG5cbiAgICBhc3NlcnQoY2FycnkgPT09IDApO1xuICAgIGFzc2VydCgoY2FycnkgJiB+MHgxZmZmKSA9PT0gMCk7XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUuc3R1YiA9IGZ1bmN0aW9uIHN0dWIgKE4pIHtcbiAgICB2YXIgcGggPSBuZXcgQXJyYXkoTik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOOyBpKyspIHtcbiAgICAgIHBoW2ldID0gMDtcbiAgICB9XG5cbiAgICByZXR1cm4gcGg7XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUubXVscCA9IGZ1bmN0aW9uIG11bHAgKHgsIHksIG91dCkge1xuICAgIHZhciBOID0gMiAqIHRoaXMuZ3Vlc3NMZW4xM2IoeC5sZW5ndGgsIHkubGVuZ3RoKTtcblxuICAgIHZhciByYnQgPSB0aGlzLm1ha2VSQlQoTik7XG5cbiAgICB2YXIgXyA9IHRoaXMuc3R1YihOKTtcblxuICAgIHZhciByd3MgPSBuZXcgQXJyYXkoTik7XG4gICAgdmFyIHJ3c3QgPSBuZXcgQXJyYXkoTik7XG4gICAgdmFyIGl3c3QgPSBuZXcgQXJyYXkoTik7XG5cbiAgICB2YXIgbnJ3cyA9IG5ldyBBcnJheShOKTtcbiAgICB2YXIgbnJ3c3QgPSBuZXcgQXJyYXkoTik7XG4gICAgdmFyIG5pd3N0ID0gbmV3IEFycmF5KE4pO1xuXG4gICAgdmFyIHJtd3MgPSBvdXQud29yZHM7XG4gICAgcm13cy5sZW5ndGggPSBOO1xuXG4gICAgdGhpcy5jb252ZXJ0MTNiKHgud29yZHMsIHgubGVuZ3RoLCByd3MsIE4pO1xuICAgIHRoaXMuY29udmVydDEzYih5LndvcmRzLCB5Lmxlbmd0aCwgbnJ3cywgTik7XG5cbiAgICB0aGlzLnRyYW5zZm9ybShyd3MsIF8sIHJ3c3QsIGl3c3QsIE4sIHJidCk7XG4gICAgdGhpcy50cmFuc2Zvcm0obnJ3cywgXywgbnJ3c3QsIG5pd3N0LCBOLCByYnQpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOOyBpKyspIHtcbiAgICAgIHZhciByeCA9IHJ3c3RbaV0gKiBucndzdFtpXSAtIGl3c3RbaV0gKiBuaXdzdFtpXTtcbiAgICAgIGl3c3RbaV0gPSByd3N0W2ldICogbml3c3RbaV0gKyBpd3N0W2ldICogbnJ3c3RbaV07XG4gICAgICByd3N0W2ldID0gcng7XG4gICAgfVxuXG4gICAgdGhpcy5jb25qdWdhdGUocndzdCwgaXdzdCwgTik7XG4gICAgdGhpcy50cmFuc2Zvcm0ocndzdCwgaXdzdCwgcm13cywgXywgTiwgcmJ0KTtcbiAgICB0aGlzLmNvbmp1Z2F0ZShybXdzLCBfLCBOKTtcbiAgICB0aGlzLm5vcm1hbGl6ZTEzYihybXdzLCBOKTtcblxuICAgIG91dC5uZWdhdGl2ZSA9IHgubmVnYXRpdmUgXiB5Lm5lZ2F0aXZlO1xuICAgIG91dC5sZW5ndGggPSB4Lmxlbmd0aCArIHkubGVuZ3RoO1xuICAgIHJldHVybiBvdXQuc3RyaXAoKTtcbiAgfTtcblxuICAvLyBNdWx0aXBseSBgdGhpc2AgYnkgYG51bWBcbiAgQk4ucHJvdG90eXBlLm11bCA9IGZ1bmN0aW9uIG11bCAobnVtKSB7XG4gICAgdmFyIG91dCA9IG5ldyBCTihudWxsKTtcbiAgICBvdXQud29yZHMgPSBuZXcgQXJyYXkodGhpcy5sZW5ndGggKyBudW0ubGVuZ3RoKTtcbiAgICByZXR1cm4gdGhpcy5tdWxUbyhudW0sIG91dCk7XG4gIH07XG5cbiAgLy8gTXVsdGlwbHkgZW1wbG95aW5nIEZGVFxuICBCTi5wcm90b3R5cGUubXVsZiA9IGZ1bmN0aW9uIG11bGYgKG51bSkge1xuICAgIHZhciBvdXQgPSBuZXcgQk4obnVsbCk7XG4gICAgb3V0LndvcmRzID0gbmV3IEFycmF5KHRoaXMubGVuZ3RoICsgbnVtLmxlbmd0aCk7XG4gICAgcmV0dXJuIGp1bWJvTXVsVG8odGhpcywgbnVtLCBvdXQpO1xuICB9O1xuXG4gIC8vIEluLXBsYWNlIE11bHRpcGxpY2F0aW9uXG4gIEJOLnByb3RvdHlwZS5pbXVsID0gZnVuY3Rpb24gaW11bCAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5tdWxUbyhudW0sIHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pbXVsbiA9IGZ1bmN0aW9uIGltdWxuIChudW0pIHtcbiAgICBhc3NlcnQodHlwZW9mIG51bSA9PT0gJ251bWJlcicpO1xuICAgIGFzc2VydChudW0gPCAweDQwMDAwMDApO1xuXG4gICAgLy8gQ2FycnlcbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHcgPSAodGhpcy53b3Jkc1tpXSB8IDApICogbnVtO1xuICAgICAgdmFyIGxvID0gKHcgJiAweDNmZmZmZmYpICsgKGNhcnJ5ICYgMHgzZmZmZmZmKTtcbiAgICAgIGNhcnJ5ID4+PSAyNjtcbiAgICAgIGNhcnJ5ICs9ICh3IC8gMHg0MDAwMDAwKSB8IDA7XG4gICAgICAvLyBOT1RFOiBsbyBpcyAyN2JpdCBtYXhpbXVtXG4gICAgICBjYXJyeSArPSBsbyA+Pj4gMjY7XG4gICAgICB0aGlzLndvcmRzW2ldID0gbG8gJiAweDNmZmZmZmY7XG4gICAgfVxuXG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gY2Fycnk7XG4gICAgICB0aGlzLmxlbmd0aCsrO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5tdWxuID0gZnVuY3Rpb24gbXVsbiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pbXVsbihudW0pO1xuICB9O1xuXG4gIC8vIGB0aGlzYCAqIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuc3FyID0gZnVuY3Rpb24gc3FyICgpIHtcbiAgICByZXR1cm4gdGhpcy5tdWwodGhpcyk7XG4gIH07XG5cbiAgLy8gYHRoaXNgICogYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pc3FyID0gZnVuY3Rpb24gaXNxciAoKSB7XG4gICAgcmV0dXJuIHRoaXMuaW11bCh0aGlzLmNsb25lKCkpO1xuICB9O1xuXG4gIC8vIE1hdGgucG93KGB0aGlzYCwgYG51bWApXG4gIEJOLnByb3RvdHlwZS5wb3cgPSBmdW5jdGlvbiBwb3cgKG51bSkge1xuICAgIHZhciB3ID0gdG9CaXRBcnJheShudW0pO1xuICAgIGlmICh3Lmxlbmd0aCA9PT0gMCkgcmV0dXJuIG5ldyBCTigxKTtcblxuICAgIC8vIFNraXAgbGVhZGluZyB6ZXJvZXNcbiAgICB2YXIgcmVzID0gdGhpcztcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHcubGVuZ3RoOyBpKyssIHJlcyA9IHJlcy5zcXIoKSkge1xuICAgICAgaWYgKHdbaV0gIT09IDApIGJyZWFrO1xuICAgIH1cblxuICAgIGlmICgrK2kgPCB3Lmxlbmd0aCkge1xuICAgICAgZm9yICh2YXIgcSA9IHJlcy5zcXIoKTsgaSA8IHcubGVuZ3RoOyBpKyssIHEgPSBxLnNxcigpKSB7XG4gICAgICAgIGlmICh3W2ldID09PSAwKSBjb250aW51ZTtcblxuICAgICAgICByZXMgPSByZXMubXVsKHEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgLy8gU2hpZnQtbGVmdCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaXVzaGxuID0gZnVuY3Rpb24gaXVzaGxuIChiaXRzKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBiaXRzID09PSAnbnVtYmVyJyAmJiBiaXRzID49IDApO1xuICAgIHZhciByID0gYml0cyAlIDI2O1xuICAgIHZhciBzID0gKGJpdHMgLSByKSAvIDI2O1xuICAgIHZhciBjYXJyeU1hc2sgPSAoMHgzZmZmZmZmID4+PiAoMjYgLSByKSkgPDwgKDI2IC0gcik7XG4gICAgdmFyIGk7XG5cbiAgICBpZiAociAhPT0gMCkge1xuICAgICAgdmFyIGNhcnJ5ID0gMDtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIG5ld0NhcnJ5ID0gdGhpcy53b3Jkc1tpXSAmIGNhcnJ5TWFzaztcbiAgICAgICAgdmFyIGMgPSAoKHRoaXMud29yZHNbaV0gfCAwKSAtIG5ld0NhcnJ5KSA8PCByO1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gYyB8IGNhcnJ5O1xuICAgICAgICBjYXJyeSA9IG5ld0NhcnJ5ID4+PiAoMjYgLSByKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNhcnJ5KSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSBjYXJyeTtcbiAgICAgICAgdGhpcy5sZW5ndGgrKztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocyAhPT0gMCkge1xuICAgICAgZm9yIChpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICB0aGlzLndvcmRzW2kgKyBzXSA9IHRoaXMud29yZHNbaV07XG4gICAgICB9XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBzOyBpKyspIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpXSA9IDA7XG4gICAgICB9XG5cbiAgICAgIHRoaXMubGVuZ3RoICs9IHM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNobG4gPSBmdW5jdGlvbiBpc2hsbiAoYml0cykge1xuICAgIC8vIFRPRE8oaW5kdXRueSk6IGltcGxlbWVudCBtZVxuICAgIGFzc2VydCh0aGlzLm5lZ2F0aXZlID09PSAwKTtcbiAgICByZXR1cm4gdGhpcy5pdXNobG4oYml0cyk7XG4gIH07XG5cbiAgLy8gU2hpZnQtcmlnaHQgaW4tcGxhY2VcbiAgLy8gTk9URTogYGhpbnRgIGlzIGEgbG93ZXN0IGJpdCBiZWZvcmUgdHJhaWxpbmcgemVyb2VzXG4gIC8vIE5PVEU6IGlmIGBleHRlbmRlZGAgaXMgcHJlc2VudCAtIGl0IHdpbGwgYmUgZmlsbGVkIHdpdGggZGVzdHJveWVkIGJpdHNcbiAgQk4ucHJvdG90eXBlLml1c2hybiA9IGZ1bmN0aW9uIGl1c2hybiAoYml0cywgaGludCwgZXh0ZW5kZWQpIHtcbiAgICBhc3NlcnQodHlwZW9mIGJpdHMgPT09ICdudW1iZXInICYmIGJpdHMgPj0gMCk7XG4gICAgdmFyIGg7XG4gICAgaWYgKGhpbnQpIHtcbiAgICAgIGggPSAoaGludCAtIChoaW50ICUgMjYpKSAvIDI2O1xuICAgIH0gZWxzZSB7XG4gICAgICBoID0gMDtcbiAgICB9XG5cbiAgICB2YXIgciA9IGJpdHMgJSAyNjtcbiAgICB2YXIgcyA9IE1hdGgubWluKChiaXRzIC0gcikgLyAyNiwgdGhpcy5sZW5ndGgpO1xuICAgIHZhciBtYXNrID0gMHgzZmZmZmZmIF4gKCgweDNmZmZmZmYgPj4+IHIpIDw8IHIpO1xuICAgIHZhciBtYXNrZWRXb3JkcyA9IGV4dGVuZGVkO1xuXG4gICAgaCAtPSBzO1xuICAgIGggPSBNYXRoLm1heCgwLCBoKTtcblxuICAgIC8vIEV4dGVuZGVkIG1vZGUsIGNvcHkgbWFza2VkIHBhcnRcbiAgICBpZiAobWFza2VkV29yZHMpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgczsgaSsrKSB7XG4gICAgICAgIG1hc2tlZFdvcmRzLndvcmRzW2ldID0gdGhpcy53b3Jkc1tpXTtcbiAgICAgIH1cbiAgICAgIG1hc2tlZFdvcmRzLmxlbmd0aCA9IHM7XG4gICAgfVxuXG4gICAgaWYgKHMgPT09IDApIHtcbiAgICAgIC8vIE5vLW9wLCB3ZSBzaG91bGQgbm90IG1vdmUgYW55dGhpbmcgYXQgYWxsXG4gICAgfSBlbHNlIGlmICh0aGlzLmxlbmd0aCA+IHMpIHtcbiAgICAgIHRoaXMubGVuZ3RoIC09IHM7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gdGhpcy53b3Jkc1tpICsgc107XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMud29yZHNbMF0gPSAwO1xuICAgICAgdGhpcy5sZW5ndGggPSAxO1xuICAgIH1cblxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yIChpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDAgJiYgKGNhcnJ5ICE9PSAwIHx8IGkgPj0gaCk7IGktLSkge1xuICAgICAgdmFyIHdvcmQgPSB0aGlzLndvcmRzW2ldIHwgMDtcbiAgICAgIHRoaXMud29yZHNbaV0gPSAoY2FycnkgPDwgKDI2IC0gcikpIHwgKHdvcmQgPj4+IHIpO1xuICAgICAgY2FycnkgPSB3b3JkICYgbWFzaztcbiAgICB9XG5cbiAgICAvLyBQdXNoIGNhcnJpZWQgYml0cyBhcyBhIG1hc2tcbiAgICBpZiAobWFza2VkV29yZHMgJiYgY2FycnkgIT09IDApIHtcbiAgICAgIG1hc2tlZFdvcmRzLndvcmRzW21hc2tlZFdvcmRzLmxlbmd0aCsrXSA9IGNhcnJ5O1xuICAgIH1cblxuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhpcy53b3Jkc1swXSA9IDA7XG4gICAgICB0aGlzLmxlbmd0aCA9IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNocm4gPSBmdW5jdGlvbiBpc2hybiAoYml0cywgaGludCwgZXh0ZW5kZWQpIHtcbiAgICAvLyBUT0RPKGluZHV0bnkpOiBpbXBsZW1lbnQgbWVcbiAgICBhc3NlcnQodGhpcy5uZWdhdGl2ZSA9PT0gMCk7XG4gICAgcmV0dXJuIHRoaXMuaXVzaHJuKGJpdHMsIGhpbnQsIGV4dGVuZGVkKTtcbiAgfTtcblxuICAvLyBTaGlmdC1sZWZ0XG4gIEJOLnByb3RvdHlwZS5zaGxuID0gZnVuY3Rpb24gc2hsbiAoYml0cykge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaXNobG4oYml0cyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnVzaGxuID0gZnVuY3Rpb24gdXNobG4gKGJpdHMpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLml1c2hsbihiaXRzKTtcbiAgfTtcblxuICAvLyBTaGlmdC1yaWdodFxuICBCTi5wcm90b3R5cGUuc2hybiA9IGZ1bmN0aW9uIHNocm4gKGJpdHMpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlzaHJuKGJpdHMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS51c2hybiA9IGZ1bmN0aW9uIHVzaHJuIChiaXRzKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pdXNocm4oYml0cyk7XG4gIH07XG5cbiAgLy8gVGVzdCBpZiBuIGJpdCBpcyBzZXRcbiAgQk4ucHJvdG90eXBlLnRlc3RuID0gZnVuY3Rpb24gdGVzdG4gKGJpdCkge1xuICAgIGFzc2VydCh0eXBlb2YgYml0ID09PSAnbnVtYmVyJyAmJiBiaXQgPj0gMCk7XG4gICAgdmFyIHIgPSBiaXQgJSAyNjtcbiAgICB2YXIgcyA9IChiaXQgLSByKSAvIDI2O1xuICAgIHZhciBxID0gMSA8PCByO1xuXG4gICAgLy8gRmFzdCBjYXNlOiBiaXQgaXMgbXVjaCBoaWdoZXIgdGhhbiBhbGwgZXhpc3Rpbmcgd29yZHNcbiAgICBpZiAodGhpcy5sZW5ndGggPD0gcykgcmV0dXJuIGZhbHNlO1xuXG4gICAgLy8gQ2hlY2sgYml0IGFuZCByZXR1cm5cbiAgICB2YXIgdyA9IHRoaXMud29yZHNbc107XG5cbiAgICByZXR1cm4gISEodyAmIHEpO1xuICB9O1xuXG4gIC8vIFJldHVybiBvbmx5IGxvd2VycyBiaXRzIG9mIG51bWJlciAoaW4tcGxhY2UpXG4gIEJOLnByb3RvdHlwZS5pbWFza24gPSBmdW5jdGlvbiBpbWFza24gKGJpdHMpIHtcbiAgICBhc3NlcnQodHlwZW9mIGJpdHMgPT09ICdudW1iZXInICYmIGJpdHMgPj0gMCk7XG4gICAgdmFyIHIgPSBiaXRzICUgMjY7XG4gICAgdmFyIHMgPSAoYml0cyAtIHIpIC8gMjY7XG5cbiAgICBhc3NlcnQodGhpcy5uZWdhdGl2ZSA9PT0gMCwgJ2ltYXNrbiB3b3JrcyBvbmx5IHdpdGggcG9zaXRpdmUgbnVtYmVycycpO1xuXG4gICAgaWYgKHRoaXMubGVuZ3RoIDw9IHMpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGlmIChyICE9PSAwKSB7XG4gICAgICBzKys7XG4gICAgfVxuICAgIHRoaXMubGVuZ3RoID0gTWF0aC5taW4ocywgdGhpcy5sZW5ndGgpO1xuXG4gICAgaWYgKHIgIT09IDApIHtcbiAgICAgIHZhciBtYXNrID0gMHgzZmZmZmZmIF4gKCgweDNmZmZmZmYgPj4+IHIpIDw8IHIpO1xuICAgICAgdGhpcy53b3Jkc1t0aGlzLmxlbmd0aCAtIDFdICY9IG1hc2s7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICAvLyBSZXR1cm4gb25seSBsb3dlcnMgYml0cyBvZiBudW1iZXJcbiAgQk4ucHJvdG90eXBlLm1hc2tuID0gZnVuY3Rpb24gbWFza24gKGJpdHMpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmltYXNrbihiaXRzKTtcbiAgfTtcblxuICAvLyBBZGQgcGxhaW4gbnVtYmVyIGBudW1gIHRvIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuaWFkZG4gPSBmdW5jdGlvbiBpYWRkbiAobnVtKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBudW0gPT09ICdudW1iZXInKTtcbiAgICBhc3NlcnQobnVtIDwgMHg0MDAwMDAwKTtcbiAgICBpZiAobnVtIDwgMCkgcmV0dXJuIHRoaXMuaXN1Ym4oLW51bSk7XG5cbiAgICAvLyBQb3NzaWJsZSBzaWduIGNoYW5nZVxuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICBpZiAodGhpcy5sZW5ndGggPT09IDEgJiYgKHRoaXMud29yZHNbMF0gfCAwKSA8IG51bSkge1xuICAgICAgICB0aGlzLndvcmRzWzBdID0gbnVtIC0gKHRoaXMud29yZHNbMF0gfCAwKTtcbiAgICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgIHRoaXMuaXN1Ym4obnVtKTtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gQWRkIHdpdGhvdXQgY2hlY2tzXG4gICAgcmV0dXJuIHRoaXMuX2lhZGRuKG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9pYWRkbiA9IGZ1bmN0aW9uIF9pYWRkbiAobnVtKSB7XG4gICAgdGhpcy53b3Jkc1swXSArPSBudW07XG5cbiAgICAvLyBDYXJyeVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGggJiYgdGhpcy53b3Jkc1tpXSA+PSAweDQwMDAwMDA7IGkrKykge1xuICAgICAgdGhpcy53b3Jkc1tpXSAtPSAweDQwMDAwMDA7XG4gICAgICBpZiAoaSA9PT0gdGhpcy5sZW5ndGggLSAxKSB7XG4gICAgICAgIHRoaXMud29yZHNbaSArIDFdID0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMud29yZHNbaSArIDFdKys7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMubGVuZ3RoID0gTWF0aC5tYXgodGhpcy5sZW5ndGgsIGkgKyAxKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8vIFN1YnRyYWN0IHBsYWluIG51bWJlciBgbnVtYCBmcm9tIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuaXN1Ym4gPSBmdW5jdGlvbiBpc3VibiAobnVtKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBudW0gPT09ICdudW1iZXInKTtcbiAgICBhc3NlcnQobnVtIDwgMHg0MDAwMDAwKTtcbiAgICBpZiAobnVtIDwgMCkgcmV0dXJuIHRoaXMuaWFkZG4oLW51bSk7XG5cbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgICB0aGlzLmlhZGRuKG51bSk7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHRoaXMud29yZHNbMF0gLT0gbnVtO1xuXG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAxICYmIHRoaXMud29yZHNbMF0gPCAwKSB7XG4gICAgICB0aGlzLndvcmRzWzBdID0gLXRoaXMud29yZHNbMF07XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQ2FycnlcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGggJiYgdGhpcy53b3Jkc1tpXSA8IDA7IGkrKykge1xuICAgICAgICB0aGlzLndvcmRzW2ldICs9IDB4NDAwMDAwMDtcbiAgICAgICAgdGhpcy53b3Jkc1tpICsgMV0gLT0gMTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5hZGRuID0gZnVuY3Rpb24gYWRkbiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pYWRkbihudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5zdWJuID0gZnVuY3Rpb24gc3VibiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pc3VibihudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pYWJzID0gZnVuY3Rpb24gaWFicyAoKSB7XG4gICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuYWJzID0gZnVuY3Rpb24gYWJzICgpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlhYnMoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX2lzaGxuc3VibXVsID0gZnVuY3Rpb24gX2lzaGxuc3VibXVsIChudW0sIG11bCwgc2hpZnQpIHtcbiAgICB2YXIgbGVuID0gbnVtLmxlbmd0aCArIHNoaWZ0O1xuICAgIHZhciBpO1xuXG4gICAgdGhpcy5fZXhwYW5kKGxlbik7XG5cbiAgICB2YXIgdztcbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAoaSA9IDA7IGkgPCBudW0ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHcgPSAodGhpcy53b3Jkc1tpICsgc2hpZnRdIHwgMCkgKyBjYXJyeTtcbiAgICAgIHZhciByaWdodCA9IChudW0ud29yZHNbaV0gfCAwKSAqIG11bDtcbiAgICAgIHcgLT0gcmlnaHQgJiAweDNmZmZmZmY7XG4gICAgICBjYXJyeSA9ICh3ID4+IDI2KSAtICgocmlnaHQgLyAweDQwMDAwMDApIHwgMCk7XG4gICAgICB0aGlzLndvcmRzW2kgKyBzaGlmdF0gPSB3ICYgMHgzZmZmZmZmO1xuICAgIH1cbiAgICBmb3IgKDsgaSA8IHRoaXMubGVuZ3RoIC0gc2hpZnQ7IGkrKykge1xuICAgICAgdyA9ICh0aGlzLndvcmRzW2kgKyBzaGlmdF0gfCAwKSArIGNhcnJ5O1xuICAgICAgY2FycnkgPSB3ID4+IDI2O1xuICAgICAgdGhpcy53b3Jkc1tpICsgc2hpZnRdID0gdyAmIDB4M2ZmZmZmZjtcbiAgICB9XG5cbiAgICBpZiAoY2FycnkgPT09IDApIHJldHVybiB0aGlzLnN0cmlwKCk7XG5cbiAgICAvLyBTdWJ0cmFjdGlvbiBvdmVyZmxvd1xuICAgIGFzc2VydChjYXJyeSA9PT0gLTEpO1xuICAgIGNhcnJ5ID0gMDtcbiAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdyA9IC0odGhpcy53b3Jkc1tpXSB8IDApICsgY2Fycnk7XG4gICAgICBjYXJyeSA9IHcgPj4gMjY7XG4gICAgICB0aGlzLndvcmRzW2ldID0gdyAmIDB4M2ZmZmZmZjtcbiAgICB9XG4gICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5fd29yZERpdiA9IGZ1bmN0aW9uIF93b3JkRGl2IChudW0sIG1vZGUpIHtcbiAgICB2YXIgc2hpZnQgPSB0aGlzLmxlbmd0aCAtIG51bS5sZW5ndGg7XG5cbiAgICB2YXIgYSA9IHRoaXMuY2xvbmUoKTtcbiAgICB2YXIgYiA9IG51bTtcblxuICAgIC8vIE5vcm1hbGl6ZVxuICAgIHZhciBiaGkgPSBiLndvcmRzW2IubGVuZ3RoIC0gMV0gfCAwO1xuICAgIHZhciBiaGlCaXRzID0gdGhpcy5fY291bnRCaXRzKGJoaSk7XG4gICAgc2hpZnQgPSAyNiAtIGJoaUJpdHM7XG4gICAgaWYgKHNoaWZ0ICE9PSAwKSB7XG4gICAgICBiID0gYi51c2hsbihzaGlmdCk7XG4gICAgICBhLml1c2hsbihzaGlmdCk7XG4gICAgICBiaGkgPSBiLndvcmRzW2IubGVuZ3RoIC0gMV0gfCAwO1xuICAgIH1cblxuICAgIC8vIEluaXRpYWxpemUgcXVvdGllbnRcbiAgICB2YXIgbSA9IGEubGVuZ3RoIC0gYi5sZW5ndGg7XG4gICAgdmFyIHE7XG5cbiAgICBpZiAobW9kZSAhPT0gJ21vZCcpIHtcbiAgICAgIHEgPSBuZXcgQk4obnVsbCk7XG4gICAgICBxLmxlbmd0aCA9IG0gKyAxO1xuICAgICAgcS53b3JkcyA9IG5ldyBBcnJheShxLmxlbmd0aCk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcS53b3Jkc1tpXSA9IDA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGRpZmYgPSBhLmNsb25lKCkuX2lzaGxuc3VibXVsKGIsIDEsIG0pO1xuICAgIGlmIChkaWZmLm5lZ2F0aXZlID09PSAwKSB7XG4gICAgICBhID0gZGlmZjtcbiAgICAgIGlmIChxKSB7XG4gICAgICAgIHEud29yZHNbbV0gPSAxO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIGogPSBtIC0gMTsgaiA+PSAwOyBqLS0pIHtcbiAgICAgIHZhciBxaiA9IChhLndvcmRzW2IubGVuZ3RoICsgal0gfCAwKSAqIDB4NDAwMDAwMCArXG4gICAgICAgIChhLndvcmRzW2IubGVuZ3RoICsgaiAtIDFdIHwgMCk7XG5cbiAgICAgIC8vIE5PVEU6IChxaiAvIGJoaSkgaXMgKDB4M2ZmZmZmZiAqIDB4NDAwMDAwMCArIDB4M2ZmZmZmZikgLyAweDIwMDAwMDAgbWF4XG4gICAgICAvLyAoMHg3ZmZmZmZmKVxuICAgICAgcWogPSBNYXRoLm1pbigocWogLyBiaGkpIHwgMCwgMHgzZmZmZmZmKTtcblxuICAgICAgYS5faXNobG5zdWJtdWwoYiwgcWosIGopO1xuICAgICAgd2hpbGUgKGEubmVnYXRpdmUgIT09IDApIHtcbiAgICAgICAgcWotLTtcbiAgICAgICAgYS5uZWdhdGl2ZSA9IDA7XG4gICAgICAgIGEuX2lzaGxuc3VibXVsKGIsIDEsIGopO1xuICAgICAgICBpZiAoIWEuaXNaZXJvKCkpIHtcbiAgICAgICAgICBhLm5lZ2F0aXZlIF49IDE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChxKSB7XG4gICAgICAgIHEud29yZHNbal0gPSBxajtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHEpIHtcbiAgICAgIHEuc3RyaXAoKTtcbiAgICB9XG4gICAgYS5zdHJpcCgpO1xuXG4gICAgLy8gRGVub3JtYWxpemVcbiAgICBpZiAobW9kZSAhPT0gJ2RpdicgJiYgc2hpZnQgIT09IDApIHtcbiAgICAgIGEuaXVzaHJuKHNoaWZ0KTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgZGl2OiBxIHx8IG51bGwsXG4gICAgICBtb2Q6IGFcbiAgICB9O1xuICB9O1xuXG4gIC8vIE5PVEU6IDEpIGBtb2RlYCBjYW4gYmUgc2V0IHRvIGBtb2RgIHRvIHJlcXVlc3QgbW9kIG9ubHksXG4gIC8vICAgICAgIHRvIGBkaXZgIHRvIHJlcXVlc3QgZGl2IG9ubHksIG9yIGJlIGFic2VudCB0b1xuICAvLyAgICAgICByZXF1ZXN0IGJvdGggZGl2ICYgbW9kXG4gIC8vICAgICAgIDIpIGBwb3NpdGl2ZWAgaXMgdHJ1ZSBpZiB1bnNpZ25lZCBtb2QgaXMgcmVxdWVzdGVkXG4gIEJOLnByb3RvdHlwZS5kaXZtb2QgPSBmdW5jdGlvbiBkaXZtb2QgKG51bSwgbW9kZSwgcG9zaXRpdmUpIHtcbiAgICBhc3NlcnQoIW51bS5pc1plcm8oKSk7XG5cbiAgICBpZiAodGhpcy5pc1plcm8oKSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGl2OiBuZXcgQk4oMCksXG4gICAgICAgIG1vZDogbmV3IEJOKDApXG4gICAgICB9O1xuICAgIH1cblxuICAgIHZhciBkaXYsIG1vZCwgcmVzO1xuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwICYmIG51bS5uZWdhdGl2ZSA9PT0gMCkge1xuICAgICAgcmVzID0gdGhpcy5uZWcoKS5kaXZtb2QobnVtLCBtb2RlKTtcblxuICAgICAgaWYgKG1vZGUgIT09ICdtb2QnKSB7XG4gICAgICAgIGRpdiA9IHJlcy5kaXYubmVnKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChtb2RlICE9PSAnZGl2Jykge1xuICAgICAgICBtb2QgPSByZXMubW9kLm5lZygpO1xuICAgICAgICBpZiAocG9zaXRpdmUgJiYgbW9kLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICAgICAgbW9kLmlhZGQobnVtKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXY6IGRpdixcbiAgICAgICAgbW9kOiBtb2RcbiAgICAgIH07XG4gICAgfVxuXG4gICAgaWYgKHRoaXMubmVnYXRpdmUgPT09IDAgJiYgbnVtLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICByZXMgPSB0aGlzLmRpdm1vZChudW0ubmVnKCksIG1vZGUpO1xuXG4gICAgICBpZiAobW9kZSAhPT0gJ21vZCcpIHtcbiAgICAgICAgZGl2ID0gcmVzLmRpdi5uZWcoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGl2OiBkaXYsXG4gICAgICAgIG1vZDogcmVzLm1vZFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAoKHRoaXMubmVnYXRpdmUgJiBudW0ubmVnYXRpdmUpICE9PSAwKSB7XG4gICAgICByZXMgPSB0aGlzLm5lZygpLmRpdm1vZChudW0ubmVnKCksIG1vZGUpO1xuXG4gICAgICBpZiAobW9kZSAhPT0gJ2RpdicpIHtcbiAgICAgICAgbW9kID0gcmVzLm1vZC5uZWcoKTtcbiAgICAgICAgaWYgKHBvc2l0aXZlICYmIG1vZC5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgICAgIG1vZC5pc3ViKG51bSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGl2OiByZXMuZGl2LFxuICAgICAgICBtb2Q6IG1vZFxuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBCb3RoIG51bWJlcnMgYXJlIHBvc2l0aXZlIGF0IHRoaXMgcG9pbnRcblxuICAgIC8vIFN0cmlwIGJvdGggbnVtYmVycyB0byBhcHByb3hpbWF0ZSBzaGlmdCB2YWx1ZVxuICAgIGlmIChudW0ubGVuZ3RoID4gdGhpcy5sZW5ndGggfHwgdGhpcy5jbXAobnVtKSA8IDApIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRpdjogbmV3IEJOKDApLFxuICAgICAgICBtb2Q6IHRoaXNcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gVmVyeSBzaG9ydCByZWR1Y3Rpb25cbiAgICBpZiAobnVtLmxlbmd0aCA9PT0gMSkge1xuICAgICAgaWYgKG1vZGUgPT09ICdkaXYnKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZGl2OiB0aGlzLmRpdm4obnVtLndvcmRzWzBdKSxcbiAgICAgICAgICBtb2Q6IG51bGxcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1vZGUgPT09ICdtb2QnKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZGl2OiBudWxsLFxuICAgICAgICAgIG1vZDogbmV3IEJOKHRoaXMubW9kbihudW0ud29yZHNbMF0pKVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXY6IHRoaXMuZGl2bihudW0ud29yZHNbMF0pLFxuICAgICAgICBtb2Q6IG5ldyBCTih0aGlzLm1vZG4obnVtLndvcmRzWzBdKSlcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3dvcmREaXYobnVtLCBtb2RlKTtcbiAgfTtcblxuICAvLyBGaW5kIGB0aGlzYCAvIGBudW1gXG4gIEJOLnByb3RvdHlwZS5kaXYgPSBmdW5jdGlvbiBkaXYgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmRpdm1vZChudW0sICdkaXYnLCBmYWxzZSkuZGl2O1xuICB9O1xuXG4gIC8vIEZpbmQgYHRoaXNgICUgYG51bWBcbiAgQk4ucHJvdG90eXBlLm1vZCA9IGZ1bmN0aW9uIG1vZCAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuZGl2bW9kKG51bSwgJ21vZCcsIGZhbHNlKS5tb2Q7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnVtb2QgPSBmdW5jdGlvbiB1bW9kIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5kaXZtb2QobnVtLCAnbW9kJywgdHJ1ZSkubW9kO1xuICB9O1xuXG4gIC8vIEZpbmQgUm91bmQoYHRoaXNgIC8gYG51bWApXG4gIEJOLnByb3RvdHlwZS5kaXZSb3VuZCA9IGZ1bmN0aW9uIGRpdlJvdW5kIChudW0pIHtcbiAgICB2YXIgZG0gPSB0aGlzLmRpdm1vZChudW0pO1xuXG4gICAgLy8gRmFzdCBjYXNlIC0gZXhhY3QgZGl2aXNpb25cbiAgICBpZiAoZG0ubW9kLmlzWmVybygpKSByZXR1cm4gZG0uZGl2O1xuXG4gICAgdmFyIG1vZCA9IGRtLmRpdi5uZWdhdGl2ZSAhPT0gMCA/IGRtLm1vZC5pc3ViKG51bSkgOiBkbS5tb2Q7XG5cbiAgICB2YXIgaGFsZiA9IG51bS51c2hybigxKTtcbiAgICB2YXIgcjIgPSBudW0uYW5kbG4oMSk7XG4gICAgdmFyIGNtcCA9IG1vZC5jbXAoaGFsZik7XG5cbiAgICAvLyBSb3VuZCBkb3duXG4gICAgaWYgKGNtcCA8IDAgfHwgcjIgPT09IDEgJiYgY21wID09PSAwKSByZXR1cm4gZG0uZGl2O1xuXG4gICAgLy8gUm91bmQgdXBcbiAgICByZXR1cm4gZG0uZGl2Lm5lZ2F0aXZlICE9PSAwID8gZG0uZGl2LmlzdWJuKDEpIDogZG0uZGl2LmlhZGRuKDEpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5tb2RuID0gZnVuY3Rpb24gbW9kbiAobnVtKSB7XG4gICAgYXNzZXJ0KG51bSA8PSAweDNmZmZmZmYpO1xuICAgIHZhciBwID0gKDEgPDwgMjYpICUgbnVtO1xuXG4gICAgdmFyIGFjYyA9IDA7XG4gICAgZm9yICh2YXIgaSA9IHRoaXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIGFjYyA9IChwICogYWNjICsgKHRoaXMud29yZHNbaV0gfCAwKSkgJSBudW07XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjYztcbiAgfTtcblxuICAvLyBJbi1wbGFjZSBkaXZpc2lvbiBieSBudW1iZXJcbiAgQk4ucHJvdG90eXBlLmlkaXZuID0gZnVuY3Rpb24gaWRpdm4gKG51bSkge1xuICAgIGFzc2VydChudW0gPD0gMHgzZmZmZmZmKTtcblxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IHRoaXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciB3ID0gKHRoaXMud29yZHNbaV0gfCAwKSArIGNhcnJ5ICogMHg0MDAwMDAwO1xuICAgICAgdGhpcy53b3Jkc1tpXSA9ICh3IC8gbnVtKSB8IDA7XG4gICAgICBjYXJyeSA9IHcgJSBudW07XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZGl2biA9IGZ1bmN0aW9uIGRpdm4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaWRpdm4obnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZWdjZCA9IGZ1bmN0aW9uIGVnY2QgKHApIHtcbiAgICBhc3NlcnQocC5uZWdhdGl2ZSA9PT0gMCk7XG4gICAgYXNzZXJ0KCFwLmlzWmVybygpKTtcblxuICAgIHZhciB4ID0gdGhpcztcbiAgICB2YXIgeSA9IHAuY2xvbmUoKTtcblxuICAgIGlmICh4Lm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICB4ID0geC51bW9kKHApO1xuICAgIH0gZWxzZSB7XG4gICAgICB4ID0geC5jbG9uZSgpO1xuICAgIH1cblxuICAgIC8vIEEgKiB4ICsgQiAqIHkgPSB4XG4gICAgdmFyIEEgPSBuZXcgQk4oMSk7XG4gICAgdmFyIEIgPSBuZXcgQk4oMCk7XG5cbiAgICAvLyBDICogeCArIEQgKiB5ID0geVxuICAgIHZhciBDID0gbmV3IEJOKDApO1xuICAgIHZhciBEID0gbmV3IEJOKDEpO1xuXG4gICAgdmFyIGcgPSAwO1xuXG4gICAgd2hpbGUgKHguaXNFdmVuKCkgJiYgeS5pc0V2ZW4oKSkge1xuICAgICAgeC5pdXNocm4oMSk7XG4gICAgICB5Lml1c2hybigxKTtcbiAgICAgICsrZztcbiAgICB9XG5cbiAgICB2YXIgeXAgPSB5LmNsb25lKCk7XG4gICAgdmFyIHhwID0geC5jbG9uZSgpO1xuXG4gICAgd2hpbGUgKCF4LmlzWmVybygpKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgaW0gPSAxOyAoeC53b3Jkc1swXSAmIGltKSA9PT0gMCAmJiBpIDwgMjY7ICsraSwgaW0gPDw9IDEpO1xuICAgICAgaWYgKGkgPiAwKSB7XG4gICAgICAgIHguaXVzaHJuKGkpO1xuICAgICAgICB3aGlsZSAoaS0tID4gMCkge1xuICAgICAgICAgIGlmIChBLmlzT2RkKCkgfHwgQi5pc09kZCgpKSB7XG4gICAgICAgICAgICBBLmlhZGQoeXApO1xuICAgICAgICAgICAgQi5pc3ViKHhwKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBBLml1c2hybigxKTtcbiAgICAgICAgICBCLml1c2hybigxKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBqID0gMCwgam0gPSAxOyAoeS53b3Jkc1swXSAmIGptKSA9PT0gMCAmJiBqIDwgMjY7ICsraiwgam0gPDw9IDEpO1xuICAgICAgaWYgKGogPiAwKSB7XG4gICAgICAgIHkuaXVzaHJuKGopO1xuICAgICAgICB3aGlsZSAoai0tID4gMCkge1xuICAgICAgICAgIGlmIChDLmlzT2RkKCkgfHwgRC5pc09kZCgpKSB7XG4gICAgICAgICAgICBDLmlhZGQoeXApO1xuICAgICAgICAgICAgRC5pc3ViKHhwKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBDLml1c2hybigxKTtcbiAgICAgICAgICBELml1c2hybigxKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoeC5jbXAoeSkgPj0gMCkge1xuICAgICAgICB4LmlzdWIoeSk7XG4gICAgICAgIEEuaXN1YihDKTtcbiAgICAgICAgQi5pc3ViKEQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgeS5pc3ViKHgpO1xuICAgICAgICBDLmlzdWIoQSk7XG4gICAgICAgIEQuaXN1YihCKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgYTogQyxcbiAgICAgIGI6IEQsXG4gICAgICBnY2Q6IHkuaXVzaGxuKGcpXG4gICAgfTtcbiAgfTtcblxuICAvLyBUaGlzIGlzIHJlZHVjZWQgaW5jYXJuYXRpb24gb2YgdGhlIGJpbmFyeSBFRUFcbiAgLy8gYWJvdmUsIGRlc2lnbmF0ZWQgdG8gaW52ZXJ0IG1lbWJlcnMgb2YgdGhlXG4gIC8vIF9wcmltZV8gZmllbGRzIEYocCkgYXQgYSBtYXhpbWFsIHNwZWVkXG4gIEJOLnByb3RvdHlwZS5faW52bXAgPSBmdW5jdGlvbiBfaW52bXAgKHApIHtcbiAgICBhc3NlcnQocC5uZWdhdGl2ZSA9PT0gMCk7XG4gICAgYXNzZXJ0KCFwLmlzWmVybygpKTtcblxuICAgIHZhciBhID0gdGhpcztcbiAgICB2YXIgYiA9IHAuY2xvbmUoKTtcblxuICAgIGlmIChhLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICBhID0gYS51bW9kKHApO1xuICAgIH0gZWxzZSB7XG4gICAgICBhID0gYS5jbG9uZSgpO1xuICAgIH1cblxuICAgIHZhciB4MSA9IG5ldyBCTigxKTtcbiAgICB2YXIgeDIgPSBuZXcgQk4oMCk7XG5cbiAgICB2YXIgZGVsdGEgPSBiLmNsb25lKCk7XG5cbiAgICB3aGlsZSAoYS5jbXBuKDEpID4gMCAmJiBiLmNtcG4oMSkgPiAwKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgaW0gPSAxOyAoYS53b3Jkc1swXSAmIGltKSA9PT0gMCAmJiBpIDwgMjY7ICsraSwgaW0gPDw9IDEpO1xuICAgICAgaWYgKGkgPiAwKSB7XG4gICAgICAgIGEuaXVzaHJuKGkpO1xuICAgICAgICB3aGlsZSAoaS0tID4gMCkge1xuICAgICAgICAgIGlmICh4MS5pc09kZCgpKSB7XG4gICAgICAgICAgICB4MS5pYWRkKGRlbHRhKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB4MS5pdXNocm4oMSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaiA9IDAsIGptID0gMTsgKGIud29yZHNbMF0gJiBqbSkgPT09IDAgJiYgaiA8IDI2OyArK2osIGptIDw8PSAxKTtcbiAgICAgIGlmIChqID4gMCkge1xuICAgICAgICBiLml1c2hybihqKTtcbiAgICAgICAgd2hpbGUgKGotLSA+IDApIHtcbiAgICAgICAgICBpZiAoeDIuaXNPZGQoKSkge1xuICAgICAgICAgICAgeDIuaWFkZChkZWx0YSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgeDIuaXVzaHJuKDEpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChhLmNtcChiKSA+PSAwKSB7XG4gICAgICAgIGEuaXN1YihiKTtcbiAgICAgICAgeDEuaXN1Yih4Mik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBiLmlzdWIoYSk7XG4gICAgICAgIHgyLmlzdWIoeDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciByZXM7XG4gICAgaWYgKGEuY21wbigxKSA9PT0gMCkge1xuICAgICAgcmVzID0geDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlcyA9IHgyO1xuICAgIH1cblxuICAgIGlmIChyZXMuY21wbigwKSA8IDApIHtcbiAgICAgIHJlcy5pYWRkKHApO1xuICAgIH1cblxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmdjZCA9IGZ1bmN0aW9uIGdjZCAobnVtKSB7XG4gICAgaWYgKHRoaXMuaXNaZXJvKCkpIHJldHVybiBudW0uYWJzKCk7XG4gICAgaWYgKG51bS5pc1plcm8oKSkgcmV0dXJuIHRoaXMuYWJzKCk7XG5cbiAgICB2YXIgYSA9IHRoaXMuY2xvbmUoKTtcbiAgICB2YXIgYiA9IG51bS5jbG9uZSgpO1xuICAgIGEubmVnYXRpdmUgPSAwO1xuICAgIGIubmVnYXRpdmUgPSAwO1xuXG4gICAgLy8gUmVtb3ZlIGNvbW1vbiBmYWN0b3Igb2YgdHdvXG4gICAgZm9yICh2YXIgc2hpZnQgPSAwOyBhLmlzRXZlbigpICYmIGIuaXNFdmVuKCk7IHNoaWZ0KyspIHtcbiAgICAgIGEuaXVzaHJuKDEpO1xuICAgICAgYi5pdXNocm4oMSk7XG4gICAgfVxuXG4gICAgZG8ge1xuICAgICAgd2hpbGUgKGEuaXNFdmVuKCkpIHtcbiAgICAgICAgYS5pdXNocm4oMSk7XG4gICAgICB9XG4gICAgICB3aGlsZSAoYi5pc0V2ZW4oKSkge1xuICAgICAgICBiLml1c2hybigxKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHIgPSBhLmNtcChiKTtcbiAgICAgIGlmIChyIDwgMCkge1xuICAgICAgICAvLyBTd2FwIGBhYCBhbmQgYGJgIHRvIG1ha2UgYGFgIGFsd2F5cyBiaWdnZXIgdGhhbiBgYmBcbiAgICAgICAgdmFyIHQgPSBhO1xuICAgICAgICBhID0gYjtcbiAgICAgICAgYiA9IHQ7XG4gICAgICB9IGVsc2UgaWYgKHIgPT09IDAgfHwgYi5jbXBuKDEpID09PSAwKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBhLmlzdWIoYik7XG4gICAgfSB3aGlsZSAodHJ1ZSk7XG5cbiAgICByZXR1cm4gYi5pdXNobG4oc2hpZnQpO1xuICB9O1xuXG4gIC8vIEludmVydCBudW1iZXIgaW4gdGhlIGZpZWxkIEYobnVtKVxuICBCTi5wcm90b3R5cGUuaW52bSA9IGZ1bmN0aW9uIGludm0gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmVnY2QobnVtKS5hLnVtb2QobnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNFdmVuID0gZnVuY3Rpb24gaXNFdmVuICgpIHtcbiAgICByZXR1cm4gKHRoaXMud29yZHNbMF0gJiAxKSA9PT0gMDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNPZGQgPSBmdW5jdGlvbiBpc09kZCAoKSB7XG4gICAgcmV0dXJuICh0aGlzLndvcmRzWzBdICYgMSkgPT09IDE7XG4gIH07XG5cbiAgLy8gQW5kIGZpcnN0IHdvcmQgYW5kIG51bVxuICBCTi5wcm90b3R5cGUuYW5kbG4gPSBmdW5jdGlvbiBhbmRsbiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMud29yZHNbMF0gJiBudW07XG4gIH07XG5cbiAgLy8gSW5jcmVtZW50IGF0IHRoZSBiaXQgcG9zaXRpb24gaW4tbGluZVxuICBCTi5wcm90b3R5cGUuYmluY24gPSBmdW5jdGlvbiBiaW5jbiAoYml0KSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBiaXQgPT09ICdudW1iZXInKTtcbiAgICB2YXIgciA9IGJpdCAlIDI2O1xuICAgIHZhciBzID0gKGJpdCAtIHIpIC8gMjY7XG4gICAgdmFyIHEgPSAxIDw8IHI7XG5cbiAgICAvLyBGYXN0IGNhc2U6IGJpdCBpcyBtdWNoIGhpZ2hlciB0aGFuIGFsbCBleGlzdGluZyB3b3Jkc1xuICAgIGlmICh0aGlzLmxlbmd0aCA8PSBzKSB7XG4gICAgICB0aGlzLl9leHBhbmQocyArIDEpO1xuICAgICAgdGhpcy53b3Jkc1tzXSB8PSBxO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gQWRkIGJpdCBhbmQgcHJvcGFnYXRlLCBpZiBuZWVkZWRcbiAgICB2YXIgY2FycnkgPSBxO1xuICAgIGZvciAodmFyIGkgPSBzOyBjYXJyeSAhPT0gMCAmJiBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHcgPSB0aGlzLndvcmRzW2ldIHwgMDtcbiAgICAgIHcgKz0gY2Fycnk7XG4gICAgICBjYXJyeSA9IHcgPj4+IDI2O1xuICAgICAgdyAmPSAweDNmZmZmZmY7XG4gICAgICB0aGlzLndvcmRzW2ldID0gdztcbiAgICB9XG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gY2Fycnk7XG4gICAgICB0aGlzLmxlbmd0aCsrO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNaZXJvID0gZnVuY3Rpb24gaXNaZXJvICgpIHtcbiAgICByZXR1cm4gdGhpcy5sZW5ndGggPT09IDEgJiYgdGhpcy53b3Jkc1swXSA9PT0gMDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuY21wbiA9IGZ1bmN0aW9uIGNtcG4gKG51bSkge1xuICAgIHZhciBuZWdhdGl2ZSA9IG51bSA8IDA7XG5cbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCAmJiAhbmVnYXRpdmUpIHJldHVybiAtMTtcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSA9PT0gMCAmJiBuZWdhdGl2ZSkgcmV0dXJuIDE7XG5cbiAgICB0aGlzLnN0cmlwKCk7XG5cbiAgICB2YXIgcmVzO1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IDEpIHtcbiAgICAgIHJlcyA9IDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChuZWdhdGl2ZSkge1xuICAgICAgICBudW0gPSAtbnVtO1xuICAgICAgfVxuXG4gICAgICBhc3NlcnQobnVtIDw9IDB4M2ZmZmZmZiwgJ051bWJlciBpcyB0b28gYmlnJyk7XG5cbiAgICAgIHZhciB3ID0gdGhpcy53b3Jkc1swXSB8IDA7XG4gICAgICByZXMgPSB3ID09PSBudW0gPyAwIDogdyA8IG51bSA/IC0xIDogMTtcbiAgICB9XG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHJldHVybiAtcmVzIHwgMDtcbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIC8vIENvbXBhcmUgdHdvIG51bWJlcnMgYW5kIHJldHVybjpcbiAgLy8gMSAtIGlmIGB0aGlzYCA+IGBudW1gXG4gIC8vIDAgLSBpZiBgdGhpc2AgPT0gYG51bWBcbiAgLy8gLTEgLSBpZiBgdGhpc2AgPCBgbnVtYFxuICBCTi5wcm90b3R5cGUuY21wID0gZnVuY3Rpb24gY21wIChudW0pIHtcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCAmJiBudW0ubmVnYXRpdmUgPT09IDApIHJldHVybiAtMTtcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSA9PT0gMCAmJiBudW0ubmVnYXRpdmUgIT09IDApIHJldHVybiAxO1xuXG4gICAgdmFyIHJlcyA9IHRoaXMudWNtcChudW0pO1xuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSByZXR1cm4gLXJlcyB8IDA7XG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICAvLyBVbnNpZ25lZCBjb21wYXJpc29uXG4gIEJOLnByb3RvdHlwZS51Y21wID0gZnVuY3Rpb24gdWNtcCAobnVtKSB7XG4gICAgLy8gQXQgdGhpcyBwb2ludCBib3RoIG51bWJlcnMgaGF2ZSB0aGUgc2FtZSBzaWduXG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIDE7XG4gICAgaWYgKHRoaXMubGVuZ3RoIDwgbnVtLmxlbmd0aCkgcmV0dXJuIC0xO1xuXG4gICAgdmFyIHJlcyA9IDA7XG4gICAgZm9yICh2YXIgaSA9IHRoaXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciBhID0gdGhpcy53b3Jkc1tpXSB8IDA7XG4gICAgICB2YXIgYiA9IG51bS53b3Jkc1tpXSB8IDA7XG5cbiAgICAgIGlmIChhID09PSBiKSBjb250aW51ZTtcbiAgICAgIGlmIChhIDwgYikge1xuICAgICAgICByZXMgPSAtMTtcbiAgICAgIH0gZWxzZSBpZiAoYSA+IGIpIHtcbiAgICAgICAgcmVzID0gMTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5ndG4gPSBmdW5jdGlvbiBndG4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcG4obnVtKSA9PT0gMTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZ3QgPSBmdW5jdGlvbiBndCAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wKG51bSkgPT09IDE7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmd0ZW4gPSBmdW5jdGlvbiBndGVuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXBuKG51bSkgPj0gMDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZ3RlID0gZnVuY3Rpb24gZ3RlIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXAobnVtKSA+PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5sdG4gPSBmdW5jdGlvbiBsdG4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcG4obnVtKSA9PT0gLTE7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmx0ID0gZnVuY3Rpb24gbHQgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcChudW0pID09PSAtMTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUubHRlbiA9IGZ1bmN0aW9uIGx0ZW4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcG4obnVtKSA8PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5sdGUgPSBmdW5jdGlvbiBsdGUgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcChudW0pIDw9IDA7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmVxbiA9IGZ1bmN0aW9uIGVxbiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wbihudW0pID09PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5lcSA9IGZ1bmN0aW9uIGVxIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXAobnVtKSA9PT0gMDtcbiAgfTtcblxuICAvL1xuICAvLyBBIHJlZHVjZSBjb250ZXh0LCBjb3VsZCBiZSB1c2luZyBtb250Z29tZXJ5IG9yIHNvbWV0aGluZyBiZXR0ZXIsIGRlcGVuZGluZ1xuICAvLyBvbiB0aGUgYG1gIGl0c2VsZi5cbiAgLy9cbiAgQk4ucmVkID0gZnVuY3Rpb24gcmVkIChudW0pIHtcbiAgICByZXR1cm4gbmV3IFJlZChudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b1JlZCA9IGZ1bmN0aW9uIHRvUmVkIChjdHgpIHtcbiAgICBhc3NlcnQoIXRoaXMucmVkLCAnQWxyZWFkeSBhIG51bWJlciBpbiByZWR1Y3Rpb24gY29udGV4dCcpO1xuICAgIGFzc2VydCh0aGlzLm5lZ2F0aXZlID09PSAwLCAncmVkIHdvcmtzIG9ubHkgd2l0aCBwb3NpdGl2ZXMnKTtcbiAgICByZXR1cm4gY3R4LmNvbnZlcnRUbyh0aGlzKS5fZm9yY2VSZWQoY3R4KTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZnJvbVJlZCA9IGZ1bmN0aW9uIGZyb21SZWQgKCkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ2Zyb21SZWQgd29ya3Mgb25seSB3aXRoIG51bWJlcnMgaW4gcmVkdWN0aW9uIGNvbnRleHQnKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuY29udmVydEZyb20odGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9mb3JjZVJlZCA9IGZ1bmN0aW9uIF9mb3JjZVJlZCAoY3R4KSB7XG4gICAgdGhpcy5yZWQgPSBjdHg7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmZvcmNlUmVkID0gZnVuY3Rpb24gZm9yY2VSZWQgKGN0eCkge1xuICAgIGFzc2VydCghdGhpcy5yZWQsICdBbHJlYWR5IGEgbnVtYmVyIGluIHJlZHVjdGlvbiBjb250ZXh0Jyk7XG4gICAgcmV0dXJuIHRoaXMuX2ZvcmNlUmVkKGN0eCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZEFkZCA9IGZ1bmN0aW9uIHJlZEFkZCAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkQWRkIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHJldHVybiB0aGlzLnJlZC5hZGQodGhpcywgbnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkSUFkZCA9IGZ1bmN0aW9uIHJlZElBZGQgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZElBZGQgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmlhZGQodGhpcywgbnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkU3ViID0gZnVuY3Rpb24gcmVkU3ViIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRTdWIgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLnN1Yih0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRJU3ViID0gZnVuY3Rpb24gcmVkSVN1YiAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkSVN1YiB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuaXN1Yih0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRTaGwgPSBmdW5jdGlvbiByZWRTaGwgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZFNobCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuc2hsKHRoaXMsIG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZE11bCA9IGZ1bmN0aW9uIHJlZE11bCAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkTXVsIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkyKHRoaXMsIG51bSk7XG4gICAgcmV0dXJuIHRoaXMucmVkLm11bCh0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRJTXVsID0gZnVuY3Rpb24gcmVkSU11bCAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkTXVsIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkyKHRoaXMsIG51bSk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmltdWwodGhpcywgbnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkU3FyID0gZnVuY3Rpb24gcmVkU3FyICgpIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRTcXIgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLnNxcih0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkSVNxciA9IGZ1bmN0aW9uIHJlZElTcXIgKCkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZElTcXIgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmlzcXIodGhpcyk7XG4gIH07XG5cbiAgLy8gU3F1YXJlIHJvb3Qgb3ZlciBwXG4gIEJOLnByb3RvdHlwZS5yZWRTcXJ0ID0gZnVuY3Rpb24gcmVkU3FydCAoKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkU3FydCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuc3FydCh0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkSW52bSA9IGZ1bmN0aW9uIHJlZEludm0gKCkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZEludm0gd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmludm0odGhpcyk7XG4gIH07XG5cbiAgLy8gUmV0dXJuIG5lZ2F0aXZlIGNsb25lIG9mIGB0aGlzYCAlIGByZWQgbW9kdWxvYFxuICBCTi5wcm90b3R5cGUucmVkTmVnID0gZnVuY3Rpb24gcmVkTmVnICgpIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWROZWcgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLm5lZyh0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkUG93ID0gZnVuY3Rpb24gcmVkUG93IChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQgJiYgIW51bS5yZWQsICdyZWRQb3cobm9ybWFsTnVtKScpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkxKHRoaXMpO1xuICAgIHJldHVybiB0aGlzLnJlZC5wb3codGhpcywgbnVtKTtcbiAgfTtcblxuICAvLyBQcmltZSBudW1iZXJzIHdpdGggZWZmaWNpZW50IHJlZHVjdGlvblxuICB2YXIgcHJpbWVzID0ge1xuICAgIGsyNTY6IG51bGwsXG4gICAgcDIyNDogbnVsbCxcbiAgICBwMTkyOiBudWxsLFxuICAgIHAyNTUxOTogbnVsbFxuICB9O1xuXG4gIC8vIFBzZXVkby1NZXJzZW5uZSBwcmltZVxuICBmdW5jdGlvbiBNUHJpbWUgKG5hbWUsIHApIHtcbiAgICAvLyBQID0gMiBeIE4gLSBLXG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB0aGlzLnAgPSBuZXcgQk4ocCwgMTYpO1xuICAgIHRoaXMubiA9IHRoaXMucC5iaXRMZW5ndGgoKTtcbiAgICB0aGlzLmsgPSBuZXcgQk4oMSkuaXVzaGxuKHRoaXMubikuaXN1Yih0aGlzLnApO1xuXG4gICAgdGhpcy50bXAgPSB0aGlzLl90bXAoKTtcbiAgfVxuXG4gIE1QcmltZS5wcm90b3R5cGUuX3RtcCA9IGZ1bmN0aW9uIF90bXAgKCkge1xuICAgIHZhciB0bXAgPSBuZXcgQk4obnVsbCk7XG4gICAgdG1wLndvcmRzID0gbmV3IEFycmF5KE1hdGguY2VpbCh0aGlzLm4gLyAxMykpO1xuICAgIHJldHVybiB0bXA7XG4gIH07XG5cbiAgTVByaW1lLnByb3RvdHlwZS5pcmVkdWNlID0gZnVuY3Rpb24gaXJlZHVjZSAobnVtKSB7XG4gICAgLy8gQXNzdW1lcyB0aGF0IGBudW1gIGlzIGxlc3MgdGhhbiBgUF4yYFxuICAgIC8vIG51bSA9IEhJICogKDIgXiBOIC0gSykgKyBISSAqIEsgKyBMTyA9IEhJICogSyArIExPIChtb2QgUClcbiAgICB2YXIgciA9IG51bTtcbiAgICB2YXIgcmxlbjtcblxuICAgIGRvIHtcbiAgICAgIHRoaXMuc3BsaXQociwgdGhpcy50bXApO1xuICAgICAgciA9IHRoaXMuaW11bEsocik7XG4gICAgICByID0gci5pYWRkKHRoaXMudG1wKTtcbiAgICAgIHJsZW4gPSByLmJpdExlbmd0aCgpO1xuICAgIH0gd2hpbGUgKHJsZW4gPiB0aGlzLm4pO1xuXG4gICAgdmFyIGNtcCA9IHJsZW4gPCB0aGlzLm4gPyAtMSA6IHIudWNtcCh0aGlzLnApO1xuICAgIGlmIChjbXAgPT09IDApIHtcbiAgICAgIHIud29yZHNbMF0gPSAwO1xuICAgICAgci5sZW5ndGggPSAxO1xuICAgIH0gZWxzZSBpZiAoY21wID4gMCkge1xuICAgICAgci5pc3ViKHRoaXMucCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHIuc3RyaXAoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcjtcbiAgfTtcblxuICBNUHJpbWUucHJvdG90eXBlLnNwbGl0ID0gZnVuY3Rpb24gc3BsaXQgKGlucHV0LCBvdXQpIHtcbiAgICBpbnB1dC5pdXNocm4odGhpcy5uLCAwLCBvdXQpO1xuICB9O1xuXG4gIE1QcmltZS5wcm90b3R5cGUuaW11bEsgPSBmdW5jdGlvbiBpbXVsSyAobnVtKSB7XG4gICAgcmV0dXJuIG51bS5pbXVsKHRoaXMuayk7XG4gIH07XG5cbiAgZnVuY3Rpb24gSzI1NiAoKSB7XG4gICAgTVByaW1lLmNhbGwoXG4gICAgICB0aGlzLFxuICAgICAgJ2syNTYnLFxuICAgICAgJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZlIGZmZmZmYzJmJyk7XG4gIH1cbiAgaW5oZXJpdHMoSzI1NiwgTVByaW1lKTtcblxuICBLMjU2LnByb3RvdHlwZS5zcGxpdCA9IGZ1bmN0aW9uIHNwbGl0IChpbnB1dCwgb3V0cHV0KSB7XG4gICAgLy8gMjU2ID0gOSAqIDI2ICsgMjJcbiAgICB2YXIgbWFzayA9IDB4M2ZmZmZmO1xuXG4gICAgdmFyIG91dExlbiA9IE1hdGgubWluKGlucHV0Lmxlbmd0aCwgOSk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvdXRMZW47IGkrKykge1xuICAgICAgb3V0cHV0LndvcmRzW2ldID0gaW5wdXQud29yZHNbaV07XG4gICAgfVxuICAgIG91dHB1dC5sZW5ndGggPSBvdXRMZW47XG5cbiAgICBpZiAoaW5wdXQubGVuZ3RoIDw9IDkpIHtcbiAgICAgIGlucHV0LndvcmRzWzBdID0gMDtcbiAgICAgIGlucHV0Lmxlbmd0aCA9IDE7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gU2hpZnQgYnkgOSBsaW1ic1xuICAgIHZhciBwcmV2ID0gaW5wdXQud29yZHNbOV07XG4gICAgb3V0cHV0LndvcmRzW291dHB1dC5sZW5ndGgrK10gPSBwcmV2ICYgbWFzaztcblxuICAgIGZvciAoaSA9IDEwOyBpIDwgaW5wdXQubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBuZXh0ID0gaW5wdXQud29yZHNbaV0gfCAwO1xuICAgICAgaW5wdXQud29yZHNbaSAtIDEwXSA9ICgobmV4dCAmIG1hc2spIDw8IDQpIHwgKHByZXYgPj4+IDIyKTtcbiAgICAgIHByZXYgPSBuZXh0O1xuICAgIH1cbiAgICBwcmV2ID4+Pj0gMjI7XG4gICAgaW5wdXQud29yZHNbaSAtIDEwXSA9IHByZXY7XG4gICAgaWYgKHByZXYgPT09IDAgJiYgaW5wdXQubGVuZ3RoID4gMTApIHtcbiAgICAgIGlucHV0Lmxlbmd0aCAtPSAxMDtcbiAgICB9IGVsc2Uge1xuICAgICAgaW5wdXQubGVuZ3RoIC09IDk7XG4gICAgfVxuICB9O1xuXG4gIEsyNTYucHJvdG90eXBlLmltdWxLID0gZnVuY3Rpb24gaW11bEsgKG51bSkge1xuICAgIC8vIEsgPSAweDEwMDAwMDNkMSA9IFsgMHg0MCwgMHgzZDEgXVxuICAgIG51bS53b3Jkc1tudW0ubGVuZ3RoXSA9IDA7XG4gICAgbnVtLndvcmRzW251bS5sZW5ndGggKyAxXSA9IDA7XG4gICAgbnVtLmxlbmd0aCArPSAyO1xuXG4gICAgLy8gYm91bmRlZCBhdDogMHg0MCAqIDB4M2ZmZmZmZiArIDB4M2QwID0gMHgxMDAwMDAzOTBcbiAgICB2YXIgbG8gPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdyA9IG51bS53b3Jkc1tpXSB8IDA7XG4gICAgICBsbyArPSB3ICogMHgzZDE7XG4gICAgICBudW0ud29yZHNbaV0gPSBsbyAmIDB4M2ZmZmZmZjtcbiAgICAgIGxvID0gdyAqIDB4NDAgKyAoKGxvIC8gMHg0MDAwMDAwKSB8IDApO1xuICAgIH1cblxuICAgIC8vIEZhc3QgbGVuZ3RoIHJlZHVjdGlvblxuICAgIGlmIChudW0ud29yZHNbbnVtLmxlbmd0aCAtIDFdID09PSAwKSB7XG4gICAgICBudW0ubGVuZ3RoLS07XG4gICAgICBpZiAobnVtLndvcmRzW251bS5sZW5ndGggLSAxXSA9PT0gMCkge1xuICAgICAgICBudW0ubGVuZ3RoLS07XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudW07XG4gIH07XG5cbiAgZnVuY3Rpb24gUDIyNCAoKSB7XG4gICAgTVByaW1lLmNhbGwoXG4gICAgICB0aGlzLFxuICAgICAgJ3AyMjQnLFxuICAgICAgJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIDAwMDAwMDAwIDAwMDAwMDAwIDAwMDAwMDAxJyk7XG4gIH1cbiAgaW5oZXJpdHMoUDIyNCwgTVByaW1lKTtcblxuICBmdW5jdGlvbiBQMTkyICgpIHtcbiAgICBNUHJpbWUuY2FsbChcbiAgICAgIHRoaXMsXG4gICAgICAncDE5MicsXG4gICAgICAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmUgZmZmZmZmZmYgZmZmZmZmZmYnKTtcbiAgfVxuICBpbmhlcml0cyhQMTkyLCBNUHJpbWUpO1xuXG4gIGZ1bmN0aW9uIFAyNTUxOSAoKSB7XG4gICAgLy8gMiBeIDI1NSAtIDE5XG4gICAgTVByaW1lLmNhbGwoXG4gICAgICB0aGlzLFxuICAgICAgJzI1NTE5JyxcbiAgICAgICc3ZmZmZmZmZmZmZmZmZmZmIGZmZmZmZmZmZmZmZmZmZmYgZmZmZmZmZmZmZmZmZmZmZiBmZmZmZmZmZmZmZmZmZmVkJyk7XG4gIH1cbiAgaW5oZXJpdHMoUDI1NTE5LCBNUHJpbWUpO1xuXG4gIFAyNTUxOS5wcm90b3R5cGUuaW11bEsgPSBmdW5jdGlvbiBpbXVsSyAobnVtKSB7XG4gICAgLy8gSyA9IDB4MTNcbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaGkgPSAobnVtLndvcmRzW2ldIHwgMCkgKiAweDEzICsgY2Fycnk7XG4gICAgICB2YXIgbG8gPSBoaSAmIDB4M2ZmZmZmZjtcbiAgICAgIGhpID4+Pj0gMjY7XG5cbiAgICAgIG51bS53b3Jkc1tpXSA9IGxvO1xuICAgICAgY2FycnkgPSBoaTtcbiAgICB9XG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICBudW0ud29yZHNbbnVtLmxlbmd0aCsrXSA9IGNhcnJ5O1xuICAgIH1cbiAgICByZXR1cm4gbnVtO1xuICB9O1xuXG4gIC8vIEV4cG9ydGVkIG1vc3RseSBmb3IgdGVzdGluZyBwdXJwb3NlcywgdXNlIHBsYWluIG5hbWUgaW5zdGVhZFxuICBCTi5fcHJpbWUgPSBmdW5jdGlvbiBwcmltZSAobmFtZSkge1xuICAgIC8vIENhY2hlZCB2ZXJzaW9uIG9mIHByaW1lXG4gICAgaWYgKHByaW1lc1tuYW1lXSkgcmV0dXJuIHByaW1lc1tuYW1lXTtcblxuICAgIHZhciBwcmltZTtcbiAgICBpZiAobmFtZSA9PT0gJ2syNTYnKSB7XG4gICAgICBwcmltZSA9IG5ldyBLMjU2KCk7XG4gICAgfSBlbHNlIGlmIChuYW1lID09PSAncDIyNCcpIHtcbiAgICAgIHByaW1lID0gbmV3IFAyMjQoKTtcbiAgICB9IGVsc2UgaWYgKG5hbWUgPT09ICdwMTkyJykge1xuICAgICAgcHJpbWUgPSBuZXcgUDE5MigpO1xuICAgIH0gZWxzZSBpZiAobmFtZSA9PT0gJ3AyNTUxOScpIHtcbiAgICAgIHByaW1lID0gbmV3IFAyNTUxOSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gcHJpbWUgJyArIG5hbWUpO1xuICAgIH1cbiAgICBwcmltZXNbbmFtZV0gPSBwcmltZTtcblxuICAgIHJldHVybiBwcmltZTtcbiAgfTtcblxuICAvL1xuICAvLyBCYXNlIHJlZHVjdGlvbiBlbmdpbmVcbiAgLy9cbiAgZnVuY3Rpb24gUmVkIChtKSB7XG4gICAgaWYgKHR5cGVvZiBtID09PSAnc3RyaW5nJykge1xuICAgICAgdmFyIHByaW1lID0gQk4uX3ByaW1lKG0pO1xuICAgICAgdGhpcy5tID0gcHJpbWUucDtcbiAgICAgIHRoaXMucHJpbWUgPSBwcmltZTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXNzZXJ0KG0uZ3RuKDEpLCAnbW9kdWx1cyBtdXN0IGJlIGdyZWF0ZXIgdGhhbiAxJyk7XG4gICAgICB0aGlzLm0gPSBtO1xuICAgICAgdGhpcy5wcmltZSA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgUmVkLnByb3RvdHlwZS5fdmVyaWZ5MSA9IGZ1bmN0aW9uIF92ZXJpZnkxIChhKSB7XG4gICAgYXNzZXJ0KGEubmVnYXRpdmUgPT09IDAsICdyZWQgd29ya3Mgb25seSB3aXRoIHBvc2l0aXZlcycpO1xuICAgIGFzc2VydChhLnJlZCwgJ3JlZCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLl92ZXJpZnkyID0gZnVuY3Rpb24gX3ZlcmlmeTIgKGEsIGIpIHtcbiAgICBhc3NlcnQoKGEubmVnYXRpdmUgfCBiLm5lZ2F0aXZlKSA9PT0gMCwgJ3JlZCB3b3JrcyBvbmx5IHdpdGggcG9zaXRpdmVzJyk7XG4gICAgYXNzZXJ0KGEucmVkICYmIGEucmVkID09PSBiLnJlZCxcbiAgICAgICdyZWQgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5pbW9kID0gZnVuY3Rpb24gaW1vZCAoYSkge1xuICAgIGlmICh0aGlzLnByaW1lKSByZXR1cm4gdGhpcy5wcmltZS5pcmVkdWNlKGEpLl9mb3JjZVJlZCh0aGlzKTtcbiAgICByZXR1cm4gYS51bW9kKHRoaXMubSkuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUubmVnID0gZnVuY3Rpb24gbmVnIChhKSB7XG4gICAgaWYgKGEuaXNaZXJvKCkpIHtcbiAgICAgIHJldHVybiBhLmNsb25lKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMubS5zdWIoYSkuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gYWRkIChhLCBiKSB7XG4gICAgdGhpcy5fdmVyaWZ5MihhLCBiKTtcblxuICAgIHZhciByZXMgPSBhLmFkZChiKTtcbiAgICBpZiAocmVzLmNtcCh0aGlzLm0pID49IDApIHtcbiAgICAgIHJlcy5pc3ViKHRoaXMubSk7XG4gICAgfVxuICAgIHJldHVybiByZXMuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuaWFkZCA9IGZ1bmN0aW9uIGlhZGQgKGEsIGIpIHtcbiAgICB0aGlzLl92ZXJpZnkyKGEsIGIpO1xuXG4gICAgdmFyIHJlcyA9IGEuaWFkZChiKTtcbiAgICBpZiAocmVzLmNtcCh0aGlzLm0pID49IDApIHtcbiAgICAgIHJlcy5pc3ViKHRoaXMubSk7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5zdWIgPSBmdW5jdGlvbiBzdWIgKGEsIGIpIHtcbiAgICB0aGlzLl92ZXJpZnkyKGEsIGIpO1xuXG4gICAgdmFyIHJlcyA9IGEuc3ViKGIpO1xuICAgIGlmIChyZXMuY21wbigwKSA8IDApIHtcbiAgICAgIHJlcy5pYWRkKHRoaXMubSk7XG4gICAgfVxuICAgIHJldHVybiByZXMuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuaXN1YiA9IGZ1bmN0aW9uIGlzdWIgKGEsIGIpIHtcbiAgICB0aGlzLl92ZXJpZnkyKGEsIGIpO1xuXG4gICAgdmFyIHJlcyA9IGEuaXN1YihiKTtcbiAgICBpZiAocmVzLmNtcG4oMCkgPCAwKSB7XG4gICAgICByZXMuaWFkZCh0aGlzLm0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuc2hsID0gZnVuY3Rpb24gc2hsIChhLCBudW0pIHtcbiAgICB0aGlzLl92ZXJpZnkxKGEpO1xuICAgIHJldHVybiB0aGlzLmltb2QoYS51c2hsbihudW0pKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmltdWwgPSBmdW5jdGlvbiBpbXVsIChhLCBiKSB7XG4gICAgdGhpcy5fdmVyaWZ5MihhLCBiKTtcbiAgICByZXR1cm4gdGhpcy5pbW9kKGEuaW11bChiKSk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5tdWwgPSBmdW5jdGlvbiBtdWwgKGEsIGIpIHtcbiAgICB0aGlzLl92ZXJpZnkyKGEsIGIpO1xuICAgIHJldHVybiB0aGlzLmltb2QoYS5tdWwoYikpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuaXNxciA9IGZ1bmN0aW9uIGlzcXIgKGEpIHtcbiAgICByZXR1cm4gdGhpcy5pbXVsKGEsIGEuY2xvbmUoKSk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5zcXIgPSBmdW5jdGlvbiBzcXIgKGEpIHtcbiAgICByZXR1cm4gdGhpcy5tdWwoYSwgYSk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5zcXJ0ID0gZnVuY3Rpb24gc3FydCAoYSkge1xuICAgIGlmIChhLmlzWmVybygpKSByZXR1cm4gYS5jbG9uZSgpO1xuXG4gICAgdmFyIG1vZDMgPSB0aGlzLm0uYW5kbG4oMyk7XG4gICAgYXNzZXJ0KG1vZDMgJSAyID09PSAxKTtcblxuICAgIC8vIEZhc3QgY2FzZVxuICAgIGlmIChtb2QzID09PSAzKSB7XG4gICAgICB2YXIgcG93ID0gdGhpcy5tLmFkZChuZXcgQk4oMSkpLml1c2hybigyKTtcbiAgICAgIHJldHVybiB0aGlzLnBvdyhhLCBwb3cpO1xuICAgIH1cblxuICAgIC8vIFRvbmVsbGktU2hhbmtzIGFsZ29yaXRobSAoVG90YWxseSB1bm9wdGltaXplZCBhbmQgc2xvdylcbiAgICAvL1xuICAgIC8vIEZpbmQgUSBhbmQgUywgdGhhdCBRICogMiBeIFMgPSAoUCAtIDEpXG4gICAgdmFyIHEgPSB0aGlzLm0uc3VibigxKTtcbiAgICB2YXIgcyA9IDA7XG4gICAgd2hpbGUgKCFxLmlzWmVybygpICYmIHEuYW5kbG4oMSkgPT09IDApIHtcbiAgICAgIHMrKztcbiAgICAgIHEuaXVzaHJuKDEpO1xuICAgIH1cbiAgICBhc3NlcnQoIXEuaXNaZXJvKCkpO1xuXG4gICAgdmFyIG9uZSA9IG5ldyBCTigxKS50b1JlZCh0aGlzKTtcbiAgICB2YXIgbk9uZSA9IG9uZS5yZWROZWcoKTtcblxuICAgIC8vIEZpbmQgcXVhZHJhdGljIG5vbi1yZXNpZHVlXG4gICAgLy8gTk9URTogTWF4IGlzIHN1Y2ggYmVjYXVzZSBvZiBnZW5lcmFsaXplZCBSaWVtYW5uIGh5cG90aGVzaXMuXG4gICAgdmFyIGxwb3cgPSB0aGlzLm0uc3VibigxKS5pdXNocm4oMSk7XG4gICAgdmFyIHogPSB0aGlzLm0uYml0TGVuZ3RoKCk7XG4gICAgeiA9IG5ldyBCTigyICogeiAqIHopLnRvUmVkKHRoaXMpO1xuXG4gICAgd2hpbGUgKHRoaXMucG93KHosIGxwb3cpLmNtcChuT25lKSAhPT0gMCkge1xuICAgICAgei5yZWRJQWRkKG5PbmUpO1xuICAgIH1cblxuICAgIHZhciBjID0gdGhpcy5wb3coeiwgcSk7XG4gICAgdmFyIHIgPSB0aGlzLnBvdyhhLCBxLmFkZG4oMSkuaXVzaHJuKDEpKTtcbiAgICB2YXIgdCA9IHRoaXMucG93KGEsIHEpO1xuICAgIHZhciBtID0gcztcbiAgICB3aGlsZSAodC5jbXAob25lKSAhPT0gMCkge1xuICAgICAgdmFyIHRtcCA9IHQ7XG4gICAgICBmb3IgKHZhciBpID0gMDsgdG1wLmNtcChvbmUpICE9PSAwOyBpKyspIHtcbiAgICAgICAgdG1wID0gdG1wLnJlZFNxcigpO1xuICAgICAgfVxuICAgICAgYXNzZXJ0KGkgPCBtKTtcbiAgICAgIHZhciBiID0gdGhpcy5wb3coYywgbmV3IEJOKDEpLml1c2hsbihtIC0gaSAtIDEpKTtcblxuICAgICAgciA9IHIucmVkTXVsKGIpO1xuICAgICAgYyA9IGIucmVkU3FyKCk7XG4gICAgICB0ID0gdC5yZWRNdWwoYyk7XG4gICAgICBtID0gaTtcbiAgICB9XG5cbiAgICByZXR1cm4gcjtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmludm0gPSBmdW5jdGlvbiBpbnZtIChhKSB7XG4gICAgdmFyIGludiA9IGEuX2ludm1wKHRoaXMubSk7XG4gICAgaWYgKGludi5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgaW52Lm5lZ2F0aXZlID0gMDtcbiAgICAgIHJldHVybiB0aGlzLmltb2QoaW52KS5yZWROZWcoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuaW1vZChpbnYpO1xuICAgIH1cbiAgfTtcblxuICBSZWQucHJvdG90eXBlLnBvdyA9IGZ1bmN0aW9uIHBvdyAoYSwgbnVtKSB7XG4gICAgaWYgKG51bS5pc1plcm8oKSkgcmV0dXJuIG5ldyBCTigxKS50b1JlZCh0aGlzKTtcbiAgICBpZiAobnVtLmNtcG4oMSkgPT09IDApIHJldHVybiBhLmNsb25lKCk7XG5cbiAgICB2YXIgd2luZG93U2l6ZSA9IDQ7XG4gICAgdmFyIHduZCA9IG5ldyBBcnJheSgxIDw8IHdpbmRvd1NpemUpO1xuICAgIHduZFswXSA9IG5ldyBCTigxKS50b1JlZCh0aGlzKTtcbiAgICB3bmRbMV0gPSBhO1xuICAgIGZvciAodmFyIGkgPSAyOyBpIDwgd25kLmxlbmd0aDsgaSsrKSB7XG4gICAgICB3bmRbaV0gPSB0aGlzLm11bCh3bmRbaSAtIDFdLCBhKTtcbiAgICB9XG5cbiAgICB2YXIgcmVzID0gd25kWzBdO1xuICAgIHZhciBjdXJyZW50ID0gMDtcbiAgICB2YXIgY3VycmVudExlbiA9IDA7XG4gICAgdmFyIHN0YXJ0ID0gbnVtLmJpdExlbmd0aCgpICUgMjY7XG4gICAgaWYgKHN0YXJ0ID09PSAwKSB7XG4gICAgICBzdGFydCA9IDI2O1xuICAgIH1cblxuICAgIGZvciAoaSA9IG51bS5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIHdvcmQgPSBudW0ud29yZHNbaV07XG4gICAgICBmb3IgKHZhciBqID0gc3RhcnQgLSAxOyBqID49IDA7IGotLSkge1xuICAgICAgICB2YXIgYml0ID0gKHdvcmQgPj4gaikgJiAxO1xuICAgICAgICBpZiAocmVzICE9PSB3bmRbMF0pIHtcbiAgICAgICAgICByZXMgPSB0aGlzLnNxcihyZXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGJpdCA9PT0gMCAmJiBjdXJyZW50ID09PSAwKSB7XG4gICAgICAgICAgY3VycmVudExlbiA9IDA7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBjdXJyZW50IDw8PSAxO1xuICAgICAgICBjdXJyZW50IHw9IGJpdDtcbiAgICAgICAgY3VycmVudExlbisrO1xuICAgICAgICBpZiAoY3VycmVudExlbiAhPT0gd2luZG93U2l6ZSAmJiAoaSAhPT0gMCB8fCBqICE9PSAwKSkgY29udGludWU7XG5cbiAgICAgICAgcmVzID0gdGhpcy5tdWwocmVzLCB3bmRbY3VycmVudF0pO1xuICAgICAgICBjdXJyZW50TGVuID0gMDtcbiAgICAgICAgY3VycmVudCA9IDA7XG4gICAgICB9XG4gICAgICBzdGFydCA9IDI2O1xuICAgIH1cblxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5jb252ZXJ0VG8gPSBmdW5jdGlvbiBjb252ZXJ0VG8gKG51bSkge1xuICAgIHZhciByID0gbnVtLnVtb2QodGhpcy5tKTtcblxuICAgIHJldHVybiByID09PSBudW0gPyByLmNsb25lKCkgOiByO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuY29udmVydEZyb20gPSBmdW5jdGlvbiBjb252ZXJ0RnJvbSAobnVtKSB7XG4gICAgdmFyIHJlcyA9IG51bS5jbG9uZSgpO1xuICAgIHJlcy5yZWQgPSBudWxsO1xuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgLy9cbiAgLy8gTW9udGdvbWVyeSBtZXRob2QgZW5naW5lXG4gIC8vXG5cbiAgQk4ubW9udCA9IGZ1bmN0aW9uIG1vbnQgKG51bSkge1xuICAgIHJldHVybiBuZXcgTW9udChudW0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIE1vbnQgKG0pIHtcbiAgICBSZWQuY2FsbCh0aGlzLCBtKTtcblxuICAgIHRoaXMuc2hpZnQgPSB0aGlzLm0uYml0TGVuZ3RoKCk7XG4gICAgaWYgKHRoaXMuc2hpZnQgJSAyNiAhPT0gMCkge1xuICAgICAgdGhpcy5zaGlmdCArPSAyNiAtICh0aGlzLnNoaWZ0ICUgMjYpO1xuICAgIH1cblxuICAgIHRoaXMuciA9IG5ldyBCTigxKS5pdXNobG4odGhpcy5zaGlmdCk7XG4gICAgdGhpcy5yMiA9IHRoaXMuaW1vZCh0aGlzLnIuc3FyKCkpO1xuICAgIHRoaXMucmludiA9IHRoaXMuci5faW52bXAodGhpcy5tKTtcblxuICAgIHRoaXMubWludiA9IHRoaXMucmludi5tdWwodGhpcy5yKS5pc3VibigxKS5kaXYodGhpcy5tKTtcbiAgICB0aGlzLm1pbnYgPSB0aGlzLm1pbnYudW1vZCh0aGlzLnIpO1xuICAgIHRoaXMubWludiA9IHRoaXMuci5zdWIodGhpcy5taW52KTtcbiAgfVxuICBpbmhlcml0cyhNb250LCBSZWQpO1xuXG4gIE1vbnQucHJvdG90eXBlLmNvbnZlcnRUbyA9IGZ1bmN0aW9uIGNvbnZlcnRUbyAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuaW1vZChudW0udXNobG4odGhpcy5zaGlmdCkpO1xuICB9O1xuXG4gIE1vbnQucHJvdG90eXBlLmNvbnZlcnRGcm9tID0gZnVuY3Rpb24gY29udmVydEZyb20gKG51bSkge1xuICAgIHZhciByID0gdGhpcy5pbW9kKG51bS5tdWwodGhpcy5yaW52KSk7XG4gICAgci5yZWQgPSBudWxsO1xuICAgIHJldHVybiByO1xuICB9O1xuXG4gIE1vbnQucHJvdG90eXBlLmltdWwgPSBmdW5jdGlvbiBpbXVsIChhLCBiKSB7XG4gICAgaWYgKGEuaXNaZXJvKCkgfHwgYi5pc1plcm8oKSkge1xuICAgICAgYS53b3Jkc1swXSA9IDA7XG4gICAgICBhLmxlbmd0aCA9IDE7XG4gICAgICByZXR1cm4gYTtcbiAgICB9XG5cbiAgICB2YXIgdCA9IGEuaW11bChiKTtcbiAgICB2YXIgYyA9IHQubWFza24odGhpcy5zaGlmdCkubXVsKHRoaXMubWludikuaW1hc2tuKHRoaXMuc2hpZnQpLm11bCh0aGlzLm0pO1xuICAgIHZhciB1ID0gdC5pc3ViKGMpLml1c2hybih0aGlzLnNoaWZ0KTtcbiAgICB2YXIgcmVzID0gdTtcblxuICAgIGlmICh1LmNtcCh0aGlzLm0pID49IDApIHtcbiAgICAgIHJlcyA9IHUuaXN1Yih0aGlzLm0pO1xuICAgIH0gZWxzZSBpZiAodS5jbXBuKDApIDwgMCkge1xuICAgICAgcmVzID0gdS5pYWRkKHRoaXMubSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcy5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG5cbiAgTW9udC5wcm90b3R5cGUubXVsID0gZnVuY3Rpb24gbXVsIChhLCBiKSB7XG4gICAgaWYgKGEuaXNaZXJvKCkgfHwgYi5pc1plcm8oKSkgcmV0dXJuIG5ldyBCTigwKS5fZm9yY2VSZWQodGhpcyk7XG5cbiAgICB2YXIgdCA9IGEubXVsKGIpO1xuICAgIHZhciBjID0gdC5tYXNrbih0aGlzLnNoaWZ0KS5tdWwodGhpcy5taW52KS5pbWFza24odGhpcy5zaGlmdCkubXVsKHRoaXMubSk7XG4gICAgdmFyIHUgPSB0LmlzdWIoYykuaXVzaHJuKHRoaXMuc2hpZnQpO1xuICAgIHZhciByZXMgPSB1O1xuICAgIGlmICh1LmNtcCh0aGlzLm0pID49IDApIHtcbiAgICAgIHJlcyA9IHUuaXN1Yih0aGlzLm0pO1xuICAgIH0gZWxzZSBpZiAodS5jbXBuKDApIDwgMCkge1xuICAgICAgcmVzID0gdS5pYWRkKHRoaXMubSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcy5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG5cbiAgTW9udC5wcm90b3R5cGUuaW52bSA9IGZ1bmN0aW9uIGludm0gKGEpIHtcbiAgICAvLyAoQVIpXi0xICogUl4yID0gKEFeLTEgKiBSXi0xKSAqIFJeMiA9IEFeLTEgKiBSXG4gICAgdmFyIHJlcyA9IHRoaXMuaW1vZChhLl9pbnZtcCh0aGlzLm0pLm11bCh0aGlzLnIyKSk7XG4gICAgcmV0dXJuIHJlcy5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG59KSh0eXBlb2YgbW9kdWxlID09PSAndW5kZWZpbmVkJyB8fCBtb2R1bGUsIHRoaXMpO1xuIiwiLyohXG4gKiBUaGUgYnVmZmVyIG1vZHVsZSBmcm9tIG5vZGUuanMsIGZvciB0aGUgYnJvd3Nlci5cbiAqXG4gKiBAYXV0aG9yICAgRmVyb3NzIEFib3VraGFkaWplaCA8ZmVyb3NzQGZlcm9zcy5vcmc+IDxodHRwOi8vZmVyb3NzLm9yZz5cbiAqIEBsaWNlbnNlICBNSVRcbiAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cblxuJ3VzZSBzdHJpY3QnXG5cbnZhciBiYXNlNjQgPSByZXF1aXJlKCdiYXNlNjQtanMnKVxudmFyIGllZWU3NTQgPSByZXF1aXJlKCdpZWVlNzU0JylcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnaXNhcnJheScpXG5cbmV4cG9ydHMuQnVmZmVyID0gQnVmZmVyXG5leHBvcnRzLlNsb3dCdWZmZXIgPSBTbG93QnVmZmVyXG5leHBvcnRzLklOU1BFQ1RfTUFYX0JZVEVTID0gNTBcblxuLyoqXG4gKiBJZiBgQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRgOlxuICogICA9PT0gdHJ1ZSAgICBVc2UgVWludDhBcnJheSBpbXBsZW1lbnRhdGlvbiAoZmFzdGVzdClcbiAqICAgPT09IGZhbHNlICAgVXNlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiAobW9zdCBjb21wYXRpYmxlLCBldmVuIElFNilcbiAqXG4gKiBCcm93c2VycyB0aGF0IHN1cHBvcnQgdHlwZWQgYXJyYXlzIGFyZSBJRSAxMCssIEZpcmVmb3ggNCssIENocm9tZSA3KywgU2FmYXJpIDUuMSssXG4gKiBPcGVyYSAxMS42KywgaU9TIDQuMisuXG4gKlxuICogRHVlIHRvIHZhcmlvdXMgYnJvd3NlciBidWdzLCBzb21ldGltZXMgdGhlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiB3aWxsIGJlIHVzZWQgZXZlblxuICogd2hlbiB0aGUgYnJvd3NlciBzdXBwb3J0cyB0eXBlZCBhcnJheXMuXG4gKlxuICogTm90ZTpcbiAqXG4gKiAgIC0gRmlyZWZveCA0LTI5IGxhY2tzIHN1cHBvcnQgZm9yIGFkZGluZyBuZXcgcHJvcGVydGllcyB0byBgVWludDhBcnJheWAgaW5zdGFuY2VzLFxuICogICAgIFNlZTogaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njk1NDM4LlxuICpcbiAqICAgLSBDaHJvbWUgOS0xMCBpcyBtaXNzaW5nIHRoZSBgVHlwZWRBcnJheS5wcm90b3R5cGUuc3ViYXJyYXlgIGZ1bmN0aW9uLlxuICpcbiAqICAgLSBJRTEwIGhhcyBhIGJyb2tlbiBgVHlwZWRBcnJheS5wcm90b3R5cGUuc3ViYXJyYXlgIGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgYXJyYXlzIG9mXG4gKiAgICAgaW5jb3JyZWN0IGxlbmd0aCBpbiBzb21lIHNpdHVhdGlvbnMuXG5cbiAqIFdlIGRldGVjdCB0aGVzZSBidWdneSBicm93c2VycyBhbmQgc2V0IGBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVGAgdG8gYGZhbHNlYCBzbyB0aGV5XG4gKiBnZXQgdGhlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiwgd2hpY2ggaXMgc2xvd2VyIGJ1dCBiZWhhdmVzIGNvcnJlY3RseS5cbiAqL1xuQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgPSBnbG9iYWwuVFlQRURfQVJSQVlfU1VQUE9SVCAhPT0gdW5kZWZpbmVkXG4gID8gZ2xvYmFsLlRZUEVEX0FSUkFZX1NVUFBPUlRcbiAgOiB0eXBlZEFycmF5U3VwcG9ydCgpXG5cbi8qXG4gKiBFeHBvcnQga01heExlbmd0aCBhZnRlciB0eXBlZCBhcnJheSBzdXBwb3J0IGlzIGRldGVybWluZWQuXG4gKi9cbmV4cG9ydHMua01heExlbmd0aCA9IGtNYXhMZW5ndGgoKVxuXG5mdW5jdGlvbiB0eXBlZEFycmF5U3VwcG9ydCAoKSB7XG4gIHRyeSB7XG4gICAgdmFyIGFyciA9IG5ldyBVaW50OEFycmF5KDEpXG4gICAgYXJyLl9fcHJvdG9fXyA9IHtfX3Byb3RvX186IFVpbnQ4QXJyYXkucHJvdG90eXBlLCBmb286IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDQyIH19XG4gICAgcmV0dXJuIGFyci5mb28oKSA9PT0gNDIgJiYgLy8gdHlwZWQgYXJyYXkgaW5zdGFuY2VzIGNhbiBiZSBhdWdtZW50ZWRcbiAgICAgICAgdHlwZW9mIGFyci5zdWJhcnJheSA9PT0gJ2Z1bmN0aW9uJyAmJiAvLyBjaHJvbWUgOS0xMCBsYWNrIGBzdWJhcnJheWBcbiAgICAgICAgYXJyLnN1YmFycmF5KDEsIDEpLmJ5dGVMZW5ndGggPT09IDAgLy8gaWUxMCBoYXMgYnJva2VuIGBzdWJhcnJheWBcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbmZ1bmN0aW9uIGtNYXhMZW5ndGggKCkge1xuICByZXR1cm4gQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRcbiAgICA/IDB4N2ZmZmZmZmZcbiAgICA6IDB4M2ZmZmZmZmZcbn1cblxuZnVuY3Rpb24gY3JlYXRlQnVmZmVyICh0aGF0LCBsZW5ndGgpIHtcbiAgaWYgKGtNYXhMZW5ndGgoKSA8IGxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbnZhbGlkIHR5cGVkIGFycmF5IGxlbmd0aCcpXG4gIH1cbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2UsIGZvciBiZXN0IHBlcmZvcm1hbmNlXG4gICAgdGhhdCA9IG5ldyBVaW50OEFycmF5KGxlbmd0aClcbiAgICB0aGF0Ll9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgfSBlbHNlIHtcbiAgICAvLyBGYWxsYmFjazogUmV0dXJuIGFuIG9iamVjdCBpbnN0YW5jZSBvZiB0aGUgQnVmZmVyIGNsYXNzXG4gICAgaWYgKHRoYXQgPT09IG51bGwpIHtcbiAgICAgIHRoYXQgPSBuZXcgQnVmZmVyKGxlbmd0aClcbiAgICB9XG4gICAgdGhhdC5sZW5ndGggPSBsZW5ndGhcbiAgfVxuXG4gIHJldHVybiB0aGF0XG59XG5cbi8qKlxuICogVGhlIEJ1ZmZlciBjb25zdHJ1Y3RvciByZXR1cm5zIGluc3RhbmNlcyBvZiBgVWludDhBcnJheWAgdGhhdCBoYXZlIHRoZWlyXG4gKiBwcm90b3R5cGUgY2hhbmdlZCB0byBgQnVmZmVyLnByb3RvdHlwZWAuIEZ1cnRoZXJtb3JlLCBgQnVmZmVyYCBpcyBhIHN1YmNsYXNzIG9mXG4gKiBgVWludDhBcnJheWAsIHNvIHRoZSByZXR1cm5lZCBpbnN0YW5jZXMgd2lsbCBoYXZlIGFsbCB0aGUgbm9kZSBgQnVmZmVyYCBtZXRob2RzXG4gKiBhbmQgdGhlIGBVaW50OEFycmF5YCBtZXRob2RzLiBTcXVhcmUgYnJhY2tldCBub3RhdGlvbiB3b3JrcyBhcyBleHBlY3RlZCAtLSBpdFxuICogcmV0dXJucyBhIHNpbmdsZSBvY3RldC5cbiAqXG4gKiBUaGUgYFVpbnQ4QXJyYXlgIHByb3RvdHlwZSByZW1haW5zIHVubW9kaWZpZWQuXG4gKi9cblxuZnVuY3Rpb24gQnVmZmVyIChhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUICYmICEodGhpcyBpbnN0YW5jZW9mIEJ1ZmZlcikpIHtcbiAgICByZXR1cm4gbmV3IEJ1ZmZlcihhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIC8vIENvbW1vbiBjYXNlLlxuICBpZiAodHlwZW9mIGFyZyA9PT0gJ251bWJlcicpIHtcbiAgICBpZiAodHlwZW9mIGVuY29kaW5nT3JPZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdJZiBlbmNvZGluZyBpcyBzcGVjaWZpZWQgdGhlbiB0aGUgZmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZydcbiAgICAgIClcbiAgICB9XG4gICAgcmV0dXJuIGFsbG9jVW5zYWZlKHRoaXMsIGFyZylcbiAgfVxuICByZXR1cm4gZnJvbSh0aGlzLCBhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuQnVmZmVyLnBvb2xTaXplID0gODE5MiAvLyBub3QgdXNlZCBieSB0aGlzIGltcGxlbWVudGF0aW9uXG5cbi8vIFRPRE86IExlZ2FjeSwgbm90IG5lZWRlZCBhbnltb3JlLiBSZW1vdmUgaW4gbmV4dCBtYWpvciB2ZXJzaW9uLlxuQnVmZmVyLl9hdWdtZW50ID0gZnVuY3Rpb24gKGFycikge1xuICBhcnIuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICByZXR1cm4gYXJyXG59XG5cbmZ1bmN0aW9uIGZyb20gKHRoYXQsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcInZhbHVlXCIgYXJndW1lbnQgbXVzdCBub3QgYmUgYSBudW1iZXInKVxuICB9XG5cbiAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsdWUgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgIHJldHVybiBmcm9tQXJyYXlCdWZmZXIodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGZyb21TdHJpbmcodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQpXG4gIH1cblxuICByZXR1cm4gZnJvbU9iamVjdCh0aGF0LCB2YWx1ZSlcbn1cblxuLyoqXG4gKiBGdW5jdGlvbmFsbHkgZXF1aXZhbGVudCB0byBCdWZmZXIoYXJnLCBlbmNvZGluZykgYnV0IHRocm93cyBhIFR5cGVFcnJvclxuICogaWYgdmFsdWUgaXMgYSBudW1iZXIuXG4gKiBCdWZmZXIuZnJvbShzdHJbLCBlbmNvZGluZ10pXG4gKiBCdWZmZXIuZnJvbShhcnJheSlcbiAqIEJ1ZmZlci5mcm9tKGJ1ZmZlcilcbiAqIEJ1ZmZlci5mcm9tKGFycmF5QnVmZmVyWywgYnl0ZU9mZnNldFssIGxlbmd0aF1dKVxuICoqL1xuQnVmZmVyLmZyb20gPSBmdW5jdGlvbiAodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gZnJvbShudWxsLCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5pZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgQnVmZmVyLnByb3RvdHlwZS5fX3Byb3RvX18gPSBVaW50OEFycmF5LnByb3RvdHlwZVxuICBCdWZmZXIuX19wcm90b19fID0gVWludDhBcnJheVxuICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnNwZWNpZXMgJiZcbiAgICAgIEJ1ZmZlcltTeW1ib2wuc3BlY2llc10gPT09IEJ1ZmZlcikge1xuICAgIC8vIEZpeCBzdWJhcnJheSgpIGluIEVTMjAxNi4gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlci9wdWxsLzk3XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEJ1ZmZlciwgU3ltYm9sLnNwZWNpZXMsIHtcbiAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSlcbiAgfVxufVxuXG5mdW5jdGlvbiBhc3NlcnRTaXplIChzaXplKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcInNpemVcIiBhcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfSBlbHNlIGlmIChzaXplIDwgMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcInNpemVcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBuZWdhdGl2ZScpXG4gIH1cbn1cblxuZnVuY3Rpb24gYWxsb2MgKHRoYXQsIHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIGFzc2VydFNpemUoc2l6ZSlcbiAgaWYgKHNpemUgPD0gMCkge1xuICAgIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSlcbiAgfVxuICBpZiAoZmlsbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gT25seSBwYXkgYXR0ZW50aW9uIHRvIGVuY29kaW5nIGlmIGl0J3MgYSBzdHJpbmcuIFRoaXNcbiAgICAvLyBwcmV2ZW50cyBhY2NpZGVudGFsbHkgc2VuZGluZyBpbiBhIG51bWJlciB0aGF0IHdvdWxkXG4gICAgLy8gYmUgaW50ZXJwcmV0dGVkIGFzIGEgc3RhcnQgb2Zmc2V0LlxuICAgIHJldHVybiB0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnXG4gICAgICA/IGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKS5maWxsKGZpbGwsIGVuY29kaW5nKVxuICAgICAgOiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSkuZmlsbChmaWxsKVxuICB9XG4gIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSlcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKiBhbGxvYyhzaXplWywgZmlsbFssIGVuY29kaW5nXV0pXG4gKiovXG5CdWZmZXIuYWxsb2MgPSBmdW5jdGlvbiAoc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGFsbG9jKG51bGwsIHNpemUsIGZpbGwsIGVuY29kaW5nKVxufVxuXG5mdW5jdGlvbiBhbGxvY1Vuc2FmZSAodGhhdCwgc2l6ZSkge1xuICBhc3NlcnRTaXplKHNpemUpXG4gIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSA8IDAgPyAwIDogY2hlY2tlZChzaXplKSB8IDApXG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNpemU7ICsraSkge1xuICAgICAgdGhhdFtpXSA9IDBcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRoYXRcbn1cblxuLyoqXG4gKiBFcXVpdmFsZW50IHRvIEJ1ZmZlcihudW0pLCBieSBkZWZhdWx0IGNyZWF0ZXMgYSBub24temVyby1maWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICogKi9cbkJ1ZmZlci5hbGxvY1Vuc2FmZSA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIHJldHVybiBhbGxvY1Vuc2FmZShudWxsLCBzaXplKVxufVxuLyoqXG4gKiBFcXVpdmFsZW50IHRvIFNsb3dCdWZmZXIobnVtKSwgYnkgZGVmYXVsdCBjcmVhdGVzIGEgbm9uLXplcm8tZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqL1xuQnVmZmVyLmFsbG9jVW5zYWZlU2xvdyA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIHJldHVybiBhbGxvY1Vuc2FmZShudWxsLCBzaXplKVxufVxuXG5mdW5jdGlvbiBmcm9tU3RyaW5nICh0aGF0LCBzdHJpbmcsIGVuY29kaW5nKSB7XG4gIGlmICh0eXBlb2YgZW5jb2RpbmcgIT09ICdzdHJpbmcnIHx8IGVuY29kaW5nID09PSAnJykge1xuICAgIGVuY29kaW5nID0gJ3V0ZjgnXG4gIH1cblxuICBpZiAoIUJ1ZmZlci5pc0VuY29kaW5nKGVuY29kaW5nKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiZW5jb2RpbmdcIiBtdXN0IGJlIGEgdmFsaWQgc3RyaW5nIGVuY29kaW5nJylcbiAgfVxuXG4gIHZhciBsZW5ndGggPSBieXRlTGVuZ3RoKHN0cmluZywgZW5jb2RpbmcpIHwgMFxuICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbmd0aClcblxuICB2YXIgYWN0dWFsID0gdGhhdC53cml0ZShzdHJpbmcsIGVuY29kaW5nKVxuXG4gIGlmIChhY3R1YWwgIT09IGxlbmd0aCkge1xuICAgIC8vIFdyaXRpbmcgYSBoZXggc3RyaW5nLCBmb3IgZXhhbXBsZSwgdGhhdCBjb250YWlucyBpbnZhbGlkIGNoYXJhY3RlcnMgd2lsbFxuICAgIC8vIGNhdXNlIGV2ZXJ5dGhpbmcgYWZ0ZXIgdGhlIGZpcnN0IGludmFsaWQgY2hhcmFjdGVyIHRvIGJlIGlnbm9yZWQuIChlLmcuXG4gICAgLy8gJ2FieHhjZCcgd2lsbCBiZSB0cmVhdGVkIGFzICdhYicpXG4gICAgdGhhdCA9IHRoYXQuc2xpY2UoMCwgYWN0dWFsKVxuICB9XG5cbiAgcmV0dXJuIHRoYXRcbn1cblxuZnVuY3Rpb24gZnJvbUFycmF5TGlrZSAodGhhdCwgYXJyYXkpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCA8IDAgPyAwIDogY2hlY2tlZChhcnJheS5sZW5ndGgpIHwgMFxuICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbmd0aClcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKz0gMSkge1xuICAgIHRoYXRbaV0gPSBhcnJheVtpXSAmIDI1NVxuICB9XG4gIHJldHVybiB0aGF0XG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheUJ1ZmZlciAodGhhdCwgYXJyYXksIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICBhcnJheS5ieXRlTGVuZ3RoIC8vIHRoaXMgdGhyb3dzIGlmIGBhcnJheWAgaXMgbm90IGEgdmFsaWQgQXJyYXlCdWZmZXJcblxuICBpZiAoYnl0ZU9mZnNldCA8IDAgfHwgYXJyYXkuYnl0ZUxlbmd0aCA8IGJ5dGVPZmZzZXQpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXFwnb2Zmc2V0XFwnIGlzIG91dCBvZiBib3VuZHMnKVxuICB9XG5cbiAgaWYgKGFycmF5LmJ5dGVMZW5ndGggPCBieXRlT2Zmc2V0ICsgKGxlbmd0aCB8fCAwKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcXCdsZW5ndGhcXCcgaXMgb3V0IG9mIGJvdW5kcycpXG4gIH1cblxuICBpZiAoYnl0ZU9mZnNldCA9PT0gdW5kZWZpbmVkICYmIGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSlcbiAgfSBlbHNlIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXksIGJ5dGVPZmZzZXQpXG4gIH0gZWxzZSB7XG4gICAgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSwgYnl0ZU9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2UsIGZvciBiZXN0IHBlcmZvcm1hbmNlXG4gICAgdGhhdCA9IGFycmF5XG4gICAgdGhhdC5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIH0gZWxzZSB7XG4gICAgLy8gRmFsbGJhY2s6IFJldHVybiBhbiBvYmplY3QgaW5zdGFuY2Ugb2YgdGhlIEJ1ZmZlciBjbGFzc1xuICAgIHRoYXQgPSBmcm9tQXJyYXlMaWtlKHRoYXQsIGFycmF5KVxuICB9XG4gIHJldHVybiB0aGF0XG59XG5cbmZ1bmN0aW9uIGZyb21PYmplY3QgKHRoYXQsIG9iaikge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKG9iaikpIHtcbiAgICB2YXIgbGVuID0gY2hlY2tlZChvYmoubGVuZ3RoKSB8IDBcbiAgICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbilcblxuICAgIGlmICh0aGF0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRoYXRcbiAgICB9XG5cbiAgICBvYmouY29weSh0aGF0LCAwLCAwLCBsZW4pXG4gICAgcmV0dXJuIHRoYXRcbiAgfVxuXG4gIGlmIChvYmopIHtcbiAgICBpZiAoKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgb2JqLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB8fCAnbGVuZ3RoJyBpbiBvYmopIHtcbiAgICAgIGlmICh0eXBlb2Ygb2JqLmxlbmd0aCAhPT0gJ251bWJlcicgfHwgaXNuYW4ob2JqLmxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcih0aGF0LCAwKVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZyb21BcnJheUxpa2UodGhhdCwgb2JqKVxuICAgIH1cblxuICAgIGlmIChvYmoudHlwZSA9PT0gJ0J1ZmZlcicgJiYgaXNBcnJheShvYmouZGF0YSkpIHtcbiAgICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKHRoYXQsIG9iai5kYXRhKVxuICAgIH1cbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmcsIEJ1ZmZlciwgQXJyYXlCdWZmZXIsIEFycmF5LCBvciBhcnJheS1saWtlIG9iamVjdC4nKVxufVxuXG5mdW5jdGlvbiBjaGVja2VkIChsZW5ndGgpIHtcbiAgLy8gTm90ZTogY2Fubm90IHVzZSBgbGVuZ3RoIDwga01heExlbmd0aCgpYCBoZXJlIGJlY2F1c2UgdGhhdCBmYWlscyB3aGVuXG4gIC8vIGxlbmd0aCBpcyBOYU4gKHdoaWNoIGlzIG90aGVyd2lzZSBjb2VyY2VkIHRvIHplcm8uKVxuICBpZiAobGVuZ3RoID49IGtNYXhMZW5ndGgoKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdBdHRlbXB0IHRvIGFsbG9jYXRlIEJ1ZmZlciBsYXJnZXIgdGhhbiBtYXhpbXVtICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICdzaXplOiAweCcgKyBrTWF4TGVuZ3RoKCkudG9TdHJpbmcoMTYpICsgJyBieXRlcycpXG4gIH1cbiAgcmV0dXJuIGxlbmd0aCB8IDBcbn1cblxuZnVuY3Rpb24gU2xvd0J1ZmZlciAobGVuZ3RoKSB7XG4gIGlmICgrbGVuZ3RoICE9IGxlbmd0aCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGVxZXFlcVxuICAgIGxlbmd0aCA9IDBcbiAgfVxuICByZXR1cm4gQnVmZmVyLmFsbG9jKCtsZW5ndGgpXG59XG5cbkJ1ZmZlci5pc0J1ZmZlciA9IGZ1bmN0aW9uIGlzQnVmZmVyIChiKSB7XG4gIHJldHVybiAhIShiICE9IG51bGwgJiYgYi5faXNCdWZmZXIpXG59XG5cbkJ1ZmZlci5jb21wYXJlID0gZnVuY3Rpb24gY29tcGFyZSAoYSwgYikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihhKSB8fCAhQnVmZmVyLmlzQnVmZmVyKGIpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnRzIG11c3QgYmUgQnVmZmVycycpXG4gIH1cblxuICBpZiAoYSA9PT0gYikgcmV0dXJuIDBcblxuICB2YXIgeCA9IGEubGVuZ3RoXG4gIHZhciB5ID0gYi5sZW5ndGhcblxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gTWF0aC5taW4oeCwgeSk7IGkgPCBsZW47ICsraSkge1xuICAgIGlmIChhW2ldICE9PSBiW2ldKSB7XG4gICAgICB4ID0gYVtpXVxuICAgICAgeSA9IGJbaV1cbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgaWYgKHggPCB5KSByZXR1cm4gLTFcbiAgaWYgKHkgPCB4KSByZXR1cm4gMVxuICByZXR1cm4gMFxufVxuXG5CdWZmZXIuaXNFbmNvZGluZyA9IGZ1bmN0aW9uIGlzRW5jb2RpbmcgKGVuY29kaW5nKSB7XG4gIHN3aXRjaCAoU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgY2FzZSAnaGV4JzpcbiAgICBjYXNlICd1dGY4JzpcbiAgICBjYXNlICd1dGYtOCc6XG4gICAgY2FzZSAnYXNjaWknOlxuICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgY2FzZSAnYmluYXJ5JzpcbiAgICBjYXNlICdiYXNlNjQnOlxuICAgIGNhc2UgJ3VjczInOlxuICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICBjYXNlICd1dGYxNmxlJzpcbiAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5CdWZmZXIuY29uY2F0ID0gZnVuY3Rpb24gY29uY2F0IChsaXN0LCBsZW5ndGgpIHtcbiAgaWYgKCFpc0FycmF5KGxpc3QpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0XCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJylcbiAgfVxuXG4gIGlmIChsaXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBCdWZmZXIuYWxsb2MoMClcbiAgfVxuXG4gIHZhciBpXG4gIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGxlbmd0aCA9IDBcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xuICAgICAgbGVuZ3RoICs9IGxpc3RbaV0ubGVuZ3RoXG4gICAgfVxuICB9XG5cbiAgdmFyIGJ1ZmZlciA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShsZW5ndGgpXG4gIHZhciBwb3MgPSAwXG4gIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgKytpKSB7XG4gICAgdmFyIGJ1ZiA9IGxpc3RbaV1cbiAgICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RcIiBhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5IG9mIEJ1ZmZlcnMnKVxuICAgIH1cbiAgICBidWYuY29weShidWZmZXIsIHBvcylcbiAgICBwb3MgKz0gYnVmLmxlbmd0aFxuICB9XG4gIHJldHVybiBidWZmZXJcbn1cblxuZnVuY3Rpb24gYnl0ZUxlbmd0aCAoc3RyaW5nLCBlbmNvZGluZykge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKHN0cmluZykpIHtcbiAgICByZXR1cm4gc3RyaW5nLmxlbmd0aFxuICB9XG4gIGlmICh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBBcnJheUJ1ZmZlci5pc1ZpZXcgPT09ICdmdW5jdGlvbicgJiZcbiAgICAgIChBcnJheUJ1ZmZlci5pc1ZpZXcoc3RyaW5nKSB8fCBzdHJpbmcgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikpIHtcbiAgICByZXR1cm4gc3RyaW5nLmJ5dGVMZW5ndGhcbiAgfVxuICBpZiAodHlwZW9mIHN0cmluZyAhPT0gJ3N0cmluZycpIHtcbiAgICBzdHJpbmcgPSAnJyArIHN0cmluZ1xuICB9XG5cbiAgdmFyIGxlbiA9IHN0cmluZy5sZW5ndGhcbiAgaWYgKGxlbiA9PT0gMCkgcmV0dXJuIDBcblxuICAvLyBVc2UgYSBmb3IgbG9vcCB0byBhdm9pZCByZWN1cnNpb25cbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcbiAgZm9yICg7Oykge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGVuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgIGNhc2UgdW5kZWZpbmVkOlxuICAgICAgICByZXR1cm4gdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGhcbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiBsZW4gKiAyXG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gbGVuID4+PiAxXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICByZXR1cm4gYmFzZTY0VG9CeXRlcyhzdHJpbmcpLmxlbmd0aFxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSByZXR1cm4gdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGggLy8gYXNzdW1lIHV0ZjhcbiAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cbkJ1ZmZlci5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aFxuXG5mdW5jdGlvbiBzbG93VG9TdHJpbmcgKGVuY29kaW5nLCBzdGFydCwgZW5kKSB7XG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG5cbiAgLy8gTm8gbmVlZCB0byB2ZXJpZnkgdGhhdCBcInRoaXMubGVuZ3RoIDw9IE1BWF9VSU5UMzJcIiBzaW5jZSBpdCdzIGEgcmVhZC1vbmx5XG4gIC8vIHByb3BlcnR5IG9mIGEgdHlwZWQgYXJyYXkuXG5cbiAgLy8gVGhpcyBiZWhhdmVzIG5laXRoZXIgbGlrZSBTdHJpbmcgbm9yIFVpbnQ4QXJyYXkgaW4gdGhhdCB3ZSBzZXQgc3RhcnQvZW5kXG4gIC8vIHRvIHRoZWlyIHVwcGVyL2xvd2VyIGJvdW5kcyBpZiB0aGUgdmFsdWUgcGFzc2VkIGlzIG91dCBvZiByYW5nZS5cbiAgLy8gdW5kZWZpbmVkIGlzIGhhbmRsZWQgc3BlY2lhbGx5IGFzIHBlciBFQ01BLTI2MiA2dGggRWRpdGlvbixcbiAgLy8gU2VjdGlvbiAxMy4zLjMuNyBSdW50aW1lIFNlbWFudGljczogS2V5ZWRCaW5kaW5nSW5pdGlhbGl6YXRpb24uXG4gIGlmIChzdGFydCA9PT0gdW5kZWZpbmVkIHx8IHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ID0gMFxuICB9XG4gIC8vIFJldHVybiBlYXJseSBpZiBzdGFydCA+IHRoaXMubGVuZ3RoLiBEb25lIGhlcmUgdG8gcHJldmVudCBwb3RlbnRpYWwgdWludDMyXG4gIC8vIGNvZXJjaW9uIGZhaWwgYmVsb3cuXG4gIGlmIChzdGFydCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICBpZiAoZW5kID09PSB1bmRlZmluZWQgfHwgZW5kID4gdGhpcy5sZW5ndGgpIHtcbiAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICB9XG5cbiAgaWYgKGVuZCA8PSAwKSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICAvLyBGb3JjZSBjb2Vyc2lvbiB0byB1aW50MzIuIFRoaXMgd2lsbCBhbHNvIGNvZXJjZSBmYWxzZXkvTmFOIHZhbHVlcyB0byAwLlxuICBlbmQgPj4+PSAwXG4gIHN0YXJ0ID4+Pj0gMFxuXG4gIGlmIChlbmQgPD0gc3RhcnQpIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gJ3V0ZjgnXG5cbiAgd2hpbGUgKHRydWUpIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gaGV4U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiB1dGY4U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgICByZXR1cm4gYXNjaWlTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxhdGluMVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIHJldHVybiBiYXNlNjRTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gdXRmMTZsZVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgICAgICBlbmNvZGluZyA9IChlbmNvZGluZyArICcnKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG4vLyBUaGUgcHJvcGVydHkgaXMgdXNlZCBieSBgQnVmZmVyLmlzQnVmZmVyYCBhbmQgYGlzLWJ1ZmZlcmAgKGluIFNhZmFyaSA1LTcpIHRvIGRldGVjdFxuLy8gQnVmZmVyIGluc3RhbmNlcy5cbkJ1ZmZlci5wcm90b3R5cGUuX2lzQnVmZmVyID0gdHJ1ZVxuXG5mdW5jdGlvbiBzd2FwIChiLCBuLCBtKSB7XG4gIHZhciBpID0gYltuXVxuICBiW25dID0gYlttXVxuICBiW21dID0gaVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXAxNiA9IGZ1bmN0aW9uIHN3YXAxNiAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgMiAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMTYtYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gMikge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDEpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwMzIgPSBmdW5jdGlvbiBzd2FwMzIgKCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDQgIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDMyLWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyAzKVxuICAgIHN3YXAodGhpcywgaSArIDEsIGkgKyAyKVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDY0ID0gZnVuY3Rpb24gc3dhcDY0ICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSA4ICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA2NC1iaXRzJylcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSA4KSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgNylcbiAgICBzd2FwKHRoaXMsIGkgKyAxLCBpICsgNilcbiAgICBzd2FwKHRoaXMsIGkgKyAyLCBpICsgNSlcbiAgICBzd2FwKHRoaXMsIGkgKyAzLCBpICsgNClcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcgKCkge1xuICB2YXIgbGVuZ3RoID0gdGhpcy5sZW5ndGggfCAwXG4gIGlmIChsZW5ndGggPT09IDApIHJldHVybiAnJ1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHV0ZjhTbGljZSh0aGlzLCAwLCBsZW5ndGgpXG4gIHJldHVybiBzbG93VG9TdHJpbmcuYXBwbHkodGhpcywgYXJndW1lbnRzKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uIGVxdWFscyAoYikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihiKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlcicpXG4gIGlmICh0aGlzID09PSBiKSByZXR1cm4gdHJ1ZVxuICByZXR1cm4gQnVmZmVyLmNvbXBhcmUodGhpcywgYikgPT09IDBcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gaW5zcGVjdCAoKSB7XG4gIHZhciBzdHIgPSAnJ1xuICB2YXIgbWF4ID0gZXhwb3J0cy5JTlNQRUNUX01BWF9CWVRFU1xuICBpZiAodGhpcy5sZW5ndGggPiAwKSB7XG4gICAgc3RyID0gdGhpcy50b1N0cmluZygnaGV4JywgMCwgbWF4KS5tYXRjaCgvLnsyfS9nKS5qb2luKCcgJylcbiAgICBpZiAodGhpcy5sZW5ndGggPiBtYXgpIHN0ciArPSAnIC4uLiAnXG4gIH1cbiAgcmV0dXJuICc8QnVmZmVyICcgKyBzdHIgKyAnPidcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5jb21wYXJlID0gZnVuY3Rpb24gY29tcGFyZSAodGFyZ2V0LCBzdGFydCwgZW5kLCB0aGlzU3RhcnQsIHRoaXNFbmQpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIodGFyZ2V0KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXInKVxuICB9XG5cbiAgaWYgKHN0YXJ0ID09PSB1bmRlZmluZWQpIHtcbiAgICBzdGFydCA9IDBcbiAgfVxuICBpZiAoZW5kID09PSB1bmRlZmluZWQpIHtcbiAgICBlbmQgPSB0YXJnZXQgPyB0YXJnZXQubGVuZ3RoIDogMFxuICB9XG4gIGlmICh0aGlzU3RhcnQgPT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXNTdGFydCA9IDBcbiAgfVxuICBpZiAodGhpc0VuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpc0VuZCA9IHRoaXMubGVuZ3RoXG4gIH1cblxuICBpZiAoc3RhcnQgPCAwIHx8IGVuZCA+IHRhcmdldC5sZW5ndGggfHwgdGhpc1N0YXJ0IDwgMCB8fCB0aGlzRW5kID4gdGhpcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignb3V0IG9mIHJhbmdlIGluZGV4JylcbiAgfVxuXG4gIGlmICh0aGlzU3RhcnQgPj0gdGhpc0VuZCAmJiBzdGFydCA+PSBlbmQpIHtcbiAgICByZXR1cm4gMFxuICB9XG4gIGlmICh0aGlzU3RhcnQgPj0gdGhpc0VuZCkge1xuICAgIHJldHVybiAtMVxuICB9XG4gIGlmIChzdGFydCA+PSBlbmQpIHtcbiAgICByZXR1cm4gMVxuICB9XG5cbiAgc3RhcnQgPj4+PSAwXG4gIGVuZCA+Pj49IDBcbiAgdGhpc1N0YXJ0ID4+Pj0gMFxuICB0aGlzRW5kID4+Pj0gMFxuXG4gIGlmICh0aGlzID09PSB0YXJnZXQpIHJldHVybiAwXG5cbiAgdmFyIHggPSB0aGlzRW5kIC0gdGhpc1N0YXJ0XG4gIHZhciB5ID0gZW5kIC0gc3RhcnRcbiAgdmFyIGxlbiA9IE1hdGgubWluKHgsIHkpXG5cbiAgdmFyIHRoaXNDb3B5ID0gdGhpcy5zbGljZSh0aGlzU3RhcnQsIHRoaXNFbmQpXG4gIHZhciB0YXJnZXRDb3B5ID0gdGFyZ2V0LnNsaWNlKHN0YXJ0LCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgIGlmICh0aGlzQ29weVtpXSAhPT0gdGFyZ2V0Q29weVtpXSkge1xuICAgICAgeCA9IHRoaXNDb3B5W2ldXG4gICAgICB5ID0gdGFyZ2V0Q29weVtpXVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICBpZiAoeCA8IHkpIHJldHVybiAtMVxuICBpZiAoeSA8IHgpIHJldHVybiAxXG4gIHJldHVybiAwXG59XG5cbi8vIEZpbmRzIGVpdGhlciB0aGUgZmlyc3QgaW5kZXggb2YgYHZhbGAgaW4gYGJ1ZmZlcmAgYXQgb2Zmc2V0ID49IGBieXRlT2Zmc2V0YCxcbi8vIE9SIHRoZSBsYXN0IGluZGV4IG9mIGB2YWxgIGluIGBidWZmZXJgIGF0IG9mZnNldCA8PSBgYnl0ZU9mZnNldGAuXG4vL1xuLy8gQXJndW1lbnRzOlxuLy8gLSBidWZmZXIgLSBhIEJ1ZmZlciB0byBzZWFyY2hcbi8vIC0gdmFsIC0gYSBzdHJpbmcsIEJ1ZmZlciwgb3IgbnVtYmVyXG4vLyAtIGJ5dGVPZmZzZXQgLSBhbiBpbmRleCBpbnRvIGBidWZmZXJgOyB3aWxsIGJlIGNsYW1wZWQgdG8gYW4gaW50MzJcbi8vIC0gZW5jb2RpbmcgLSBhbiBvcHRpb25hbCBlbmNvZGluZywgcmVsZXZhbnQgaXMgdmFsIGlzIGEgc3RyaW5nXG4vLyAtIGRpciAtIHRydWUgZm9yIGluZGV4T2YsIGZhbHNlIGZvciBsYXN0SW5kZXhPZlxuZnVuY3Rpb24gYmlkaXJlY3Rpb25hbEluZGV4T2YgKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKSB7XG4gIC8vIEVtcHR5IGJ1ZmZlciBtZWFucyBubyBtYXRjaFxuICBpZiAoYnVmZmVyLmxlbmd0aCA9PT0gMCkgcmV0dXJuIC0xXG5cbiAgLy8gTm9ybWFsaXplIGJ5dGVPZmZzZXRcbiAgaWYgKHR5cGVvZiBieXRlT2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgIGVuY29kaW5nID0gYnl0ZU9mZnNldFxuICAgIGJ5dGVPZmZzZXQgPSAwXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA+IDB4N2ZmZmZmZmYpIHtcbiAgICBieXRlT2Zmc2V0ID0gMHg3ZmZmZmZmZlxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPCAtMHg4MDAwMDAwMCkge1xuICAgIGJ5dGVPZmZzZXQgPSAtMHg4MDAwMDAwMFxuICB9XG4gIGJ5dGVPZmZzZXQgPSArYnl0ZU9mZnNldCAgLy8gQ29lcmNlIHRvIE51bWJlci5cbiAgaWYgKGlzTmFOKGJ5dGVPZmZzZXQpKSB7XG4gICAgLy8gYnl0ZU9mZnNldDogaXQgaXQncyB1bmRlZmluZWQsIG51bGwsIE5hTiwgXCJmb29cIiwgZXRjLCBzZWFyY2ggd2hvbGUgYnVmZmVyXG4gICAgYnl0ZU9mZnNldCA9IGRpciA/IDAgOiAoYnVmZmVyLmxlbmd0aCAtIDEpXG4gIH1cblxuICAvLyBOb3JtYWxpemUgYnl0ZU9mZnNldDogbmVnYXRpdmUgb2Zmc2V0cyBzdGFydCBmcm9tIHRoZSBlbmQgb2YgdGhlIGJ1ZmZlclxuICBpZiAoYnl0ZU9mZnNldCA8IDApIGJ5dGVPZmZzZXQgPSBidWZmZXIubGVuZ3RoICsgYnl0ZU9mZnNldFxuICBpZiAoYnl0ZU9mZnNldCA+PSBidWZmZXIubGVuZ3RoKSB7XG4gICAgaWYgKGRpcikgcmV0dXJuIC0xXG4gICAgZWxzZSBieXRlT2Zmc2V0ID0gYnVmZmVyLmxlbmd0aCAtIDFcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0IDwgMCkge1xuICAgIGlmIChkaXIpIGJ5dGVPZmZzZXQgPSAwXG4gICAgZWxzZSByZXR1cm4gLTFcbiAgfVxuXG4gIC8vIE5vcm1hbGl6ZSB2YWxcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFsID0gQnVmZmVyLmZyb20odmFsLCBlbmNvZGluZylcbiAgfVxuXG4gIC8vIEZpbmFsbHksIHNlYXJjaCBlaXRoZXIgaW5kZXhPZiAoaWYgZGlyIGlzIHRydWUpIG9yIGxhc3RJbmRleE9mXG4gIGlmIChCdWZmZXIuaXNCdWZmZXIodmFsKSkge1xuICAgIC8vIFNwZWNpYWwgY2FzZTogbG9va2luZyBmb3IgZW1wdHkgc3RyaW5nL2J1ZmZlciBhbHdheXMgZmFpbHNcbiAgICBpZiAodmFsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIC0xXG4gICAgfVxuICAgIHJldHVybiBhcnJheUluZGV4T2YoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpXG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICB2YWwgPSB2YWwgJiAweEZGIC8vIFNlYXJjaCBmb3IgYSBieXRlIHZhbHVlIFswLTI1NV1cbiAgICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgJiZcbiAgICAgICAgdHlwZW9mIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGlmIChkaXIpIHtcbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXhPZi5jYWxsKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0KVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXlJbmRleE9mKGJ1ZmZlciwgWyB2YWwgXSwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcilcbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ3ZhbCBtdXN0IGJlIHN0cmluZywgbnVtYmVyIG9yIEJ1ZmZlcicpXG59XG5cbmZ1bmN0aW9uIGFycmF5SW5kZXhPZiAoYXJyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpIHtcbiAgdmFyIGluZGV4U2l6ZSA9IDFcbiAgdmFyIGFyckxlbmd0aCA9IGFyci5sZW5ndGhcbiAgdmFyIHZhbExlbmd0aCA9IHZhbC5sZW5ndGhcblxuICBpZiAoZW5jb2RpbmcgIT09IHVuZGVmaW5lZCkge1xuICAgIGVuY29kaW5nID0gU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgaWYgKGVuY29kaW5nID09PSAndWNzMicgfHwgZW5jb2RpbmcgPT09ICd1Y3MtMicgfHxcbiAgICAgICAgZW5jb2RpbmcgPT09ICd1dGYxNmxlJyB8fCBlbmNvZGluZyA9PT0gJ3V0Zi0xNmxlJykge1xuICAgICAgaWYgKGFyci5sZW5ndGggPCAyIHx8IHZhbC5sZW5ndGggPCAyKSB7XG4gICAgICAgIHJldHVybiAtMVxuICAgICAgfVxuICAgICAgaW5kZXhTaXplID0gMlxuICAgICAgYXJyTGVuZ3RoIC89IDJcbiAgICAgIHZhbExlbmd0aCAvPSAyXG4gICAgICBieXRlT2Zmc2V0IC89IDJcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZWFkIChidWYsIGkpIHtcbiAgICBpZiAoaW5kZXhTaXplID09PSAxKSB7XG4gICAgICByZXR1cm4gYnVmW2ldXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBidWYucmVhZFVJbnQxNkJFKGkgKiBpbmRleFNpemUpXG4gICAgfVxuICB9XG5cbiAgdmFyIGlcbiAgaWYgKGRpcikge1xuICAgIHZhciBmb3VuZEluZGV4ID0gLTFcbiAgICBmb3IgKGkgPSBieXRlT2Zmc2V0OyBpIDwgYXJyTGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChyZWFkKGFyciwgaSkgPT09IHJlYWQodmFsLCBmb3VuZEluZGV4ID09PSAtMSA/IDAgOiBpIC0gZm91bmRJbmRleCkpIHtcbiAgICAgICAgaWYgKGZvdW5kSW5kZXggPT09IC0xKSBmb3VuZEluZGV4ID0gaVxuICAgICAgICBpZiAoaSAtIGZvdW5kSW5kZXggKyAxID09PSB2YWxMZW5ndGgpIHJldHVybiBmb3VuZEluZGV4ICogaW5kZXhTaXplXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoZm91bmRJbmRleCAhPT0gLTEpIGkgLT0gaSAtIGZvdW5kSW5kZXhcbiAgICAgICAgZm91bmRJbmRleCA9IC0xXG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChieXRlT2Zmc2V0ICsgdmFsTGVuZ3RoID4gYXJyTGVuZ3RoKSBieXRlT2Zmc2V0ID0gYXJyTGVuZ3RoIC0gdmFsTGVuZ3RoXG4gICAgZm9yIChpID0gYnl0ZU9mZnNldDsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciBmb3VuZCA9IHRydWVcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdmFsTGVuZ3RoOyBqKyspIHtcbiAgICAgICAgaWYgKHJlYWQoYXJyLCBpICsgaikgIT09IHJlYWQodmFsLCBqKSkge1xuICAgICAgICAgIGZvdW5kID0gZmFsc2VcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZm91bmQpIHJldHVybiBpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIC0xXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5jbHVkZXMgPSBmdW5jdGlvbiBpbmNsdWRlcyAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gdGhpcy5pbmRleE9mKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpICE9PSAtMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluZGV4T2YgPSBmdW5jdGlvbiBpbmRleE9mICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiBiaWRpcmVjdGlvbmFsSW5kZXhPZih0aGlzLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCB0cnVlKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmxhc3RJbmRleE9mID0gZnVuY3Rpb24gbGFzdEluZGV4T2YgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGJpZGlyZWN0aW9uYWxJbmRleE9mKHRoaXMsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGZhbHNlKVxufVxuXG5mdW5jdGlvbiBoZXhXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIG9mZnNldCA9IE51bWJlcihvZmZzZXQpIHx8IDBcbiAgdmFyIHJlbWFpbmluZyA9IGJ1Zi5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKCFsZW5ndGgpIHtcbiAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgfSBlbHNlIHtcbiAgICBsZW5ndGggPSBOdW1iZXIobGVuZ3RoKVxuICAgIGlmIChsZW5ndGggPiByZW1haW5pbmcpIHtcbiAgICAgIGxlbmd0aCA9IHJlbWFpbmluZ1xuICAgIH1cbiAgfVxuXG4gIC8vIG11c3QgYmUgYW4gZXZlbiBudW1iZXIgb2YgZGlnaXRzXG4gIHZhciBzdHJMZW4gPSBzdHJpbmcubGVuZ3RoXG4gIGlmIChzdHJMZW4gJSAyICE9PSAwKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIGhleCBzdHJpbmcnKVxuXG4gIGlmIChsZW5ndGggPiBzdHJMZW4gLyAyKSB7XG4gICAgbGVuZ3RoID0gc3RyTGVuIC8gMlxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgcGFyc2VkID0gcGFyc2VJbnQoc3RyaW5nLnN1YnN0cihpICogMiwgMiksIDE2KVxuICAgIGlmIChpc05hTihwYXJzZWQpKSByZXR1cm4gaVxuICAgIGJ1ZltvZmZzZXQgKyBpXSA9IHBhcnNlZFxuICB9XG4gIHJldHVybiBpXG59XG5cbmZ1bmN0aW9uIHV0ZjhXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKHV0ZjhUb0J5dGVzKHN0cmluZywgYnVmLmxlbmd0aCAtIG9mZnNldCksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGFzY2lpV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcihhc2NpaVRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gbGF0aW4xV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYXNjaWlXcml0ZShidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGJhc2U2NFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIoYmFzZTY0VG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiB1Y3MyV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcih1dGYxNmxlVG9CeXRlcyhzdHJpbmcsIGJ1Zi5sZW5ndGggLSBvZmZzZXQpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gd3JpdGUgKHN0cmluZywgb2Zmc2V0LCBsZW5ndGgsIGVuY29kaW5nKSB7XG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcpXG4gIGlmIChvZmZzZXQgPT09IHVuZGVmaW5lZCkge1xuICAgIGVuY29kaW5nID0gJ3V0ZjgnXG4gICAgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgICBvZmZzZXQgPSAwXG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcsIGVuY29kaW5nKVxuICB9IGVsc2UgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkICYmIHR5cGVvZiBvZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgZW5jb2RpbmcgPSBvZmZzZXRcbiAgICBsZW5ndGggPSB0aGlzLmxlbmd0aFxuICAgIG9mZnNldCA9IDBcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZywgb2Zmc2V0WywgbGVuZ3RoXVssIGVuY29kaW5nXSlcbiAgfSBlbHNlIGlmIChpc0Zpbml0ZShvZmZzZXQpKSB7XG4gICAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICAgIGlmIChpc0Zpbml0ZShsZW5ndGgpKSB7XG4gICAgICBsZW5ndGggPSBsZW5ndGggfCAwXG4gICAgICBpZiAoZW5jb2RpbmcgPT09IHVuZGVmaW5lZCkgZW5jb2RpbmcgPSAndXRmOCdcbiAgICB9IGVsc2Uge1xuICAgICAgZW5jb2RpbmcgPSBsZW5ndGhcbiAgICAgIGxlbmd0aCA9IHVuZGVmaW5lZFxuICAgIH1cbiAgLy8gbGVnYWN5IHdyaXRlKHN0cmluZywgZW5jb2RpbmcsIG9mZnNldCwgbGVuZ3RoKSAtIHJlbW92ZSBpbiB2MC4xM1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdCdWZmZXIud3JpdGUoc3RyaW5nLCBlbmNvZGluZywgb2Zmc2V0WywgbGVuZ3RoXSkgaXMgbm8gbG9uZ2VyIHN1cHBvcnRlZCdcbiAgICApXG4gIH1cblxuICB2YXIgcmVtYWluaW5nID0gdGhpcy5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkIHx8IGxlbmd0aCA+IHJlbWFpbmluZykgbGVuZ3RoID0gcmVtYWluaW5nXG5cbiAgaWYgKChzdHJpbmcubGVuZ3RoID4gMCAmJiAobGVuZ3RoIDwgMCB8fCBvZmZzZXQgPCAwKSkgfHwgb2Zmc2V0ID4gdGhpcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQXR0ZW1wdCB0byB3cml0ZSBvdXRzaWRlIGJ1ZmZlciBib3VuZHMnKVxuICB9XG5cbiAgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSAndXRmOCdcblxuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuICBmb3IgKDs7KSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGhleFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gdXRmOFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgICAgcmV0dXJuIGFzY2lpV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsYXRpbjFXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICAvLyBXYXJuaW5nOiBtYXhMZW5ndGggbm90IHRha2VuIGludG8gYWNjb3VudCBpbiBiYXNlNjRXcml0ZVxuICAgICAgICByZXR1cm4gYmFzZTY0V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIHVjczJXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04gKCkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdCdWZmZXInLFxuICAgIGRhdGE6IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHRoaXMuX2FyciB8fCB0aGlzLCAwKVxuICB9XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgaWYgKHN0YXJ0ID09PSAwICYmIGVuZCA9PT0gYnVmLmxlbmd0aCkge1xuICAgIHJldHVybiBiYXNlNjQuZnJvbUJ5dGVBcnJheShidWYpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1Zi5zbGljZShzdGFydCwgZW5kKSlcbiAgfVxufVxuXG5mdW5jdGlvbiB1dGY4U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG4gIHZhciByZXMgPSBbXVxuXG4gIHZhciBpID0gc3RhcnRcbiAgd2hpbGUgKGkgPCBlbmQpIHtcbiAgICB2YXIgZmlyc3RCeXRlID0gYnVmW2ldXG4gICAgdmFyIGNvZGVQb2ludCA9IG51bGxcbiAgICB2YXIgYnl0ZXNQZXJTZXF1ZW5jZSA9IChmaXJzdEJ5dGUgPiAweEVGKSA/IDRcbiAgICAgIDogKGZpcnN0Qnl0ZSA+IDB4REYpID8gM1xuICAgICAgOiAoZmlyc3RCeXRlID4gMHhCRikgPyAyXG4gICAgICA6IDFcblxuICAgIGlmIChpICsgYnl0ZXNQZXJTZXF1ZW5jZSA8PSBlbmQpIHtcbiAgICAgIHZhciBzZWNvbmRCeXRlLCB0aGlyZEJ5dGUsIGZvdXJ0aEJ5dGUsIHRlbXBDb2RlUG9pbnRcblxuICAgICAgc3dpdGNoIChieXRlc1BlclNlcXVlbmNlKSB7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICBpZiAoZmlyc3RCeXRlIDwgMHg4MCkge1xuICAgICAgICAgICAgY29kZVBvaW50ID0gZmlyc3RCeXRlXG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4MUYpIDw8IDB4NiB8IChzZWNvbmRCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHg3Rikge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAodGhpcmRCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHhGKSA8PCAweEMgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpIDw8IDB4NiB8ICh0aGlyZEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweDdGRiAmJiAodGVtcENvZGVQb2ludCA8IDB4RDgwMCB8fCB0ZW1wQ29kZVBvaW50ID4gMHhERkZGKSkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBmb3VydGhCeXRlID0gYnVmW2kgKyAzXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwICYmICh0aGlyZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAoZm91cnRoQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4RikgPDwgMHgxMiB8IChzZWNvbmRCeXRlICYgMHgzRikgPDwgMHhDIHwgKHRoaXJkQnl0ZSAmIDB4M0YpIDw8IDB4NiB8IChmb3VydGhCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHhGRkZGICYmIHRlbXBDb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjb2RlUG9pbnQgPT09IG51bGwpIHtcbiAgICAgIC8vIHdlIGRpZCBub3QgZ2VuZXJhdGUgYSB2YWxpZCBjb2RlUG9pbnQgc28gaW5zZXJ0IGFcbiAgICAgIC8vIHJlcGxhY2VtZW50IGNoYXIgKFUrRkZGRCkgYW5kIGFkdmFuY2Ugb25seSAxIGJ5dGVcbiAgICAgIGNvZGVQb2ludCA9IDB4RkZGRFxuICAgICAgYnl0ZXNQZXJTZXF1ZW5jZSA9IDFcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA+IDB4RkZGRikge1xuICAgICAgLy8gZW5jb2RlIHRvIHV0ZjE2IChzdXJyb2dhdGUgcGFpciBkYW5jZSlcbiAgICAgIGNvZGVQb2ludCAtPSAweDEwMDAwXG4gICAgICByZXMucHVzaChjb2RlUG9pbnQgPj4+IDEwICYgMHgzRkYgfCAweEQ4MDApXG4gICAgICBjb2RlUG9pbnQgPSAweERDMDAgfCBjb2RlUG9pbnQgJiAweDNGRlxuICAgIH1cblxuICAgIHJlcy5wdXNoKGNvZGVQb2ludClcbiAgICBpICs9IGJ5dGVzUGVyU2VxdWVuY2VcbiAgfVxuXG4gIHJldHVybiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkocmVzKVxufVxuXG4vLyBCYXNlZCBvbiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yMjc0NzI3Mi82ODA3NDIsIHRoZSBicm93c2VyIHdpdGhcbi8vIHRoZSBsb3dlc3QgbGltaXQgaXMgQ2hyb21lLCB3aXRoIDB4MTAwMDAgYXJncy5cbi8vIFdlIGdvIDEgbWFnbml0dWRlIGxlc3MsIGZvciBzYWZldHlcbnZhciBNQVhfQVJHVU1FTlRTX0xFTkdUSCA9IDB4MTAwMFxuXG5mdW5jdGlvbiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkgKGNvZGVQb2ludHMpIHtcbiAgdmFyIGxlbiA9IGNvZGVQb2ludHMubGVuZ3RoXG4gIGlmIChsZW4gPD0gTUFYX0FSR1VNRU5UU19MRU5HVEgpIHtcbiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsIGNvZGVQb2ludHMpIC8vIGF2b2lkIGV4dHJhIHNsaWNlKClcbiAgfVxuXG4gIC8vIERlY29kZSBpbiBjaHVua3MgdG8gYXZvaWQgXCJjYWxsIHN0YWNrIHNpemUgZXhjZWVkZWRcIi5cbiAgdmFyIHJlcyA9ICcnXG4gIHZhciBpID0gMFxuICB3aGlsZSAoaSA8IGxlbikge1xuICAgIHJlcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFxuICAgICAgU3RyaW5nLFxuICAgICAgY29kZVBvaW50cy5zbGljZShpLCBpICs9IE1BWF9BUkdVTUVOVFNfTEVOR1RIKVxuICAgIClcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgcmV0ID0gJydcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldICYgMHg3RilcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIGxhdGluMVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHJldCA9ICcnXG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcblxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSlcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIGhleFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbiA9IGJ1Zi5sZW5ndGhcblxuICBpZiAoIXN0YXJ0IHx8IHN0YXJ0IDwgMCkgc3RhcnQgPSAwXG4gIGlmICghZW5kIHx8IGVuZCA8IDAgfHwgZW5kID4gbGVuKSBlbmQgPSBsZW5cblxuICB2YXIgb3V0ID0gJydcbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICBvdXQgKz0gdG9IZXgoYnVmW2ldKVxuICB9XG4gIHJldHVybiBvdXRcbn1cblxuZnVuY3Rpb24gdXRmMTZsZVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGJ5dGVzID0gYnVmLnNsaWNlKHN0YXJ0LCBlbmQpXG4gIHZhciByZXMgPSAnJ1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnl0ZXNbaV0gKyBieXRlc1tpICsgMV0gKiAyNTYpXG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24gc2xpY2UgKHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIHN0YXJ0ID0gfn5zdGFydFxuICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IH5+ZW5kXG5cbiAgaWYgKHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ICs9IGxlblxuICAgIGlmIChzdGFydCA8IDApIHN0YXJ0ID0gMFxuICB9IGVsc2UgaWYgKHN0YXJ0ID4gbGVuKSB7XG4gICAgc3RhcnQgPSBsZW5cbiAgfVxuXG4gIGlmIChlbmQgPCAwKSB7XG4gICAgZW5kICs9IGxlblxuICAgIGlmIChlbmQgPCAwKSBlbmQgPSAwXG4gIH0gZWxzZSBpZiAoZW5kID4gbGVuKSB7XG4gICAgZW5kID0gbGVuXG4gIH1cblxuICBpZiAoZW5kIDwgc3RhcnQpIGVuZCA9IHN0YXJ0XG5cbiAgdmFyIG5ld0J1ZlxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICBuZXdCdWYgPSB0aGlzLnN1YmFycmF5KHN0YXJ0LCBlbmQpXG4gICAgbmV3QnVmLl9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgfSBlbHNlIHtcbiAgICB2YXIgc2xpY2VMZW4gPSBlbmQgLSBzdGFydFxuICAgIG5ld0J1ZiA9IG5ldyBCdWZmZXIoc2xpY2VMZW4sIHVuZGVmaW5lZClcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNsaWNlTGVuOyArK2kpIHtcbiAgICAgIG5ld0J1ZltpXSA9IHRoaXNbaSArIHN0YXJ0XVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXdCdWZcbn1cblxuLypcbiAqIE5lZWQgdG8gbWFrZSBzdXJlIHRoYXQgYnVmZmVyIGlzbid0IHRyeWluZyB0byB3cml0ZSBvdXQgb2YgYm91bmRzLlxuICovXG5mdW5jdGlvbiBjaGVja09mZnNldCAob2Zmc2V0LCBleHQsIGxlbmd0aCkge1xuICBpZiAoKG9mZnNldCAlIDEpICE9PSAwIHx8IG9mZnNldCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdvZmZzZXQgaXMgbm90IHVpbnQnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gbGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVHJ5aW5nIHRvIGFjY2VzcyBiZXlvbmQgYnVmZmVyIGxlbmd0aCcpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRMRSA9IGZ1bmN0aW9uIHJlYWRVSW50TEUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIGldICogbXVsXG4gIH1cblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRCRSA9IGZ1bmN0aW9uIHJlYWRVSW50QkUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG4gIH1cblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAtLWJ5dGVMZW5ndGhdXG4gIHZhciBtdWwgPSAxXG4gIHdoaWxlIChieXRlTGVuZ3RoID4gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIC0tYnl0ZUxlbmd0aF0gKiBtdWxcbiAgfVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDggPSBmdW5jdGlvbiByZWFkVUludDggKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAxLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIHRoaXNbb2Zmc2V0XVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZMRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gdGhpc1tvZmZzZXRdIHwgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDE2QkUgPSBmdW5jdGlvbiByZWFkVUludDE2QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgOCkgfCB0aGlzW29mZnNldCArIDFdXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkxFID0gZnVuY3Rpb24gcmVhZFVJbnQzMkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICgodGhpc1tvZmZzZXRdKSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCAxNikpICtcbiAgICAgICh0aGlzW29mZnNldCArIDNdICogMHgxMDAwMDAwKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdICogMHgxMDAwMDAwKSArXG4gICAgKCh0aGlzW29mZnNldCArIDFdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgOCkgfFxuICAgIHRoaXNbb2Zmc2V0ICsgM10pXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludExFID0gZnVuY3Rpb24gcmVhZEludExFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XVxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bFxuICB9XG4gIG11bCAqPSAweDgwXG5cbiAgaWYgKHZhbCA+PSBtdWwpIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aClcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludEJFID0gZnVuY3Rpb24gcmVhZEludEJFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoXG4gIHZhciBtdWwgPSAxXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIC0taV1cbiAgd2hpbGUgKGkgPiAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1pXSAqIG11bFxuICB9XG4gIG11bCAqPSAweDgwXG5cbiAgaWYgKHZhbCA+PSBtdWwpIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aClcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDggPSBmdW5jdGlvbiByZWFkSW50OCAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDEsIHRoaXMubGVuZ3RoKVxuICBpZiAoISh0aGlzW29mZnNldF0gJiAweDgwKSkgcmV0dXJuICh0aGlzW29mZnNldF0pXG4gIHJldHVybiAoKDB4ZmYgLSB0aGlzW29mZnNldF0gKyAxKSAqIC0xKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkxFID0gZnVuY3Rpb24gcmVhZEludDE2TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XSB8ICh0aGlzW29mZnNldCArIDFdIDw8IDgpXG4gIHJldHVybiAodmFsICYgMHg4MDAwKSA/IHZhbCB8IDB4RkZGRjAwMDAgOiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRJbnQxNkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIDFdIHwgKHRoaXNbb2Zmc2V0XSA8PCA4KVxuICByZXR1cm4gKHZhbCAmIDB4ODAwMCkgPyB2YWwgfCAweEZGRkYwMDAwIDogdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyTEUgPSBmdW5jdGlvbiByZWFkSW50MzJMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdKSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOCkgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgM10gPDwgMjQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyQkUgPSBmdW5jdGlvbiByZWFkSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdIDw8IDI0KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCA4KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgM10pXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0TEUgPSBmdW5jdGlvbiByZWFkRmxvYXRMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgMjMsIDQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0QkUgPSBmdW5jdGlvbiByZWFkRmxvYXRCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgZmFsc2UsIDIzLCA0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWREb3VibGVMRSA9IGZ1bmN0aW9uIHJlYWREb3VibGVMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDgsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgNTIsIDgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUJFID0gZnVuY3Rpb24gcmVhZERvdWJsZUJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgOCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgNTIsIDgpXG59XG5cbmZ1bmN0aW9uIGNoZWNrSW50IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJidWZmZXJcIiBhcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyIGluc3RhbmNlJylcbiAgaWYgKHZhbHVlID4gbWF4IHx8IHZhbHVlIDwgbWluKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJ2YWx1ZVwiIGFyZ3VtZW50IGlzIG91dCBvZiBib3VuZHMnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnRMRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBtYXhCeXRlcyA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSAtIDFcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBtYXhCeXRlcywgMClcbiAgfVxuXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50QkUgPSBmdW5jdGlvbiB3cml0ZVVJbnRCRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBtYXhCeXRlcyA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSAtIDFcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBtYXhCeXRlcywgMClcbiAgfVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aCAtIDFcbiAgdmFyIG11bCA9IDFcbiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50OCA9IGZ1bmN0aW9uIHdyaXRlVUludDggKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHhmZiwgMClcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgdmFsdWUgPSBNYXRoLmZsb29yKHZhbHVlKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMVxufVxuXG5mdW5jdGlvbiBvYmplY3RXcml0ZVVJbnQxNiAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4pIHtcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmYgKyB2YWx1ZSArIDFcbiAgZm9yICh2YXIgaSA9IDAsIGogPSBNYXRoLm1pbihidWYubGVuZ3RoIC0gb2Zmc2V0LCAyKTsgaSA8IGo7ICsraSkge1xuICAgIGJ1ZltvZmZzZXQgKyBpXSA9ICh2YWx1ZSAmICgweGZmIDw8ICg4ICogKGxpdHRsZUVuZGlhbiA/IGkgOiAxIC0gaSkpKSkgPj4+XG4gICAgICAobGl0dGxlRW5kaWFuID8gaSA6IDEgLSBpKSAqIDhcbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnQxNkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4ZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQxNkJFID0gZnVuY3Rpb24gd3JpdGVVSW50MTZCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5mdW5jdGlvbiBvYmplY3RXcml0ZVVJbnQzMiAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4pIHtcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmZmZmZmICsgdmFsdWUgKyAxXG4gIGZvciAodmFyIGkgPSAwLCBqID0gTWF0aC5taW4oYnVmLmxlbmd0aCAtIG9mZnNldCwgNCk7IGkgPCBqOyArK2kpIHtcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSAodmFsdWUgPj4+IChsaXR0bGVFbmRpYW4gPyBpIDogMyAtIGkpICogOCkgJiAweGZmXG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkxFID0gZnVuY3Rpb24gd3JpdGVVSW50MzJMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNClcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZVVJbnQzMkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4ZmZmZmZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gMjQpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50TEUgPSBmdW5jdGlvbiB3cml0ZUludExFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbGltaXQgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCAtIDEpXG5cbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBsaW1pdCAtIDEsIC1saW1pdClcbiAgfVxuXG4gIHZhciBpID0gMFxuICB2YXIgbXVsID0gMVxuICB2YXIgc3ViID0gMFxuICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgLSAxXSAhPT0gMCkge1xuICAgICAgc3ViID0gMVxuICAgIH1cbiAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50QkUgPSBmdW5jdGlvbiB3cml0ZUludEJFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbGltaXQgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCAtIDEpXG5cbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBsaW1pdCAtIDEsIC1saW1pdClcbiAgfVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aCAtIDFcbiAgdmFyIG11bCA9IDFcbiAgdmFyIHN1YiA9IDBcbiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgKyAxXSAhPT0gMCkge1xuICAgICAgc3ViID0gMVxuICAgIH1cbiAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50OCA9IGZ1bmN0aW9uIHdyaXRlSW50OCAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAxLCAweDdmLCAtMHg4MClcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgdmFsdWUgPSBNYXRoLmZsb29yKHZhbHVlKVxuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmYgKyB2YWx1ZSArIDFcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZUludDE2TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHg3ZmZmLCAtMHg4MDAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZCRSA9IGZ1bmN0aW9uIHdyaXRlSW50MTZCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweDdmZmYsIC0weDgwMDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MzJMRSA9IGZ1bmN0aW9uIHdyaXRlSW50MzJMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgPj4+IDI0KVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZUludDMyQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApXG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmZmZmZiArIHZhbHVlICsgMVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDI0KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuZnVuY3Rpb24gY2hlY2tJRUVFNzU0IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgaWYgKG9mZnNldCArIGV4dCA+IGJ1Zi5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxuICBpZiAob2Zmc2V0IDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG59XG5cbmZ1bmN0aW9uIHdyaXRlRmxvYXQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgNCwgMy40MDI4MjM0NjYzODUyODg2ZSszOCwgLTMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgpXG4gIH1cbiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgMjMsIDQpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdExFID0gZnVuY3Rpb24gd3JpdGVGbG9hdExFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0QkUgPSBmdW5jdGlvbiB3cml0ZUZsb2F0QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZUZsb2F0KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuZnVuY3Rpb24gd3JpdGVEb3VibGUgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgOCwgMS43OTc2OTMxMzQ4NjIzMTU3RSszMDgsIC0xLjc5NzY5MzEzNDg2MjMxNTdFKzMwOClcbiAgfVxuICBpZWVlNzU0LndyaXRlKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCA1MiwgOClcbiAgcmV0dXJuIG9mZnNldCArIDhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUxFID0gZnVuY3Rpb24gd3JpdGVEb3VibGVMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRG91YmxlQkUgPSBmdW5jdGlvbiB3cml0ZURvdWJsZUJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG4vLyBjb3B5KHRhcmdldEJ1ZmZlciwgdGFyZ2V0U3RhcnQ9MCwgc291cmNlU3RhcnQ9MCwgc291cmNlRW5kPWJ1ZmZlci5sZW5ndGgpXG5CdWZmZXIucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiBjb3B5ICh0YXJnZXQsIHRhcmdldFN0YXJ0LCBzdGFydCwgZW5kKSB7XG4gIGlmICghc3RhcnQpIHN0YXJ0ID0gMFxuICBpZiAoIWVuZCAmJiBlbmQgIT09IDApIGVuZCA9IHRoaXMubGVuZ3RoXG4gIGlmICh0YXJnZXRTdGFydCA+PSB0YXJnZXQubGVuZ3RoKSB0YXJnZXRTdGFydCA9IHRhcmdldC5sZW5ndGhcbiAgaWYgKCF0YXJnZXRTdGFydCkgdGFyZ2V0U3RhcnQgPSAwXG4gIGlmIChlbmQgPiAwICYmIGVuZCA8IHN0YXJ0KSBlbmQgPSBzdGFydFxuXG4gIC8vIENvcHkgMCBieXRlczsgd2UncmUgZG9uZVxuICBpZiAoZW5kID09PSBzdGFydCkgcmV0dXJuIDBcbiAgaWYgKHRhcmdldC5sZW5ndGggPT09IDAgfHwgdGhpcy5sZW5ndGggPT09IDApIHJldHVybiAwXG5cbiAgLy8gRmF0YWwgZXJyb3IgY29uZGl0aW9uc1xuICBpZiAodGFyZ2V0U3RhcnQgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3RhcmdldFN0YXJ0IG91dCBvZiBib3VuZHMnKVxuICB9XG4gIGlmIChzdGFydCA8IDAgfHwgc3RhcnQgPj0gdGhpcy5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdzb3VyY2VTdGFydCBvdXQgb2YgYm91bmRzJylcbiAgaWYgKGVuZCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdzb3VyY2VFbmQgb3V0IG9mIGJvdW5kcycpXG5cbiAgLy8gQXJlIHdlIG9vYj9cbiAgaWYgKGVuZCA+IHRoaXMubGVuZ3RoKSBlbmQgPSB0aGlzLmxlbmd0aFxuICBpZiAodGFyZ2V0Lmxlbmd0aCAtIHRhcmdldFN0YXJ0IDwgZW5kIC0gc3RhcnQpIHtcbiAgICBlbmQgPSB0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0U3RhcnQgKyBzdGFydFxuICB9XG5cbiAgdmFyIGxlbiA9IGVuZCAtIHN0YXJ0XG4gIHZhciBpXG5cbiAgaWYgKHRoaXMgPT09IHRhcmdldCAmJiBzdGFydCA8IHRhcmdldFN0YXJ0ICYmIHRhcmdldFN0YXJ0IDwgZW5kKSB7XG4gICAgLy8gZGVzY2VuZGluZyBjb3B5IGZyb20gZW5kXG4gICAgZm9yIChpID0gbGVuIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgIHRhcmdldFtpICsgdGFyZ2V0U3RhcnRdID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9IGVsc2UgaWYgKGxlbiA8IDEwMDAgfHwgIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gYXNjZW5kaW5nIGNvcHkgZnJvbSBzdGFydFxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgICAgdGFyZ2V0W2kgKyB0YXJnZXRTdGFydF0gPSB0aGlzW2kgKyBzdGFydF1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgVWludDhBcnJheS5wcm90b3R5cGUuc2V0LmNhbGwoXG4gICAgICB0YXJnZXQsXG4gICAgICB0aGlzLnN1YmFycmF5KHN0YXJ0LCBzdGFydCArIGxlbiksXG4gICAgICB0YXJnZXRTdGFydFxuICAgIClcbiAgfVxuXG4gIHJldHVybiBsZW5cbn1cblxuLy8gVXNhZ2U6XG4vLyAgICBidWZmZXIuZmlsbChudW1iZXJbLCBvZmZzZXRbLCBlbmRdXSlcbi8vICAgIGJ1ZmZlci5maWxsKGJ1ZmZlclssIG9mZnNldFssIGVuZF1dKVxuLy8gICAgYnVmZmVyLmZpbGwoc3RyaW5nWywgb2Zmc2V0WywgZW5kXV1bLCBlbmNvZGluZ10pXG5CdWZmZXIucHJvdG90eXBlLmZpbGwgPSBmdW5jdGlvbiBmaWxsICh2YWwsIHN0YXJ0LCBlbmQsIGVuY29kaW5nKSB7XG4gIC8vIEhhbmRsZSBzdHJpbmcgY2FzZXM6XG4gIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIGlmICh0eXBlb2Ygc3RhcnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbmNvZGluZyA9IHN0YXJ0XG4gICAgICBzdGFydCA9IDBcbiAgICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZW5kID09PSAnc3RyaW5nJykge1xuICAgICAgZW5jb2RpbmcgPSBlbmRcbiAgICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gICAgfVxuICAgIGlmICh2YWwubGVuZ3RoID09PSAxKSB7XG4gICAgICB2YXIgY29kZSA9IHZhbC5jaGFyQ29kZUF0KDApXG4gICAgICBpZiAoY29kZSA8IDI1Nikge1xuICAgICAgICB2YWwgPSBjb2RlXG4gICAgICB9XG4gICAgfVxuICAgIGlmIChlbmNvZGluZyAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBlbmNvZGluZyAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2VuY29kaW5nIG11c3QgYmUgYSBzdHJpbmcnKVxuICAgIH1cbiAgICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJyAmJiAhQnVmZmVyLmlzRW5jb2RpbmcoZW5jb2RpbmcpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgdmFsID0gdmFsICYgMjU1XG4gIH1cblxuICAvLyBJbnZhbGlkIHJhbmdlcyBhcmUgbm90IHNldCB0byBhIGRlZmF1bHQsIHNvIGNhbiByYW5nZSBjaGVjayBlYXJseS5cbiAgaWYgKHN0YXJ0IDwgMCB8fCB0aGlzLmxlbmd0aCA8IHN0YXJ0IHx8IHRoaXMubGVuZ3RoIDwgZW5kKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ091dCBvZiByYW5nZSBpbmRleCcpXG4gIH1cblxuICBpZiAoZW5kIDw9IHN0YXJ0KSB7XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIHN0YXJ0ID0gc3RhcnQgPj4+IDBcbiAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyB0aGlzLmxlbmd0aCA6IGVuZCA+Pj4gMFxuXG4gIGlmICghdmFsKSB2YWwgPSAwXG5cbiAgdmFyIGlcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgZm9yIChpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgICAgdGhpc1tpXSA9IHZhbFxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgYnl0ZXMgPSBCdWZmZXIuaXNCdWZmZXIodmFsKVxuICAgICAgPyB2YWxcbiAgICAgIDogdXRmOFRvQnl0ZXMobmV3IEJ1ZmZlcih2YWwsIGVuY29kaW5nKS50b1N0cmluZygpKVxuICAgIHZhciBsZW4gPSBieXRlcy5sZW5ndGhcbiAgICBmb3IgKGkgPSAwOyBpIDwgZW5kIC0gc3RhcnQ7ICsraSkge1xuICAgICAgdGhpc1tpICsgc3RhcnRdID0gYnl0ZXNbaSAlIGxlbl1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpc1xufVxuXG4vLyBIRUxQRVIgRlVOQ1RJT05TXG4vLyA9PT09PT09PT09PT09PT09XG5cbnZhciBJTlZBTElEX0JBU0U2NF9SRSA9IC9bXitcXC8wLTlBLVphLXotX10vZ1xuXG5mdW5jdGlvbiBiYXNlNjRjbGVhbiAoc3RyKSB7XG4gIC8vIE5vZGUgc3RyaXBzIG91dCBpbnZhbGlkIGNoYXJhY3RlcnMgbGlrZSBcXG4gYW5kIFxcdCBmcm9tIHRoZSBzdHJpbmcsIGJhc2U2NC1qcyBkb2VzIG5vdFxuICBzdHIgPSBzdHJpbmd0cmltKHN0cikucmVwbGFjZShJTlZBTElEX0JBU0U2NF9SRSwgJycpXG4gIC8vIE5vZGUgY29udmVydHMgc3RyaW5ncyB3aXRoIGxlbmd0aCA8IDIgdG8gJydcbiAgaWYgKHN0ci5sZW5ndGggPCAyKSByZXR1cm4gJydcbiAgLy8gTm9kZSBhbGxvd3MgZm9yIG5vbi1wYWRkZWQgYmFzZTY0IHN0cmluZ3MgKG1pc3NpbmcgdHJhaWxpbmcgPT09KSwgYmFzZTY0LWpzIGRvZXMgbm90XG4gIHdoaWxlIChzdHIubGVuZ3RoICUgNCAhPT0gMCkge1xuICAgIHN0ciA9IHN0ciArICc9J1xuICB9XG4gIHJldHVybiBzdHJcbn1cblxuZnVuY3Rpb24gc3RyaW5ndHJpbSAoc3RyKSB7XG4gIGlmIChzdHIudHJpbSkgcmV0dXJuIHN0ci50cmltKClcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nLCAnJylcbn1cblxuZnVuY3Rpb24gdG9IZXggKG4pIHtcbiAgaWYgKG4gPCAxNikgcmV0dXJuICcwJyArIG4udG9TdHJpbmcoMTYpXG4gIHJldHVybiBuLnRvU3RyaW5nKDE2KVxufVxuXG5mdW5jdGlvbiB1dGY4VG9CeXRlcyAoc3RyaW5nLCB1bml0cykge1xuICB1bml0cyA9IHVuaXRzIHx8IEluZmluaXR5XG4gIHZhciBjb2RlUG9pbnRcbiAgdmFyIGxlbmd0aCA9IHN0cmluZy5sZW5ndGhcbiAgdmFyIGxlYWRTdXJyb2dhdGUgPSBudWxsXG4gIHZhciBieXRlcyA9IFtdXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGNvZGVQb2ludCA9IHN0cmluZy5jaGFyQ29kZUF0KGkpXG5cbiAgICAvLyBpcyBzdXJyb2dhdGUgY29tcG9uZW50XG4gICAgaWYgKGNvZGVQb2ludCA+IDB4RDdGRiAmJiBjb2RlUG9pbnQgPCAweEUwMDApIHtcbiAgICAgIC8vIGxhc3QgY2hhciB3YXMgYSBsZWFkXG4gICAgICBpZiAoIWxlYWRTdXJyb2dhdGUpIHtcbiAgICAgICAgLy8gbm8gbGVhZCB5ZXRcbiAgICAgICAgaWYgKGNvZGVQb2ludCA+IDB4REJGRikge1xuICAgICAgICAgIC8vIHVuZXhwZWN0ZWQgdHJhaWxcbiAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9IGVsc2UgaWYgKGkgKyAxID09PSBsZW5ndGgpIHtcbiAgICAgICAgICAvLyB1bnBhaXJlZCBsZWFkXG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHZhbGlkIGxlYWRcbiAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IGNvZGVQb2ludFxuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIC8vIDIgbGVhZHMgaW4gYSByb3dcbiAgICAgIGlmIChjb2RlUG9pbnQgPCAweERDMDApIHtcbiAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgIGxlYWRTdXJyb2dhdGUgPSBjb2RlUG9pbnRcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgLy8gdmFsaWQgc3Vycm9nYXRlIHBhaXJcbiAgICAgIGNvZGVQb2ludCA9IChsZWFkU3Vycm9nYXRlIC0gMHhEODAwIDw8IDEwIHwgY29kZVBvaW50IC0gMHhEQzAwKSArIDB4MTAwMDBcbiAgICB9IGVsc2UgaWYgKGxlYWRTdXJyb2dhdGUpIHtcbiAgICAgIC8vIHZhbGlkIGJtcCBjaGFyLCBidXQgbGFzdCBjaGFyIHdhcyBhIGxlYWRcbiAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgIH1cblxuICAgIGxlYWRTdXJyb2dhdGUgPSBudWxsXG5cbiAgICAvLyBlbmNvZGUgdXRmOFxuICAgIGlmIChjb2RlUG9pbnQgPCAweDgwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDEpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goY29kZVBvaW50KVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHg4MDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiB8IDB4QzAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDEwMDAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDMpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgfCAweEUwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2ICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSA0KSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHgxMiB8IDB4RjAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgY29kZSBwb2ludCcpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpVG9CeXRlcyAoc3RyKSB7XG4gIHZhciBieXRlQXJyYXkgPSBbXVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgIC8vIE5vZGUncyBjb2RlIHNlZW1zIHRvIGJlIGRvaW5nIHRoaXMgYW5kIG5vdCAmIDB4N0YuLlxuICAgIGJ5dGVBcnJheS5wdXNoKHN0ci5jaGFyQ29kZUF0KGkpICYgMHhGRilcbiAgfVxuICByZXR1cm4gYnl0ZUFycmF5XG59XG5cbmZ1bmN0aW9uIHV0ZjE2bGVUb0J5dGVzIChzdHIsIHVuaXRzKSB7XG4gIHZhciBjLCBoaSwgbG9cbiAgdmFyIGJ5dGVBcnJheSA9IFtdXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG4gICAgaWYgKCh1bml0cyAtPSAyKSA8IDApIGJyZWFrXG5cbiAgICBjID0gc3RyLmNoYXJDb2RlQXQoaSlcbiAgICBoaSA9IGMgPj4gOFxuICAgIGxvID0gYyAlIDI1NlxuICAgIGJ5dGVBcnJheS5wdXNoKGxvKVxuICAgIGJ5dGVBcnJheS5wdXNoKGhpKVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVBcnJheVxufVxuXG5mdW5jdGlvbiBiYXNlNjRUb0J5dGVzIChzdHIpIHtcbiAgcmV0dXJuIGJhc2U2NC50b0J5dGVBcnJheShiYXNlNjRjbGVhbihzdHIpKVxufVxuXG5mdW5jdGlvbiBibGl0QnVmZmVyIChzcmMsIGRzdCwgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGlmICgoaSArIG9mZnNldCA+PSBkc3QubGVuZ3RoKSB8fCAoaSA+PSBzcmMubGVuZ3RoKSkgYnJlYWtcbiAgICBkc3RbaSArIG9mZnNldF0gPSBzcmNbaV1cbiAgfVxuICByZXR1cm4gaVxufVxuXG5mdW5jdGlvbiBpc25hbiAodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IHZhbCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNlbGYtY29tcGFyZVxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBhc3NlcnQ7XG5cbmZ1bmN0aW9uIGFzc2VydCh2YWwsIG1zZykge1xuICBpZiAoIXZhbClcbiAgICB0aHJvdyBuZXcgRXJyb3IobXNnIHx8ICdBc3NlcnRpb24gZmFpbGVkJyk7XG59XG5cbmFzc2VydC5lcXVhbCA9IGZ1bmN0aW9uIGFzc2VydEVxdWFsKGwsIHIsIG1zZykge1xuICBpZiAobCAhPSByKVxuICAgIHRocm93IG5ldyBFcnJvcihtc2cgfHwgKCdBc3NlcnRpb24gZmFpbGVkOiAnICsgbCArICcgIT0gJyArIHIpKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IGV4cG9ydHM7XG52YXIgQk4gPSByZXF1aXJlKCdibi5qcycpO1xudmFyIG1pbkFzc2VydCA9IHJlcXVpcmUoJ21pbmltYWxpc3RpYy1hc3NlcnQnKTtcbnZhciBtaW5VdGlscyA9IHJlcXVpcmUoJ21pbmltYWxpc3RpYy1jcnlwdG8tdXRpbHMnKTtcblxudXRpbHMuYXNzZXJ0ID0gbWluQXNzZXJ0O1xudXRpbHMudG9BcnJheSA9IG1pblV0aWxzLnRvQXJyYXk7XG51dGlscy56ZXJvMiA9IG1pblV0aWxzLnplcm8yO1xudXRpbHMudG9IZXggPSBtaW5VdGlscy50b0hleDtcbnV0aWxzLmVuY29kZSA9IG1pblV0aWxzLmVuY29kZTtcblxuLy8gUmVwcmVzZW50IG51bSBpbiBhIHctTkFGIGZvcm1cbmZ1bmN0aW9uIGdldE5BRihudW0sIHcpIHtcbiAgdmFyIG5hZiA9IFtdO1xuICB2YXIgd3MgPSAxIDw8ICh3ICsgMSk7XG4gIHZhciBrID0gbnVtLmNsb25lKCk7XG4gIHdoaWxlIChrLmNtcG4oMSkgPj0gMCkge1xuICAgIHZhciB6O1xuICAgIGlmIChrLmlzT2RkKCkpIHtcbiAgICAgIHZhciBtb2QgPSBrLmFuZGxuKHdzIC0gMSk7XG4gICAgICBpZiAobW9kID4gKHdzID4+IDEpIC0gMSlcbiAgICAgICAgeiA9ICh3cyA+PiAxKSAtIG1vZDtcbiAgICAgIGVsc2VcbiAgICAgICAgeiA9IG1vZDtcbiAgICAgIGsuaXN1Ym4oeik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHogPSAwO1xuICAgIH1cbiAgICBuYWYucHVzaCh6KTtcblxuICAgIC8vIE9wdGltaXphdGlvbiwgc2hpZnQgYnkgd29yZCBpZiBwb3NzaWJsZVxuICAgIHZhciBzaGlmdCA9IChrLmNtcG4oMCkgIT09IDAgJiYgay5hbmRsbih3cyAtIDEpID09PSAwKSA/ICh3ICsgMSkgOiAxO1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgc2hpZnQ7IGkrKylcbiAgICAgIG5hZi5wdXNoKDApO1xuICAgIGsuaXVzaHJuKHNoaWZ0KTtcbiAgfVxuXG4gIHJldHVybiBuYWY7XG59XG51dGlscy5nZXROQUYgPSBnZXROQUY7XG5cbi8vIFJlcHJlc2VudCBrMSwgazIgaW4gYSBKb2ludCBTcGFyc2UgRm9ybVxuZnVuY3Rpb24gZ2V0SlNGKGsxLCBrMikge1xuICB2YXIganNmID0gW1xuICAgIFtdLFxuICAgIFtdXG4gIF07XG5cbiAgazEgPSBrMS5jbG9uZSgpO1xuICBrMiA9IGsyLmNsb25lKCk7XG4gIHZhciBkMSA9IDA7XG4gIHZhciBkMiA9IDA7XG4gIHdoaWxlIChrMS5jbXBuKC1kMSkgPiAwIHx8IGsyLmNtcG4oLWQyKSA+IDApIHtcblxuICAgIC8vIEZpcnN0IHBoYXNlXG4gICAgdmFyIG0xNCA9IChrMS5hbmRsbigzKSArIGQxKSAmIDM7XG4gICAgdmFyIG0yNCA9IChrMi5hbmRsbigzKSArIGQyKSAmIDM7XG4gICAgaWYgKG0xNCA9PT0gMylcbiAgICAgIG0xNCA9IC0xO1xuICAgIGlmIChtMjQgPT09IDMpXG4gICAgICBtMjQgPSAtMTtcbiAgICB2YXIgdTE7XG4gICAgaWYgKChtMTQgJiAxKSA9PT0gMCkge1xuICAgICAgdTEgPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbTggPSAoazEuYW5kbG4oNykgKyBkMSkgJiA3O1xuICAgICAgaWYgKChtOCA9PT0gMyB8fCBtOCA9PT0gNSkgJiYgbTI0ID09PSAyKVxuICAgICAgICB1MSA9IC1tMTQ7XG4gICAgICBlbHNlXG4gICAgICAgIHUxID0gbTE0O1xuICAgIH1cbiAgICBqc2ZbMF0ucHVzaCh1MSk7XG5cbiAgICB2YXIgdTI7XG4gICAgaWYgKChtMjQgJiAxKSA9PT0gMCkge1xuICAgICAgdTIgPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbTggPSAoazIuYW5kbG4oNykgKyBkMikgJiA3O1xuICAgICAgaWYgKChtOCA9PT0gMyB8fCBtOCA9PT0gNSkgJiYgbTE0ID09PSAyKVxuICAgICAgICB1MiA9IC1tMjQ7XG4gICAgICBlbHNlXG4gICAgICAgIHUyID0gbTI0O1xuICAgIH1cbiAgICBqc2ZbMV0ucHVzaCh1Mik7XG5cbiAgICAvLyBTZWNvbmQgcGhhc2VcbiAgICBpZiAoMiAqIGQxID09PSB1MSArIDEpXG4gICAgICBkMSA9IDEgLSBkMTtcbiAgICBpZiAoMiAqIGQyID09PSB1MiArIDEpXG4gICAgICBkMiA9IDEgLSBkMjtcbiAgICBrMS5pdXNocm4oMSk7XG4gICAgazIuaXVzaHJuKDEpO1xuICB9XG5cbiAgcmV0dXJuIGpzZjtcbn1cbnV0aWxzLmdldEpTRiA9IGdldEpTRjtcblxuZnVuY3Rpb24gY2FjaGVkUHJvcGVydHkob2JqLCBuYW1lLCBjb21wdXRlcikge1xuICB2YXIga2V5ID0gJ18nICsgbmFtZTtcbiAgb2JqLnByb3RvdHlwZVtuYW1lXSA9IGZ1bmN0aW9uIGNhY2hlZFByb3BlcnR5KCkge1xuICAgIHJldHVybiB0aGlzW2tleV0gIT09IHVuZGVmaW5lZCA/IHRoaXNba2V5XSA6XG4gICAgICAgICAgIHRoaXNba2V5XSA9IGNvbXB1dGVyLmNhbGwodGhpcyk7XG4gIH07XG59XG51dGlscy5jYWNoZWRQcm9wZXJ0eSA9IGNhY2hlZFByb3BlcnR5O1xuXG5mdW5jdGlvbiBwYXJzZUJ5dGVzKGJ5dGVzKSB7XG4gIHJldHVybiB0eXBlb2YgYnl0ZXMgPT09ICdzdHJpbmcnID8gdXRpbHMudG9BcnJheShieXRlcywgJ2hleCcpIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBieXRlcztcbn1cbnV0aWxzLnBhcnNlQnl0ZXMgPSBwYXJzZUJ5dGVzO1xuXG5mdW5jdGlvbiBpbnRGcm9tTEUoYnl0ZXMpIHtcbiAgcmV0dXJuIG5ldyBCTihieXRlcywgJ2hleCcsICdsZScpO1xufVxudXRpbHMuaW50RnJvbUxFID0gaW50RnJvbUxFO1xuXG4iLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iLCIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG4vLyBkb24ndCBicmVhayB0aGluZ3MuICBCdXQgd2UgbmVlZCB0byB3cmFwIGl0IGluIGEgdHJ5IGNhdGNoIGluIGNhc2UgaXQgaXNcbi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGFcbi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG5cbnZhciBjYWNoZWRTZXRUaW1lb3V0O1xudmFyIGNhY2hlZENsZWFyVGltZW91dDtcblxuZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG4oZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2xlYXJUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgIH1cbn0gKCkpXG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xuICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVsdFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiYgc2V0VGltZW91dCkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sIDApO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTtcbiAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxufVxuZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikge1xuICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuICAgICAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLlxuICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dFxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG59XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xudmFyIGN1cnJlbnRRdWV1ZTtcbnZhciBxdWV1ZUluZGV4ID0gLTE7XG5cbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcbiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgIH1cbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIGRyYWluUXVldWUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuXG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZShsZW4pIHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gW107XG4gICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7XG59XG5cbnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTtcbiAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykge1xuICAgICAgICBydW5UaW1lb3V0KGRyYWluUXVldWUpO1xuICAgIH1cbn07XG5cbi8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHNcbmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuICAgIHRoaXMuZnVuID0gZnVuO1xuICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbn1cbkl0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTtcbn07XG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcbnByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xucHJvY2Vzcy52ZXJzaW9ucyA9IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRPbmNlTGlzdGVuZXIgPSBub29wO1xuXG5wcm9jZXNzLmxpc3RlbmVycyA9IGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBbXSB9XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYXNzZXJ0ID0gcmVxdWlyZSgnbWluaW1hbGlzdGljLWFzc2VydCcpO1xudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcblxuZXhwb3J0cy5pbmhlcml0cyA9IGluaGVyaXRzO1xuXG5mdW5jdGlvbiBpc1N1cnJvZ2F0ZVBhaXIobXNnLCBpKSB7XG4gIGlmICgobXNnLmNoYXJDb2RlQXQoaSkgJiAweEZDMDApICE9PSAweEQ4MDApIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKGkgPCAwIHx8IGkgKyAxID49IG1zZy5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIChtc2cuY2hhckNvZGVBdChpICsgMSkgJiAweEZDMDApID09PSAweERDMDA7XG59XG5cbmZ1bmN0aW9uIHRvQXJyYXkobXNnLCBlbmMpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkobXNnKSlcbiAgICByZXR1cm4gbXNnLnNsaWNlKCk7XG4gIGlmICghbXNnKVxuICAgIHJldHVybiBbXTtcbiAgdmFyIHJlcyA9IFtdO1xuICBpZiAodHlwZW9mIG1zZyA9PT0gJ3N0cmluZycpIHtcbiAgICBpZiAoIWVuYykge1xuICAgICAgLy8gSW5zcGlyZWQgYnkgc3RyaW5nVG9VdGY4Qnl0ZUFycmF5KCkgaW4gY2xvc3VyZS1saWJyYXJ5IGJ5IEdvb2dsZVxuICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZS9jbG9zdXJlLWxpYnJhcnkvYmxvYi84NTk4ZDg3MjQyYWY1OWFhYzIzMzI3MDc0MmM4OTg0ZTJiMmJkYmUwL2Nsb3N1cmUvZ29vZy9jcnlwdC9jcnlwdC5qcyNMMTE3LUwxNDNcbiAgICAgIC8vIEFwYWNoZSBMaWNlbnNlIDIuMFxuICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZS9jbG9zdXJlLWxpYnJhcnkvYmxvYi9tYXN0ZXIvTElDRU5TRVxuICAgICAgdmFyIHAgPSAwO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtc2cubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGMgPSBtc2cuY2hhckNvZGVBdChpKTtcbiAgICAgICAgaWYgKGMgPCAxMjgpIHtcbiAgICAgICAgICByZXNbcCsrXSA9IGM7XG4gICAgICAgIH0gZWxzZSBpZiAoYyA8IDIwNDgpIHtcbiAgICAgICAgICByZXNbcCsrXSA9IChjID4+IDYpIHwgMTkyO1xuICAgICAgICAgIHJlc1twKytdID0gKGMgJiA2MykgfCAxMjg7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNTdXJyb2dhdGVQYWlyKG1zZywgaSkpIHtcbiAgICAgICAgICBjID0gMHgxMDAwMCArICgoYyAmIDB4MDNGRikgPDwgMTApICsgKG1zZy5jaGFyQ29kZUF0KCsraSkgJiAweDAzRkYpO1xuICAgICAgICAgIHJlc1twKytdID0gKGMgPj4gMTgpIHwgMjQwO1xuICAgICAgICAgIHJlc1twKytdID0gKChjID4+IDEyKSAmIDYzKSB8IDEyODtcbiAgICAgICAgICByZXNbcCsrXSA9ICgoYyA+PiA2KSAmIDYzKSB8IDEyODtcbiAgICAgICAgICByZXNbcCsrXSA9IChjICYgNjMpIHwgMTI4O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc1twKytdID0gKGMgPj4gMTIpIHwgMjI0O1xuICAgICAgICAgIHJlc1twKytdID0gKChjID4+IDYpICYgNjMpIHwgMTI4O1xuICAgICAgICAgIHJlc1twKytdID0gKGMgJiA2MykgfCAxMjg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGVuYyA9PT0gJ2hleCcpIHtcbiAgICAgIG1zZyA9IG1zZy5yZXBsYWNlKC9bXmEtejAtOV0rL2lnLCAnJyk7XG4gICAgICBpZiAobXNnLmxlbmd0aCAlIDIgIT09IDApXG4gICAgICAgIG1zZyA9ICcwJyArIG1zZztcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBtc2cubGVuZ3RoOyBpICs9IDIpXG4gICAgICAgIHJlcy5wdXNoKHBhcnNlSW50KG1zZ1tpXSArIG1zZ1tpICsgMV0sIDE2KSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGZvciAoaSA9IDA7IGkgPCBtc2cubGVuZ3RoOyBpKyspXG4gICAgICByZXNbaV0gPSBtc2dbaV0gfCAwO1xuICB9XG4gIHJldHVybiByZXM7XG59XG5leHBvcnRzLnRvQXJyYXkgPSB0b0FycmF5O1xuXG5mdW5jdGlvbiB0b0hleChtc2cpIHtcbiAgdmFyIHJlcyA9ICcnO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IG1zZy5sZW5ndGg7IGkrKylcbiAgICByZXMgKz0gemVybzIobXNnW2ldLnRvU3RyaW5nKDE2KSk7XG4gIHJldHVybiByZXM7XG59XG5leHBvcnRzLnRvSGV4ID0gdG9IZXg7XG5cbmZ1bmN0aW9uIGh0b25sKHcpIHtcbiAgdmFyIHJlcyA9ICh3ID4+PiAyNCkgfFxuICAgICAgICAgICAgKCh3ID4+PiA4KSAmIDB4ZmYwMCkgfFxuICAgICAgICAgICAgKCh3IDw8IDgpICYgMHhmZjAwMDApIHxcbiAgICAgICAgICAgICgodyAmIDB4ZmYpIDw8IDI0KTtcbiAgcmV0dXJuIHJlcyA+Pj4gMDtcbn1cbmV4cG9ydHMuaHRvbmwgPSBodG9ubDtcblxuZnVuY3Rpb24gdG9IZXgzMihtc2csIGVuZGlhbikge1xuICB2YXIgcmVzID0gJyc7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbXNnLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHcgPSBtc2dbaV07XG4gICAgaWYgKGVuZGlhbiA9PT0gJ2xpdHRsZScpXG4gICAgICB3ID0gaHRvbmwodyk7XG4gICAgcmVzICs9IHplcm84KHcudG9TdHJpbmcoMTYpKTtcbiAgfVxuICByZXR1cm4gcmVzO1xufVxuZXhwb3J0cy50b0hleDMyID0gdG9IZXgzMjtcblxuZnVuY3Rpb24gemVybzIod29yZCkge1xuICBpZiAod29yZC5sZW5ndGggPT09IDEpXG4gICAgcmV0dXJuICcwJyArIHdvcmQ7XG4gIGVsc2VcbiAgICByZXR1cm4gd29yZDtcbn1cbmV4cG9ydHMuemVybzIgPSB6ZXJvMjtcblxuZnVuY3Rpb24gemVybzgod29yZCkge1xuICBpZiAod29yZC5sZW5ndGggPT09IDcpXG4gICAgcmV0dXJuICcwJyArIHdvcmQ7XG4gIGVsc2UgaWYgKHdvcmQubGVuZ3RoID09PSA2KVxuICAgIHJldHVybiAnMDAnICsgd29yZDtcbiAgZWxzZSBpZiAod29yZC5sZW5ndGggPT09IDUpXG4gICAgcmV0dXJuICcwMDAnICsgd29yZDtcbiAgZWxzZSBpZiAod29yZC5sZW5ndGggPT09IDQpXG4gICAgcmV0dXJuICcwMDAwJyArIHdvcmQ7XG4gIGVsc2UgaWYgKHdvcmQubGVuZ3RoID09PSAzKVxuICAgIHJldHVybiAnMDAwMDAnICsgd29yZDtcbiAgZWxzZSBpZiAod29yZC5sZW5ndGggPT09IDIpXG4gICAgcmV0dXJuICcwMDAwMDAnICsgd29yZDtcbiAgZWxzZSBpZiAod29yZC5sZW5ndGggPT09IDEpXG4gICAgcmV0dXJuICcwMDAwMDAwJyArIHdvcmQ7XG4gIGVsc2VcbiAgICByZXR1cm4gd29yZDtcbn1cbmV4cG9ydHMuemVybzggPSB6ZXJvODtcblxuZnVuY3Rpb24gam9pbjMyKG1zZywgc3RhcnQsIGVuZCwgZW5kaWFuKSB7XG4gIHZhciBsZW4gPSBlbmQgLSBzdGFydDtcbiAgYXNzZXJ0KGxlbiAlIDQgPT09IDApO1xuICB2YXIgcmVzID0gbmV3IEFycmF5KGxlbiAvIDQpO1xuICBmb3IgKHZhciBpID0gMCwgayA9IHN0YXJ0OyBpIDwgcmVzLmxlbmd0aDsgaSsrLCBrICs9IDQpIHtcbiAgICB2YXIgdztcbiAgICBpZiAoZW5kaWFuID09PSAnYmlnJylcbiAgICAgIHcgPSAobXNnW2tdIDw8IDI0KSB8IChtc2dbayArIDFdIDw8IDE2KSB8IChtc2dbayArIDJdIDw8IDgpIHwgbXNnW2sgKyAzXTtcbiAgICBlbHNlXG4gICAgICB3ID0gKG1zZ1trICsgM10gPDwgMjQpIHwgKG1zZ1trICsgMl0gPDwgMTYpIHwgKG1zZ1trICsgMV0gPDwgOCkgfCBtc2dba107XG4gICAgcmVzW2ldID0gdyA+Pj4gMDtcbiAgfVxuICByZXR1cm4gcmVzO1xufVxuZXhwb3J0cy5qb2luMzIgPSBqb2luMzI7XG5cbmZ1bmN0aW9uIHNwbGl0MzIobXNnLCBlbmRpYW4pIHtcbiAgdmFyIHJlcyA9IG5ldyBBcnJheShtc2cubGVuZ3RoICogNCk7XG4gIGZvciAodmFyIGkgPSAwLCBrID0gMDsgaSA8IG1zZy5sZW5ndGg7IGkrKywgayArPSA0KSB7XG4gICAgdmFyIG0gPSBtc2dbaV07XG4gICAgaWYgKGVuZGlhbiA9PT0gJ2JpZycpIHtcbiAgICAgIHJlc1trXSA9IG0gPj4+IDI0O1xuICAgICAgcmVzW2sgKyAxXSA9IChtID4+PiAxNikgJiAweGZmO1xuICAgICAgcmVzW2sgKyAyXSA9IChtID4+PiA4KSAmIDB4ZmY7XG4gICAgICByZXNbayArIDNdID0gbSAmIDB4ZmY7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc1trICsgM10gPSBtID4+PiAyNDtcbiAgICAgIHJlc1trICsgMl0gPSAobSA+Pj4gMTYpICYgMHhmZjtcbiAgICAgIHJlc1trICsgMV0gPSAobSA+Pj4gOCkgJiAweGZmO1xuICAgICAgcmVzW2tdID0gbSAmIDB4ZmY7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXM7XG59XG5leHBvcnRzLnNwbGl0MzIgPSBzcGxpdDMyO1xuXG5mdW5jdGlvbiByb3RyMzIodywgYikge1xuICByZXR1cm4gKHcgPj4+IGIpIHwgKHcgPDwgKDMyIC0gYikpO1xufVxuZXhwb3J0cy5yb3RyMzIgPSByb3RyMzI7XG5cbmZ1bmN0aW9uIHJvdGwzMih3LCBiKSB7XG4gIHJldHVybiAodyA8PCBiKSB8ICh3ID4+PiAoMzIgLSBiKSk7XG59XG5leHBvcnRzLnJvdGwzMiA9IHJvdGwzMjtcblxuZnVuY3Rpb24gc3VtMzIoYSwgYikge1xuICByZXR1cm4gKGEgKyBiKSA+Pj4gMDtcbn1cbmV4cG9ydHMuc3VtMzIgPSBzdW0zMjtcblxuZnVuY3Rpb24gc3VtMzJfMyhhLCBiLCBjKSB7XG4gIHJldHVybiAoYSArIGIgKyBjKSA+Pj4gMDtcbn1cbmV4cG9ydHMuc3VtMzJfMyA9IHN1bTMyXzM7XG5cbmZ1bmN0aW9uIHN1bTMyXzQoYSwgYiwgYywgZCkge1xuICByZXR1cm4gKGEgKyBiICsgYyArIGQpID4+PiAwO1xufVxuZXhwb3J0cy5zdW0zMl80ID0gc3VtMzJfNDtcblxuZnVuY3Rpb24gc3VtMzJfNShhLCBiLCBjLCBkLCBlKSB7XG4gIHJldHVybiAoYSArIGIgKyBjICsgZCArIGUpID4+PiAwO1xufVxuZXhwb3J0cy5zdW0zMl81ID0gc3VtMzJfNTtcblxuZnVuY3Rpb24gc3VtNjQoYnVmLCBwb3MsIGFoLCBhbCkge1xuICB2YXIgYmggPSBidWZbcG9zXTtcbiAgdmFyIGJsID0gYnVmW3BvcyArIDFdO1xuXG4gIHZhciBsbyA9IChhbCArIGJsKSA+Pj4gMDtcbiAgdmFyIGhpID0gKGxvIDwgYWwgPyAxIDogMCkgKyBhaCArIGJoO1xuICBidWZbcG9zXSA9IGhpID4+PiAwO1xuICBidWZbcG9zICsgMV0gPSBsbztcbn1cbmV4cG9ydHMuc3VtNjQgPSBzdW02NDtcblxuZnVuY3Rpb24gc3VtNjRfaGkoYWgsIGFsLCBiaCwgYmwpIHtcbiAgdmFyIGxvID0gKGFsICsgYmwpID4+PiAwO1xuICB2YXIgaGkgPSAobG8gPCBhbCA/IDEgOiAwKSArIGFoICsgYmg7XG4gIHJldHVybiBoaSA+Pj4gMDtcbn1cbmV4cG9ydHMuc3VtNjRfaGkgPSBzdW02NF9oaTtcblxuZnVuY3Rpb24gc3VtNjRfbG8oYWgsIGFsLCBiaCwgYmwpIHtcbiAgdmFyIGxvID0gYWwgKyBibDtcbiAgcmV0dXJuIGxvID4+PiAwO1xufVxuZXhwb3J0cy5zdW02NF9sbyA9IHN1bTY0X2xvO1xuXG5mdW5jdGlvbiBzdW02NF80X2hpKGFoLCBhbCwgYmgsIGJsLCBjaCwgY2wsIGRoLCBkbCkge1xuICB2YXIgY2FycnkgPSAwO1xuICB2YXIgbG8gPSBhbDtcbiAgbG8gPSAobG8gKyBibCkgPj4+IDA7XG4gIGNhcnJ5ICs9IGxvIDwgYWwgPyAxIDogMDtcbiAgbG8gPSAobG8gKyBjbCkgPj4+IDA7XG4gIGNhcnJ5ICs9IGxvIDwgY2wgPyAxIDogMDtcbiAgbG8gPSAobG8gKyBkbCkgPj4+IDA7XG4gIGNhcnJ5ICs9IGxvIDwgZGwgPyAxIDogMDtcblxuICB2YXIgaGkgPSBhaCArIGJoICsgY2ggKyBkaCArIGNhcnJ5O1xuICByZXR1cm4gaGkgPj4+IDA7XG59XG5leHBvcnRzLnN1bTY0XzRfaGkgPSBzdW02NF80X2hpO1xuXG5mdW5jdGlvbiBzdW02NF80X2xvKGFoLCBhbCwgYmgsIGJsLCBjaCwgY2wsIGRoLCBkbCkge1xuICB2YXIgbG8gPSBhbCArIGJsICsgY2wgKyBkbDtcbiAgcmV0dXJuIGxvID4+PiAwO1xufVxuZXhwb3J0cy5zdW02NF80X2xvID0gc3VtNjRfNF9sbztcblxuZnVuY3Rpb24gc3VtNjRfNV9oaShhaCwgYWwsIGJoLCBibCwgY2gsIGNsLCBkaCwgZGwsIGVoLCBlbCkge1xuICB2YXIgY2FycnkgPSAwO1xuICB2YXIgbG8gPSBhbDtcbiAgbG8gPSAobG8gKyBibCkgPj4+IDA7XG4gIGNhcnJ5ICs9IGxvIDwgYWwgPyAxIDogMDtcbiAgbG8gPSAobG8gKyBjbCkgPj4+IDA7XG4gIGNhcnJ5ICs9IGxvIDwgY2wgPyAxIDogMDtcbiAgbG8gPSAobG8gKyBkbCkgPj4+IDA7XG4gIGNhcnJ5ICs9IGxvIDwgZGwgPyAxIDogMDtcbiAgbG8gPSAobG8gKyBlbCkgPj4+IDA7XG4gIGNhcnJ5ICs9IGxvIDwgZWwgPyAxIDogMDtcblxuICB2YXIgaGkgPSBhaCArIGJoICsgY2ggKyBkaCArIGVoICsgY2Fycnk7XG4gIHJldHVybiBoaSA+Pj4gMDtcbn1cbmV4cG9ydHMuc3VtNjRfNV9oaSA9IHN1bTY0XzVfaGk7XG5cbmZ1bmN0aW9uIHN1bTY0XzVfbG8oYWgsIGFsLCBiaCwgYmwsIGNoLCBjbCwgZGgsIGRsLCBlaCwgZWwpIHtcbiAgdmFyIGxvID0gYWwgKyBibCArIGNsICsgZGwgKyBlbDtcblxuICByZXR1cm4gbG8gPj4+IDA7XG59XG5leHBvcnRzLnN1bTY0XzVfbG8gPSBzdW02NF81X2xvO1xuXG5mdW5jdGlvbiByb3RyNjRfaGkoYWgsIGFsLCBudW0pIHtcbiAgdmFyIHIgPSAoYWwgPDwgKDMyIC0gbnVtKSkgfCAoYWggPj4+IG51bSk7XG4gIHJldHVybiByID4+PiAwO1xufVxuZXhwb3J0cy5yb3RyNjRfaGkgPSByb3RyNjRfaGk7XG5cbmZ1bmN0aW9uIHJvdHI2NF9sbyhhaCwgYWwsIG51bSkge1xuICB2YXIgciA9IChhaCA8PCAoMzIgLSBudW0pKSB8IChhbCA+Pj4gbnVtKTtcbiAgcmV0dXJuIHIgPj4+IDA7XG59XG5leHBvcnRzLnJvdHI2NF9sbyA9IHJvdHI2NF9sbztcblxuZnVuY3Rpb24gc2hyNjRfaGkoYWgsIGFsLCBudW0pIHtcbiAgcmV0dXJuIGFoID4+PiBudW07XG59XG5leHBvcnRzLnNocjY0X2hpID0gc2hyNjRfaGk7XG5cbmZ1bmN0aW9uIHNocjY0X2xvKGFoLCBhbCwgbnVtKSB7XG4gIHZhciByID0gKGFoIDw8ICgzMiAtIG51bSkpIHwgKGFsID4+PiBudW0pO1xuICByZXR1cm4gciA+Pj4gMDtcbn1cbmV4cG9ydHMuc2hyNjRfbG8gPSBzaHI2NF9sbztcbiIsInZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxudmFyIFRyYW5zZm9ybSA9IHJlcXVpcmUoJ3N0cmVhbScpLlRyYW5zZm9ybVxudmFyIFN0cmluZ0RlY29kZXIgPSByZXF1aXJlKCdzdHJpbmdfZGVjb2RlcicpLlN0cmluZ0RlY29kZXJcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcblxuZnVuY3Rpb24gQ2lwaGVyQmFzZSAoaGFzaE1vZGUpIHtcbiAgVHJhbnNmb3JtLmNhbGwodGhpcylcbiAgdGhpcy5oYXNoTW9kZSA9IHR5cGVvZiBoYXNoTW9kZSA9PT0gJ3N0cmluZydcbiAgaWYgKHRoaXMuaGFzaE1vZGUpIHtcbiAgICB0aGlzW2hhc2hNb2RlXSA9IHRoaXMuX2ZpbmFsT3JEaWdlc3RcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmZpbmFsID0gdGhpcy5fZmluYWxPckRpZ2VzdFxuICB9XG4gIGlmICh0aGlzLl9maW5hbCkge1xuICAgIHRoaXMuX19maW5hbCA9IHRoaXMuX2ZpbmFsXG4gICAgdGhpcy5fZmluYWwgPSBudWxsXG4gIH1cbiAgdGhpcy5fZGVjb2RlciA9IG51bGxcbiAgdGhpcy5fZW5jb2RpbmcgPSBudWxsXG59XG5pbmhlcml0cyhDaXBoZXJCYXNlLCBUcmFuc2Zvcm0pXG5cbkNpcGhlckJhc2UucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChkYXRhLCBpbnB1dEVuYywgb3V0cHV0RW5jKSB7XG4gIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICBkYXRhID0gQnVmZmVyLmZyb20oZGF0YSwgaW5wdXRFbmMpXG4gIH1cblxuICB2YXIgb3V0RGF0YSA9IHRoaXMuX3VwZGF0ZShkYXRhKVxuICBpZiAodGhpcy5oYXNoTW9kZSkgcmV0dXJuIHRoaXNcblxuICBpZiAob3V0cHV0RW5jKSB7XG4gICAgb3V0RGF0YSA9IHRoaXMuX3RvU3RyaW5nKG91dERhdGEsIG91dHB1dEVuYylcbiAgfVxuXG4gIHJldHVybiBvdXREYXRhXG59XG5cbkNpcGhlckJhc2UucHJvdG90eXBlLnNldEF1dG9QYWRkaW5nID0gZnVuY3Rpb24gKCkge31cbkNpcGhlckJhc2UucHJvdG90eXBlLmdldEF1dGhUYWcgPSBmdW5jdGlvbiAoKSB7XG4gIHRocm93IG5ldyBFcnJvcigndHJ5aW5nIHRvIGdldCBhdXRoIHRhZyBpbiB1bnN1cHBvcnRlZCBzdGF0ZScpXG59XG5cbkNpcGhlckJhc2UucHJvdG90eXBlLnNldEF1dGhUYWcgPSBmdW5jdGlvbiAoKSB7XG4gIHRocm93IG5ldyBFcnJvcigndHJ5aW5nIHRvIHNldCBhdXRoIHRhZyBpbiB1bnN1cHBvcnRlZCBzdGF0ZScpXG59XG5cbkNpcGhlckJhc2UucHJvdG90eXBlLnNldEFBRCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCd0cnlpbmcgdG8gc2V0IGFhZCBpbiB1bnN1cHBvcnRlZCBzdGF0ZScpXG59XG5cbkNpcGhlckJhc2UucHJvdG90eXBlLl90cmFuc2Zvcm0gPSBmdW5jdGlvbiAoZGF0YSwgXywgbmV4dCkge1xuICB2YXIgZXJyXG4gIHRyeSB7XG4gICAgaWYgKHRoaXMuaGFzaE1vZGUpIHtcbiAgICAgIHRoaXMuX3VwZGF0ZShkYXRhKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnB1c2godGhpcy5fdXBkYXRlKGRhdGEpKVxuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIGVyciA9IGVcbiAgfSBmaW5hbGx5IHtcbiAgICBuZXh0KGVycilcbiAgfVxufVxuQ2lwaGVyQmFzZS5wcm90b3R5cGUuX2ZsdXNoID0gZnVuY3Rpb24gKGRvbmUpIHtcbiAgdmFyIGVyclxuICB0cnkge1xuICAgIHRoaXMucHVzaCh0aGlzLl9fZmluYWwoKSlcbiAgfSBjYXRjaCAoZSkge1xuICAgIGVyciA9IGVcbiAgfVxuXG4gIGRvbmUoZXJyKVxufVxuQ2lwaGVyQmFzZS5wcm90b3R5cGUuX2ZpbmFsT3JEaWdlc3QgPSBmdW5jdGlvbiAob3V0cHV0RW5jKSB7XG4gIHZhciBvdXREYXRhID0gdGhpcy5fX2ZpbmFsKCkgfHwgQnVmZmVyLmFsbG9jKDApXG4gIGlmIChvdXRwdXRFbmMpIHtcbiAgICBvdXREYXRhID0gdGhpcy5fdG9TdHJpbmcob3V0RGF0YSwgb3V0cHV0RW5jLCB0cnVlKVxuICB9XG4gIHJldHVybiBvdXREYXRhXG59XG5cbkNpcGhlckJhc2UucHJvdG90eXBlLl90b1N0cmluZyA9IGZ1bmN0aW9uICh2YWx1ZSwgZW5jLCBmaW4pIHtcbiAgaWYgKCF0aGlzLl9kZWNvZGVyKSB7XG4gICAgdGhpcy5fZGVjb2RlciA9IG5ldyBTdHJpbmdEZWNvZGVyKGVuYylcbiAgICB0aGlzLl9lbmNvZGluZyA9IGVuY1xuICB9XG5cbiAgaWYgKHRoaXMuX2VuY29kaW5nICE9PSBlbmMpIHRocm93IG5ldyBFcnJvcignY2FuXFwndCBzd2l0Y2ggZW5jb2RpbmdzJylcblxuICB2YXIgb3V0ID0gdGhpcy5fZGVjb2Rlci53cml0ZSh2YWx1ZSlcbiAgaWYgKGZpbikge1xuICAgIG91dCArPSB0aGlzLl9kZWNvZGVyLmVuZCgpXG4gIH1cblxuICByZXR1cm4gb3V0XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQ2lwaGVyQmFzZVxuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9zcnAnKTtcblxubW9kdWxlLmV4cG9ydHMucGFyYW1zID0gcmVxdWlyZSgnLi9saWIvcGFyYW1zJyk7XG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuLy8gYSBkdXBsZXggc3RyZWFtIGlzIGp1c3QgYSBzdHJlYW0gdGhhdCBpcyBib3RoIHJlYWRhYmxlIGFuZCB3cml0YWJsZS5cbi8vIFNpbmNlIEpTIGRvZXNuJ3QgaGF2ZSBtdWx0aXBsZSBwcm90b3R5cGFsIGluaGVyaXRhbmNlLCB0aGlzIGNsYXNzXG4vLyBwcm90b3R5cGFsbHkgaW5oZXJpdHMgZnJvbSBSZWFkYWJsZSwgYW5kIHRoZW4gcGFyYXNpdGljYWxseSBmcm9tXG4vLyBXcml0YWJsZS5cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xuXG52YXIgcG5hID0gcmVxdWlyZSgncHJvY2Vzcy1uZXh0aWNrLWFyZ3MnKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIG9iamVjdEtleXMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiAob2JqKSB7XG4gIHZhciBrZXlzID0gW107XG4gIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICBrZXlzLnB1c2goa2V5KTtcbiAgfXJldHVybiBrZXlzO1xufTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG5tb2R1bGUuZXhwb3J0cyA9IER1cGxleDtcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciB1dGlsID0gcmVxdWlyZSgnY29yZS11dGlsLWlzJyk7XG51dGlsLmluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG52YXIgUmVhZGFibGUgPSByZXF1aXJlKCcuL19zdHJlYW1fcmVhZGFibGUnKTtcbnZhciBXcml0YWJsZSA9IHJlcXVpcmUoJy4vX3N0cmVhbV93cml0YWJsZScpO1xuXG51dGlsLmluaGVyaXRzKER1cGxleCwgUmVhZGFibGUpO1xuXG57XG4gIC8vIGF2b2lkIHNjb3BlIGNyZWVwLCB0aGUga2V5cyBhcnJheSBjYW4gdGhlbiBiZSBjb2xsZWN0ZWRcbiAgdmFyIGtleXMgPSBvYmplY3RLZXlzKFdyaXRhYmxlLnByb3RvdHlwZSk7XG4gIGZvciAodmFyIHYgPSAwOyB2IDwga2V5cy5sZW5ndGg7IHYrKykge1xuICAgIHZhciBtZXRob2QgPSBrZXlzW3ZdO1xuICAgIGlmICghRHVwbGV4LnByb3RvdHlwZVttZXRob2RdKSBEdXBsZXgucHJvdG90eXBlW21ldGhvZF0gPSBXcml0YWJsZS5wcm90b3R5cGVbbWV0aG9kXTtcbiAgfVxufVxuXG5mdW5jdGlvbiBEdXBsZXgob3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgRHVwbGV4KSkgcmV0dXJuIG5ldyBEdXBsZXgob3B0aW9ucyk7XG5cbiAgUmVhZGFibGUuY2FsbCh0aGlzLCBvcHRpb25zKTtcbiAgV3JpdGFibGUuY2FsbCh0aGlzLCBvcHRpb25zKTtcblxuICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLnJlYWRhYmxlID09PSBmYWxzZSkgdGhpcy5yZWFkYWJsZSA9IGZhbHNlO1xuXG4gIGlmIChvcHRpb25zICYmIG9wdGlvbnMud3JpdGFibGUgPT09IGZhbHNlKSB0aGlzLndyaXRhYmxlID0gZmFsc2U7XG5cbiAgdGhpcy5hbGxvd0hhbGZPcGVuID0gdHJ1ZTtcbiAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5hbGxvd0hhbGZPcGVuID09PSBmYWxzZSkgdGhpcy5hbGxvd0hhbGZPcGVuID0gZmFsc2U7XG5cbiAgdGhpcy5vbmNlKCdlbmQnLCBvbmVuZCk7XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShEdXBsZXgucHJvdG90eXBlLCAnd3JpdGFibGVIaWdoV2F0ZXJNYXJrJywge1xuICAvLyBtYWtpbmcgaXQgZXhwbGljaXQgdGhpcyBwcm9wZXJ0eSBpcyBub3QgZW51bWVyYWJsZVxuICAvLyBiZWNhdXNlIG90aGVyd2lzZSBzb21lIHByb3RvdHlwZSBtYW5pcHVsYXRpb24gaW5cbiAgLy8gdXNlcmxhbmQgd2lsbCBmYWlsXG4gIGVudW1lcmFibGU6IGZhbHNlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5fd3JpdGFibGVTdGF0ZS5oaWdoV2F0ZXJNYXJrO1xuICB9XG59KTtcblxuLy8gdGhlIG5vLWhhbGYtb3BlbiBlbmZvcmNlclxuZnVuY3Rpb24gb25lbmQoKSB7XG4gIC8vIGlmIHdlIGFsbG93IGhhbGYtb3BlbiBzdGF0ZSwgb3IgaWYgdGhlIHdyaXRhYmxlIHNpZGUgZW5kZWQsXG4gIC8vIHRoZW4gd2UncmUgb2suXG4gIGlmICh0aGlzLmFsbG93SGFsZk9wZW4gfHwgdGhpcy5fd3JpdGFibGVTdGF0ZS5lbmRlZCkgcmV0dXJuO1xuXG4gIC8vIG5vIG1vcmUgZGF0YSBjYW4gYmUgd3JpdHRlbi5cbiAgLy8gQnV0IGFsbG93IG1vcmUgd3JpdGVzIHRvIGhhcHBlbiBpbiB0aGlzIHRpY2suXG4gIHBuYS5uZXh0VGljayhvbkVuZE5ULCB0aGlzKTtcbn1cblxuZnVuY3Rpb24gb25FbmROVChzZWxmKSB7XG4gIHNlbGYuZW5kKCk7XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShEdXBsZXgucHJvdG90eXBlLCAnZGVzdHJveWVkJywge1xuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5fcmVhZGFibGVTdGF0ZSA9PT0gdW5kZWZpbmVkIHx8IHRoaXMuX3dyaXRhYmxlU3RhdGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQgJiYgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQ7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgLy8gd2UgaWdub3JlIHRoZSB2YWx1ZSBpZiB0aGUgc3RyZWFtXG4gICAgLy8gaGFzIG5vdCBiZWVuIGluaXRpYWxpemVkIHlldFxuICAgIGlmICh0aGlzLl9yZWFkYWJsZVN0YXRlID09PSB1bmRlZmluZWQgfHwgdGhpcy5fd3JpdGFibGVTdGF0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgdGhlIHVzZXIgaXMgZXhwbGljaXRseVxuICAgIC8vIG1hbmFnaW5nIGRlc3Ryb3llZFxuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkID0gdmFsdWU7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQgPSB2YWx1ZTtcbiAgfVxufSk7XG5cbkR1cGxleC5wcm90b3R5cGUuX2Rlc3Ryb3kgPSBmdW5jdGlvbiAoZXJyLCBjYikge1xuICB0aGlzLnB1c2gobnVsbCk7XG4gIHRoaXMuZW5kKCk7XG5cbiAgcG5hLm5leHRUaWNrKGNiLCBlcnIpO1xufTsiLCIndXNlIHN0cmljdCdcblxuLy8gbGltaXQgb2YgQ3J5cHRvLmdldFJhbmRvbVZhbHVlcygpXG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvQ3J5cHRvL2dldFJhbmRvbVZhbHVlc1xudmFyIE1BWF9CWVRFUyA9IDY1NTM2XG5cbi8vIE5vZGUgc3VwcG9ydHMgcmVxdWVzdGluZyB1cCB0byB0aGlzIG51bWJlciBvZiBieXRlc1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL25vZGVqcy9ub2RlL2Jsb2IvbWFzdGVyL2xpYi9pbnRlcm5hbC9jcnlwdG8vcmFuZG9tLmpzI0w0OFxudmFyIE1BWF9VSU5UMzIgPSA0Mjk0OTY3Mjk1XG5cbmZ1bmN0aW9uIG9sZEJyb3dzZXIgKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ1NlY3VyZSByYW5kb20gbnVtYmVyIGdlbmVyYXRpb24gaXMgbm90IHN1cHBvcnRlZCBieSB0aGlzIGJyb3dzZXIuXFxuVXNlIENocm9tZSwgRmlyZWZveCBvciBJbnRlcm5ldCBFeHBsb3JlciAxMScpXG59XG5cbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxudmFyIGNyeXB0byA9IGdsb2JhbC5jcnlwdG8gfHwgZ2xvYmFsLm1zQ3J5cHRvXG5cbmlmIChjcnlwdG8gJiYgY3J5cHRvLmdldFJhbmRvbVZhbHVlcykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJhbmRvbUJ5dGVzXG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IG9sZEJyb3dzZXJcbn1cblxuZnVuY3Rpb24gcmFuZG9tQnl0ZXMgKHNpemUsIGNiKSB7XG4gIC8vIHBoYW50b21qcyBuZWVkcyB0byB0aHJvd1xuICBpZiAoc2l6ZSA+IE1BWF9VSU5UMzIpIHRocm93IG5ldyBSYW5nZUVycm9yKCdyZXF1ZXN0ZWQgdG9vIG1hbnkgcmFuZG9tIGJ5dGVzJylcblxuICB2YXIgYnl0ZXMgPSBCdWZmZXIuYWxsb2NVbnNhZmUoc2l6ZSlcblxuICBpZiAoc2l6ZSA+IDApIHsgIC8vIGdldFJhbmRvbVZhbHVlcyBmYWlscyBvbiBJRSBpZiBzaXplID09IDBcbiAgICBpZiAoc2l6ZSA+IE1BWF9CWVRFUykgeyAvLyB0aGlzIGlzIHRoZSBtYXggYnl0ZXMgY3J5cHRvLmdldFJhbmRvbVZhbHVlc1xuICAgICAgLy8gY2FuIGRvIGF0IG9uY2Ugc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS93aW5kb3cuY3J5cHRvLmdldFJhbmRvbVZhbHVlc1xuICAgICAgZm9yICh2YXIgZ2VuZXJhdGVkID0gMDsgZ2VuZXJhdGVkIDwgc2l6ZTsgZ2VuZXJhdGVkICs9IE1BWF9CWVRFUykge1xuICAgICAgICAvLyBidWZmZXIuc2xpY2UgYXV0b21hdGljYWxseSBjaGVja3MgaWYgdGhlIGVuZCBpcyBwYXN0IHRoZSBlbmQgb2ZcbiAgICAgICAgLy8gdGhlIGJ1ZmZlciBzbyB3ZSBkb24ndCBoYXZlIHRvIGhlcmVcbiAgICAgICAgY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhieXRlcy5zbGljZShnZW5lcmF0ZWQsIGdlbmVyYXRlZCArIE1BWF9CWVRFUykpXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNyeXB0by5nZXRSYW5kb21WYWx1ZXMoYnl0ZXMpXG4gICAgfVxuICB9XG5cbiAgaWYgKHR5cGVvZiBjYiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgIGNiKG51bGwsIGJ5dGVzKVxuICAgIH0pXG4gIH1cblxuICByZXR1cm4gYnl0ZXNcbn1cbiIsInZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxuXG4vLyBwcm90b3R5cGUgY2xhc3MgZm9yIGhhc2ggZnVuY3Rpb25zXG5mdW5jdGlvbiBIYXNoIChibG9ja1NpemUsIGZpbmFsU2l6ZSkge1xuICB0aGlzLl9ibG9jayA9IEJ1ZmZlci5hbGxvYyhibG9ja1NpemUpXG4gIHRoaXMuX2ZpbmFsU2l6ZSA9IGZpbmFsU2l6ZVxuICB0aGlzLl9ibG9ja1NpemUgPSBibG9ja1NpemVcbiAgdGhpcy5fbGVuID0gMFxufVxuXG5IYXNoLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoZGF0YSwgZW5jKSB7XG4gIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICBlbmMgPSBlbmMgfHwgJ3V0ZjgnXG4gICAgZGF0YSA9IEJ1ZmZlci5mcm9tKGRhdGEsIGVuYylcbiAgfVxuXG4gIHZhciBibG9jayA9IHRoaXMuX2Jsb2NrXG4gIHZhciBibG9ja1NpemUgPSB0aGlzLl9ibG9ja1NpemVcbiAgdmFyIGxlbmd0aCA9IGRhdGEubGVuZ3RoXG4gIHZhciBhY2N1bSA9IHRoaXMuX2xlblxuXG4gIGZvciAodmFyIG9mZnNldCA9IDA7IG9mZnNldCA8IGxlbmd0aDspIHtcbiAgICB2YXIgYXNzaWduZWQgPSBhY2N1bSAlIGJsb2NrU2l6ZVxuICAgIHZhciByZW1haW5kZXIgPSBNYXRoLm1pbihsZW5ndGggLSBvZmZzZXQsIGJsb2NrU2l6ZSAtIGFzc2lnbmVkKVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZW1haW5kZXI7IGkrKykge1xuICAgICAgYmxvY2tbYXNzaWduZWQgKyBpXSA9IGRhdGFbb2Zmc2V0ICsgaV1cbiAgICB9XG5cbiAgICBhY2N1bSArPSByZW1haW5kZXJcbiAgICBvZmZzZXQgKz0gcmVtYWluZGVyXG5cbiAgICBpZiAoKGFjY3VtICUgYmxvY2tTaXplKSA9PT0gMCkge1xuICAgICAgdGhpcy5fdXBkYXRlKGJsb2NrKVxuICAgIH1cbiAgfVxuXG4gIHRoaXMuX2xlbiArPSBsZW5ndGhcbiAgcmV0dXJuIHRoaXNcbn1cblxuSGFzaC5wcm90b3R5cGUuZGlnZXN0ID0gZnVuY3Rpb24gKGVuYykge1xuICB2YXIgcmVtID0gdGhpcy5fbGVuICUgdGhpcy5fYmxvY2tTaXplXG5cbiAgdGhpcy5fYmxvY2tbcmVtXSA9IDB4ODBcblxuICAvLyB6ZXJvIChyZW0gKyAxKSB0cmFpbGluZyBiaXRzLCB3aGVyZSAocmVtICsgMSkgaXMgdGhlIHNtYWxsZXN0XG4gIC8vIG5vbi1uZWdhdGl2ZSBzb2x1dGlvbiB0byB0aGUgZXF1YXRpb24gKGxlbmd0aCArIDEgKyAocmVtICsgMSkpID09PSBmaW5hbFNpemUgbW9kIGJsb2NrU2l6ZVxuICB0aGlzLl9ibG9jay5maWxsKDAsIHJlbSArIDEpXG5cbiAgaWYgKHJlbSA+PSB0aGlzLl9maW5hbFNpemUpIHtcbiAgICB0aGlzLl91cGRhdGUodGhpcy5fYmxvY2spXG4gICAgdGhpcy5fYmxvY2suZmlsbCgwKVxuICB9XG5cbiAgdmFyIGJpdHMgPSB0aGlzLl9sZW4gKiA4XG5cbiAgLy8gdWludDMyXG4gIGlmIChiaXRzIDw9IDB4ZmZmZmZmZmYpIHtcbiAgICB0aGlzLl9ibG9jay53cml0ZVVJbnQzMkJFKGJpdHMsIHRoaXMuX2Jsb2NrU2l6ZSAtIDQpXG5cbiAgLy8gdWludDY0XG4gIH0gZWxzZSB7XG4gICAgdmFyIGxvd0JpdHMgPSAoYml0cyAmIDB4ZmZmZmZmZmYpID4+PiAwXG4gICAgdmFyIGhpZ2hCaXRzID0gKGJpdHMgLSBsb3dCaXRzKSAvIDB4MTAwMDAwMDAwXG5cbiAgICB0aGlzLl9ibG9jay53cml0ZVVJbnQzMkJFKGhpZ2hCaXRzLCB0aGlzLl9ibG9ja1NpemUgLSA4KVxuICAgIHRoaXMuX2Jsb2NrLndyaXRlVUludDMyQkUobG93Qml0cywgdGhpcy5fYmxvY2tTaXplIC0gNClcbiAgfVxuXG4gIHRoaXMuX3VwZGF0ZSh0aGlzLl9ibG9jaylcbiAgdmFyIGhhc2ggPSB0aGlzLl9oYXNoKClcblxuICByZXR1cm4gZW5jID8gaGFzaC50b1N0cmluZyhlbmMpIDogaGFzaFxufVxuXG5IYXNoLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ191cGRhdGUgbXVzdCBiZSBpbXBsZW1lbnRlZCBieSBzdWJjbGFzcycpXG59XG5cbm1vZHVsZS5leHBvcnRzID0gSGFzaFxuIiwiJ3VzZSBzdHJpY3QnXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgTUQ1ID0gcmVxdWlyZSgnbWQ1LmpzJylcbnZhciBSSVBFTUQxNjAgPSByZXF1aXJlKCdyaXBlbWQxNjAnKVxudmFyIHNoYSA9IHJlcXVpcmUoJ3NoYS5qcycpXG52YXIgQmFzZSA9IHJlcXVpcmUoJ2NpcGhlci1iYXNlJylcblxuZnVuY3Rpb24gSGFzaCAoaGFzaCkge1xuICBCYXNlLmNhbGwodGhpcywgJ2RpZ2VzdCcpXG5cbiAgdGhpcy5faGFzaCA9IGhhc2hcbn1cblxuaW5oZXJpdHMoSGFzaCwgQmFzZSlcblxuSGFzaC5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHRoaXMuX2hhc2gudXBkYXRlKGRhdGEpXG59XG5cbkhhc2gucHJvdG90eXBlLl9maW5hbCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuX2hhc2guZGlnZXN0KClcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjcmVhdGVIYXNoIChhbGcpIHtcbiAgYWxnID0gYWxnLnRvTG93ZXJDYXNlKClcbiAgaWYgKGFsZyA9PT0gJ21kNScpIHJldHVybiBuZXcgTUQ1KClcbiAgaWYgKGFsZyA9PT0gJ3JtZDE2MCcgfHwgYWxnID09PSAncmlwZW1kMTYwJykgcmV0dXJuIG5ldyBSSVBFTUQxNjAoKVxuXG4gIHJldHVybiBuZXcgSGFzaChzaGEoYWxnKSlcbn1cbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4vLyBOT1RFOiBUaGVzZSB0eXBlIGNoZWNraW5nIGZ1bmN0aW9ucyBpbnRlbnRpb25hbGx5IGRvbid0IHVzZSBgaW5zdGFuY2VvZmBcbi8vIGJlY2F1c2UgaXQgaXMgZnJhZ2lsZSBhbmQgY2FuIGJlIGVhc2lseSBmYWtlZCB3aXRoIGBPYmplY3QuY3JlYXRlKClgLlxuXG5mdW5jdGlvbiBpc0FycmF5KGFyZykge1xuICBpZiAoQXJyYXkuaXNBcnJheSkge1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KGFyZyk7XG4gIH1cbiAgcmV0dXJuIG9iamVjdFRvU3RyaW5nKGFyZykgPT09ICdbb2JqZWN0IEFycmF5XSc7XG59XG5leHBvcnRzLmlzQXJyYXkgPSBpc0FycmF5O1xuXG5mdW5jdGlvbiBpc0Jvb2xlYW4oYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnYm9vbGVhbic7XG59XG5leHBvcnRzLmlzQm9vbGVhbiA9IGlzQm9vbGVhbjtcblxuZnVuY3Rpb24gaXNOdWxsKGFyZykge1xuICByZXR1cm4gYXJnID09PSBudWxsO1xufVxuZXhwb3J0cy5pc051bGwgPSBpc051bGw7XG5cbmZ1bmN0aW9uIGlzTnVsbE9yVW5kZWZpbmVkKGFyZykge1xuICByZXR1cm4gYXJnID09IG51bGw7XG59XG5leHBvcnRzLmlzTnVsbE9yVW5kZWZpbmVkID0gaXNOdWxsT3JVbmRlZmluZWQ7XG5cbmZ1bmN0aW9uIGlzTnVtYmVyKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ251bWJlcic7XG59XG5leHBvcnRzLmlzTnVtYmVyID0gaXNOdW1iZXI7XG5cbmZ1bmN0aW9uIGlzU3RyaW5nKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ3N0cmluZyc7XG59XG5leHBvcnRzLmlzU3RyaW5nID0gaXNTdHJpbmc7XG5cbmZ1bmN0aW9uIGlzU3ltYm9sKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ3N5bWJvbCc7XG59XG5leHBvcnRzLmlzU3ltYm9sID0gaXNTeW1ib2w7XG5cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKGFyZykge1xuICByZXR1cm4gYXJnID09PSB2b2lkIDA7XG59XG5leHBvcnRzLmlzVW5kZWZpbmVkID0gaXNVbmRlZmluZWQ7XG5cbmZ1bmN0aW9uIGlzUmVnRXhwKHJlKSB7XG4gIHJldHVybiBvYmplY3RUb1N0cmluZyhyZSkgPT09ICdbb2JqZWN0IFJlZ0V4cF0nO1xufVxuZXhwb3J0cy5pc1JlZ0V4cCA9IGlzUmVnRXhwO1xuXG5mdW5jdGlvbiBpc09iamVjdChhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdvYmplY3QnICYmIGFyZyAhPT0gbnVsbDtcbn1cbmV4cG9ydHMuaXNPYmplY3QgPSBpc09iamVjdDtcblxuZnVuY3Rpb24gaXNEYXRlKGQpIHtcbiAgcmV0dXJuIG9iamVjdFRvU3RyaW5nKGQpID09PSAnW29iamVjdCBEYXRlXSc7XG59XG5leHBvcnRzLmlzRGF0ZSA9IGlzRGF0ZTtcblxuZnVuY3Rpb24gaXNFcnJvcihlKSB7XG4gIHJldHVybiAob2JqZWN0VG9TdHJpbmcoZSkgPT09ICdbb2JqZWN0IEVycm9yXScgfHwgZSBpbnN0YW5jZW9mIEVycm9yKTtcbn1cbmV4cG9ydHMuaXNFcnJvciA9IGlzRXJyb3I7XG5cbmZ1bmN0aW9uIGlzRnVuY3Rpb24oYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnZnVuY3Rpb24nO1xufVxuZXhwb3J0cy5pc0Z1bmN0aW9uID0gaXNGdW5jdGlvbjtcblxuZnVuY3Rpb24gaXNQcmltaXRpdmUoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IG51bGwgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdib29sZWFuJyB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ251bWJlcicgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnc3ltYm9sJyB8fCAgLy8gRVM2IHN5bWJvbFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3VuZGVmaW5lZCc7XG59XG5leHBvcnRzLmlzUHJpbWl0aXZlID0gaXNQcmltaXRpdmU7XG5cbmV4cG9ydHMuaXNCdWZmZXIgPSBCdWZmZXIuaXNCdWZmZXI7XG5cbmZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKG8pIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKTtcbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24geG9yIChhLCBiKSB7XG4gIHZhciBsZW5ndGggPSBNYXRoLm1pbihhLmxlbmd0aCwgYi5sZW5ndGgpXG4gIHZhciBidWZmZXIgPSBuZXcgQnVmZmVyKGxlbmd0aClcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgYnVmZmVyW2ldID0gYVtpXSBeIGJbaV1cbiAgfVxuXG4gIHJldHVybiBidWZmZXJcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIGFzc2VydCA9IHJlcXVpcmUoJ21pbmltYWxpc3RpYy1hc3NlcnQnKTtcblxuZnVuY3Rpb24gQmxvY2tIYXNoKCkge1xuICB0aGlzLnBlbmRpbmcgPSBudWxsO1xuICB0aGlzLnBlbmRpbmdUb3RhbCA9IDA7XG4gIHRoaXMuYmxvY2tTaXplID0gdGhpcy5jb25zdHJ1Y3Rvci5ibG9ja1NpemU7XG4gIHRoaXMub3V0U2l6ZSA9IHRoaXMuY29uc3RydWN0b3Iub3V0U2l6ZTtcbiAgdGhpcy5obWFjU3RyZW5ndGggPSB0aGlzLmNvbnN0cnVjdG9yLmhtYWNTdHJlbmd0aDtcbiAgdGhpcy5wYWRMZW5ndGggPSB0aGlzLmNvbnN0cnVjdG9yLnBhZExlbmd0aCAvIDg7XG4gIHRoaXMuZW5kaWFuID0gJ2JpZyc7XG5cbiAgdGhpcy5fZGVsdGE4ID0gdGhpcy5ibG9ja1NpemUgLyA4O1xuICB0aGlzLl9kZWx0YTMyID0gdGhpcy5ibG9ja1NpemUgLyAzMjtcbn1cbmV4cG9ydHMuQmxvY2tIYXNoID0gQmxvY2tIYXNoO1xuXG5CbG9ja0hhc2gucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZShtc2csIGVuYykge1xuICAvLyBDb252ZXJ0IG1lc3NhZ2UgdG8gYXJyYXksIHBhZCBpdCwgYW5kIGpvaW4gaW50byAzMmJpdCBibG9ja3NcbiAgbXNnID0gdXRpbHMudG9BcnJheShtc2csIGVuYyk7XG4gIGlmICghdGhpcy5wZW5kaW5nKVxuICAgIHRoaXMucGVuZGluZyA9IG1zZztcbiAgZWxzZVxuICAgIHRoaXMucGVuZGluZyA9IHRoaXMucGVuZGluZy5jb25jYXQobXNnKTtcbiAgdGhpcy5wZW5kaW5nVG90YWwgKz0gbXNnLmxlbmd0aDtcblxuICAvLyBFbm91Z2ggZGF0YSwgdHJ5IHVwZGF0aW5nXG4gIGlmICh0aGlzLnBlbmRpbmcubGVuZ3RoID49IHRoaXMuX2RlbHRhOCkge1xuICAgIG1zZyA9IHRoaXMucGVuZGluZztcblxuICAgIC8vIFByb2Nlc3MgcGVuZGluZyBkYXRhIGluIGJsb2Nrc1xuICAgIHZhciByID0gbXNnLmxlbmd0aCAlIHRoaXMuX2RlbHRhODtcbiAgICB0aGlzLnBlbmRpbmcgPSBtc2cuc2xpY2UobXNnLmxlbmd0aCAtIHIsIG1zZy5sZW5ndGgpO1xuICAgIGlmICh0aGlzLnBlbmRpbmcubGVuZ3RoID09PSAwKVxuICAgICAgdGhpcy5wZW5kaW5nID0gbnVsbDtcblxuICAgIG1zZyA9IHV0aWxzLmpvaW4zMihtc2csIDAsIG1zZy5sZW5ndGggLSByLCB0aGlzLmVuZGlhbik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtc2cubGVuZ3RoOyBpICs9IHRoaXMuX2RlbHRhMzIpXG4gICAgICB0aGlzLl91cGRhdGUobXNnLCBpLCBpICsgdGhpcy5fZGVsdGEzMik7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbkJsb2NrSGFzaC5wcm90b3R5cGUuZGlnZXN0ID0gZnVuY3Rpb24gZGlnZXN0KGVuYykge1xuICB0aGlzLnVwZGF0ZSh0aGlzLl9wYWQoKSk7XG4gIGFzc2VydCh0aGlzLnBlbmRpbmcgPT09IG51bGwpO1xuXG4gIHJldHVybiB0aGlzLl9kaWdlc3QoZW5jKTtcbn07XG5cbkJsb2NrSGFzaC5wcm90b3R5cGUuX3BhZCA9IGZ1bmN0aW9uIHBhZCgpIHtcbiAgdmFyIGxlbiA9IHRoaXMucGVuZGluZ1RvdGFsO1xuICB2YXIgYnl0ZXMgPSB0aGlzLl9kZWx0YTg7XG4gIHZhciBrID0gYnl0ZXMgLSAoKGxlbiArIHRoaXMucGFkTGVuZ3RoKSAlIGJ5dGVzKTtcbiAgdmFyIHJlcyA9IG5ldyBBcnJheShrICsgdGhpcy5wYWRMZW5ndGgpO1xuICByZXNbMF0gPSAweDgwO1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGs7IGkrKylcbiAgICByZXNbaV0gPSAwO1xuXG4gIC8vIEFwcGVuZCBsZW5ndGhcbiAgbGVuIDw8PSAzO1xuICBpZiAodGhpcy5lbmRpYW4gPT09ICdiaWcnKSB7XG4gICAgZm9yICh2YXIgdCA9IDg7IHQgPCB0aGlzLnBhZExlbmd0aDsgdCsrKVxuICAgICAgcmVzW2krK10gPSAwO1xuXG4gICAgcmVzW2krK10gPSAwO1xuICAgIHJlc1tpKytdID0gMDtcbiAgICByZXNbaSsrXSA9IDA7XG4gICAgcmVzW2krK10gPSAwO1xuICAgIHJlc1tpKytdID0gKGxlbiA+Pj4gMjQpICYgMHhmZjtcbiAgICByZXNbaSsrXSA9IChsZW4gPj4+IDE2KSAmIDB4ZmY7XG4gICAgcmVzW2krK10gPSAobGVuID4+PiA4KSAmIDB4ZmY7XG4gICAgcmVzW2krK10gPSBsZW4gJiAweGZmO1xuICB9IGVsc2Uge1xuICAgIHJlc1tpKytdID0gbGVuICYgMHhmZjtcbiAgICByZXNbaSsrXSA9IChsZW4gPj4+IDgpICYgMHhmZjtcbiAgICByZXNbaSsrXSA9IChsZW4gPj4+IDE2KSAmIDB4ZmY7XG4gICAgcmVzW2krK10gPSAobGVuID4+PiAyNCkgJiAweGZmO1xuICAgIHJlc1tpKytdID0gMDtcbiAgICByZXNbaSsrXSA9IDA7XG4gICAgcmVzW2krK10gPSAwO1xuICAgIHJlc1tpKytdID0gMDtcblxuICAgIGZvciAodCA9IDg7IHQgPCB0aGlzLnBhZExlbmd0aDsgdCsrKVxuICAgICAgcmVzW2krK10gPSAwO1xuICB9XG5cbiAgcmV0dXJuIHJlcztcbn07XG4iLCJ2YXIgYXNuMSA9IGV4cG9ydHM7XG5cbmFzbjEuYmlnbnVtID0gcmVxdWlyZSgnYm4uanMnKTtcblxuYXNuMS5kZWZpbmUgPSByZXF1aXJlKCcuL2FzbjEvYXBpJykuZGVmaW5lO1xuYXNuMS5iYXNlID0gcmVxdWlyZSgnLi9hc24xL2Jhc2UnKTtcbmFzbjEuY29uc3RhbnRzID0gcmVxdWlyZSgnLi9hc24xL2NvbnN0YW50cycpO1xuYXNuMS5kZWNvZGVycyA9IHJlcXVpcmUoJy4vYXNuMS9kZWNvZGVycycpO1xuYXNuMS5lbmNvZGVycyA9IHJlcXVpcmUoJy4vYXNuMS9lbmNvZGVycycpO1xuIiwidmFyIGJhc2UgPSBleHBvcnRzO1xuXG5iYXNlLlJlcG9ydGVyID0gcmVxdWlyZSgnLi9yZXBvcnRlcicpLlJlcG9ydGVyO1xuYmFzZS5EZWNvZGVyQnVmZmVyID0gcmVxdWlyZSgnLi9idWZmZXInKS5EZWNvZGVyQnVmZmVyO1xuYmFzZS5FbmNvZGVyQnVmZmVyID0gcmVxdWlyZSgnLi9idWZmZXInKS5FbmNvZGVyQnVmZmVyO1xuYmFzZS5Ob2RlID0gcmVxdWlyZSgnLi9ub2RlJyk7XG4iLCJmdW5jdGlvbiBzdHJpbmdpZnkgKHZhbHVlLCBzcGFjZSkge1xuICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodmFsdWUsIHJlcGxhY2VyLCBzcGFjZSlcbn1cblxuZnVuY3Rpb24gcGFyc2UgKHRleHQpIHtcbiAgcmV0dXJuIEpTT04ucGFyc2UodGV4dCwgcmV2aXZlcilcbn1cblxuZnVuY3Rpb24gcmVwbGFjZXIgKGtleSwgdmFsdWUpIHtcbiAgaWYgKGlzQnVmZmVyTGlrZSh2YWx1ZSkpIHtcbiAgICBpZiAoaXNBcnJheSh2YWx1ZS5kYXRhKSkge1xuICAgICAgaWYgKHZhbHVlLmRhdGEubGVuZ3RoID4gMCkge1xuICAgICAgICB2YWx1ZS5kYXRhID0gJ2Jhc2U2NDonICsgQnVmZmVyLmZyb20odmFsdWUuZGF0YSkudG9TdHJpbmcoJ2Jhc2U2NCcpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWx1ZS5kYXRhID0gJydcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHZhbHVlXG59XG5cbmZ1bmN0aW9uIHJldml2ZXIgKGtleSwgdmFsdWUpIHtcbiAgaWYgKGlzQnVmZmVyTGlrZSh2YWx1ZSkpIHtcbiAgICBpZiAoaXNBcnJheSh2YWx1ZS5kYXRhKSkge1xuICAgICAgcmV0dXJuIEJ1ZmZlci5mcm9tKHZhbHVlLmRhdGEpXG4gICAgfSBlbHNlIGlmIChpc1N0cmluZyh2YWx1ZS5kYXRhKSkge1xuICAgICAgaWYgKHZhbHVlLmRhdGEuc3RhcnRzV2l0aCgnYmFzZTY0OicpKSB7XG4gICAgICAgIHJldHVybiBCdWZmZXIuZnJvbSh2YWx1ZS5kYXRhLnNsaWNlKCdiYXNlNjQ6Jy5sZW5ndGgpLCAnYmFzZTY0JylcbiAgICAgIH1cbiAgICAgIC8vIEFzc3VtZSB0aGF0IHRoZSBzdHJpbmcgaXMgVVRGLTggZW5jb2RlZCAob3IgZW1wdHkpLlxuICAgICAgcmV0dXJuIEJ1ZmZlci5mcm9tKHZhbHVlLmRhdGEpXG4gICAgfVxuICB9XG4gIHJldHVybiB2YWx1ZVxufVxuXG5mdW5jdGlvbiBpc0J1ZmZlckxpa2UgKHgpIHtcbiAgcmV0dXJuIChcbiAgICBpc09iamVjdCh4KSAmJiB4LnR5cGUgPT09ICdCdWZmZXInICYmIChpc0FycmF5KHguZGF0YSkgfHwgaXNTdHJpbmcoeC5kYXRhKSlcbiAgKVxufVxuXG5mdW5jdGlvbiBpc0FycmF5ICh4KSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KHgpXG59XG5cbmZ1bmN0aW9uIGlzU3RyaW5nICh4KSB7XG4gIHJldHVybiB0eXBlb2YgeCA9PT0gJ3N0cmluZydcbn1cblxuZnVuY3Rpb24gaXNPYmplY3QgKHgpIHtcbiAgcmV0dXJuIHR5cGVvZiB4ID09PSAnb2JqZWN0JyAmJiB4ICE9PSBudWxsXG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzdHJpbmdpZnksXG4gIHBhcnNlLFxuICByZXBsYWNlcixcbiAgcmV2aXZlclxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAodHlwZW9mIHByb2Nlc3MgPT09ICd1bmRlZmluZWQnIHx8XG4gICAgIXByb2Nlc3MudmVyc2lvbiB8fFxuICAgIHByb2Nlc3MudmVyc2lvbi5pbmRleE9mKCd2MC4nKSA9PT0gMCB8fFxuICAgIHByb2Nlc3MudmVyc2lvbi5pbmRleE9mKCd2MS4nKSA9PT0gMCAmJiBwcm9jZXNzLnZlcnNpb24uaW5kZXhPZigndjEuOC4nKSAhPT0gMCkge1xuICBtb2R1bGUuZXhwb3J0cyA9IHsgbmV4dFRpY2s6IG5leHRUaWNrIH07XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHByb2Nlc3Ncbn1cblxuZnVuY3Rpb24gbmV4dFRpY2soZm4sIGFyZzEsIGFyZzIsIGFyZzMpIHtcbiAgaWYgKHR5cGVvZiBmbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiY2FsbGJhY2tcIiBhcmd1bWVudCBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgfVxuICB2YXIgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIGFyZ3MsIGk7XG4gIHN3aXRjaCAobGVuKSB7XG4gIGNhc2UgMDpcbiAgY2FzZSAxOlxuICAgIHJldHVybiBwcm9jZXNzLm5leHRUaWNrKGZuKTtcbiAgY2FzZSAyOlxuICAgIHJldHVybiBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uIGFmdGVyVGlja09uZSgpIHtcbiAgICAgIGZuLmNhbGwobnVsbCwgYXJnMSk7XG4gICAgfSk7XG4gIGNhc2UgMzpcbiAgICByZXR1cm4gcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiBhZnRlclRpY2tUd28oKSB7XG4gICAgICBmbi5jYWxsKG51bGwsIGFyZzEsIGFyZzIpO1xuICAgIH0pO1xuICBjYXNlIDQ6XG4gICAgcmV0dXJuIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gYWZ0ZXJUaWNrVGhyZWUoKSB7XG4gICAgICBmbi5jYWxsKG51bGwsIGFyZzEsIGFyZzIsIGFyZzMpO1xuICAgIH0pO1xuICBkZWZhdWx0OlxuICAgIGFyZ3MgPSBuZXcgQXJyYXkobGVuIC0gMSk7XG4gICAgaSA9IDA7XG4gICAgd2hpbGUgKGkgPCBhcmdzLmxlbmd0aCkge1xuICAgICAgYXJnc1tpKytdID0gYXJndW1lbnRzW2ldO1xuICAgIH1cbiAgICByZXR1cm4gcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiBhZnRlclRpY2soKSB7XG4gICAgICBmbi5hcHBseShudWxsLCBhcmdzKTtcbiAgICB9KTtcbiAgfVxufVxuXG4iLCIvLyBiYXNlZCBvbiB0aGUgYWVzIGltcGxpbWVudGF0aW9uIGluIHRyaXBsZSBzZWNcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9rZXliYXNlL3RyaXBsZXNlY1xuLy8gd2hpY2ggaXMgaW4gdHVybiBiYXNlZCBvbiB0aGUgb25lIGZyb20gY3J5cHRvLWpzXG4vLyBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2NyeXB0by1qcy9cblxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG5cbmZ1bmN0aW9uIGFzVUludDMyQXJyYXkgKGJ1Zikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSBidWYgPSBCdWZmZXIuZnJvbShidWYpXG5cbiAgdmFyIGxlbiA9IChidWYubGVuZ3RoIC8gNCkgfCAwXG4gIHZhciBvdXQgPSBuZXcgQXJyYXkobGVuKVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICBvdXRbaV0gPSBidWYucmVhZFVJbnQzMkJFKGkgKiA0KVxuICB9XG5cbiAgcmV0dXJuIG91dFxufVxuXG5mdW5jdGlvbiBzY3J1YlZlYyAodikge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHYubGVuZ3RoOyB2KyspIHtcbiAgICB2W2ldID0gMFxuICB9XG59XG5cbmZ1bmN0aW9uIGNyeXB0QmxvY2sgKE0sIGtleVNjaGVkdWxlLCBTVUJfTUlYLCBTQk9YLCBuUm91bmRzKSB7XG4gIHZhciBTVUJfTUlYMCA9IFNVQl9NSVhbMF1cbiAgdmFyIFNVQl9NSVgxID0gU1VCX01JWFsxXVxuICB2YXIgU1VCX01JWDIgPSBTVUJfTUlYWzJdXG4gIHZhciBTVUJfTUlYMyA9IFNVQl9NSVhbM11cblxuICB2YXIgczAgPSBNWzBdIF4ga2V5U2NoZWR1bGVbMF1cbiAgdmFyIHMxID0gTVsxXSBeIGtleVNjaGVkdWxlWzFdXG4gIHZhciBzMiA9IE1bMl0gXiBrZXlTY2hlZHVsZVsyXVxuICB2YXIgczMgPSBNWzNdIF4ga2V5U2NoZWR1bGVbM11cbiAgdmFyIHQwLCB0MSwgdDIsIHQzXG4gIHZhciBrc1JvdyA9IDRcblxuICBmb3IgKHZhciByb3VuZCA9IDE7IHJvdW5kIDwgblJvdW5kczsgcm91bmQrKykge1xuICAgIHQwID0gU1VCX01JWDBbczAgPj4+IDI0XSBeIFNVQl9NSVgxWyhzMSA+Pj4gMTYpICYgMHhmZl0gXiBTVUJfTUlYMlsoczIgPj4+IDgpICYgMHhmZl0gXiBTVUJfTUlYM1tzMyAmIDB4ZmZdIF4ga2V5U2NoZWR1bGVba3NSb3crK11cbiAgICB0MSA9IFNVQl9NSVgwW3MxID4+PiAyNF0gXiBTVUJfTUlYMVsoczIgPj4+IDE2KSAmIDB4ZmZdIF4gU1VCX01JWDJbKHMzID4+PiA4KSAmIDB4ZmZdIF4gU1VCX01JWDNbczAgJiAweGZmXSBeIGtleVNjaGVkdWxlW2tzUm93KytdXG4gICAgdDIgPSBTVUJfTUlYMFtzMiA+Pj4gMjRdIF4gU1VCX01JWDFbKHMzID4+PiAxNikgJiAweGZmXSBeIFNVQl9NSVgyWyhzMCA+Pj4gOCkgJiAweGZmXSBeIFNVQl9NSVgzW3MxICYgMHhmZl0gXiBrZXlTY2hlZHVsZVtrc1JvdysrXVxuICAgIHQzID0gU1VCX01JWDBbczMgPj4+IDI0XSBeIFNVQl9NSVgxWyhzMCA+Pj4gMTYpICYgMHhmZl0gXiBTVUJfTUlYMlsoczEgPj4+IDgpICYgMHhmZl0gXiBTVUJfTUlYM1tzMiAmIDB4ZmZdIF4ga2V5U2NoZWR1bGVba3NSb3crK11cbiAgICBzMCA9IHQwXG4gICAgczEgPSB0MVxuICAgIHMyID0gdDJcbiAgICBzMyA9IHQzXG4gIH1cblxuICB0MCA9ICgoU0JPWFtzMCA+Pj4gMjRdIDw8IDI0KSB8IChTQk9YWyhzMSA+Pj4gMTYpICYgMHhmZl0gPDwgMTYpIHwgKFNCT1hbKHMyID4+PiA4KSAmIDB4ZmZdIDw8IDgpIHwgU0JPWFtzMyAmIDB4ZmZdKSBeIGtleVNjaGVkdWxlW2tzUm93KytdXG4gIHQxID0gKChTQk9YW3MxID4+PiAyNF0gPDwgMjQpIHwgKFNCT1hbKHMyID4+PiAxNikgJiAweGZmXSA8PCAxNikgfCAoU0JPWFsoczMgPj4+IDgpICYgMHhmZl0gPDwgOCkgfCBTQk9YW3MwICYgMHhmZl0pIF4ga2V5U2NoZWR1bGVba3NSb3crK11cbiAgdDIgPSAoKFNCT1hbczIgPj4+IDI0XSA8PCAyNCkgfCAoU0JPWFsoczMgPj4+IDE2KSAmIDB4ZmZdIDw8IDE2KSB8IChTQk9YWyhzMCA+Pj4gOCkgJiAweGZmXSA8PCA4KSB8IFNCT1hbczEgJiAweGZmXSkgXiBrZXlTY2hlZHVsZVtrc1JvdysrXVxuICB0MyA9ICgoU0JPWFtzMyA+Pj4gMjRdIDw8IDI0KSB8IChTQk9YWyhzMCA+Pj4gMTYpICYgMHhmZl0gPDwgMTYpIHwgKFNCT1hbKHMxID4+PiA4KSAmIDB4ZmZdIDw8IDgpIHwgU0JPWFtzMiAmIDB4ZmZdKSBeIGtleVNjaGVkdWxlW2tzUm93KytdXG4gIHQwID0gdDAgPj4+IDBcbiAgdDEgPSB0MSA+Pj4gMFxuICB0MiA9IHQyID4+PiAwXG4gIHQzID0gdDMgPj4+IDBcblxuICByZXR1cm4gW3QwLCB0MSwgdDIsIHQzXVxufVxuXG4vLyBBRVMgY29uc3RhbnRzXG52YXIgUkNPTiA9IFsweDAwLCAweDAxLCAweDAyLCAweDA0LCAweDA4LCAweDEwLCAweDIwLCAweDQwLCAweDgwLCAweDFiLCAweDM2XVxudmFyIEcgPSAoZnVuY3Rpb24gKCkge1xuICAvLyBDb21wdXRlIGRvdWJsZSB0YWJsZVxuICB2YXIgZCA9IG5ldyBBcnJheSgyNTYpXG4gIGZvciAodmFyIGogPSAwOyBqIDwgMjU2OyBqKyspIHtcbiAgICBpZiAoaiA8IDEyOCkge1xuICAgICAgZFtqXSA9IGogPDwgMVxuICAgIH0gZWxzZSB7XG4gICAgICBkW2pdID0gKGogPDwgMSkgXiAweDExYlxuICAgIH1cbiAgfVxuXG4gIHZhciBTQk9YID0gW11cbiAgdmFyIElOVl9TQk9YID0gW11cbiAgdmFyIFNVQl9NSVggPSBbW10sIFtdLCBbXSwgW11dXG4gIHZhciBJTlZfU1VCX01JWCA9IFtbXSwgW10sIFtdLCBbXV1cblxuICAvLyBXYWxrIEdGKDJeOClcbiAgdmFyIHggPSAwXG4gIHZhciB4aSA9IDBcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCAyNTY7ICsraSkge1xuICAgIC8vIENvbXB1dGUgc2JveFxuICAgIHZhciBzeCA9IHhpIF4gKHhpIDw8IDEpIF4gKHhpIDw8IDIpIF4gKHhpIDw8IDMpIF4gKHhpIDw8IDQpXG4gICAgc3ggPSAoc3ggPj4+IDgpIF4gKHN4ICYgMHhmZikgXiAweDYzXG4gICAgU0JPWFt4XSA9IHN4XG4gICAgSU5WX1NCT1hbc3hdID0geFxuXG4gICAgLy8gQ29tcHV0ZSBtdWx0aXBsaWNhdGlvblxuICAgIHZhciB4MiA9IGRbeF1cbiAgICB2YXIgeDQgPSBkW3gyXVxuICAgIHZhciB4OCA9IGRbeDRdXG5cbiAgICAvLyBDb21wdXRlIHN1YiBieXRlcywgbWl4IGNvbHVtbnMgdGFibGVzXG4gICAgdmFyIHQgPSAoZFtzeF0gKiAweDEwMSkgXiAoc3ggKiAweDEwMTAxMDApXG4gICAgU1VCX01JWFswXVt4XSA9ICh0IDw8IDI0KSB8ICh0ID4+PiA4KVxuICAgIFNVQl9NSVhbMV1beF0gPSAodCA8PCAxNikgfCAodCA+Pj4gMTYpXG4gICAgU1VCX01JWFsyXVt4XSA9ICh0IDw8IDgpIHwgKHQgPj4+IDI0KVxuICAgIFNVQl9NSVhbM11beF0gPSB0XG5cbiAgICAvLyBDb21wdXRlIGludiBzdWIgYnl0ZXMsIGludiBtaXggY29sdW1ucyB0YWJsZXNcbiAgICB0ID0gKHg4ICogMHgxMDEwMTAxKSBeICh4NCAqIDB4MTAwMDEpIF4gKHgyICogMHgxMDEpIF4gKHggKiAweDEwMTAxMDApXG4gICAgSU5WX1NVQl9NSVhbMF1bc3hdID0gKHQgPDwgMjQpIHwgKHQgPj4+IDgpXG4gICAgSU5WX1NVQl9NSVhbMV1bc3hdID0gKHQgPDwgMTYpIHwgKHQgPj4+IDE2KVxuICAgIElOVl9TVUJfTUlYWzJdW3N4XSA9ICh0IDw8IDgpIHwgKHQgPj4+IDI0KVxuICAgIElOVl9TVUJfTUlYWzNdW3N4XSA9IHRcblxuICAgIGlmICh4ID09PSAwKSB7XG4gICAgICB4ID0geGkgPSAxXG4gICAgfSBlbHNlIHtcbiAgICAgIHggPSB4MiBeIGRbZFtkW3g4IF4geDJdXV1cbiAgICAgIHhpIF49IGRbZFt4aV1dXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBTQk9YOiBTQk9YLFxuICAgIElOVl9TQk9YOiBJTlZfU0JPWCxcbiAgICBTVUJfTUlYOiBTVUJfTUlYLFxuICAgIElOVl9TVUJfTUlYOiBJTlZfU1VCX01JWFxuICB9XG59KSgpXG5cbmZ1bmN0aW9uIEFFUyAoa2V5KSB7XG4gIHRoaXMuX2tleSA9IGFzVUludDMyQXJyYXkoa2V5KVxuICB0aGlzLl9yZXNldCgpXG59XG5cbkFFUy5ibG9ja1NpemUgPSA0ICogNFxuQUVTLmtleVNpemUgPSAyNTYgLyA4XG5BRVMucHJvdG90eXBlLmJsb2NrU2l6ZSA9IEFFUy5ibG9ja1NpemVcbkFFUy5wcm90b3R5cGUua2V5U2l6ZSA9IEFFUy5rZXlTaXplXG5BRVMucHJvdG90eXBlLl9yZXNldCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGtleVdvcmRzID0gdGhpcy5fa2V5XG4gIHZhciBrZXlTaXplID0ga2V5V29yZHMubGVuZ3RoXG4gIHZhciBuUm91bmRzID0ga2V5U2l6ZSArIDZcbiAgdmFyIGtzUm93cyA9IChuUm91bmRzICsgMSkgKiA0XG5cbiAgdmFyIGtleVNjaGVkdWxlID0gW11cbiAgZm9yICh2YXIgayA9IDA7IGsgPCBrZXlTaXplOyBrKyspIHtcbiAgICBrZXlTY2hlZHVsZVtrXSA9IGtleVdvcmRzW2tdXG4gIH1cblxuICBmb3IgKGsgPSBrZXlTaXplOyBrIDwga3NSb3dzOyBrKyspIHtcbiAgICB2YXIgdCA9IGtleVNjaGVkdWxlW2sgLSAxXVxuXG4gICAgaWYgKGsgJSBrZXlTaXplID09PSAwKSB7XG4gICAgICB0ID0gKHQgPDwgOCkgfCAodCA+Pj4gMjQpXG4gICAgICB0ID1cbiAgICAgICAgKEcuU0JPWFt0ID4+PiAyNF0gPDwgMjQpIHxcbiAgICAgICAgKEcuU0JPWFsodCA+Pj4gMTYpICYgMHhmZl0gPDwgMTYpIHxcbiAgICAgICAgKEcuU0JPWFsodCA+Pj4gOCkgJiAweGZmXSA8PCA4KSB8XG4gICAgICAgIChHLlNCT1hbdCAmIDB4ZmZdKVxuXG4gICAgICB0IF49IFJDT05bKGsgLyBrZXlTaXplKSB8IDBdIDw8IDI0XG4gICAgfSBlbHNlIGlmIChrZXlTaXplID4gNiAmJiBrICUga2V5U2l6ZSA9PT0gNCkge1xuICAgICAgdCA9XG4gICAgICAgIChHLlNCT1hbdCA+Pj4gMjRdIDw8IDI0KSB8XG4gICAgICAgIChHLlNCT1hbKHQgPj4+IDE2KSAmIDB4ZmZdIDw8IDE2KSB8XG4gICAgICAgIChHLlNCT1hbKHQgPj4+IDgpICYgMHhmZl0gPDwgOCkgfFxuICAgICAgICAoRy5TQk9YW3QgJiAweGZmXSlcbiAgICB9XG5cbiAgICBrZXlTY2hlZHVsZVtrXSA9IGtleVNjaGVkdWxlW2sgLSBrZXlTaXplXSBeIHRcbiAgfVxuXG4gIHZhciBpbnZLZXlTY2hlZHVsZSA9IFtdXG4gIGZvciAodmFyIGlrID0gMDsgaWsgPCBrc1Jvd3M7IGlrKyspIHtcbiAgICB2YXIga3NSID0ga3NSb3dzIC0gaWtcbiAgICB2YXIgdHQgPSBrZXlTY2hlZHVsZVtrc1IgLSAoaWsgJSA0ID8gMCA6IDQpXVxuXG4gICAgaWYgKGlrIDwgNCB8fCBrc1IgPD0gNCkge1xuICAgICAgaW52S2V5U2NoZWR1bGVbaWtdID0gdHRcbiAgICB9IGVsc2Uge1xuICAgICAgaW52S2V5U2NoZWR1bGVbaWtdID1cbiAgICAgICAgRy5JTlZfU1VCX01JWFswXVtHLlNCT1hbdHQgPj4+IDI0XV0gXlxuICAgICAgICBHLklOVl9TVUJfTUlYWzFdW0cuU0JPWFsodHQgPj4+IDE2KSAmIDB4ZmZdXSBeXG4gICAgICAgIEcuSU5WX1NVQl9NSVhbMl1bRy5TQk9YWyh0dCA+Pj4gOCkgJiAweGZmXV0gXlxuICAgICAgICBHLklOVl9TVUJfTUlYWzNdW0cuU0JPWFt0dCAmIDB4ZmZdXVxuICAgIH1cbiAgfVxuXG4gIHRoaXMuX25Sb3VuZHMgPSBuUm91bmRzXG4gIHRoaXMuX2tleVNjaGVkdWxlID0ga2V5U2NoZWR1bGVcbiAgdGhpcy5faW52S2V5U2NoZWR1bGUgPSBpbnZLZXlTY2hlZHVsZVxufVxuXG5BRVMucHJvdG90eXBlLmVuY3J5cHRCbG9ja1JhdyA9IGZ1bmN0aW9uIChNKSB7XG4gIE0gPSBhc1VJbnQzMkFycmF5KE0pXG4gIHJldHVybiBjcnlwdEJsb2NrKE0sIHRoaXMuX2tleVNjaGVkdWxlLCBHLlNVQl9NSVgsIEcuU0JPWCwgdGhpcy5fblJvdW5kcylcbn1cblxuQUVTLnByb3RvdHlwZS5lbmNyeXB0QmxvY2sgPSBmdW5jdGlvbiAoTSkge1xuICB2YXIgb3V0ID0gdGhpcy5lbmNyeXB0QmxvY2tSYXcoTSlcbiAgdmFyIGJ1ZiA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgxNilcbiAgYnVmLndyaXRlVUludDMyQkUob3V0WzBdLCAwKVxuICBidWYud3JpdGVVSW50MzJCRShvdXRbMV0sIDQpXG4gIGJ1Zi53cml0ZVVJbnQzMkJFKG91dFsyXSwgOClcbiAgYnVmLndyaXRlVUludDMyQkUob3V0WzNdLCAxMilcbiAgcmV0dXJuIGJ1ZlxufVxuXG5BRVMucHJvdG90eXBlLmRlY3J5cHRCbG9jayA9IGZ1bmN0aW9uIChNKSB7XG4gIE0gPSBhc1VJbnQzMkFycmF5KE0pXG5cbiAgLy8gc3dhcFxuICB2YXIgbTEgPSBNWzFdXG4gIE1bMV0gPSBNWzNdXG4gIE1bM10gPSBtMVxuXG4gIHZhciBvdXQgPSBjcnlwdEJsb2NrKE0sIHRoaXMuX2ludktleVNjaGVkdWxlLCBHLklOVl9TVUJfTUlYLCBHLklOVl9TQk9YLCB0aGlzLl9uUm91bmRzKVxuICB2YXIgYnVmID0gQnVmZmVyLmFsbG9jVW5zYWZlKDE2KVxuICBidWYud3JpdGVVSW50MzJCRShvdXRbMF0sIDApXG4gIGJ1Zi53cml0ZVVJbnQzMkJFKG91dFszXSwgNClcbiAgYnVmLndyaXRlVUludDMyQkUob3V0WzJdLCA4KVxuICBidWYud3JpdGVVSW50MzJCRShvdXRbMV0sIDEyKVxuICByZXR1cm4gYnVmXG59XG5cbkFFUy5wcm90b3R5cGUuc2NydWIgPSBmdW5jdGlvbiAoKSB7XG4gIHNjcnViVmVjKHRoaXMuX2tleVNjaGVkdWxlKVxuICBzY3J1YlZlYyh0aGlzLl9pbnZLZXlTY2hlZHVsZSlcbiAgc2NydWJWZWModGhpcy5fa2V5KVxufVxuXG5tb2R1bGUuZXhwb3J0cy5BRVMgPSBBRVNcbiIsInZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxudmFyIE1ENSA9IHJlcXVpcmUoJ21kNS5qcycpXG5cbi8qIGVzbGludC1kaXNhYmxlIGNhbWVsY2FzZSAqL1xuZnVuY3Rpb24gRVZQX0J5dGVzVG9LZXkgKHBhc3N3b3JkLCBzYWx0LCBrZXlCaXRzLCBpdkxlbikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihwYXNzd29yZCkpIHBhc3N3b3JkID0gQnVmZmVyLmZyb20ocGFzc3dvcmQsICdiaW5hcnknKVxuICBpZiAoc2FsdCkge1xuICAgIGlmICghQnVmZmVyLmlzQnVmZmVyKHNhbHQpKSBzYWx0ID0gQnVmZmVyLmZyb20oc2FsdCwgJ2JpbmFyeScpXG4gICAgaWYgKHNhbHQubGVuZ3RoICE9PSA4KSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignc2FsdCBzaG91bGQgYmUgQnVmZmVyIHdpdGggOCBieXRlIGxlbmd0aCcpXG4gIH1cblxuICB2YXIga2V5TGVuID0ga2V5Qml0cyAvIDhcbiAgdmFyIGtleSA9IEJ1ZmZlci5hbGxvYyhrZXlMZW4pXG4gIHZhciBpdiA9IEJ1ZmZlci5hbGxvYyhpdkxlbiB8fCAwKVxuICB2YXIgdG1wID0gQnVmZmVyLmFsbG9jKDApXG5cbiAgd2hpbGUgKGtleUxlbiA+IDAgfHwgaXZMZW4gPiAwKSB7XG4gICAgdmFyIGhhc2ggPSBuZXcgTUQ1KClcbiAgICBoYXNoLnVwZGF0ZSh0bXApXG4gICAgaGFzaC51cGRhdGUocGFzc3dvcmQpXG4gICAgaWYgKHNhbHQpIGhhc2gudXBkYXRlKHNhbHQpXG4gICAgdG1wID0gaGFzaC5kaWdlc3QoKVxuXG4gICAgdmFyIHVzZWQgPSAwXG5cbiAgICBpZiAoa2V5TGVuID4gMCkge1xuICAgICAgdmFyIGtleVN0YXJ0ID0ga2V5Lmxlbmd0aCAtIGtleUxlblxuICAgICAgdXNlZCA9IE1hdGgubWluKGtleUxlbiwgdG1wLmxlbmd0aClcbiAgICAgIHRtcC5jb3B5KGtleSwga2V5U3RhcnQsIDAsIHVzZWQpXG4gICAgICBrZXlMZW4gLT0gdXNlZFxuICAgIH1cblxuICAgIGlmICh1c2VkIDwgdG1wLmxlbmd0aCAmJiBpdkxlbiA+IDApIHtcbiAgICAgIHZhciBpdlN0YXJ0ID0gaXYubGVuZ3RoIC0gaXZMZW5cbiAgICAgIHZhciBsZW5ndGggPSBNYXRoLm1pbihpdkxlbiwgdG1wLmxlbmd0aCAtIHVzZWQpXG4gICAgICB0bXAuY29weShpdiwgaXZTdGFydCwgdXNlZCwgdXNlZCArIGxlbmd0aClcbiAgICAgIGl2TGVuIC09IGxlbmd0aFxuICAgIH1cbiAgfVxuXG4gIHRtcC5maWxsKDApXG4gIHJldHVybiB7IGtleToga2V5LCBpdjogaXYgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEVWUF9CeXRlc1RvS2V5XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBCTiA9IHJlcXVpcmUoJ2JuLmpzJyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xudmFyIGdldE5BRiA9IHV0aWxzLmdldE5BRjtcbnZhciBnZXRKU0YgPSB1dGlscy5nZXRKU0Y7XG52YXIgYXNzZXJ0ID0gdXRpbHMuYXNzZXJ0O1xuXG5mdW5jdGlvbiBCYXNlQ3VydmUodHlwZSwgY29uZikge1xuICB0aGlzLnR5cGUgPSB0eXBlO1xuICB0aGlzLnAgPSBuZXcgQk4oY29uZi5wLCAxNik7XG5cbiAgLy8gVXNlIE1vbnRnb21lcnksIHdoZW4gdGhlcmUgaXMgbm8gZmFzdCByZWR1Y3Rpb24gZm9yIHRoZSBwcmltZVxuICB0aGlzLnJlZCA9IGNvbmYucHJpbWUgPyBCTi5yZWQoY29uZi5wcmltZSkgOiBCTi5tb250KHRoaXMucCk7XG5cbiAgLy8gVXNlZnVsIGZvciBtYW55IGN1cnZlc1xuICB0aGlzLnplcm8gPSBuZXcgQk4oMCkudG9SZWQodGhpcy5yZWQpO1xuICB0aGlzLm9uZSA9IG5ldyBCTigxKS50b1JlZCh0aGlzLnJlZCk7XG4gIHRoaXMudHdvID0gbmV3IEJOKDIpLnRvUmVkKHRoaXMucmVkKTtcblxuICAvLyBDdXJ2ZSBjb25maWd1cmF0aW9uLCBvcHRpb25hbFxuICB0aGlzLm4gPSBjb25mLm4gJiYgbmV3IEJOKGNvbmYubiwgMTYpO1xuICB0aGlzLmcgPSBjb25mLmcgJiYgdGhpcy5wb2ludEZyb21KU09OKGNvbmYuZywgY29uZi5nUmVkKTtcblxuICAvLyBUZW1wb3JhcnkgYXJyYXlzXG4gIHRoaXMuX3duYWZUMSA9IG5ldyBBcnJheSg0KTtcbiAgdGhpcy5fd25hZlQyID0gbmV3IEFycmF5KDQpO1xuICB0aGlzLl93bmFmVDMgPSBuZXcgQXJyYXkoNCk7XG4gIHRoaXMuX3duYWZUNCA9IG5ldyBBcnJheSg0KTtcblxuICAvLyBHZW5lcmFsaXplZCBHcmVnIE1heHdlbGwncyB0cmlja1xuICB2YXIgYWRqdXN0Q291bnQgPSB0aGlzLm4gJiYgdGhpcy5wLmRpdih0aGlzLm4pO1xuICBpZiAoIWFkanVzdENvdW50IHx8IGFkanVzdENvdW50LmNtcG4oMTAwKSA+IDApIHtcbiAgICB0aGlzLnJlZE4gPSBudWxsO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuX21heHdlbGxUcmljayA9IHRydWU7XG4gICAgdGhpcy5yZWROID0gdGhpcy5uLnRvUmVkKHRoaXMucmVkKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBCYXNlQ3VydmU7XG5cbkJhc2VDdXJ2ZS5wcm90b3R5cGUucG9pbnQgPSBmdW5jdGlvbiBwb2ludCgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdOb3QgaW1wbGVtZW50ZWQnKTtcbn07XG5cbkJhc2VDdXJ2ZS5wcm90b3R5cGUudmFsaWRhdGUgPSBmdW5jdGlvbiB2YWxpZGF0ZSgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdOb3QgaW1wbGVtZW50ZWQnKTtcbn07XG5cbkJhc2VDdXJ2ZS5wcm90b3R5cGUuX2ZpeGVkTmFmTXVsID0gZnVuY3Rpb24gX2ZpeGVkTmFmTXVsKHAsIGspIHtcbiAgYXNzZXJ0KHAucHJlY29tcHV0ZWQpO1xuICB2YXIgZG91YmxlcyA9IHAuX2dldERvdWJsZXMoKTtcblxuICB2YXIgbmFmID0gZ2V0TkFGKGssIDEpO1xuICB2YXIgSSA9ICgxIDw8IChkb3VibGVzLnN0ZXAgKyAxKSkgLSAoZG91Ymxlcy5zdGVwICUgMiA9PT0gMCA/IDIgOiAxKTtcbiAgSSAvPSAzO1xuXG4gIC8vIFRyYW5zbGF0ZSBpbnRvIG1vcmUgd2luZG93ZWQgZm9ybVxuICB2YXIgcmVwciA9IFtdO1xuICBmb3IgKHZhciBqID0gMDsgaiA8IG5hZi5sZW5ndGg7IGogKz0gZG91Ymxlcy5zdGVwKSB7XG4gICAgdmFyIG5hZlcgPSAwO1xuICAgIGZvciAodmFyIGsgPSBqICsgZG91Ymxlcy5zdGVwIC0gMTsgayA+PSBqOyBrLS0pXG4gICAgICBuYWZXID0gKG5hZlcgPDwgMSkgKyBuYWZba107XG4gICAgcmVwci5wdXNoKG5hZlcpO1xuICB9XG5cbiAgdmFyIGEgPSB0aGlzLmpwb2ludChudWxsLCBudWxsLCBudWxsKTtcbiAgdmFyIGIgPSB0aGlzLmpwb2ludChudWxsLCBudWxsLCBudWxsKTtcbiAgZm9yICh2YXIgaSA9IEk7IGkgPiAwOyBpLS0pIHtcbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IHJlcHIubGVuZ3RoOyBqKyspIHtcbiAgICAgIHZhciBuYWZXID0gcmVwcltqXTtcbiAgICAgIGlmIChuYWZXID09PSBpKVxuICAgICAgICBiID0gYi5taXhlZEFkZChkb3VibGVzLnBvaW50c1tqXSk7XG4gICAgICBlbHNlIGlmIChuYWZXID09PSAtaSlcbiAgICAgICAgYiA9IGIubWl4ZWRBZGQoZG91Ymxlcy5wb2ludHNbal0ubmVnKCkpO1xuICAgIH1cbiAgICBhID0gYS5hZGQoYik7XG4gIH1cbiAgcmV0dXJuIGEudG9QKCk7XG59O1xuXG5CYXNlQ3VydmUucHJvdG90eXBlLl93bmFmTXVsID0gZnVuY3Rpb24gX3duYWZNdWwocCwgaykge1xuICB2YXIgdyA9IDQ7XG5cbiAgLy8gUHJlY29tcHV0ZSB3aW5kb3dcbiAgdmFyIG5hZlBvaW50cyA9IHAuX2dldE5BRlBvaW50cyh3KTtcbiAgdyA9IG5hZlBvaW50cy53bmQ7XG4gIHZhciB3bmQgPSBuYWZQb2ludHMucG9pbnRzO1xuXG4gIC8vIEdldCBOQUYgZm9ybVxuICB2YXIgbmFmID0gZ2V0TkFGKGssIHcpO1xuXG4gIC8vIEFkZCBgdGhpc2AqKE4rMSkgZm9yIGV2ZXJ5IHctTkFGIGluZGV4XG4gIHZhciBhY2MgPSB0aGlzLmpwb2ludChudWxsLCBudWxsLCBudWxsKTtcbiAgZm9yICh2YXIgaSA9IG5hZi5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIC8vIENvdW50IHplcm9lc1xuICAgIGZvciAodmFyIGsgPSAwOyBpID49IDAgJiYgbmFmW2ldID09PSAwOyBpLS0pXG4gICAgICBrKys7XG4gICAgaWYgKGkgPj0gMClcbiAgICAgIGsrKztcbiAgICBhY2MgPSBhY2MuZGJscChrKTtcblxuICAgIGlmIChpIDwgMClcbiAgICAgIGJyZWFrO1xuICAgIHZhciB6ID0gbmFmW2ldO1xuICAgIGFzc2VydCh6ICE9PSAwKTtcbiAgICBpZiAocC50eXBlID09PSAnYWZmaW5lJykge1xuICAgICAgLy8gSiArLSBQXG4gICAgICBpZiAoeiA+IDApXG4gICAgICAgIGFjYyA9IGFjYy5taXhlZEFkZCh3bmRbKHogLSAxKSA+PiAxXSk7XG4gICAgICBlbHNlXG4gICAgICAgIGFjYyA9IGFjYy5taXhlZEFkZCh3bmRbKC16IC0gMSkgPj4gMV0ubmVnKCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBKICstIEpcbiAgICAgIGlmICh6ID4gMClcbiAgICAgICAgYWNjID0gYWNjLmFkZCh3bmRbKHogLSAxKSA+PiAxXSk7XG4gICAgICBlbHNlXG4gICAgICAgIGFjYyA9IGFjYy5hZGQod25kWygteiAtIDEpID4+IDFdLm5lZygpKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHAudHlwZSA9PT0gJ2FmZmluZScgPyBhY2MudG9QKCkgOiBhY2M7XG59O1xuXG5CYXNlQ3VydmUucHJvdG90eXBlLl93bmFmTXVsQWRkID0gZnVuY3Rpb24gX3duYWZNdWxBZGQoZGVmVyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb2ludHMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29lZmZzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqYWNvYmlhblJlc3VsdCkge1xuICB2YXIgd25kV2lkdGggPSB0aGlzLl93bmFmVDE7XG4gIHZhciB3bmQgPSB0aGlzLl93bmFmVDI7XG4gIHZhciBuYWYgPSB0aGlzLl93bmFmVDM7XG5cbiAgLy8gRmlsbCBhbGwgYXJyYXlzXG4gIHZhciBtYXggPSAwO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgdmFyIHAgPSBwb2ludHNbaV07XG4gICAgdmFyIG5hZlBvaW50cyA9IHAuX2dldE5BRlBvaW50cyhkZWZXKTtcbiAgICB3bmRXaWR0aFtpXSA9IG5hZlBvaW50cy53bmQ7XG4gICAgd25kW2ldID0gbmFmUG9pbnRzLnBvaW50cztcbiAgfVxuXG4gIC8vIENvbWIgc21hbGwgd2luZG93IE5BRnNcbiAgZm9yICh2YXIgaSA9IGxlbiAtIDE7IGkgPj0gMTsgaSAtPSAyKSB7XG4gICAgdmFyIGEgPSBpIC0gMTtcbiAgICB2YXIgYiA9IGk7XG4gICAgaWYgKHduZFdpZHRoW2FdICE9PSAxIHx8IHduZFdpZHRoW2JdICE9PSAxKSB7XG4gICAgICBuYWZbYV0gPSBnZXROQUYoY29lZmZzW2FdLCB3bmRXaWR0aFthXSk7XG4gICAgICBuYWZbYl0gPSBnZXROQUYoY29lZmZzW2JdLCB3bmRXaWR0aFtiXSk7XG4gICAgICBtYXggPSBNYXRoLm1heChuYWZbYV0ubGVuZ3RoLCBtYXgpO1xuICAgICAgbWF4ID0gTWF0aC5tYXgobmFmW2JdLmxlbmd0aCwgbWF4KTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIHZhciBjb21iID0gW1xuICAgICAgcG9pbnRzW2FdLCAvKiAxICovXG4gICAgICBudWxsLCAvKiAzICovXG4gICAgICBudWxsLCAvKiA1ICovXG4gICAgICBwb2ludHNbYl0gLyogNyAqL1xuICAgIF07XG5cbiAgICAvLyBUcnkgdG8gYXZvaWQgUHJvamVjdGl2ZSBwb2ludHMsIGlmIHBvc3NpYmxlXG4gICAgaWYgKHBvaW50c1thXS55LmNtcChwb2ludHNbYl0ueSkgPT09IDApIHtcbiAgICAgIGNvbWJbMV0gPSBwb2ludHNbYV0uYWRkKHBvaW50c1tiXSk7XG4gICAgICBjb21iWzJdID0gcG9pbnRzW2FdLnRvSigpLm1peGVkQWRkKHBvaW50c1tiXS5uZWcoKSk7XG4gICAgfSBlbHNlIGlmIChwb2ludHNbYV0ueS5jbXAocG9pbnRzW2JdLnkucmVkTmVnKCkpID09PSAwKSB7XG4gICAgICBjb21iWzFdID0gcG9pbnRzW2FdLnRvSigpLm1peGVkQWRkKHBvaW50c1tiXSk7XG4gICAgICBjb21iWzJdID0gcG9pbnRzW2FdLmFkZChwb2ludHNbYl0ubmVnKCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb21iWzFdID0gcG9pbnRzW2FdLnRvSigpLm1peGVkQWRkKHBvaW50c1tiXSk7XG4gICAgICBjb21iWzJdID0gcG9pbnRzW2FdLnRvSigpLm1peGVkQWRkKHBvaW50c1tiXS5uZWcoKSk7XG4gICAgfVxuXG4gICAgdmFyIGluZGV4ID0gW1xuICAgICAgLTMsIC8qIC0xIC0xICovXG4gICAgICAtMSwgLyogLTEgMCAqL1xuICAgICAgLTUsIC8qIC0xIDEgKi9cbiAgICAgIC03LCAvKiAwIC0xICovXG4gICAgICAwLCAvKiAwIDAgKi9cbiAgICAgIDcsIC8qIDAgMSAqL1xuICAgICAgNSwgLyogMSAtMSAqL1xuICAgICAgMSwgLyogMSAwICovXG4gICAgICAzICAvKiAxIDEgKi9cbiAgICBdO1xuXG4gICAgdmFyIGpzZiA9IGdldEpTRihjb2VmZnNbYV0sIGNvZWZmc1tiXSk7XG4gICAgbWF4ID0gTWF0aC5tYXgoanNmWzBdLmxlbmd0aCwgbWF4KTtcbiAgICBuYWZbYV0gPSBuZXcgQXJyYXkobWF4KTtcbiAgICBuYWZbYl0gPSBuZXcgQXJyYXkobWF4KTtcbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IG1heDsgaisrKSB7XG4gICAgICB2YXIgamEgPSBqc2ZbMF1bal0gfCAwO1xuICAgICAgdmFyIGpiID0ganNmWzFdW2pdIHwgMDtcblxuICAgICAgbmFmW2FdW2pdID0gaW5kZXhbKGphICsgMSkgKiAzICsgKGpiICsgMSldO1xuICAgICAgbmFmW2JdW2pdID0gMDtcbiAgICAgIHduZFthXSA9IGNvbWI7XG4gICAgfVxuICB9XG5cbiAgdmFyIGFjYyA9IHRoaXMuanBvaW50KG51bGwsIG51bGwsIG51bGwpO1xuICB2YXIgdG1wID0gdGhpcy5fd25hZlQ0O1xuICBmb3IgKHZhciBpID0gbWF4OyBpID49IDA7IGktLSkge1xuICAgIHZhciBrID0gMDtcblxuICAgIHdoaWxlIChpID49IDApIHtcbiAgICAgIHZhciB6ZXJvID0gdHJ1ZTtcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbGVuOyBqKyspIHtcbiAgICAgICAgdG1wW2pdID0gbmFmW2pdW2ldIHwgMDtcbiAgICAgICAgaWYgKHRtcFtqXSAhPT0gMClcbiAgICAgICAgICB6ZXJvID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAoIXplcm8pXG4gICAgICAgIGJyZWFrO1xuICAgICAgaysrO1xuICAgICAgaS0tO1xuICAgIH1cbiAgICBpZiAoaSA+PSAwKVxuICAgICAgaysrO1xuICAgIGFjYyA9IGFjYy5kYmxwKGspO1xuICAgIGlmIChpIDwgMClcbiAgICAgIGJyZWFrO1xuXG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBsZW47IGorKykge1xuICAgICAgdmFyIHogPSB0bXBbal07XG4gICAgICB2YXIgcDtcbiAgICAgIGlmICh6ID09PSAwKVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIGVsc2UgaWYgKHogPiAwKVxuICAgICAgICBwID0gd25kW2pdWyh6IC0gMSkgPj4gMV07XG4gICAgICBlbHNlIGlmICh6IDwgMClcbiAgICAgICAgcCA9IHduZFtqXVsoLXogLSAxKSA+PiAxXS5uZWcoKTtcblxuICAgICAgaWYgKHAudHlwZSA9PT0gJ2FmZmluZScpXG4gICAgICAgIGFjYyA9IGFjYy5taXhlZEFkZChwKTtcbiAgICAgIGVsc2VcbiAgICAgICAgYWNjID0gYWNjLmFkZChwKTtcbiAgICB9XG4gIH1cbiAgLy8gWmVyb2lmeSByZWZlcmVuY2VzXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspXG4gICAgd25kW2ldID0gbnVsbDtcblxuICBpZiAoamFjb2JpYW5SZXN1bHQpXG4gICAgcmV0dXJuIGFjYztcbiAgZWxzZVxuICAgIHJldHVybiBhY2MudG9QKCk7XG59O1xuXG5mdW5jdGlvbiBCYXNlUG9pbnQoY3VydmUsIHR5cGUpIHtcbiAgdGhpcy5jdXJ2ZSA9IGN1cnZlO1xuICB0aGlzLnR5cGUgPSB0eXBlO1xuICB0aGlzLnByZWNvbXB1dGVkID0gbnVsbDtcbn1cbkJhc2VDdXJ2ZS5CYXNlUG9pbnQgPSBCYXNlUG9pbnQ7XG5cbkJhc2VQb2ludC5wcm90b3R5cGUuZXEgPSBmdW5jdGlvbiBlcSgvKm90aGVyKi8pIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdOb3QgaW1wbGVtZW50ZWQnKTtcbn07XG5cbkJhc2VQb2ludC5wcm90b3R5cGUudmFsaWRhdGUgPSBmdW5jdGlvbiB2YWxpZGF0ZSgpIHtcbiAgcmV0dXJuIHRoaXMuY3VydmUudmFsaWRhdGUodGhpcyk7XG59O1xuXG5CYXNlQ3VydmUucHJvdG90eXBlLmRlY29kZVBvaW50ID0gZnVuY3Rpb24gZGVjb2RlUG9pbnQoYnl0ZXMsIGVuYykge1xuICBieXRlcyA9IHV0aWxzLnRvQXJyYXkoYnl0ZXMsIGVuYyk7XG5cbiAgdmFyIGxlbiA9IHRoaXMucC5ieXRlTGVuZ3RoKCk7XG5cbiAgLy8gdW5jb21wcmVzc2VkLCBoeWJyaWQtb2RkLCBoeWJyaWQtZXZlblxuICBpZiAoKGJ5dGVzWzBdID09PSAweDA0IHx8IGJ5dGVzWzBdID09PSAweDA2IHx8IGJ5dGVzWzBdID09PSAweDA3KSAmJlxuICAgICAgYnl0ZXMubGVuZ3RoIC0gMSA9PT0gMiAqIGxlbikge1xuICAgIGlmIChieXRlc1swXSA9PT0gMHgwNilcbiAgICAgIGFzc2VydChieXRlc1tieXRlcy5sZW5ndGggLSAxXSAlIDIgPT09IDApO1xuICAgIGVsc2UgaWYgKGJ5dGVzWzBdID09PSAweDA3KVxuICAgICAgYXNzZXJ0KGJ5dGVzW2J5dGVzLmxlbmd0aCAtIDFdICUgMiA9PT0gMSk7XG5cbiAgICB2YXIgcmVzID0gIHRoaXMucG9pbnQoYnl0ZXMuc2xpY2UoMSwgMSArIGxlbiksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGJ5dGVzLnNsaWNlKDEgKyBsZW4sIDEgKyAyICogbGVuKSk7XG5cbiAgICByZXR1cm4gcmVzO1xuICB9IGVsc2UgaWYgKChieXRlc1swXSA9PT0gMHgwMiB8fCBieXRlc1swXSA9PT0gMHgwMykgJiZcbiAgICAgICAgICAgICAgYnl0ZXMubGVuZ3RoIC0gMSA9PT0gbGVuKSB7XG4gICAgcmV0dXJuIHRoaXMucG9pbnRGcm9tWChieXRlcy5zbGljZSgxLCAxICsgbGVuKSwgYnl0ZXNbMF0gPT09IDB4MDMpO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcignVW5rbm93biBwb2ludCBmb3JtYXQnKTtcbn07XG5cbkJhc2VQb2ludC5wcm90b3R5cGUuZW5jb2RlQ29tcHJlc3NlZCA9IGZ1bmN0aW9uIGVuY29kZUNvbXByZXNzZWQoZW5jKSB7XG4gIHJldHVybiB0aGlzLmVuY29kZShlbmMsIHRydWUpO1xufTtcblxuQmFzZVBvaW50LnByb3RvdHlwZS5fZW5jb2RlID0gZnVuY3Rpb24gX2VuY29kZShjb21wYWN0KSB7XG4gIHZhciBsZW4gPSB0aGlzLmN1cnZlLnAuYnl0ZUxlbmd0aCgpO1xuICB2YXIgeCA9IHRoaXMuZ2V0WCgpLnRvQXJyYXkoJ2JlJywgbGVuKTtcblxuICBpZiAoY29tcGFjdClcbiAgICByZXR1cm4gWyB0aGlzLmdldFkoKS5pc0V2ZW4oKSA/IDB4MDIgOiAweDAzIF0uY29uY2F0KHgpO1xuXG4gIHJldHVybiBbIDB4MDQgXS5jb25jYXQoeCwgdGhpcy5nZXRZKCkudG9BcnJheSgnYmUnLCBsZW4pKSA7XG59O1xuXG5CYXNlUG9pbnQucHJvdG90eXBlLmVuY29kZSA9IGZ1bmN0aW9uIGVuY29kZShlbmMsIGNvbXBhY3QpIHtcbiAgcmV0dXJuIHV0aWxzLmVuY29kZSh0aGlzLl9lbmNvZGUoY29tcGFjdCksIGVuYyk7XG59O1xuXG5CYXNlUG9pbnQucHJvdG90eXBlLnByZWNvbXB1dGUgPSBmdW5jdGlvbiBwcmVjb21wdXRlKHBvd2VyKSB7XG4gIGlmICh0aGlzLnByZWNvbXB1dGVkKVxuICAgIHJldHVybiB0aGlzO1xuXG4gIHZhciBwcmVjb21wdXRlZCA9IHtcbiAgICBkb3VibGVzOiBudWxsLFxuICAgIG5hZjogbnVsbCxcbiAgICBiZXRhOiBudWxsXG4gIH07XG4gIHByZWNvbXB1dGVkLm5hZiA9IHRoaXMuX2dldE5BRlBvaW50cyg4KTtcbiAgcHJlY29tcHV0ZWQuZG91YmxlcyA9IHRoaXMuX2dldERvdWJsZXMoNCwgcG93ZXIpO1xuICBwcmVjb21wdXRlZC5iZXRhID0gdGhpcy5fZ2V0QmV0YSgpO1xuICB0aGlzLnByZWNvbXB1dGVkID0gcHJlY29tcHV0ZWQ7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5CYXNlUG9pbnQucHJvdG90eXBlLl9oYXNEb3VibGVzID0gZnVuY3Rpb24gX2hhc0RvdWJsZXMoaykge1xuICBpZiAoIXRoaXMucHJlY29tcHV0ZWQpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIHZhciBkb3VibGVzID0gdGhpcy5wcmVjb21wdXRlZC5kb3VibGVzO1xuICBpZiAoIWRvdWJsZXMpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIHJldHVybiBkb3VibGVzLnBvaW50cy5sZW5ndGggPj0gTWF0aC5jZWlsKChrLmJpdExlbmd0aCgpICsgMSkgLyBkb3VibGVzLnN0ZXApO1xufTtcblxuQmFzZVBvaW50LnByb3RvdHlwZS5fZ2V0RG91YmxlcyA9IGZ1bmN0aW9uIF9nZXREb3VibGVzKHN0ZXAsIHBvd2VyKSB7XG4gIGlmICh0aGlzLnByZWNvbXB1dGVkICYmIHRoaXMucHJlY29tcHV0ZWQuZG91YmxlcylcbiAgICByZXR1cm4gdGhpcy5wcmVjb21wdXRlZC5kb3VibGVzO1xuXG4gIHZhciBkb3VibGVzID0gWyB0aGlzIF07XG4gIHZhciBhY2MgPSB0aGlzO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHBvd2VyOyBpICs9IHN0ZXApIHtcbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IHN0ZXA7IGorKylcbiAgICAgIGFjYyA9IGFjYy5kYmwoKTtcbiAgICBkb3VibGVzLnB1c2goYWNjKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIHN0ZXA6IHN0ZXAsXG4gICAgcG9pbnRzOiBkb3VibGVzXG4gIH07XG59O1xuXG5CYXNlUG9pbnQucHJvdG90eXBlLl9nZXROQUZQb2ludHMgPSBmdW5jdGlvbiBfZ2V0TkFGUG9pbnRzKHduZCkge1xuICBpZiAodGhpcy5wcmVjb21wdXRlZCAmJiB0aGlzLnByZWNvbXB1dGVkLm5hZilcbiAgICByZXR1cm4gdGhpcy5wcmVjb21wdXRlZC5uYWY7XG5cbiAgdmFyIHJlcyA9IFsgdGhpcyBdO1xuICB2YXIgbWF4ID0gKDEgPDwgd25kKSAtIDE7XG4gIHZhciBkYmwgPSBtYXggPT09IDEgPyBudWxsIDogdGhpcy5kYmwoKTtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBtYXg7IGkrKylcbiAgICByZXNbaV0gPSByZXNbaSAtIDFdLmFkZChkYmwpO1xuICByZXR1cm4ge1xuICAgIHduZDogd25kLFxuICAgIHBvaW50czogcmVzXG4gIH07XG59O1xuXG5CYXNlUG9pbnQucHJvdG90eXBlLl9nZXRCZXRhID0gZnVuY3Rpb24gX2dldEJldGEoKSB7XG4gIHJldHVybiBudWxsO1xufTtcblxuQmFzZVBvaW50LnByb3RvdHlwZS5kYmxwID0gZnVuY3Rpb24gZGJscChrKSB7XG4gIHZhciByID0gdGhpcztcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrOyBpKyspXG4gICAgciA9IHIuZGJsKCk7XG4gIHJldHVybiByO1xufTtcbiIsInZhciBhc24xID0gcmVxdWlyZSgnLi9hc24xJylcbnZhciBhZXNpZCA9IHJlcXVpcmUoJy4vYWVzaWQuanNvbicpXG52YXIgZml4UHJvYyA9IHJlcXVpcmUoJy4vZml4UHJvYycpXG52YXIgY2lwaGVycyA9IHJlcXVpcmUoJ2Jyb3dzZXJpZnktYWVzJylcbnZhciBjb21wYXQgPSByZXF1aXJlKCdwYmtkZjInKVxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG5tb2R1bGUuZXhwb3J0cyA9IHBhcnNlS2V5c1xuXG5mdW5jdGlvbiBwYXJzZUtleXMgKGJ1ZmZlcikge1xuICB2YXIgcGFzc3dvcmRcbiAgaWYgKHR5cGVvZiBidWZmZXIgPT09ICdvYmplY3QnICYmICFCdWZmZXIuaXNCdWZmZXIoYnVmZmVyKSkge1xuICAgIHBhc3N3b3JkID0gYnVmZmVyLnBhc3NwaHJhc2VcbiAgICBidWZmZXIgPSBidWZmZXIua2V5XG4gIH1cbiAgaWYgKHR5cGVvZiBidWZmZXIgPT09ICdzdHJpbmcnKSB7XG4gICAgYnVmZmVyID0gQnVmZmVyLmZyb20oYnVmZmVyKVxuICB9XG5cbiAgdmFyIHN0cmlwcGVkID0gZml4UHJvYyhidWZmZXIsIHBhc3N3b3JkKVxuXG4gIHZhciB0eXBlID0gc3RyaXBwZWQudGFnXG4gIHZhciBkYXRhID0gc3RyaXBwZWQuZGF0YVxuICB2YXIgc3VidHlwZSwgbmRhdGFcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAnQ0VSVElGSUNBVEUnOlxuICAgICAgbmRhdGEgPSBhc24xLmNlcnRpZmljYXRlLmRlY29kZShkYXRhLCAnZGVyJykudGJzQ2VydGlmaWNhdGUuc3ViamVjdFB1YmxpY0tleUluZm9cbiAgICAgIC8vIGZhbGxzIHRocm91Z2hcbiAgICBjYXNlICdQVUJMSUMgS0VZJzpcbiAgICAgIGlmICghbmRhdGEpIHtcbiAgICAgICAgbmRhdGEgPSBhc24xLlB1YmxpY0tleS5kZWNvZGUoZGF0YSwgJ2RlcicpXG4gICAgICB9XG4gICAgICBzdWJ0eXBlID0gbmRhdGEuYWxnb3JpdGhtLmFsZ29yaXRobS5qb2luKCcuJylcbiAgICAgIHN3aXRjaCAoc3VidHlwZSkge1xuICAgICAgICBjYXNlICcxLjIuODQwLjExMzU0OS4xLjEuMSc6XG4gICAgICAgICAgcmV0dXJuIGFzbjEuUlNBUHVibGljS2V5LmRlY29kZShuZGF0YS5zdWJqZWN0UHVibGljS2V5LmRhdGEsICdkZXInKVxuICAgICAgICBjYXNlICcxLjIuODQwLjEwMDQ1LjIuMSc6XG4gICAgICAgICAgbmRhdGEuc3ViamVjdFByaXZhdGVLZXkgPSBuZGF0YS5zdWJqZWN0UHVibGljS2V5XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHR5cGU6ICdlYycsXG4gICAgICAgICAgICBkYXRhOiBuZGF0YVxuICAgICAgICAgIH1cbiAgICAgICAgY2FzZSAnMS4yLjg0MC4xMDA0MC40LjEnOlxuICAgICAgICAgIG5kYXRhLmFsZ29yaXRobS5wYXJhbXMucHViX2tleSA9IGFzbjEuRFNBcGFyYW0uZGVjb2RlKG5kYXRhLnN1YmplY3RQdWJsaWNLZXkuZGF0YSwgJ2RlcicpXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHR5cGU6ICdkc2EnLFxuICAgICAgICAgICAgZGF0YTogbmRhdGEuYWxnb3JpdGhtLnBhcmFtc1xuICAgICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDogdGhyb3cgbmV3IEVycm9yKCd1bmtub3duIGtleSBpZCAnICsgc3VidHlwZSlcbiAgICAgIH1cbiAgICAgIHRocm93IG5ldyBFcnJvcigndW5rbm93biBrZXkgdHlwZSAnICsgdHlwZSlcbiAgICBjYXNlICdFTkNSWVBURUQgUFJJVkFURSBLRVknOlxuICAgICAgZGF0YSA9IGFzbjEuRW5jcnlwdGVkUHJpdmF0ZUtleS5kZWNvZGUoZGF0YSwgJ2RlcicpXG4gICAgICBkYXRhID0gZGVjcnlwdChkYXRhLCBwYXNzd29yZClcbiAgICAgIC8vIGZhbGxzIHRocm91Z2hcbiAgICBjYXNlICdQUklWQVRFIEtFWSc6XG4gICAgICBuZGF0YSA9IGFzbjEuUHJpdmF0ZUtleS5kZWNvZGUoZGF0YSwgJ2RlcicpXG4gICAgICBzdWJ0eXBlID0gbmRhdGEuYWxnb3JpdGhtLmFsZ29yaXRobS5qb2luKCcuJylcbiAgICAgIHN3aXRjaCAoc3VidHlwZSkge1xuICAgICAgICBjYXNlICcxLjIuODQwLjExMzU0OS4xLjEuMSc6XG4gICAgICAgICAgcmV0dXJuIGFzbjEuUlNBUHJpdmF0ZUtleS5kZWNvZGUobmRhdGEuc3ViamVjdFByaXZhdGVLZXksICdkZXInKVxuICAgICAgICBjYXNlICcxLjIuODQwLjEwMDQ1LjIuMSc6XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGN1cnZlOiBuZGF0YS5hbGdvcml0aG0uY3VydmUsXG4gICAgICAgICAgICBwcml2YXRlS2V5OiBhc24xLkVDUHJpdmF0ZUtleS5kZWNvZGUobmRhdGEuc3ViamVjdFByaXZhdGVLZXksICdkZXInKS5wcml2YXRlS2V5XG4gICAgICAgICAgfVxuICAgICAgICBjYXNlICcxLjIuODQwLjEwMDQwLjQuMSc6XG4gICAgICAgICAgbmRhdGEuYWxnb3JpdGhtLnBhcmFtcy5wcml2X2tleSA9IGFzbjEuRFNBcGFyYW0uZGVjb2RlKG5kYXRhLnN1YmplY3RQcml2YXRlS2V5LCAnZGVyJylcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogJ2RzYScsXG4gICAgICAgICAgICBwYXJhbXM6IG5kYXRhLmFsZ29yaXRobS5wYXJhbXNcbiAgICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvcigndW5rbm93biBrZXkgaWQgJyArIHN1YnR5cGUpXG4gICAgICB9XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3Vua25vd24ga2V5IHR5cGUgJyArIHR5cGUpXG4gICAgY2FzZSAnUlNBIFBVQkxJQyBLRVknOlxuICAgICAgcmV0dXJuIGFzbjEuUlNBUHVibGljS2V5LmRlY29kZShkYXRhLCAnZGVyJylcbiAgICBjYXNlICdSU0EgUFJJVkFURSBLRVknOlxuICAgICAgcmV0dXJuIGFzbjEuUlNBUHJpdmF0ZUtleS5kZWNvZGUoZGF0YSwgJ2RlcicpXG4gICAgY2FzZSAnRFNBIFBSSVZBVEUgS0VZJzpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6ICdkc2EnLFxuICAgICAgICBwYXJhbXM6IGFzbjEuRFNBUHJpdmF0ZUtleS5kZWNvZGUoZGF0YSwgJ2RlcicpXG4gICAgICB9XG4gICAgY2FzZSAnRUMgUFJJVkFURSBLRVknOlxuICAgICAgZGF0YSA9IGFzbjEuRUNQcml2YXRlS2V5LmRlY29kZShkYXRhLCAnZGVyJylcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGN1cnZlOiBkYXRhLnBhcmFtZXRlcnMudmFsdWUsXG4gICAgICAgIHByaXZhdGVLZXk6IGRhdGEucHJpdmF0ZUtleVxuICAgICAgfVxuICAgIGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvcigndW5rbm93biBrZXkgdHlwZSAnICsgdHlwZSlcbiAgfVxufVxucGFyc2VLZXlzLnNpZ25hdHVyZSA9IGFzbjEuc2lnbmF0dXJlXG5mdW5jdGlvbiBkZWNyeXB0IChkYXRhLCBwYXNzd29yZCkge1xuICB2YXIgc2FsdCA9IGRhdGEuYWxnb3JpdGhtLmRlY3J5cHQua2RlLmtkZXBhcmFtcy5zYWx0XG4gIHZhciBpdGVycyA9IHBhcnNlSW50KGRhdGEuYWxnb3JpdGhtLmRlY3J5cHQua2RlLmtkZXBhcmFtcy5pdGVycy50b1N0cmluZygpLCAxMClcbiAgdmFyIGFsZ28gPSBhZXNpZFtkYXRhLmFsZ29yaXRobS5kZWNyeXB0LmNpcGhlci5hbGdvLmpvaW4oJy4nKV1cbiAgdmFyIGl2ID0gZGF0YS5hbGdvcml0aG0uZGVjcnlwdC5jaXBoZXIuaXZcbiAgdmFyIGNpcGhlclRleHQgPSBkYXRhLnN1YmplY3RQcml2YXRlS2V5XG4gIHZhciBrZXlsZW4gPSBwYXJzZUludChhbGdvLnNwbGl0KCctJylbMV0sIDEwKSAvIDhcbiAgdmFyIGtleSA9IGNvbXBhdC5wYmtkZjJTeW5jKHBhc3N3b3JkLCBzYWx0LCBpdGVycywga2V5bGVuLCAnc2hhMScpXG4gIHZhciBjaXBoZXIgPSBjaXBoZXJzLmNyZWF0ZURlY2lwaGVyaXYoYWxnbywga2V5LCBpdilcbiAgdmFyIG91dCA9IFtdXG4gIG91dC5wdXNoKGNpcGhlci51cGRhdGUoY2lwaGVyVGV4dCkpXG4gIG91dC5wdXNoKGNpcGhlci5maW5hbCgpKVxuICByZXR1cm4gQnVmZmVyLmNvbmNhdChvdXQpXG59XG4iLCIndXNlIHN0cmljdCdcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBIYXNoQmFzZSA9IHJlcXVpcmUoJ2hhc2gtYmFzZScpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcblxudmFyIEFSUkFZMTYgPSBuZXcgQXJyYXkoMTYpXG5cbmZ1bmN0aW9uIE1ENSAoKSB7XG4gIEhhc2hCYXNlLmNhbGwodGhpcywgNjQpXG5cbiAgLy8gc3RhdGVcbiAgdGhpcy5fYSA9IDB4Njc0NTIzMDFcbiAgdGhpcy5fYiA9IDB4ZWZjZGFiODlcbiAgdGhpcy5fYyA9IDB4OThiYWRjZmVcbiAgdGhpcy5fZCA9IDB4MTAzMjU0NzZcbn1cblxuaW5oZXJpdHMoTUQ1LCBIYXNoQmFzZSlcblxuTUQ1LnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICB2YXIgTSA9IEFSUkFZMTZcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCAxNjsgKytpKSBNW2ldID0gdGhpcy5fYmxvY2sucmVhZEludDMyTEUoaSAqIDQpXG5cbiAgdmFyIGEgPSB0aGlzLl9hXG4gIHZhciBiID0gdGhpcy5fYlxuICB2YXIgYyA9IHRoaXMuX2NcbiAgdmFyIGQgPSB0aGlzLl9kXG5cbiAgYSA9IGZuRihhLCBiLCBjLCBkLCBNWzBdLCAweGQ3NmFhNDc4LCA3KVxuICBkID0gZm5GKGQsIGEsIGIsIGMsIE1bMV0sIDB4ZThjN2I3NTYsIDEyKVxuICBjID0gZm5GKGMsIGQsIGEsIGIsIE1bMl0sIDB4MjQyMDcwZGIsIDE3KVxuICBiID0gZm5GKGIsIGMsIGQsIGEsIE1bM10sIDB4YzFiZGNlZWUsIDIyKVxuICBhID0gZm5GKGEsIGIsIGMsIGQsIE1bNF0sIDB4ZjU3YzBmYWYsIDcpXG4gIGQgPSBmbkYoZCwgYSwgYiwgYywgTVs1XSwgMHg0Nzg3YzYyYSwgMTIpXG4gIGMgPSBmbkYoYywgZCwgYSwgYiwgTVs2XSwgMHhhODMwNDYxMywgMTcpXG4gIGIgPSBmbkYoYiwgYywgZCwgYSwgTVs3XSwgMHhmZDQ2OTUwMSwgMjIpXG4gIGEgPSBmbkYoYSwgYiwgYywgZCwgTVs4XSwgMHg2OTgwOThkOCwgNylcbiAgZCA9IGZuRihkLCBhLCBiLCBjLCBNWzldLCAweDhiNDRmN2FmLCAxMilcbiAgYyA9IGZuRihjLCBkLCBhLCBiLCBNWzEwXSwgMHhmZmZmNWJiMSwgMTcpXG4gIGIgPSBmbkYoYiwgYywgZCwgYSwgTVsxMV0sIDB4ODk1Y2Q3YmUsIDIyKVxuICBhID0gZm5GKGEsIGIsIGMsIGQsIE1bMTJdLCAweDZiOTAxMTIyLCA3KVxuICBkID0gZm5GKGQsIGEsIGIsIGMsIE1bMTNdLCAweGZkOTg3MTkzLCAxMilcbiAgYyA9IGZuRihjLCBkLCBhLCBiLCBNWzE0XSwgMHhhNjc5NDM4ZSwgMTcpXG4gIGIgPSBmbkYoYiwgYywgZCwgYSwgTVsxNV0sIDB4NDliNDA4MjEsIDIyKVxuXG4gIGEgPSBmbkcoYSwgYiwgYywgZCwgTVsxXSwgMHhmNjFlMjU2MiwgNSlcbiAgZCA9IGZuRyhkLCBhLCBiLCBjLCBNWzZdLCAweGMwNDBiMzQwLCA5KVxuICBjID0gZm5HKGMsIGQsIGEsIGIsIE1bMTFdLCAweDI2NWU1YTUxLCAxNClcbiAgYiA9IGZuRyhiLCBjLCBkLCBhLCBNWzBdLCAweGU5YjZjN2FhLCAyMClcbiAgYSA9IGZuRyhhLCBiLCBjLCBkLCBNWzVdLCAweGQ2MmYxMDVkLCA1KVxuICBkID0gZm5HKGQsIGEsIGIsIGMsIE1bMTBdLCAweDAyNDQxNDUzLCA5KVxuICBjID0gZm5HKGMsIGQsIGEsIGIsIE1bMTVdLCAweGQ4YTFlNjgxLCAxNClcbiAgYiA9IGZuRyhiLCBjLCBkLCBhLCBNWzRdLCAweGU3ZDNmYmM4LCAyMClcbiAgYSA9IGZuRyhhLCBiLCBjLCBkLCBNWzldLCAweDIxZTFjZGU2LCA1KVxuICBkID0gZm5HKGQsIGEsIGIsIGMsIE1bMTRdLCAweGMzMzcwN2Q2LCA5KVxuICBjID0gZm5HKGMsIGQsIGEsIGIsIE1bM10sIDB4ZjRkNTBkODcsIDE0KVxuICBiID0gZm5HKGIsIGMsIGQsIGEsIE1bOF0sIDB4NDU1YTE0ZWQsIDIwKVxuICBhID0gZm5HKGEsIGIsIGMsIGQsIE1bMTNdLCAweGE5ZTNlOTA1LCA1KVxuICBkID0gZm5HKGQsIGEsIGIsIGMsIE1bMl0sIDB4ZmNlZmEzZjgsIDkpXG4gIGMgPSBmbkcoYywgZCwgYSwgYiwgTVs3XSwgMHg2NzZmMDJkOSwgMTQpXG4gIGIgPSBmbkcoYiwgYywgZCwgYSwgTVsxMl0sIDB4OGQyYTRjOGEsIDIwKVxuXG4gIGEgPSBmbkgoYSwgYiwgYywgZCwgTVs1XSwgMHhmZmZhMzk0MiwgNClcbiAgZCA9IGZuSChkLCBhLCBiLCBjLCBNWzhdLCAweDg3NzFmNjgxLCAxMSlcbiAgYyA9IGZuSChjLCBkLCBhLCBiLCBNWzExXSwgMHg2ZDlkNjEyMiwgMTYpXG4gIGIgPSBmbkgoYiwgYywgZCwgYSwgTVsxNF0sIDB4ZmRlNTM4MGMsIDIzKVxuICBhID0gZm5IKGEsIGIsIGMsIGQsIE1bMV0sIDB4YTRiZWVhNDQsIDQpXG4gIGQgPSBmbkgoZCwgYSwgYiwgYywgTVs0XSwgMHg0YmRlY2ZhOSwgMTEpXG4gIGMgPSBmbkgoYywgZCwgYSwgYiwgTVs3XSwgMHhmNmJiNGI2MCwgMTYpXG4gIGIgPSBmbkgoYiwgYywgZCwgYSwgTVsxMF0sIDB4YmViZmJjNzAsIDIzKVxuICBhID0gZm5IKGEsIGIsIGMsIGQsIE1bMTNdLCAweDI4OWI3ZWM2LCA0KVxuICBkID0gZm5IKGQsIGEsIGIsIGMsIE1bMF0sIDB4ZWFhMTI3ZmEsIDExKVxuICBjID0gZm5IKGMsIGQsIGEsIGIsIE1bM10sIDB4ZDRlZjMwODUsIDE2KVxuICBiID0gZm5IKGIsIGMsIGQsIGEsIE1bNl0sIDB4MDQ4ODFkMDUsIDIzKVxuICBhID0gZm5IKGEsIGIsIGMsIGQsIE1bOV0sIDB4ZDlkNGQwMzksIDQpXG4gIGQgPSBmbkgoZCwgYSwgYiwgYywgTVsxMl0sIDB4ZTZkYjk5ZTUsIDExKVxuICBjID0gZm5IKGMsIGQsIGEsIGIsIE1bMTVdLCAweDFmYTI3Y2Y4LCAxNilcbiAgYiA9IGZuSChiLCBjLCBkLCBhLCBNWzJdLCAweGM0YWM1NjY1LCAyMylcblxuICBhID0gZm5JKGEsIGIsIGMsIGQsIE1bMF0sIDB4ZjQyOTIyNDQsIDYpXG4gIGQgPSBmbkkoZCwgYSwgYiwgYywgTVs3XSwgMHg0MzJhZmY5NywgMTApXG4gIGMgPSBmbkkoYywgZCwgYSwgYiwgTVsxNF0sIDB4YWI5NDIzYTcsIDE1KVxuICBiID0gZm5JKGIsIGMsIGQsIGEsIE1bNV0sIDB4ZmM5M2EwMzksIDIxKVxuICBhID0gZm5JKGEsIGIsIGMsIGQsIE1bMTJdLCAweDY1NWI1OWMzLCA2KVxuICBkID0gZm5JKGQsIGEsIGIsIGMsIE1bM10sIDB4OGYwY2NjOTIsIDEwKVxuICBjID0gZm5JKGMsIGQsIGEsIGIsIE1bMTBdLCAweGZmZWZmNDdkLCAxNSlcbiAgYiA9IGZuSShiLCBjLCBkLCBhLCBNWzFdLCAweDg1ODQ1ZGQxLCAyMSlcbiAgYSA9IGZuSShhLCBiLCBjLCBkLCBNWzhdLCAweDZmYTg3ZTRmLCA2KVxuICBkID0gZm5JKGQsIGEsIGIsIGMsIE1bMTVdLCAweGZlMmNlNmUwLCAxMClcbiAgYyA9IGZuSShjLCBkLCBhLCBiLCBNWzZdLCAweGEzMDE0MzE0LCAxNSlcbiAgYiA9IGZuSShiLCBjLCBkLCBhLCBNWzEzXSwgMHg0ZTA4MTFhMSwgMjEpXG4gIGEgPSBmbkkoYSwgYiwgYywgZCwgTVs0XSwgMHhmNzUzN2U4MiwgNilcbiAgZCA9IGZuSShkLCBhLCBiLCBjLCBNWzExXSwgMHhiZDNhZjIzNSwgMTApXG4gIGMgPSBmbkkoYywgZCwgYSwgYiwgTVsyXSwgMHgyYWQ3ZDJiYiwgMTUpXG4gIGIgPSBmbkkoYiwgYywgZCwgYSwgTVs5XSwgMHhlYjg2ZDM5MSwgMjEpXG5cbiAgdGhpcy5fYSA9ICh0aGlzLl9hICsgYSkgfCAwXG4gIHRoaXMuX2IgPSAodGhpcy5fYiArIGIpIHwgMFxuICB0aGlzLl9jID0gKHRoaXMuX2MgKyBjKSB8IDBcbiAgdGhpcy5fZCA9ICh0aGlzLl9kICsgZCkgfCAwXG59XG5cbk1ENS5wcm90b3R5cGUuX2RpZ2VzdCA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gY3JlYXRlIHBhZGRpbmcgYW5kIGhhbmRsZSBibG9ja3NcbiAgdGhpcy5fYmxvY2tbdGhpcy5fYmxvY2tPZmZzZXQrK10gPSAweDgwXG4gIGlmICh0aGlzLl9ibG9ja09mZnNldCA+IDU2KSB7XG4gICAgdGhpcy5fYmxvY2suZmlsbCgwLCB0aGlzLl9ibG9ja09mZnNldCwgNjQpXG4gICAgdGhpcy5fdXBkYXRlKClcbiAgICB0aGlzLl9ibG9ja09mZnNldCA9IDBcbiAgfVxuXG4gIHRoaXMuX2Jsb2NrLmZpbGwoMCwgdGhpcy5fYmxvY2tPZmZzZXQsIDU2KVxuICB0aGlzLl9ibG9jay53cml0ZVVJbnQzMkxFKHRoaXMuX2xlbmd0aFswXSwgNTYpXG4gIHRoaXMuX2Jsb2NrLndyaXRlVUludDMyTEUodGhpcy5fbGVuZ3RoWzFdLCA2MClcbiAgdGhpcy5fdXBkYXRlKClcblxuICAvLyBwcm9kdWNlIHJlc3VsdFxuICB2YXIgYnVmZmVyID0gQnVmZmVyLmFsbG9jVW5zYWZlKDE2KVxuICBidWZmZXIud3JpdGVJbnQzMkxFKHRoaXMuX2EsIDApXG4gIGJ1ZmZlci53cml0ZUludDMyTEUodGhpcy5fYiwgNClcbiAgYnVmZmVyLndyaXRlSW50MzJMRSh0aGlzLl9jLCA4KVxuICBidWZmZXIud3JpdGVJbnQzMkxFKHRoaXMuX2QsIDEyKVxuICByZXR1cm4gYnVmZmVyXG59XG5cbmZ1bmN0aW9uIHJvdGwgKHgsIG4pIHtcbiAgcmV0dXJuICh4IDw8IG4pIHwgKHggPj4+ICgzMiAtIG4pKVxufVxuXG5mdW5jdGlvbiBmbkYgKGEsIGIsIGMsIGQsIG0sIGssIHMpIHtcbiAgcmV0dXJuIChyb3RsKChhICsgKChiICYgYykgfCAoKH5iKSAmIGQpKSArIG0gKyBrKSB8IDAsIHMpICsgYikgfCAwXG59XG5cbmZ1bmN0aW9uIGZuRyAoYSwgYiwgYywgZCwgbSwgaywgcykge1xuICByZXR1cm4gKHJvdGwoKGEgKyAoKGIgJiBkKSB8IChjICYgKH5kKSkpICsgbSArIGspIHwgMCwgcykgKyBiKSB8IDBcbn1cblxuZnVuY3Rpb24gZm5IIChhLCBiLCBjLCBkLCBtLCBrLCBzKSB7XG4gIHJldHVybiAocm90bCgoYSArIChiIF4gYyBeIGQpICsgbSArIGspIHwgMCwgcykgKyBiKSB8IDBcbn1cblxuZnVuY3Rpb24gZm5JIChhLCBiLCBjLCBkLCBtLCBrLCBzKSB7XG4gIHJldHVybiAocm90bCgoYSArICgoYyBeIChiIHwgKH5kKSkpKSArIG0gKyBrKSB8IDAsIHMpICsgYikgfCAwXG59XG5cbm1vZHVsZS5leHBvcnRzID0gTUQ1XG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxubW9kdWxlLmV4cG9ydHMgPSBTdHJlYW07XG5cbnZhciBFRSA9IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlcjtcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG5cbmluaGVyaXRzKFN0cmVhbSwgRUUpO1xuU3RyZWFtLlJlYWRhYmxlID0gcmVxdWlyZSgncmVhZGFibGUtc3RyZWFtL3JlYWRhYmxlLmpzJyk7XG5TdHJlYW0uV3JpdGFibGUgPSByZXF1aXJlKCdyZWFkYWJsZS1zdHJlYW0vd3JpdGFibGUuanMnKTtcblN0cmVhbS5EdXBsZXggPSByZXF1aXJlKCdyZWFkYWJsZS1zdHJlYW0vZHVwbGV4LmpzJyk7XG5TdHJlYW0uVHJhbnNmb3JtID0gcmVxdWlyZSgncmVhZGFibGUtc3RyZWFtL3RyYW5zZm9ybS5qcycpO1xuU3RyZWFtLlBhc3NUaHJvdWdoID0gcmVxdWlyZSgncmVhZGFibGUtc3RyZWFtL3Bhc3N0aHJvdWdoLmpzJyk7XG5cbi8vIEJhY2t3YXJkcy1jb21wYXQgd2l0aCBub2RlIDAuNC54XG5TdHJlYW0uU3RyZWFtID0gU3RyZWFtO1xuXG5cblxuLy8gb2xkLXN0eWxlIHN0cmVhbXMuICBOb3RlIHRoYXQgdGhlIHBpcGUgbWV0aG9kICh0aGUgb25seSByZWxldmFudFxuLy8gcGFydCBvZiB0aGlzIGNsYXNzKSBpcyBvdmVycmlkZGVuIGluIHRoZSBSZWFkYWJsZSBjbGFzcy5cblxuZnVuY3Rpb24gU3RyZWFtKCkge1xuICBFRS5jYWxsKHRoaXMpO1xufVxuXG5TdHJlYW0ucHJvdG90eXBlLnBpcGUgPSBmdW5jdGlvbihkZXN0LCBvcHRpb25zKSB7XG4gIHZhciBzb3VyY2UgPSB0aGlzO1xuXG4gIGZ1bmN0aW9uIG9uZGF0YShjaHVuaykge1xuICAgIGlmIChkZXN0LndyaXRhYmxlKSB7XG4gICAgICBpZiAoZmFsc2UgPT09IGRlc3Qud3JpdGUoY2h1bmspICYmIHNvdXJjZS5wYXVzZSkge1xuICAgICAgICBzb3VyY2UucGF1c2UoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBzb3VyY2Uub24oJ2RhdGEnLCBvbmRhdGEpO1xuXG4gIGZ1bmN0aW9uIG9uZHJhaW4oKSB7XG4gICAgaWYgKHNvdXJjZS5yZWFkYWJsZSAmJiBzb3VyY2UucmVzdW1lKSB7XG4gICAgICBzb3VyY2UucmVzdW1lKCk7XG4gICAgfVxuICB9XG5cbiAgZGVzdC5vbignZHJhaW4nLCBvbmRyYWluKTtcblxuICAvLyBJZiB0aGUgJ2VuZCcgb3B0aW9uIGlzIG5vdCBzdXBwbGllZCwgZGVzdC5lbmQoKSB3aWxsIGJlIGNhbGxlZCB3aGVuXG4gIC8vIHNvdXJjZSBnZXRzIHRoZSAnZW5kJyBvciAnY2xvc2UnIGV2ZW50cy4gIE9ubHkgZGVzdC5lbmQoKSBvbmNlLlxuICBpZiAoIWRlc3QuX2lzU3RkaW8gJiYgKCFvcHRpb25zIHx8IG9wdGlvbnMuZW5kICE9PSBmYWxzZSkpIHtcbiAgICBzb3VyY2Uub24oJ2VuZCcsIG9uZW5kKTtcbiAgICBzb3VyY2Uub24oJ2Nsb3NlJywgb25jbG9zZSk7XG4gIH1cblxuICB2YXIgZGlkT25FbmQgPSBmYWxzZTtcbiAgZnVuY3Rpb24gb25lbmQoKSB7XG4gICAgaWYgKGRpZE9uRW5kKSByZXR1cm47XG4gICAgZGlkT25FbmQgPSB0cnVlO1xuXG4gICAgZGVzdC5lbmQoKTtcbiAgfVxuXG5cbiAgZnVuY3Rpb24gb25jbG9zZSgpIHtcbiAgICBpZiAoZGlkT25FbmQpIHJldHVybjtcbiAgICBkaWRPbkVuZCA9IHRydWU7XG5cbiAgICBpZiAodHlwZW9mIGRlc3QuZGVzdHJveSA9PT0gJ2Z1bmN0aW9uJykgZGVzdC5kZXN0cm95KCk7XG4gIH1cblxuICAvLyBkb24ndCBsZWF2ZSBkYW5nbGluZyBwaXBlcyB3aGVuIHRoZXJlIGFyZSBlcnJvcnMuXG4gIGZ1bmN0aW9uIG9uZXJyb3IoZXIpIHtcbiAgICBjbGVhbnVwKCk7XG4gICAgaWYgKEVFLmxpc3RlbmVyQ291bnQodGhpcywgJ2Vycm9yJykgPT09IDApIHtcbiAgICAgIHRocm93IGVyOyAvLyBVbmhhbmRsZWQgc3RyZWFtIGVycm9yIGluIHBpcGUuXG4gICAgfVxuICB9XG5cbiAgc291cmNlLm9uKCdlcnJvcicsIG9uZXJyb3IpO1xuICBkZXN0Lm9uKCdlcnJvcicsIG9uZXJyb3IpO1xuXG4gIC8vIHJlbW92ZSBhbGwgdGhlIGV2ZW50IGxpc3RlbmVycyB0aGF0IHdlcmUgYWRkZWQuXG4gIGZ1bmN0aW9uIGNsZWFudXAoKSB7XG4gICAgc291cmNlLnJlbW92ZUxpc3RlbmVyKCdkYXRhJywgb25kYXRhKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdkcmFpbicsIG9uZHJhaW4pO1xuXG4gICAgc291cmNlLnJlbW92ZUxpc3RlbmVyKCdlbmQnLCBvbmVuZCk7XG4gICAgc291cmNlLnJlbW92ZUxpc3RlbmVyKCdjbG9zZScsIG9uY2xvc2UpO1xuXG4gICAgc291cmNlLnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIG9uZXJyb3IpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgb25lcnJvcik7XG5cbiAgICBzb3VyY2UucmVtb3ZlTGlzdGVuZXIoJ2VuZCcsIGNsZWFudXApO1xuICAgIHNvdXJjZS5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBjbGVhbnVwKTtcblxuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2Nsb3NlJywgY2xlYW51cCk7XG4gIH1cblxuICBzb3VyY2Uub24oJ2VuZCcsIGNsZWFudXApO1xuICBzb3VyY2Uub24oJ2Nsb3NlJywgY2xlYW51cCk7XG5cbiAgZGVzdC5vbignY2xvc2UnLCBjbGVhbnVwKTtcblxuICBkZXN0LmVtaXQoJ3BpcGUnLCBzb3VyY2UpO1xuXG4gIC8vIEFsbG93IGZvciB1bml4LWxpa2UgdXNhZ2U6IEEucGlwZShCKS5waXBlKEMpXG4gIHJldHVybiBkZXN0O1xufTtcbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSID0gdHlwZW9mIFJlZmxlY3QgPT09ICdvYmplY3QnID8gUmVmbGVjdCA6IG51bGxcbnZhciBSZWZsZWN0QXBwbHkgPSBSICYmIHR5cGVvZiBSLmFwcGx5ID09PSAnZnVuY3Rpb24nXG4gID8gUi5hcHBseVxuICA6IGZ1bmN0aW9uIFJlZmxlY3RBcHBseSh0YXJnZXQsIHJlY2VpdmVyLCBhcmdzKSB7XG4gICAgcmV0dXJuIEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseS5jYWxsKHRhcmdldCwgcmVjZWl2ZXIsIGFyZ3MpO1xuICB9XG5cbnZhciBSZWZsZWN0T3duS2V5c1xuaWYgKFIgJiYgdHlwZW9mIFIub3duS2V5cyA9PT0gJ2Z1bmN0aW9uJykge1xuICBSZWZsZWN0T3duS2V5cyA9IFIub3duS2V5c1xufSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gIFJlZmxlY3RPd25LZXlzID0gZnVuY3Rpb24gUmVmbGVjdE93bktleXModGFyZ2V0KSB7XG4gICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRhcmdldClcbiAgICAgIC5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyh0YXJnZXQpKTtcbiAgfTtcbn0gZWxzZSB7XG4gIFJlZmxlY3RPd25LZXlzID0gZnVuY3Rpb24gUmVmbGVjdE93bktleXModGFyZ2V0KSB7XG4gICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRhcmdldCk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIFByb2Nlc3NFbWl0V2FybmluZyh3YXJuaW5nKSB7XG4gIGlmIChjb25zb2xlICYmIGNvbnNvbGUud2FybikgY29uc29sZS53YXJuKHdhcm5pbmcpO1xufVxuXG52YXIgTnVtYmVySXNOYU4gPSBOdW1iZXIuaXNOYU4gfHwgZnVuY3Rpb24gTnVtYmVySXNOYU4odmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9PSB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gRXZlbnRFbWl0dGVyKCkge1xuICBFdmVudEVtaXR0ZXIuaW5pdC5jYWxsKHRoaXMpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBFdmVudEVtaXR0ZXI7XG5cbi8vIEJhY2t3YXJkcy1jb21wYXQgd2l0aCBub2RlIDAuMTAueFxuRXZlbnRFbWl0dGVyLkV2ZW50RW1pdHRlciA9IEV2ZW50RW1pdHRlcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fZXZlbnRzID0gdW5kZWZpbmVkO1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fZXZlbnRzQ291bnQgPSAwO1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fbWF4TGlzdGVuZXJzID0gdW5kZWZpbmVkO1xuXG4vLyBCeSBkZWZhdWx0IEV2ZW50RW1pdHRlcnMgd2lsbCBwcmludCBhIHdhcm5pbmcgaWYgbW9yZSB0aGFuIDEwIGxpc3RlbmVycyBhcmVcbi8vIGFkZGVkIHRvIGl0LiBUaGlzIGlzIGEgdXNlZnVsIGRlZmF1bHQgd2hpY2ggaGVscHMgZmluZGluZyBtZW1vcnkgbGVha3MuXG52YXIgZGVmYXVsdE1heExpc3RlbmVycyA9IDEwO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoRXZlbnRFbWl0dGVyLCAnZGVmYXVsdE1heExpc3RlbmVycycsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZGVmYXVsdE1heExpc3RlbmVycztcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbihhcmcpIHtcbiAgICBpZiAodHlwZW9mIGFyZyAhPT0gJ251bWJlcicgfHwgYXJnIDwgMCB8fCBOdW1iZXJJc05hTihhcmcpKSB7XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVGhlIHZhbHVlIG9mIFwiZGVmYXVsdE1heExpc3RlbmVyc1wiIGlzIG91dCBvZiByYW5nZS4gSXQgbXVzdCBiZSBhIG5vbi1uZWdhdGl2ZSBudW1iZXIuIFJlY2VpdmVkICcgKyBhcmcgKyAnLicpO1xuICAgIH1cbiAgICBkZWZhdWx0TWF4TGlzdGVuZXJzID0gYXJnO1xuICB9XG59KTtcblxuRXZlbnRFbWl0dGVyLmluaXQgPSBmdW5jdGlvbigpIHtcblxuICBpZiAodGhpcy5fZXZlbnRzID09PSB1bmRlZmluZWQgfHxcbiAgICAgIHRoaXMuX2V2ZW50cyA9PT0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHRoaXMpLl9ldmVudHMpIHtcbiAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgfVxuXG4gIHRoaXMuX21heExpc3RlbmVycyA9IHRoaXMuX21heExpc3RlbmVycyB8fCB1bmRlZmluZWQ7XG59O1xuXG4vLyBPYnZpb3VzbHkgbm90IGFsbCBFbWl0dGVycyBzaG91bGQgYmUgbGltaXRlZCB0byAxMC4gVGhpcyBmdW5jdGlvbiBhbGxvd3Ncbi8vIHRoYXQgdG8gYmUgaW5jcmVhc2VkLiBTZXQgdG8gemVybyBmb3IgdW5saW1pdGVkLlxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5zZXRNYXhMaXN0ZW5lcnMgPSBmdW5jdGlvbiBzZXRNYXhMaXN0ZW5lcnMobikge1xuICBpZiAodHlwZW9mIG4gIT09ICdudW1iZXInIHx8IG4gPCAwIHx8IE51bWJlcklzTmFOKG4pKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSB2YWx1ZSBvZiBcIm5cIiBpcyBvdXQgb2YgcmFuZ2UuIEl0IG11c3QgYmUgYSBub24tbmVnYXRpdmUgbnVtYmVyLiBSZWNlaXZlZCAnICsgbiArICcuJyk7XG4gIH1cbiAgdGhpcy5fbWF4TGlzdGVuZXJzID0gbjtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5mdW5jdGlvbiAkZ2V0TWF4TGlzdGVuZXJzKHRoYXQpIHtcbiAgaWYgKHRoYXQuX21heExpc3RlbmVycyA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBFdmVudEVtaXR0ZXIuZGVmYXVsdE1heExpc3RlbmVycztcbiAgcmV0dXJuIHRoYXQuX21heExpc3RlbmVycztcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5nZXRNYXhMaXN0ZW5lcnMgPSBmdW5jdGlvbiBnZXRNYXhMaXN0ZW5lcnMoKSB7XG4gIHJldHVybiAkZ2V0TWF4TGlzdGVuZXJzKHRoaXMpO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24gZW1pdCh0eXBlKSB7XG4gIHZhciBhcmdzID0gW107XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSBhcmdzLnB1c2goYXJndW1lbnRzW2ldKTtcbiAgdmFyIGRvRXJyb3IgPSAodHlwZSA9PT0gJ2Vycm9yJyk7XG5cbiAgdmFyIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcbiAgaWYgKGV2ZW50cyAhPT0gdW5kZWZpbmVkKVxuICAgIGRvRXJyb3IgPSAoZG9FcnJvciAmJiBldmVudHMuZXJyb3IgPT09IHVuZGVmaW5lZCk7XG4gIGVsc2UgaWYgKCFkb0Vycm9yKVxuICAgIHJldHVybiBmYWxzZTtcblxuICAvLyBJZiB0aGVyZSBpcyBubyAnZXJyb3InIGV2ZW50IGxpc3RlbmVyIHRoZW4gdGhyb3cuXG4gIGlmIChkb0Vycm9yKSB7XG4gICAgdmFyIGVyO1xuICAgIGlmIChhcmdzLmxlbmd0aCA+IDApXG4gICAgICBlciA9IGFyZ3NbMF07XG4gICAgaWYgKGVyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgIC8vIE5vdGU6IFRoZSBjb21tZW50cyBvbiB0aGUgYHRocm93YCBsaW5lcyBhcmUgaW50ZW50aW9uYWwsIHRoZXkgc2hvd1xuICAgICAgLy8gdXAgaW4gTm9kZSdzIG91dHB1dCBpZiB0aGlzIHJlc3VsdHMgaW4gYW4gdW5oYW5kbGVkIGV4Y2VwdGlvbi5cbiAgICAgIHRocm93IGVyOyAvLyBVbmhhbmRsZWQgJ2Vycm9yJyBldmVudFxuICAgIH1cbiAgICAvLyBBdCBsZWFzdCBnaXZlIHNvbWUga2luZCBvZiBjb250ZXh0IHRvIHRoZSB1c2VyXG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcignVW5oYW5kbGVkIGVycm9yLicgKyAoZXIgPyAnICgnICsgZXIubWVzc2FnZSArICcpJyA6ICcnKSk7XG4gICAgZXJyLmNvbnRleHQgPSBlcjtcbiAgICB0aHJvdyBlcnI7IC8vIFVuaGFuZGxlZCAnZXJyb3InIGV2ZW50XG4gIH1cblxuICB2YXIgaGFuZGxlciA9IGV2ZW50c1t0eXBlXTtcblxuICBpZiAoaGFuZGxlciA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBmYWxzZTtcblxuICBpZiAodHlwZW9mIGhhbmRsZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICBSZWZsZWN0QXBwbHkoaGFuZGxlciwgdGhpcywgYXJncyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGxlbiA9IGhhbmRsZXIubGVuZ3RoO1xuICAgIHZhciBsaXN0ZW5lcnMgPSBhcnJheUNsb25lKGhhbmRsZXIsIGxlbik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSlcbiAgICAgIFJlZmxlY3RBcHBseShsaXN0ZW5lcnNbaV0sIHRoaXMsIGFyZ3MpO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG5mdW5jdGlvbiBfYWRkTGlzdGVuZXIodGFyZ2V0LCB0eXBlLCBsaXN0ZW5lciwgcHJlcGVuZCkge1xuICB2YXIgbTtcbiAgdmFyIGV2ZW50cztcbiAgdmFyIGV4aXN0aW5nO1xuXG4gIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJsaXN0ZW5lclwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBGdW5jdGlvbi4gUmVjZWl2ZWQgdHlwZSAnICsgdHlwZW9mIGxpc3RlbmVyKTtcbiAgfVxuXG4gIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzO1xuICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpIHtcbiAgICBldmVudHMgPSB0YXJnZXQuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGFyZ2V0Ll9ldmVudHNDb3VudCA9IDA7XG4gIH0gZWxzZSB7XG4gICAgLy8gVG8gYXZvaWQgcmVjdXJzaW9uIGluIHRoZSBjYXNlIHRoYXQgdHlwZSA9PT0gXCJuZXdMaXN0ZW5lclwiISBCZWZvcmVcbiAgICAvLyBhZGRpbmcgaXQgdG8gdGhlIGxpc3RlbmVycywgZmlyc3QgZW1pdCBcIm5ld0xpc3RlbmVyXCIuXG4gICAgaWYgKGV2ZW50cy5uZXdMaXN0ZW5lciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0YXJnZXQuZW1pdCgnbmV3TGlzdGVuZXInLCB0eXBlLFxuICAgICAgICAgICAgICAgICAgbGlzdGVuZXIubGlzdGVuZXIgPyBsaXN0ZW5lci5saXN0ZW5lciA6IGxpc3RlbmVyKTtcblxuICAgICAgLy8gUmUtYXNzaWduIGBldmVudHNgIGJlY2F1c2UgYSBuZXdMaXN0ZW5lciBoYW5kbGVyIGNvdWxkIGhhdmUgY2F1c2VkIHRoZVxuICAgICAgLy8gdGhpcy5fZXZlbnRzIHRvIGJlIGFzc2lnbmVkIHRvIGEgbmV3IG9iamVjdFxuICAgICAgZXZlbnRzID0gdGFyZ2V0Ll9ldmVudHM7XG4gICAgfVxuICAgIGV4aXN0aW5nID0gZXZlbnRzW3R5cGVdO1xuICB9XG5cbiAgaWYgKGV4aXN0aW5nID09PSB1bmRlZmluZWQpIHtcbiAgICAvLyBPcHRpbWl6ZSB0aGUgY2FzZSBvZiBvbmUgbGlzdGVuZXIuIERvbid0IG5lZWQgdGhlIGV4dHJhIGFycmF5IG9iamVjdC5cbiAgICBleGlzdGluZyA9IGV2ZW50c1t0eXBlXSA9IGxpc3RlbmVyO1xuICAgICsrdGFyZ2V0Ll9ldmVudHNDb3VudDtcbiAgfSBlbHNlIHtcbiAgICBpZiAodHlwZW9mIGV4aXN0aW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAvLyBBZGRpbmcgdGhlIHNlY29uZCBlbGVtZW50LCBuZWVkIHRvIGNoYW5nZSB0byBhcnJheS5cbiAgICAgIGV4aXN0aW5nID0gZXZlbnRzW3R5cGVdID1cbiAgICAgICAgcHJlcGVuZCA/IFtsaXN0ZW5lciwgZXhpc3RpbmddIDogW2V4aXN0aW5nLCBsaXN0ZW5lcl07XG4gICAgICAvLyBJZiB3ZSd2ZSBhbHJlYWR5IGdvdCBhbiBhcnJheSwganVzdCBhcHBlbmQuXG4gICAgfSBlbHNlIGlmIChwcmVwZW5kKSB7XG4gICAgICBleGlzdGluZy51bnNoaWZ0KGxpc3RlbmVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXhpc3RpbmcucHVzaChsaXN0ZW5lcik7XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgZm9yIGxpc3RlbmVyIGxlYWtcbiAgICBtID0gJGdldE1heExpc3RlbmVycyh0YXJnZXQpO1xuICAgIGlmIChtID4gMCAmJiBleGlzdGluZy5sZW5ndGggPiBtICYmICFleGlzdGluZy53YXJuZWQpIHtcbiAgICAgIGV4aXN0aW5nLndhcm5lZCA9IHRydWU7XG4gICAgICAvLyBObyBlcnJvciBjb2RlIGZvciB0aGlzIHNpbmNlIGl0IGlzIGEgV2FybmluZ1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG4gICAgICB2YXIgdyA9IG5ldyBFcnJvcignUG9zc2libGUgRXZlbnRFbWl0dGVyIG1lbW9yeSBsZWFrIGRldGVjdGVkLiAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZXhpc3RpbmcubGVuZ3RoICsgJyAnICsgU3RyaW5nKHR5cGUpICsgJyBsaXN0ZW5lcnMgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdhZGRlZC4gVXNlIGVtaXR0ZXIuc2V0TWF4TGlzdGVuZXJzKCkgdG8gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdpbmNyZWFzZSBsaW1pdCcpO1xuICAgICAgdy5uYW1lID0gJ01heExpc3RlbmVyc0V4Y2VlZGVkV2FybmluZyc7XG4gICAgICB3LmVtaXR0ZXIgPSB0YXJnZXQ7XG4gICAgICB3LnR5cGUgPSB0eXBlO1xuICAgICAgdy5jb3VudCA9IGV4aXN0aW5nLmxlbmd0aDtcbiAgICAgIFByb2Nlc3NFbWl0V2FybmluZyh3KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyID0gZnVuY3Rpb24gYWRkTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgcmV0dXJuIF9hZGRMaXN0ZW5lcih0aGlzLCB0eXBlLCBsaXN0ZW5lciwgZmFsc2UpO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbiA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucHJlcGVuZExpc3RlbmVyID1cbiAgICBmdW5jdGlvbiBwcmVwZW5kTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgIHJldHVybiBfYWRkTGlzdGVuZXIodGhpcywgdHlwZSwgbGlzdGVuZXIsIHRydWUpO1xuICAgIH07XG5cbmZ1bmN0aW9uIG9uY2VXcmFwcGVyKCkge1xuICB2YXIgYXJncyA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgYXJncy5wdXNoKGFyZ3VtZW50c1tpXSk7XG4gIGlmICghdGhpcy5maXJlZCkge1xuICAgIHRoaXMudGFyZ2V0LnJlbW92ZUxpc3RlbmVyKHRoaXMudHlwZSwgdGhpcy53cmFwRm4pO1xuICAgIHRoaXMuZmlyZWQgPSB0cnVlO1xuICAgIFJlZmxlY3RBcHBseSh0aGlzLmxpc3RlbmVyLCB0aGlzLnRhcmdldCwgYXJncyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gX29uY2VXcmFwKHRhcmdldCwgdHlwZSwgbGlzdGVuZXIpIHtcbiAgdmFyIHN0YXRlID0geyBmaXJlZDogZmFsc2UsIHdyYXBGbjogdW5kZWZpbmVkLCB0YXJnZXQ6IHRhcmdldCwgdHlwZTogdHlwZSwgbGlzdGVuZXI6IGxpc3RlbmVyIH07XG4gIHZhciB3cmFwcGVkID0gb25jZVdyYXBwZXIuYmluZChzdGF0ZSk7XG4gIHdyYXBwZWQubGlzdGVuZXIgPSBsaXN0ZW5lcjtcbiAgc3RhdGUud3JhcEZuID0gd3JhcHBlZDtcbiAgcmV0dXJuIHdyYXBwZWQ7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub25jZSA9IGZ1bmN0aW9uIG9uY2UodHlwZSwgbGlzdGVuZXIpIHtcbiAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcImxpc3RlbmVyXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIEZ1bmN0aW9uLiBSZWNlaXZlZCB0eXBlICcgKyB0eXBlb2YgbGlzdGVuZXIpO1xuICB9XG4gIHRoaXMub24odHlwZSwgX29uY2VXcmFwKHRoaXMsIHR5cGUsIGxpc3RlbmVyKSk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5wcmVwZW5kT25jZUxpc3RlbmVyID1cbiAgICBmdW5jdGlvbiBwcmVwZW5kT25jZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgICBpZiAodHlwZW9mIGxpc3RlbmVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcImxpc3RlbmVyXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIEZ1bmN0aW9uLiBSZWNlaXZlZCB0eXBlICcgKyB0eXBlb2YgbGlzdGVuZXIpO1xuICAgICAgfVxuICAgICAgdGhpcy5wcmVwZW5kTGlzdGVuZXIodHlwZSwgX29uY2VXcmFwKHRoaXMsIHR5cGUsIGxpc3RlbmVyKSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4vLyBFbWl0cyBhICdyZW1vdmVMaXN0ZW5lcicgZXZlbnQgaWYgYW5kIG9ubHkgaWYgdGhlIGxpc3RlbmVyIHdhcyByZW1vdmVkLlxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lciA9XG4gICAgZnVuY3Rpb24gcmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgIHZhciBsaXN0LCBldmVudHMsIHBvc2l0aW9uLCBpLCBvcmlnaW5hbExpc3RlbmVyO1xuXG4gICAgICBpZiAodHlwZW9mIGxpc3RlbmVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcImxpc3RlbmVyXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIEZ1bmN0aW9uLiBSZWNlaXZlZCB0eXBlICcgKyB0eXBlb2YgbGlzdGVuZXIpO1xuICAgICAgfVxuXG4gICAgICBldmVudHMgPSB0aGlzLl9ldmVudHM7XG4gICAgICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICBsaXN0ID0gZXZlbnRzW3R5cGVdO1xuICAgICAgaWYgKGxpc3QgPT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgIGlmIChsaXN0ID09PSBsaXN0ZW5lciB8fCBsaXN0Lmxpc3RlbmVyID09PSBsaXN0ZW5lcikge1xuICAgICAgICBpZiAoLS10aGlzLl9ldmVudHNDb3VudCA9PT0gMClcbiAgICAgICAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBkZWxldGUgZXZlbnRzW3R5cGVdO1xuICAgICAgICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIpXG4gICAgICAgICAgICB0aGlzLmVtaXQoJ3JlbW92ZUxpc3RlbmVyJywgdHlwZSwgbGlzdC5saXN0ZW5lciB8fCBsaXN0ZW5lcik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGxpc3QgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcG9zaXRpb24gPSAtMTtcblxuICAgICAgICBmb3IgKGkgPSBsaXN0Lmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgaWYgKGxpc3RbaV0gPT09IGxpc3RlbmVyIHx8IGxpc3RbaV0ubGlzdGVuZXIgPT09IGxpc3RlbmVyKSB7XG4gICAgICAgICAgICBvcmlnaW5hbExpc3RlbmVyID0gbGlzdFtpXS5saXN0ZW5lcjtcbiAgICAgICAgICAgIHBvc2l0aW9uID0gaTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwb3NpdGlvbiA8IDApXG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgICAgaWYgKHBvc2l0aW9uID09PSAwKVxuICAgICAgICAgIGxpc3Quc2hpZnQoKTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgc3BsaWNlT25lKGxpc3QsIHBvc2l0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChsaXN0Lmxlbmd0aCA9PT0gMSlcbiAgICAgICAgICBldmVudHNbdHlwZV0gPSBsaXN0WzBdO1xuXG4gICAgICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICB0aGlzLmVtaXQoJ3JlbW92ZUxpc3RlbmVyJywgdHlwZSwgb3JpZ2luYWxMaXN0ZW5lciB8fCBsaXN0ZW5lcik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub2ZmID0gRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnMgPVxuICAgIGZ1bmN0aW9uIHJlbW92ZUFsbExpc3RlbmVycyh0eXBlKSB7XG4gICAgICB2YXIgbGlzdGVuZXJzLCBldmVudHMsIGk7XG5cbiAgICAgIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcbiAgICAgIGlmIChldmVudHMgPT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgIC8vIG5vdCBsaXN0ZW5pbmcgZm9yIHJlbW92ZUxpc3RlbmVyLCBubyBuZWVkIHRvIGVtaXRcbiAgICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHRoaXMuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgICAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xuICAgICAgICB9IGVsc2UgaWYgKGV2ZW50c1t0eXBlXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaWYgKC0tdGhpcy5fZXZlbnRzQ291bnQgPT09IDApXG4gICAgICAgICAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIGRlbGV0ZSBldmVudHNbdHlwZV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIC8vIGVtaXQgcmVtb3ZlTGlzdGVuZXIgZm9yIGFsbCBsaXN0ZW5lcnMgb24gYWxsIGV2ZW50c1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhldmVudHMpO1xuICAgICAgICB2YXIga2V5O1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgIGtleSA9IGtleXNbaV07XG4gICAgICAgICAgaWYgKGtleSA9PT0gJ3JlbW92ZUxpc3RlbmVyJykgY29udGludWU7XG4gICAgICAgICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycygncmVtb3ZlTGlzdGVuZXInKTtcbiAgICAgICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgbGlzdGVuZXJzID0gZXZlbnRzW3R5cGVdO1xuXG4gICAgICBpZiAodHlwZW9mIGxpc3RlbmVycyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVycyk7XG4gICAgICB9IGVsc2UgaWYgKGxpc3RlbmVycyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIC8vIExJRk8gb3JkZXJcbiAgICAgICAgZm9yIChpID0gbGlzdGVuZXJzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcnNbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbmZ1bmN0aW9uIF9saXN0ZW5lcnModGFyZ2V0LCB0eXBlLCB1bndyYXApIHtcbiAgdmFyIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzO1xuXG4gIGlmIChldmVudHMgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm4gW107XG5cbiAgdmFyIGV2bGlzdGVuZXIgPSBldmVudHNbdHlwZV07XG4gIGlmIChldmxpc3RlbmVyID09PSB1bmRlZmluZWQpXG4gICAgcmV0dXJuIFtdO1xuXG4gIGlmICh0eXBlb2YgZXZsaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJylcbiAgICByZXR1cm4gdW53cmFwID8gW2V2bGlzdGVuZXIubGlzdGVuZXIgfHwgZXZsaXN0ZW5lcl0gOiBbZXZsaXN0ZW5lcl07XG5cbiAgcmV0dXJuIHVud3JhcCA/XG4gICAgdW53cmFwTGlzdGVuZXJzKGV2bGlzdGVuZXIpIDogYXJyYXlDbG9uZShldmxpc3RlbmVyLCBldmxpc3RlbmVyLmxlbmd0aCk7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJzID0gZnVuY3Rpb24gbGlzdGVuZXJzKHR5cGUpIHtcbiAgcmV0dXJuIF9saXN0ZW5lcnModGhpcywgdHlwZSwgdHJ1ZSk7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJhd0xpc3RlbmVycyA9IGZ1bmN0aW9uIHJhd0xpc3RlbmVycyh0eXBlKSB7XG4gIHJldHVybiBfbGlzdGVuZXJzKHRoaXMsIHR5cGUsIGZhbHNlKTtcbn07XG5cbkV2ZW50RW1pdHRlci5saXN0ZW5lckNvdW50ID0gZnVuY3Rpb24oZW1pdHRlciwgdHlwZSkge1xuICBpZiAodHlwZW9mIGVtaXR0ZXIubGlzdGVuZXJDb3VudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBlbWl0dGVyLmxpc3RlbmVyQ291bnQodHlwZSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGxpc3RlbmVyQ291bnQuY2FsbChlbWl0dGVyLCB0eXBlKTtcbiAgfVxufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lckNvdW50ID0gbGlzdGVuZXJDb3VudDtcbmZ1bmN0aW9uIGxpc3RlbmVyQ291bnQodHlwZSkge1xuICB2YXIgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuXG4gIGlmIChldmVudHMgIT09IHVuZGVmaW5lZCkge1xuICAgIHZhciBldmxpc3RlbmVyID0gZXZlbnRzW3R5cGVdO1xuXG4gICAgaWYgKHR5cGVvZiBldmxpc3RlbmVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9IGVsc2UgaWYgKGV2bGlzdGVuZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGV2bGlzdGVuZXIubGVuZ3RoO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAwO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmV2ZW50TmFtZXMgPSBmdW5jdGlvbiBldmVudE5hbWVzKCkge1xuICByZXR1cm4gdGhpcy5fZXZlbnRzQ291bnQgPiAwID8gUmVmbGVjdE93bktleXModGhpcy5fZXZlbnRzKSA6IFtdO1xufTtcblxuZnVuY3Rpb24gYXJyYXlDbG9uZShhcnIsIG4pIHtcbiAgdmFyIGNvcHkgPSBuZXcgQXJyYXkobik7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbjsgKytpKVxuICAgIGNvcHlbaV0gPSBhcnJbaV07XG4gIHJldHVybiBjb3B5O1xufVxuXG5mdW5jdGlvbiBzcGxpY2VPbmUobGlzdCwgaW5kZXgpIHtcbiAgZm9yICg7IGluZGV4ICsgMSA8IGxpc3QubGVuZ3RoOyBpbmRleCsrKVxuICAgIGxpc3RbaW5kZXhdID0gbGlzdFtpbmRleCArIDFdO1xuICBsaXN0LnBvcCgpO1xufVxuXG5mdW5jdGlvbiB1bndyYXBMaXN0ZW5lcnMoYXJyKSB7XG4gIHZhciByZXQgPSBuZXcgQXJyYXkoYXJyLmxlbmd0aCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmV0Lmxlbmd0aDsgKytpKSB7XG4gICAgcmV0W2ldID0gYXJyW2ldLmxpc3RlbmVyIHx8IGFycltpXTtcbiAgfVxuICByZXR1cm4gcmV0O1xufVxuIiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvX3N0cmVhbV9yZWFkYWJsZS5qcycpO1xuZXhwb3J0cy5TdHJlYW0gPSBleHBvcnRzO1xuZXhwb3J0cy5SZWFkYWJsZSA9IGV4cG9ydHM7XG5leHBvcnRzLldyaXRhYmxlID0gcmVxdWlyZSgnLi9saWIvX3N0cmVhbV93cml0YWJsZS5qcycpO1xuZXhwb3J0cy5EdXBsZXggPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX2R1cGxleC5qcycpO1xuZXhwb3J0cy5UcmFuc2Zvcm0gPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX3RyYW5zZm9ybS5qcycpO1xuZXhwb3J0cy5QYXNzVGhyb3VnaCA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fcGFzc3Rocm91Z2guanMnKTtcbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4vLyBBIGJpdCBzaW1wbGVyIHRoYW4gcmVhZGFibGUgc3RyZWFtcy5cbi8vIEltcGxlbWVudCBhbiBhc3luYyAuX3dyaXRlKGNodW5rLCBlbmNvZGluZywgY2IpLCBhbmQgaXQnbGwgaGFuZGxlIGFsbFxuLy8gdGhlIGRyYWluIGV2ZW50IGVtaXNzaW9uIGFuZCBidWZmZXJpbmcuXG5cbid1c2Ugc3RyaWN0JztcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cblxudmFyIHBuYSA9IHJlcXVpcmUoJ3Byb2Nlc3MtbmV4dGljay1hcmdzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxubW9kdWxlLmV4cG9ydHMgPSBXcml0YWJsZTtcblxuLyogPHJlcGxhY2VtZW50PiAqL1xuZnVuY3Rpb24gV3JpdGVSZXEoY2h1bmssIGVuY29kaW5nLCBjYikge1xuICB0aGlzLmNodW5rID0gY2h1bms7XG4gIHRoaXMuZW5jb2RpbmcgPSBlbmNvZGluZztcbiAgdGhpcy5jYWxsYmFjayA9IGNiO1xuICB0aGlzLm5leHQgPSBudWxsO1xufVxuXG4vLyBJdCBzZWVtcyBhIGxpbmtlZCBsaXN0IGJ1dCBpdCBpcyBub3Rcbi8vIHRoZXJlIHdpbGwgYmUgb25seSAyIG9mIHRoZXNlIGZvciBlYWNoIHN0cmVhbVxuZnVuY3Rpb24gQ29ya2VkUmVxdWVzdChzdGF0ZSkge1xuICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gIHRoaXMubmV4dCA9IG51bGw7XG4gIHRoaXMuZW50cnkgPSBudWxsO1xuICB0aGlzLmZpbmlzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICBvbkNvcmtlZEZpbmlzaChfdGhpcywgc3RhdGUpO1xuICB9O1xufVxuLyogPC9yZXBsYWNlbWVudD4gKi9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBhc3luY1dyaXRlID0gIXByb2Nlc3MuYnJvd3NlciAmJiBbJ3YwLjEwJywgJ3YwLjkuJ10uaW5kZXhPZihwcm9jZXNzLnZlcnNpb24uc2xpY2UoMCwgNSkpID4gLTEgPyBzZXRJbW1lZGlhdGUgOiBwbmEubmV4dFRpY2s7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBEdXBsZXg7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuV3JpdGFibGUuV3JpdGFibGVTdGF0ZSA9IFdyaXRhYmxlU3RhdGU7XG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgdXRpbCA9IHJlcXVpcmUoJ2NvcmUtdXRpbC1pcycpO1xudXRpbC5pbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBpbnRlcm5hbFV0aWwgPSB7XG4gIGRlcHJlY2F0ZTogcmVxdWlyZSgndXRpbC1kZXByZWNhdGUnKVxufTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIFN0cmVhbSA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvc3RyZWFtcy9zdHJlYW0nKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xuXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXI7XG52YXIgT3VyVWludDhBcnJheSA9IGdsb2JhbC5VaW50OEFycmF5IHx8IGZ1bmN0aW9uICgpIHt9O1xuZnVuY3Rpb24gX3VpbnQ4QXJyYXlUb0J1ZmZlcihjaHVuaykge1xuICByZXR1cm4gQnVmZmVyLmZyb20oY2h1bmspO1xufVxuZnVuY3Rpb24gX2lzVWludDhBcnJheShvYmopIHtcbiAgcmV0dXJuIEJ1ZmZlci5pc0J1ZmZlcihvYmopIHx8IG9iaiBpbnN0YW5jZW9mIE91clVpbnQ4QXJyYXk7XG59XG5cbi8qPC9yZXBsYWNlbWVudD4qL1xuXG52YXIgZGVzdHJveUltcGwgPSByZXF1aXJlKCcuL2ludGVybmFsL3N0cmVhbXMvZGVzdHJveScpO1xuXG51dGlsLmluaGVyaXRzKFdyaXRhYmxlLCBTdHJlYW0pO1xuXG5mdW5jdGlvbiBub3AoKSB7fVxuXG5mdW5jdGlvbiBXcml0YWJsZVN0YXRlKG9wdGlvbnMsIHN0cmVhbSkge1xuICBEdXBsZXggPSBEdXBsZXggfHwgcmVxdWlyZSgnLi9fc3RyZWFtX2R1cGxleCcpO1xuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIC8vIER1cGxleCBzdHJlYW1zIGFyZSBib3RoIHJlYWRhYmxlIGFuZCB3cml0YWJsZSwgYnV0IHNoYXJlXG4gIC8vIHRoZSBzYW1lIG9wdGlvbnMgb2JqZWN0LlxuICAvLyBIb3dldmVyLCBzb21lIGNhc2VzIHJlcXVpcmUgc2V0dGluZyBvcHRpb25zIHRvIGRpZmZlcmVudFxuICAvLyB2YWx1ZXMgZm9yIHRoZSByZWFkYWJsZSBhbmQgdGhlIHdyaXRhYmxlIHNpZGVzIG9mIHRoZSBkdXBsZXggc3RyZWFtLlxuICAvLyBUaGVzZSBvcHRpb25zIGNhbiBiZSBwcm92aWRlZCBzZXBhcmF0ZWx5IGFzIHJlYWRhYmxlWFhYIGFuZCB3cml0YWJsZVhYWC5cbiAgdmFyIGlzRHVwbGV4ID0gc3RyZWFtIGluc3RhbmNlb2YgRHVwbGV4O1xuXG4gIC8vIG9iamVjdCBzdHJlYW0gZmxhZyB0byBpbmRpY2F0ZSB3aGV0aGVyIG9yIG5vdCB0aGlzIHN0cmVhbVxuICAvLyBjb250YWlucyBidWZmZXJzIG9yIG9iamVjdHMuXG4gIHRoaXMub2JqZWN0TW9kZSA9ICEhb3B0aW9ucy5vYmplY3RNb2RlO1xuXG4gIGlmIChpc0R1cGxleCkgdGhpcy5vYmplY3RNb2RlID0gdGhpcy5vYmplY3RNb2RlIHx8ICEhb3B0aW9ucy53cml0YWJsZU9iamVjdE1vZGU7XG5cbiAgLy8gdGhlIHBvaW50IGF0IHdoaWNoIHdyaXRlKCkgc3RhcnRzIHJldHVybmluZyBmYWxzZVxuICAvLyBOb3RlOiAwIGlzIGEgdmFsaWQgdmFsdWUsIG1lYW5zIHRoYXQgd2UgYWx3YXlzIHJldHVybiBmYWxzZSBpZlxuICAvLyB0aGUgZW50aXJlIGJ1ZmZlciBpcyBub3QgZmx1c2hlZCBpbW1lZGlhdGVseSBvbiB3cml0ZSgpXG4gIHZhciBod20gPSBvcHRpb25zLmhpZ2hXYXRlck1hcms7XG4gIHZhciB3cml0YWJsZUh3bSA9IG9wdGlvbnMud3JpdGFibGVIaWdoV2F0ZXJNYXJrO1xuICB2YXIgZGVmYXVsdEh3bSA9IHRoaXMub2JqZWN0TW9kZSA/IDE2IDogMTYgKiAxMDI0O1xuXG4gIGlmIChod20gfHwgaHdtID09PSAwKSB0aGlzLmhpZ2hXYXRlck1hcmsgPSBod207ZWxzZSBpZiAoaXNEdXBsZXggJiYgKHdyaXRhYmxlSHdtIHx8IHdyaXRhYmxlSHdtID09PSAwKSkgdGhpcy5oaWdoV2F0ZXJNYXJrID0gd3JpdGFibGVId207ZWxzZSB0aGlzLmhpZ2hXYXRlck1hcmsgPSBkZWZhdWx0SHdtO1xuXG4gIC8vIGNhc3QgdG8gaW50cy5cbiAgdGhpcy5oaWdoV2F0ZXJNYXJrID0gTWF0aC5mbG9vcih0aGlzLmhpZ2hXYXRlck1hcmspO1xuXG4gIC8vIGlmIF9maW5hbCBoYXMgYmVlbiBjYWxsZWRcbiAgdGhpcy5maW5hbENhbGxlZCA9IGZhbHNlO1xuXG4gIC8vIGRyYWluIGV2ZW50IGZsYWcuXG4gIHRoaXMubmVlZERyYWluID0gZmFsc2U7XG4gIC8vIGF0IHRoZSBzdGFydCBvZiBjYWxsaW5nIGVuZCgpXG4gIHRoaXMuZW5kaW5nID0gZmFsc2U7XG4gIC8vIHdoZW4gZW5kKCkgaGFzIGJlZW4gY2FsbGVkLCBhbmQgcmV0dXJuZWRcbiAgdGhpcy5lbmRlZCA9IGZhbHNlO1xuICAvLyB3aGVuICdmaW5pc2gnIGlzIGVtaXR0ZWRcbiAgdGhpcy5maW5pc2hlZCA9IGZhbHNlO1xuXG4gIC8vIGhhcyBpdCBiZWVuIGRlc3Ryb3llZFxuICB0aGlzLmRlc3Ryb3llZCA9IGZhbHNlO1xuXG4gIC8vIHNob3VsZCB3ZSBkZWNvZGUgc3RyaW5ncyBpbnRvIGJ1ZmZlcnMgYmVmb3JlIHBhc3NpbmcgdG8gX3dyaXRlP1xuICAvLyB0aGlzIGlzIGhlcmUgc28gdGhhdCBzb21lIG5vZGUtY29yZSBzdHJlYW1zIGNhbiBvcHRpbWl6ZSBzdHJpbmdcbiAgLy8gaGFuZGxpbmcgYXQgYSBsb3dlciBsZXZlbC5cbiAgdmFyIG5vRGVjb2RlID0gb3B0aW9ucy5kZWNvZGVTdHJpbmdzID09PSBmYWxzZTtcbiAgdGhpcy5kZWNvZGVTdHJpbmdzID0gIW5vRGVjb2RlO1xuXG4gIC8vIENyeXB0byBpcyBraW5kIG9mIG9sZCBhbmQgY3J1c3R5LiAgSGlzdG9yaWNhbGx5LCBpdHMgZGVmYXVsdCBzdHJpbmdcbiAgLy8gZW5jb2RpbmcgaXMgJ2JpbmFyeScgc28gd2UgaGF2ZSB0byBtYWtlIHRoaXMgY29uZmlndXJhYmxlLlxuICAvLyBFdmVyeXRoaW5nIGVsc2UgaW4gdGhlIHVuaXZlcnNlIHVzZXMgJ3V0ZjgnLCB0aG91Z2guXG4gIHRoaXMuZGVmYXVsdEVuY29kaW5nID0gb3B0aW9ucy5kZWZhdWx0RW5jb2RpbmcgfHwgJ3V0ZjgnO1xuXG4gIC8vIG5vdCBhbiBhY3R1YWwgYnVmZmVyIHdlIGtlZXAgdHJhY2sgb2YsIGJ1dCBhIG1lYXN1cmVtZW50XG4gIC8vIG9mIGhvdyBtdWNoIHdlJ3JlIHdhaXRpbmcgdG8gZ2V0IHB1c2hlZCB0byBzb21lIHVuZGVybHlpbmdcbiAgLy8gc29ja2V0IG9yIGZpbGUuXG4gIHRoaXMubGVuZ3RoID0gMDtcblxuICAvLyBhIGZsYWcgdG8gc2VlIHdoZW4gd2UncmUgaW4gdGhlIG1pZGRsZSBvZiBhIHdyaXRlLlxuICB0aGlzLndyaXRpbmcgPSBmYWxzZTtcblxuICAvLyB3aGVuIHRydWUgYWxsIHdyaXRlcyB3aWxsIGJlIGJ1ZmZlcmVkIHVudGlsIC51bmNvcmsoKSBjYWxsXG4gIHRoaXMuY29ya2VkID0gMDtcblxuICAvLyBhIGZsYWcgdG8gYmUgYWJsZSB0byB0ZWxsIGlmIHRoZSBvbndyaXRlIGNiIGlzIGNhbGxlZCBpbW1lZGlhdGVseSxcbiAgLy8gb3Igb24gYSBsYXRlciB0aWNrLiAgV2Ugc2V0IHRoaXMgdG8gdHJ1ZSBhdCBmaXJzdCwgYmVjYXVzZSBhbnlcbiAgLy8gYWN0aW9ucyB0aGF0IHNob3VsZG4ndCBoYXBwZW4gdW50aWwgXCJsYXRlclwiIHNob3VsZCBnZW5lcmFsbHkgYWxzb1xuICAvLyBub3QgaGFwcGVuIGJlZm9yZSB0aGUgZmlyc3Qgd3JpdGUgY2FsbC5cbiAgdGhpcy5zeW5jID0gdHJ1ZTtcblxuICAvLyBhIGZsYWcgdG8ga25vdyBpZiB3ZSdyZSBwcm9jZXNzaW5nIHByZXZpb3VzbHkgYnVmZmVyZWQgaXRlbXMsIHdoaWNoXG4gIC8vIG1heSBjYWxsIHRoZSBfd3JpdGUoKSBjYWxsYmFjayBpbiB0aGUgc2FtZSB0aWNrLCBzbyB0aGF0IHdlIGRvbid0XG4gIC8vIGVuZCB1cCBpbiBhbiBvdmVybGFwcGVkIG9ud3JpdGUgc2l0dWF0aW9uLlxuICB0aGlzLmJ1ZmZlclByb2Nlc3NpbmcgPSBmYWxzZTtcblxuICAvLyB0aGUgY2FsbGJhY2sgdGhhdCdzIHBhc3NlZCB0byBfd3JpdGUoY2h1bmssY2IpXG4gIHRoaXMub253cml0ZSA9IGZ1bmN0aW9uIChlcikge1xuICAgIG9ud3JpdGUoc3RyZWFtLCBlcik7XG4gIH07XG5cbiAgLy8gdGhlIGNhbGxiYWNrIHRoYXQgdGhlIHVzZXIgc3VwcGxpZXMgdG8gd3JpdGUoY2h1bmssZW5jb2RpbmcsY2IpXG4gIHRoaXMud3JpdGVjYiA9IG51bGw7XG5cbiAgLy8gdGhlIGFtb3VudCB0aGF0IGlzIGJlaW5nIHdyaXR0ZW4gd2hlbiBfd3JpdGUgaXMgY2FsbGVkLlxuICB0aGlzLndyaXRlbGVuID0gMDtcblxuICB0aGlzLmJ1ZmZlcmVkUmVxdWVzdCA9IG51bGw7XG4gIHRoaXMubGFzdEJ1ZmZlcmVkUmVxdWVzdCA9IG51bGw7XG5cbiAgLy8gbnVtYmVyIG9mIHBlbmRpbmcgdXNlci1zdXBwbGllZCB3cml0ZSBjYWxsYmFja3NcbiAgLy8gdGhpcyBtdXN0IGJlIDAgYmVmb3JlICdmaW5pc2gnIGNhbiBiZSBlbWl0dGVkXG4gIHRoaXMucGVuZGluZ2NiID0gMDtcblxuICAvLyBlbWl0IHByZWZpbmlzaCBpZiB0aGUgb25seSB0aGluZyB3ZSdyZSB3YWl0aW5nIGZvciBpcyBfd3JpdGUgY2JzXG4gIC8vIFRoaXMgaXMgcmVsZXZhbnQgZm9yIHN5bmNocm9ub3VzIFRyYW5zZm9ybSBzdHJlYW1zXG4gIHRoaXMucHJlZmluaXNoZWQgPSBmYWxzZTtcblxuICAvLyBUcnVlIGlmIHRoZSBlcnJvciB3YXMgYWxyZWFkeSBlbWl0dGVkIGFuZCBzaG91bGQgbm90IGJlIHRocm93biBhZ2FpblxuICB0aGlzLmVycm9yRW1pdHRlZCA9IGZhbHNlO1xuXG4gIC8vIGNvdW50IGJ1ZmZlcmVkIHJlcXVlc3RzXG4gIHRoaXMuYnVmZmVyZWRSZXF1ZXN0Q291bnQgPSAwO1xuXG4gIC8vIGFsbG9jYXRlIHRoZSBmaXJzdCBDb3JrZWRSZXF1ZXN0LCB0aGVyZSBpcyBhbHdheXNcbiAgLy8gb25lIGFsbG9jYXRlZCBhbmQgZnJlZSB0byB1c2UsIGFuZCB3ZSBtYWludGFpbiBhdCBtb3N0IHR3b1xuICB0aGlzLmNvcmtlZFJlcXVlc3RzRnJlZSA9IG5ldyBDb3JrZWRSZXF1ZXN0KHRoaXMpO1xufVxuXG5Xcml0YWJsZVN0YXRlLnByb3RvdHlwZS5nZXRCdWZmZXIgPSBmdW5jdGlvbiBnZXRCdWZmZXIoKSB7XG4gIHZhciBjdXJyZW50ID0gdGhpcy5idWZmZXJlZFJlcXVlc3Q7XG4gIHZhciBvdXQgPSBbXTtcbiAgd2hpbGUgKGN1cnJlbnQpIHtcbiAgICBvdXQucHVzaChjdXJyZW50KTtcbiAgICBjdXJyZW50ID0gY3VycmVudC5uZXh0O1xuICB9XG4gIHJldHVybiBvdXQ7XG59O1xuXG4oZnVuY3Rpb24gKCkge1xuICB0cnkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShXcml0YWJsZVN0YXRlLnByb3RvdHlwZSwgJ2J1ZmZlcicsIHtcbiAgICAgIGdldDogaW50ZXJuYWxVdGlsLmRlcHJlY2F0ZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEJ1ZmZlcigpO1xuICAgICAgfSwgJ193cml0YWJsZVN0YXRlLmJ1ZmZlciBpcyBkZXByZWNhdGVkLiBVc2UgX3dyaXRhYmxlU3RhdGUuZ2V0QnVmZmVyICcgKyAnaW5zdGVhZC4nLCAnREVQMDAwMycpXG4gICAgfSk7XG4gIH0gY2F0Y2ggKF8pIHt9XG59KSgpO1xuXG4vLyBUZXN0IF93cml0YWJsZVN0YXRlIGZvciBpbmhlcml0YW5jZSB0byBhY2NvdW50IGZvciBEdXBsZXggc3RyZWFtcyxcbi8vIHdob3NlIHByb3RvdHlwZSBjaGFpbiBvbmx5IHBvaW50cyB0byBSZWFkYWJsZS5cbnZhciByZWFsSGFzSW5zdGFuY2U7XG5pZiAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wuaGFzSW5zdGFuY2UgJiYgdHlwZW9mIEZ1bmN0aW9uLnByb3RvdHlwZVtTeW1ib2wuaGFzSW5zdGFuY2VdID09PSAnZnVuY3Rpb24nKSB7XG4gIHJlYWxIYXNJbnN0YW5jZSA9IEZ1bmN0aW9uLnByb3RvdHlwZVtTeW1ib2wuaGFzSW5zdGFuY2VdO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoV3JpdGFibGUsIFN5bWJvbC5oYXNJbnN0YW5jZSwge1xuICAgIHZhbHVlOiBmdW5jdGlvbiAob2JqZWN0KSB7XG4gICAgICBpZiAocmVhbEhhc0luc3RhbmNlLmNhbGwodGhpcywgb2JqZWN0KSkgcmV0dXJuIHRydWU7XG4gICAgICBpZiAodGhpcyAhPT0gV3JpdGFibGUpIHJldHVybiBmYWxzZTtcblxuICAgICAgcmV0dXJuIG9iamVjdCAmJiBvYmplY3QuX3dyaXRhYmxlU3RhdGUgaW5zdGFuY2VvZiBXcml0YWJsZVN0YXRlO1xuICAgIH1cbiAgfSk7XG59IGVsc2Uge1xuICByZWFsSGFzSW5zdGFuY2UgPSBmdW5jdGlvbiAob2JqZWN0KSB7XG4gICAgcmV0dXJuIG9iamVjdCBpbnN0YW5jZW9mIHRoaXM7XG4gIH07XG59XG5cbmZ1bmN0aW9uIFdyaXRhYmxlKG9wdGlvbnMpIHtcbiAgRHVwbGV4ID0gRHVwbGV4IHx8IHJlcXVpcmUoJy4vX3N0cmVhbV9kdXBsZXgnKTtcblxuICAvLyBXcml0YWJsZSBjdG9yIGlzIGFwcGxpZWQgdG8gRHVwbGV4ZXMsIHRvby5cbiAgLy8gYHJlYWxIYXNJbnN0YW5jZWAgaXMgbmVjZXNzYXJ5IGJlY2F1c2UgdXNpbmcgcGxhaW4gYGluc3RhbmNlb2ZgXG4gIC8vIHdvdWxkIHJldHVybiBmYWxzZSwgYXMgbm8gYF93cml0YWJsZVN0YXRlYCBwcm9wZXJ0eSBpcyBhdHRhY2hlZC5cblxuICAvLyBUcnlpbmcgdG8gdXNlIHRoZSBjdXN0b20gYGluc3RhbmNlb2ZgIGZvciBXcml0YWJsZSBoZXJlIHdpbGwgYWxzbyBicmVhayB0aGVcbiAgLy8gTm9kZS5qcyBMYXp5VHJhbnNmb3JtIGltcGxlbWVudGF0aW9uLCB3aGljaCBoYXMgYSBub24tdHJpdmlhbCBnZXR0ZXIgZm9yXG4gIC8vIGBfd3JpdGFibGVTdGF0ZWAgdGhhdCB3b3VsZCBsZWFkIHRvIGluZmluaXRlIHJlY3Vyc2lvbi5cbiAgaWYgKCFyZWFsSGFzSW5zdGFuY2UuY2FsbChXcml0YWJsZSwgdGhpcykgJiYgISh0aGlzIGluc3RhbmNlb2YgRHVwbGV4KSkge1xuICAgIHJldHVybiBuZXcgV3JpdGFibGUob3B0aW9ucyk7XG4gIH1cblxuICB0aGlzLl93cml0YWJsZVN0YXRlID0gbmV3IFdyaXRhYmxlU3RhdGUob3B0aW9ucywgdGhpcyk7XG5cbiAgLy8gbGVnYWN5LlxuICB0aGlzLndyaXRhYmxlID0gdHJ1ZTtcblxuICBpZiAob3B0aW9ucykge1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy53cml0ZSA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fd3JpdGUgPSBvcHRpb25zLndyaXRlO1xuXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLndyaXRldiA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fd3JpdGV2ID0gb3B0aW9ucy53cml0ZXY7XG5cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMuZGVzdHJveSA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fZGVzdHJveSA9IG9wdGlvbnMuZGVzdHJveTtcblxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5maW5hbCA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fZmluYWwgPSBvcHRpb25zLmZpbmFsO1xuICB9XG5cbiAgU3RyZWFtLmNhbGwodGhpcyk7XG59XG5cbi8vIE90aGVyd2lzZSBwZW9wbGUgY2FuIHBpcGUgV3JpdGFibGUgc3RyZWFtcywgd2hpY2ggaXMganVzdCB3cm9uZy5cbldyaXRhYmxlLnByb3RvdHlwZS5waXBlID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmVtaXQoJ2Vycm9yJywgbmV3IEVycm9yKCdDYW5ub3QgcGlwZSwgbm90IHJlYWRhYmxlJykpO1xufTtcblxuZnVuY3Rpb24gd3JpdGVBZnRlckVuZChzdHJlYW0sIGNiKSB7XG4gIHZhciBlciA9IG5ldyBFcnJvcignd3JpdGUgYWZ0ZXIgZW5kJyk7XG4gIC8vIFRPRE86IGRlZmVyIGVycm9yIGV2ZW50cyBjb25zaXN0ZW50bHkgZXZlcnl3aGVyZSwgbm90IGp1c3QgdGhlIGNiXG4gIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVyKTtcbiAgcG5hLm5leHRUaWNrKGNiLCBlcik7XG59XG5cbi8vIENoZWNrcyB0aGF0IGEgdXNlci1zdXBwbGllZCBjaHVuayBpcyB2YWxpZCwgZXNwZWNpYWxseSBmb3IgdGhlIHBhcnRpY3VsYXJcbi8vIG1vZGUgdGhlIHN0cmVhbSBpcyBpbi4gQ3VycmVudGx5IHRoaXMgbWVhbnMgdGhhdCBgbnVsbGAgaXMgbmV2ZXIgYWNjZXB0ZWRcbi8vIGFuZCB1bmRlZmluZWQvbm9uLXN0cmluZyB2YWx1ZXMgYXJlIG9ubHkgYWxsb3dlZCBpbiBvYmplY3QgbW9kZS5cbmZ1bmN0aW9uIHZhbGlkQ2h1bmsoc3RyZWFtLCBzdGF0ZSwgY2h1bmssIGNiKSB7XG4gIHZhciB2YWxpZCA9IHRydWU7XG4gIHZhciBlciA9IGZhbHNlO1xuXG4gIGlmIChjaHVuayA9PT0gbnVsbCkge1xuICAgIGVyID0gbmV3IFR5cGVFcnJvcignTWF5IG5vdCB3cml0ZSBudWxsIHZhbHVlcyB0byBzdHJlYW0nKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgY2h1bmsgIT09ICdzdHJpbmcnICYmIGNodW5rICE9PSB1bmRlZmluZWQgJiYgIXN0YXRlLm9iamVjdE1vZGUpIHtcbiAgICBlciA9IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgbm9uLXN0cmluZy9idWZmZXIgY2h1bmsnKTtcbiAgfVxuICBpZiAoZXIpIHtcbiAgICBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcik7XG4gICAgcG5hLm5leHRUaWNrKGNiLCBlcik7XG4gICAgdmFsaWQgPSBmYWxzZTtcbiAgfVxuICByZXR1cm4gdmFsaWQ7XG59XG5cbldyaXRhYmxlLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3dyaXRhYmxlU3RhdGU7XG4gIHZhciByZXQgPSBmYWxzZTtcbiAgdmFyIGlzQnVmID0gIXN0YXRlLm9iamVjdE1vZGUgJiYgX2lzVWludDhBcnJheShjaHVuayk7XG5cbiAgaWYgKGlzQnVmICYmICFCdWZmZXIuaXNCdWZmZXIoY2h1bmspKSB7XG4gICAgY2h1bmsgPSBfdWludDhBcnJheVRvQnVmZmVyKGNodW5rKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYiA9IGVuY29kaW5nO1xuICAgIGVuY29kaW5nID0gbnVsbDtcbiAgfVxuXG4gIGlmIChpc0J1ZikgZW5jb2RpbmcgPSAnYnVmZmVyJztlbHNlIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gc3RhdGUuZGVmYXVsdEVuY29kaW5nO1xuXG4gIGlmICh0eXBlb2YgY2IgIT09ICdmdW5jdGlvbicpIGNiID0gbm9wO1xuXG4gIGlmIChzdGF0ZS5lbmRlZCkgd3JpdGVBZnRlckVuZCh0aGlzLCBjYik7ZWxzZSBpZiAoaXNCdWYgfHwgdmFsaWRDaHVuayh0aGlzLCBzdGF0ZSwgY2h1bmssIGNiKSkge1xuICAgIHN0YXRlLnBlbmRpbmdjYisrO1xuICAgIHJldCA9IHdyaXRlT3JCdWZmZXIodGhpcywgc3RhdGUsIGlzQnVmLCBjaHVuaywgZW5jb2RpbmcsIGNiKTtcbiAgfVxuXG4gIHJldHVybiByZXQ7XG59O1xuXG5Xcml0YWJsZS5wcm90b3R5cGUuY29yayA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fd3JpdGFibGVTdGF0ZTtcblxuICBzdGF0ZS5jb3JrZWQrKztcbn07XG5cbldyaXRhYmxlLnByb3RvdHlwZS51bmNvcmsgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3dyaXRhYmxlU3RhdGU7XG5cbiAgaWYgKHN0YXRlLmNvcmtlZCkge1xuICAgIHN0YXRlLmNvcmtlZC0tO1xuXG4gICAgaWYgKCFzdGF0ZS53cml0aW5nICYmICFzdGF0ZS5jb3JrZWQgJiYgIXN0YXRlLmZpbmlzaGVkICYmICFzdGF0ZS5idWZmZXJQcm9jZXNzaW5nICYmIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdCkgY2xlYXJCdWZmZXIodGhpcywgc3RhdGUpO1xuICB9XG59O1xuXG5Xcml0YWJsZS5wcm90b3R5cGUuc2V0RGVmYXVsdEVuY29kaW5nID0gZnVuY3Rpb24gc2V0RGVmYXVsdEVuY29kaW5nKGVuY29kaW5nKSB7XG4gIC8vIG5vZGU6OlBhcnNlRW5jb2RpbmcoKSByZXF1aXJlcyBsb3dlciBjYXNlLlxuICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJykgZW5jb2RpbmcgPSBlbmNvZGluZy50b0xvd2VyQ2FzZSgpO1xuICBpZiAoIShbJ2hleCcsICd1dGY4JywgJ3V0Zi04JywgJ2FzY2lpJywgJ2JpbmFyeScsICdiYXNlNjQnLCAndWNzMicsICd1Y3MtMicsICd1dGYxNmxlJywgJ3V0Zi0xNmxlJywgJ3JhdyddLmluZGV4T2YoKGVuY29kaW5nICsgJycpLnRvTG93ZXJDYXNlKCkpID4gLTEpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpO1xuICB0aGlzLl93cml0YWJsZVN0YXRlLmRlZmF1bHRFbmNvZGluZyA9IGVuY29kaW5nO1xuICByZXR1cm4gdGhpcztcbn07XG5cbmZ1bmN0aW9uIGRlY29kZUNodW5rKHN0YXRlLCBjaHVuaywgZW5jb2RpbmcpIHtcbiAgaWYgKCFzdGF0ZS5vYmplY3RNb2RlICYmIHN0YXRlLmRlY29kZVN0cmluZ3MgIT09IGZhbHNlICYmIHR5cGVvZiBjaHVuayA9PT0gJ3N0cmluZycpIHtcbiAgICBjaHVuayA9IEJ1ZmZlci5mcm9tKGNodW5rLCBlbmNvZGluZyk7XG4gIH1cbiAgcmV0dXJuIGNodW5rO1xufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoV3JpdGFibGUucHJvdG90eXBlLCAnd3JpdGFibGVIaWdoV2F0ZXJNYXJrJywge1xuICAvLyBtYWtpbmcgaXQgZXhwbGljaXQgdGhpcyBwcm9wZXJ0eSBpcyBub3QgZW51bWVyYWJsZVxuICAvLyBiZWNhdXNlIG90aGVyd2lzZSBzb21lIHByb3RvdHlwZSBtYW5pcHVsYXRpb24gaW5cbiAgLy8gdXNlcmxhbmQgd2lsbCBmYWlsXG4gIGVudW1lcmFibGU6IGZhbHNlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5fd3JpdGFibGVTdGF0ZS5oaWdoV2F0ZXJNYXJrO1xuICB9XG59KTtcblxuLy8gaWYgd2UncmUgYWxyZWFkeSB3cml0aW5nIHNvbWV0aGluZywgdGhlbiBqdXN0IHB1dCB0aGlzXG4vLyBpbiB0aGUgcXVldWUsIGFuZCB3YWl0IG91ciB0dXJuLiAgT3RoZXJ3aXNlLCBjYWxsIF93cml0ZVxuLy8gSWYgd2UgcmV0dXJuIGZhbHNlLCB0aGVuIHdlIG5lZWQgYSBkcmFpbiBldmVudCwgc28gc2V0IHRoYXQgZmxhZy5cbmZ1bmN0aW9uIHdyaXRlT3JCdWZmZXIoc3RyZWFtLCBzdGF0ZSwgaXNCdWYsIGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgaWYgKCFpc0J1Zikge1xuICAgIHZhciBuZXdDaHVuayA9IGRlY29kZUNodW5rKHN0YXRlLCBjaHVuaywgZW5jb2RpbmcpO1xuICAgIGlmIChjaHVuayAhPT0gbmV3Q2h1bmspIHtcbiAgICAgIGlzQnVmID0gdHJ1ZTtcbiAgICAgIGVuY29kaW5nID0gJ2J1ZmZlcic7XG4gICAgICBjaHVuayA9IG5ld0NodW5rO1xuICAgIH1cbiAgfVxuICB2YXIgbGVuID0gc3RhdGUub2JqZWN0TW9kZSA/IDEgOiBjaHVuay5sZW5ndGg7XG5cbiAgc3RhdGUubGVuZ3RoICs9IGxlbjtcblxuICB2YXIgcmV0ID0gc3RhdGUubGVuZ3RoIDwgc3RhdGUuaGlnaFdhdGVyTWFyaztcbiAgLy8gd2UgbXVzdCBlbnN1cmUgdGhhdCBwcmV2aW91cyBuZWVkRHJhaW4gd2lsbCBub3QgYmUgcmVzZXQgdG8gZmFsc2UuXG4gIGlmICghcmV0KSBzdGF0ZS5uZWVkRHJhaW4gPSB0cnVlO1xuXG4gIGlmIChzdGF0ZS53cml0aW5nIHx8IHN0YXRlLmNvcmtlZCkge1xuICAgIHZhciBsYXN0ID0gc3RhdGUubGFzdEJ1ZmZlcmVkUmVxdWVzdDtcbiAgICBzdGF0ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0ID0ge1xuICAgICAgY2h1bms6IGNodW5rLFxuICAgICAgZW5jb2Rpbmc6IGVuY29kaW5nLFxuICAgICAgaXNCdWY6IGlzQnVmLFxuICAgICAgY2FsbGJhY2s6IGNiLFxuICAgICAgbmV4dDogbnVsbFxuICAgIH07XG4gICAgaWYgKGxhc3QpIHtcbiAgICAgIGxhc3QubmV4dCA9IHN0YXRlLmxhc3RCdWZmZXJlZFJlcXVlc3Q7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdCA9IHN0YXRlLmxhc3RCdWZmZXJlZFJlcXVlc3Q7XG4gICAgfVxuICAgIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdENvdW50ICs9IDE7XG4gIH0gZWxzZSB7XG4gICAgZG9Xcml0ZShzdHJlYW0sIHN0YXRlLCBmYWxzZSwgbGVuLCBjaHVuaywgZW5jb2RpbmcsIGNiKTtcbiAgfVxuXG4gIHJldHVybiByZXQ7XG59XG5cbmZ1bmN0aW9uIGRvV3JpdGUoc3RyZWFtLCBzdGF0ZSwgd3JpdGV2LCBsZW4sIGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgc3RhdGUud3JpdGVsZW4gPSBsZW47XG4gIHN0YXRlLndyaXRlY2IgPSBjYjtcbiAgc3RhdGUud3JpdGluZyA9IHRydWU7XG4gIHN0YXRlLnN5bmMgPSB0cnVlO1xuICBpZiAod3JpdGV2KSBzdHJlYW0uX3dyaXRldihjaHVuaywgc3RhdGUub253cml0ZSk7ZWxzZSBzdHJlYW0uX3dyaXRlKGNodW5rLCBlbmNvZGluZywgc3RhdGUub253cml0ZSk7XG4gIHN0YXRlLnN5bmMgPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gb253cml0ZUVycm9yKHN0cmVhbSwgc3RhdGUsIHN5bmMsIGVyLCBjYikge1xuICAtLXN0YXRlLnBlbmRpbmdjYjtcblxuICBpZiAoc3luYykge1xuICAgIC8vIGRlZmVyIHRoZSBjYWxsYmFjayBpZiB3ZSBhcmUgYmVpbmcgY2FsbGVkIHN5bmNocm9ub3VzbHlcbiAgICAvLyB0byBhdm9pZCBwaWxpbmcgdXAgdGhpbmdzIG9uIHRoZSBzdGFja1xuICAgIHBuYS5uZXh0VGljayhjYiwgZXIpO1xuICAgIC8vIHRoaXMgY2FuIGVtaXQgZmluaXNoLCBhbmQgaXQgd2lsbCBhbHdheXMgaGFwcGVuXG4gICAgLy8gYWZ0ZXIgZXJyb3JcbiAgICBwbmEubmV4dFRpY2soZmluaXNoTWF5YmUsIHN0cmVhbSwgc3RhdGUpO1xuICAgIHN0cmVhbS5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWQgPSB0cnVlO1xuICAgIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVyKTtcbiAgfSBlbHNlIHtcbiAgICAvLyB0aGUgY2FsbGVyIGV4cGVjdCB0aGlzIHRvIGhhcHBlbiBiZWZvcmUgaWZcbiAgICAvLyBpdCBpcyBhc3luY1xuICAgIGNiKGVyKTtcbiAgICBzdHJlYW0uX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkID0gdHJ1ZTtcbiAgICBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcik7XG4gICAgLy8gdGhpcyBjYW4gZW1pdCBmaW5pc2gsIGJ1dCBmaW5pc2ggbXVzdFxuICAgIC8vIGFsd2F5cyBmb2xsb3cgZXJyb3JcbiAgICBmaW5pc2hNYXliZShzdHJlYW0sIHN0YXRlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBvbndyaXRlU3RhdGVVcGRhdGUoc3RhdGUpIHtcbiAgc3RhdGUud3JpdGluZyA9IGZhbHNlO1xuICBzdGF0ZS53cml0ZWNiID0gbnVsbDtcbiAgc3RhdGUubGVuZ3RoIC09IHN0YXRlLndyaXRlbGVuO1xuICBzdGF0ZS53cml0ZWxlbiA9IDA7XG59XG5cbmZ1bmN0aW9uIG9ud3JpdGUoc3RyZWFtLCBlcikge1xuICB2YXIgc3RhdGUgPSBzdHJlYW0uX3dyaXRhYmxlU3RhdGU7XG4gIHZhciBzeW5jID0gc3RhdGUuc3luYztcbiAgdmFyIGNiID0gc3RhdGUud3JpdGVjYjtcblxuICBvbndyaXRlU3RhdGVVcGRhdGUoc3RhdGUpO1xuXG4gIGlmIChlcikgb253cml0ZUVycm9yKHN0cmVhbSwgc3RhdGUsIHN5bmMsIGVyLCBjYik7ZWxzZSB7XG4gICAgLy8gQ2hlY2sgaWYgd2UncmUgYWN0dWFsbHkgcmVhZHkgdG8gZmluaXNoLCBidXQgZG9uJ3QgZW1pdCB5ZXRcbiAgICB2YXIgZmluaXNoZWQgPSBuZWVkRmluaXNoKHN0YXRlKTtcblxuICAgIGlmICghZmluaXNoZWQgJiYgIXN0YXRlLmNvcmtlZCAmJiAhc3RhdGUuYnVmZmVyUHJvY2Vzc2luZyAmJiBzdGF0ZS5idWZmZXJlZFJlcXVlc3QpIHtcbiAgICAgIGNsZWFyQnVmZmVyKHN0cmVhbSwgc3RhdGUpO1xuICAgIH1cblxuICAgIGlmIChzeW5jKSB7XG4gICAgICAvKjxyZXBsYWNlbWVudD4qL1xuICAgICAgYXN5bmNXcml0ZShhZnRlcldyaXRlLCBzdHJlYW0sIHN0YXRlLCBmaW5pc2hlZCwgY2IpO1xuICAgICAgLyo8L3JlcGxhY2VtZW50PiovXG4gICAgfSBlbHNlIHtcbiAgICAgIGFmdGVyV3JpdGUoc3RyZWFtLCBzdGF0ZSwgZmluaXNoZWQsIGNiKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYWZ0ZXJXcml0ZShzdHJlYW0sIHN0YXRlLCBmaW5pc2hlZCwgY2IpIHtcbiAgaWYgKCFmaW5pc2hlZCkgb253cml0ZURyYWluKHN0cmVhbSwgc3RhdGUpO1xuICBzdGF0ZS5wZW5kaW5nY2ItLTtcbiAgY2IoKTtcbiAgZmluaXNoTWF5YmUoc3RyZWFtLCBzdGF0ZSk7XG59XG5cbi8vIE11c3QgZm9yY2UgY2FsbGJhY2sgdG8gYmUgY2FsbGVkIG9uIG5leHRUaWNrLCBzbyB0aGF0IHdlIGRvbid0XG4vLyBlbWl0ICdkcmFpbicgYmVmb3JlIHRoZSB3cml0ZSgpIGNvbnN1bWVyIGdldHMgdGhlICdmYWxzZScgcmV0dXJuXG4vLyB2YWx1ZSwgYW5kIGhhcyBhIGNoYW5jZSB0byBhdHRhY2ggYSAnZHJhaW4nIGxpc3RlbmVyLlxuZnVuY3Rpb24gb253cml0ZURyYWluKHN0cmVhbSwgc3RhdGUpIHtcbiAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCAmJiBzdGF0ZS5uZWVkRHJhaW4pIHtcbiAgICBzdGF0ZS5uZWVkRHJhaW4gPSBmYWxzZTtcbiAgICBzdHJlYW0uZW1pdCgnZHJhaW4nKTtcbiAgfVxufVxuXG4vLyBpZiB0aGVyZSdzIHNvbWV0aGluZyBpbiB0aGUgYnVmZmVyIHdhaXRpbmcsIHRoZW4gcHJvY2VzcyBpdFxuZnVuY3Rpb24gY2xlYXJCdWZmZXIoc3RyZWFtLCBzdGF0ZSkge1xuICBzdGF0ZS5idWZmZXJQcm9jZXNzaW5nID0gdHJ1ZTtcbiAgdmFyIGVudHJ5ID0gc3RhdGUuYnVmZmVyZWRSZXF1ZXN0O1xuXG4gIGlmIChzdHJlYW0uX3dyaXRldiAmJiBlbnRyeSAmJiBlbnRyeS5uZXh0KSB7XG4gICAgLy8gRmFzdCBjYXNlLCB3cml0ZSBldmVyeXRoaW5nIHVzaW5nIF93cml0ZXYoKVxuICAgIHZhciBsID0gc3RhdGUuYnVmZmVyZWRSZXF1ZXN0Q291bnQ7XG4gICAgdmFyIGJ1ZmZlciA9IG5ldyBBcnJheShsKTtcbiAgICB2YXIgaG9sZGVyID0gc3RhdGUuY29ya2VkUmVxdWVzdHNGcmVlO1xuICAgIGhvbGRlci5lbnRyeSA9IGVudHJ5O1xuXG4gICAgdmFyIGNvdW50ID0gMDtcbiAgICB2YXIgYWxsQnVmZmVycyA9IHRydWU7XG4gICAgd2hpbGUgKGVudHJ5KSB7XG4gICAgICBidWZmZXJbY291bnRdID0gZW50cnk7XG4gICAgICBpZiAoIWVudHJ5LmlzQnVmKSBhbGxCdWZmZXJzID0gZmFsc2U7XG4gICAgICBlbnRyeSA9IGVudHJ5Lm5leHQ7XG4gICAgICBjb3VudCArPSAxO1xuICAgIH1cbiAgICBidWZmZXIuYWxsQnVmZmVycyA9IGFsbEJ1ZmZlcnM7XG5cbiAgICBkb1dyaXRlKHN0cmVhbSwgc3RhdGUsIHRydWUsIHN0YXRlLmxlbmd0aCwgYnVmZmVyLCAnJywgaG9sZGVyLmZpbmlzaCk7XG5cbiAgICAvLyBkb1dyaXRlIGlzIGFsbW9zdCBhbHdheXMgYXN5bmMsIGRlZmVyIHRoZXNlIHRvIHNhdmUgYSBiaXQgb2YgdGltZVxuICAgIC8vIGFzIHRoZSBob3QgcGF0aCBlbmRzIHdpdGggZG9Xcml0ZVxuICAgIHN0YXRlLnBlbmRpbmdjYisrO1xuICAgIHN0YXRlLmxhc3RCdWZmZXJlZFJlcXVlc3QgPSBudWxsO1xuICAgIGlmIChob2xkZXIubmV4dCkge1xuICAgICAgc3RhdGUuY29ya2VkUmVxdWVzdHNGcmVlID0gaG9sZGVyLm5leHQ7XG4gICAgICBob2xkZXIubmV4dCA9IG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXRlLmNvcmtlZFJlcXVlc3RzRnJlZSA9IG5ldyBDb3JrZWRSZXF1ZXN0KHN0YXRlKTtcbiAgICB9XG4gICAgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0Q291bnQgPSAwO1xuICB9IGVsc2Uge1xuICAgIC8vIFNsb3cgY2FzZSwgd3JpdGUgY2h1bmtzIG9uZS1ieS1vbmVcbiAgICB3aGlsZSAoZW50cnkpIHtcbiAgICAgIHZhciBjaHVuayA9IGVudHJ5LmNodW5rO1xuICAgICAgdmFyIGVuY29kaW5nID0gZW50cnkuZW5jb2Rpbmc7XG4gICAgICB2YXIgY2IgPSBlbnRyeS5jYWxsYmFjaztcbiAgICAgIHZhciBsZW4gPSBzdGF0ZS5vYmplY3RNb2RlID8gMSA6IGNodW5rLmxlbmd0aDtcblxuICAgICAgZG9Xcml0ZShzdHJlYW0sIHN0YXRlLCBmYWxzZSwgbGVuLCBjaHVuaywgZW5jb2RpbmcsIGNiKTtcbiAgICAgIGVudHJ5ID0gZW50cnkubmV4dDtcbiAgICAgIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdENvdW50LS07XG4gICAgICAvLyBpZiB3ZSBkaWRuJ3QgY2FsbCB0aGUgb253cml0ZSBpbW1lZGlhdGVseSwgdGhlblxuICAgICAgLy8gaXQgbWVhbnMgdGhhdCB3ZSBuZWVkIHRvIHdhaXQgdW50aWwgaXQgZG9lcy5cbiAgICAgIC8vIGFsc28sIHRoYXQgbWVhbnMgdGhhdCB0aGUgY2h1bmsgYW5kIGNiIGFyZSBjdXJyZW50bHlcbiAgICAgIC8vIGJlaW5nIHByb2Nlc3NlZCwgc28gbW92ZSB0aGUgYnVmZmVyIGNvdW50ZXIgcGFzdCB0aGVtLlxuICAgICAgaWYgKHN0YXRlLndyaXRpbmcpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGVudHJ5ID09PSBudWxsKSBzdGF0ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0ID0gbnVsbDtcbiAgfVxuXG4gIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdCA9IGVudHJ5O1xuICBzdGF0ZS5idWZmZXJQcm9jZXNzaW5nID0gZmFsc2U7XG59XG5cbldyaXRhYmxlLnByb3RvdHlwZS5fd3JpdGUgPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYikge1xuICBjYihuZXcgRXJyb3IoJ193cml0ZSgpIGlzIG5vdCBpbXBsZW1lbnRlZCcpKTtcbn07XG5cbldyaXRhYmxlLnByb3RvdHlwZS5fd3JpdGV2ID0gbnVsbDtcblxuV3JpdGFibGUucHJvdG90eXBlLmVuZCA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3dyaXRhYmxlU3RhdGU7XG5cbiAgaWYgKHR5cGVvZiBjaHVuayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNiID0gY2h1bms7XG4gICAgY2h1bmsgPSBudWxsO1xuICAgIGVuY29kaW5nID0gbnVsbDtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYiA9IGVuY29kaW5nO1xuICAgIGVuY29kaW5nID0gbnVsbDtcbiAgfVxuXG4gIGlmIChjaHVuayAhPT0gbnVsbCAmJiBjaHVuayAhPT0gdW5kZWZpbmVkKSB0aGlzLndyaXRlKGNodW5rLCBlbmNvZGluZyk7XG5cbiAgLy8gLmVuZCgpIGZ1bGx5IHVuY29ya3NcbiAgaWYgKHN0YXRlLmNvcmtlZCkge1xuICAgIHN0YXRlLmNvcmtlZCA9IDE7XG4gICAgdGhpcy51bmNvcmsoKTtcbiAgfVxuXG4gIC8vIGlnbm9yZSB1bm5lY2Vzc2FyeSBlbmQoKSBjYWxscy5cbiAgaWYgKCFzdGF0ZS5lbmRpbmcgJiYgIXN0YXRlLmZpbmlzaGVkKSBlbmRXcml0YWJsZSh0aGlzLCBzdGF0ZSwgY2IpO1xufTtcblxuZnVuY3Rpb24gbmVlZEZpbmlzaChzdGF0ZSkge1xuICByZXR1cm4gc3RhdGUuZW5kaW5nICYmIHN0YXRlLmxlbmd0aCA9PT0gMCAmJiBzdGF0ZS5idWZmZXJlZFJlcXVlc3QgPT09IG51bGwgJiYgIXN0YXRlLmZpbmlzaGVkICYmICFzdGF0ZS53cml0aW5nO1xufVxuZnVuY3Rpb24gY2FsbEZpbmFsKHN0cmVhbSwgc3RhdGUpIHtcbiAgc3RyZWFtLl9maW5hbChmdW5jdGlvbiAoZXJyKSB7XG4gICAgc3RhdGUucGVuZGluZ2NiLS07XG4gICAgaWYgKGVycikge1xuICAgICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgICB9XG4gICAgc3RhdGUucHJlZmluaXNoZWQgPSB0cnVlO1xuICAgIHN0cmVhbS5lbWl0KCdwcmVmaW5pc2gnKTtcbiAgICBmaW5pc2hNYXliZShzdHJlYW0sIHN0YXRlKTtcbiAgfSk7XG59XG5mdW5jdGlvbiBwcmVmaW5pc2goc3RyZWFtLCBzdGF0ZSkge1xuICBpZiAoIXN0YXRlLnByZWZpbmlzaGVkICYmICFzdGF0ZS5maW5hbENhbGxlZCkge1xuICAgIGlmICh0eXBlb2Ygc3RyZWFtLl9maW5hbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgc3RhdGUucGVuZGluZ2NiKys7XG4gICAgICBzdGF0ZS5maW5hbENhbGxlZCA9IHRydWU7XG4gICAgICBwbmEubmV4dFRpY2soY2FsbEZpbmFsLCBzdHJlYW0sIHN0YXRlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhdGUucHJlZmluaXNoZWQgPSB0cnVlO1xuICAgICAgc3RyZWFtLmVtaXQoJ3ByZWZpbmlzaCcpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBmaW5pc2hNYXliZShzdHJlYW0sIHN0YXRlKSB7XG4gIHZhciBuZWVkID0gbmVlZEZpbmlzaChzdGF0ZSk7XG4gIGlmIChuZWVkKSB7XG4gICAgcHJlZmluaXNoKHN0cmVhbSwgc3RhdGUpO1xuICAgIGlmIChzdGF0ZS5wZW5kaW5nY2IgPT09IDApIHtcbiAgICAgIHN0YXRlLmZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgIHN0cmVhbS5lbWl0KCdmaW5pc2gnKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG5lZWQ7XG59XG5cbmZ1bmN0aW9uIGVuZFdyaXRhYmxlKHN0cmVhbSwgc3RhdGUsIGNiKSB7XG4gIHN0YXRlLmVuZGluZyA9IHRydWU7XG4gIGZpbmlzaE1heWJlKHN0cmVhbSwgc3RhdGUpO1xuICBpZiAoY2IpIHtcbiAgICBpZiAoc3RhdGUuZmluaXNoZWQpIHBuYS5uZXh0VGljayhjYik7ZWxzZSBzdHJlYW0ub25jZSgnZmluaXNoJywgY2IpO1xuICB9XG4gIHN0YXRlLmVuZGVkID0gdHJ1ZTtcbiAgc3RyZWFtLndyaXRhYmxlID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIG9uQ29ya2VkRmluaXNoKGNvcmtSZXEsIHN0YXRlLCBlcnIpIHtcbiAgdmFyIGVudHJ5ID0gY29ya1JlcS5lbnRyeTtcbiAgY29ya1JlcS5lbnRyeSA9IG51bGw7XG4gIHdoaWxlIChlbnRyeSkge1xuICAgIHZhciBjYiA9IGVudHJ5LmNhbGxiYWNrO1xuICAgIHN0YXRlLnBlbmRpbmdjYi0tO1xuICAgIGNiKGVycik7XG4gICAgZW50cnkgPSBlbnRyeS5uZXh0O1xuICB9XG4gIGlmIChzdGF0ZS5jb3JrZWRSZXF1ZXN0c0ZyZWUpIHtcbiAgICBzdGF0ZS5jb3JrZWRSZXF1ZXN0c0ZyZWUubmV4dCA9IGNvcmtSZXE7XG4gIH0gZWxzZSB7XG4gICAgc3RhdGUuY29ya2VkUmVxdWVzdHNGcmVlID0gY29ya1JlcTtcbiAgfVxufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoV3JpdGFibGUucHJvdG90eXBlLCAnZGVzdHJveWVkJywge1xuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5fd3JpdGFibGVTdGF0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZDtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAvLyB3ZSBpZ25vcmUgdGhlIHZhbHVlIGlmIHRoZSBzdHJlYW1cbiAgICAvLyBoYXMgbm90IGJlZW4gaW5pdGlhbGl6ZWQgeWV0XG4gICAgaWYgKCF0aGlzLl93cml0YWJsZVN0YXRlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgdGhlIHVzZXIgaXMgZXhwbGljaXRseVxuICAgIC8vIG1hbmFnaW5nIGRlc3Ryb3llZFxuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkID0gdmFsdWU7XG4gIH1cbn0pO1xuXG5Xcml0YWJsZS5wcm90b3R5cGUuZGVzdHJveSA9IGRlc3Ryb3lJbXBsLmRlc3Ryb3k7XG5Xcml0YWJsZS5wcm90b3R5cGUuX3VuZGVzdHJveSA9IGRlc3Ryb3lJbXBsLnVuZGVzdHJveTtcbldyaXRhYmxlLnByb3RvdHlwZS5fZGVzdHJveSA9IGZ1bmN0aW9uIChlcnIsIGNiKSB7XG4gIHRoaXMuZW5kKCk7XG4gIGNiKGVycik7XG59OyIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4ndXNlIHN0cmljdCc7XG5cbi8qPHJlcGxhY2VtZW50PiovXG5cbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlcjtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG52YXIgaXNFbmNvZGluZyA9IEJ1ZmZlci5pc0VuY29kaW5nIHx8IGZ1bmN0aW9uIChlbmNvZGluZykge1xuICBlbmNvZGluZyA9ICcnICsgZW5jb2Rpbmc7XG4gIHN3aXRjaCAoZW5jb2RpbmcgJiYgZW5jb2RpbmcudG9Mb3dlckNhc2UoKSkge1xuICAgIGNhc2UgJ2hleCc6Y2FzZSAndXRmOCc6Y2FzZSAndXRmLTgnOmNhc2UgJ2FzY2lpJzpjYXNlICdiaW5hcnknOmNhc2UgJ2Jhc2U2NCc6Y2FzZSAndWNzMic6Y2FzZSAndWNzLTInOmNhc2UgJ3V0ZjE2bGUnOmNhc2UgJ3V0Zi0xNmxlJzpjYXNlICdyYXcnOlxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgfVxufTtcblxuZnVuY3Rpb24gX25vcm1hbGl6ZUVuY29kaW5nKGVuYykge1xuICBpZiAoIWVuYykgcmV0dXJuICd1dGY4JztcbiAgdmFyIHJldHJpZWQ7XG4gIHdoaWxlICh0cnVlKSB7XG4gICAgc3dpdGNoIChlbmMpIHtcbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gJ3V0ZjgnO1xuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuICd1dGYxNmxlJztcbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gJ2xhdGluMSc7XG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGVuYztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChyZXRyaWVkKSByZXR1cm47IC8vIHVuZGVmaW5lZFxuICAgICAgICBlbmMgPSAoJycgKyBlbmMpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIHJldHJpZWQgPSB0cnVlO1xuICAgIH1cbiAgfVxufTtcblxuLy8gRG8gbm90IGNhY2hlIGBCdWZmZXIuaXNFbmNvZGluZ2Agd2hlbiBjaGVja2luZyBlbmNvZGluZyBuYW1lcyBhcyBzb21lXG4vLyBtb2R1bGVzIG1vbmtleS1wYXRjaCBpdCB0byBzdXBwb3J0IGFkZGl0aW9uYWwgZW5jb2RpbmdzXG5mdW5jdGlvbiBub3JtYWxpemVFbmNvZGluZyhlbmMpIHtcbiAgdmFyIG5lbmMgPSBfbm9ybWFsaXplRW5jb2RpbmcoZW5jKTtcbiAgaWYgKHR5cGVvZiBuZW5jICE9PSAnc3RyaW5nJyAmJiAoQnVmZmVyLmlzRW5jb2RpbmcgPT09IGlzRW5jb2RpbmcgfHwgIWlzRW5jb2RpbmcoZW5jKSkpIHRocm93IG5ldyBFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuYyk7XG4gIHJldHVybiBuZW5jIHx8IGVuYztcbn1cblxuLy8gU3RyaW5nRGVjb2RlciBwcm92aWRlcyBhbiBpbnRlcmZhY2UgZm9yIGVmZmljaWVudGx5IHNwbGl0dGluZyBhIHNlcmllcyBvZlxuLy8gYnVmZmVycyBpbnRvIGEgc2VyaWVzIG9mIEpTIHN0cmluZ3Mgd2l0aG91dCBicmVha2luZyBhcGFydCBtdWx0aS1ieXRlXG4vLyBjaGFyYWN0ZXJzLlxuZXhwb3J0cy5TdHJpbmdEZWNvZGVyID0gU3RyaW5nRGVjb2RlcjtcbmZ1bmN0aW9uIFN0cmluZ0RlY29kZXIoZW5jb2RpbmcpIHtcbiAgdGhpcy5lbmNvZGluZyA9IG5vcm1hbGl6ZUVuY29kaW5nKGVuY29kaW5nKTtcbiAgdmFyIG5iO1xuICBzd2l0Y2ggKHRoaXMuZW5jb2RpbmcpIHtcbiAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIHRoaXMudGV4dCA9IHV0ZjE2VGV4dDtcbiAgICAgIHRoaXMuZW5kID0gdXRmMTZFbmQ7XG4gICAgICBuYiA9IDQ7XG4gICAgICBicmVhaztcbiAgICBjYXNlICd1dGY4JzpcbiAgICAgIHRoaXMuZmlsbExhc3QgPSB1dGY4RmlsbExhc3Q7XG4gICAgICBuYiA9IDQ7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgdGhpcy50ZXh0ID0gYmFzZTY0VGV4dDtcbiAgICAgIHRoaXMuZW5kID0gYmFzZTY0RW5kO1xuICAgICAgbmIgPSAzO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRoaXMud3JpdGUgPSBzaW1wbGVXcml0ZTtcbiAgICAgIHRoaXMuZW5kID0gc2ltcGxlRW5kO1xuICAgICAgcmV0dXJuO1xuICB9XG4gIHRoaXMubGFzdE5lZWQgPSAwO1xuICB0aGlzLmxhc3RUb3RhbCA9IDA7XG4gIHRoaXMubGFzdENoYXIgPSBCdWZmZXIuYWxsb2NVbnNhZmUobmIpO1xufVxuXG5TdHJpbmdEZWNvZGVyLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIChidWYpIHtcbiAgaWYgKGJ1Zi5sZW5ndGggPT09IDApIHJldHVybiAnJztcbiAgdmFyIHI7XG4gIHZhciBpO1xuICBpZiAodGhpcy5sYXN0TmVlZCkge1xuICAgIHIgPSB0aGlzLmZpbGxMYXN0KGJ1Zik7XG4gICAgaWYgKHIgPT09IHVuZGVmaW5lZCkgcmV0dXJuICcnO1xuICAgIGkgPSB0aGlzLmxhc3ROZWVkO1xuICAgIHRoaXMubGFzdE5lZWQgPSAwO1xuICB9IGVsc2Uge1xuICAgIGkgPSAwO1xuICB9XG4gIGlmIChpIDwgYnVmLmxlbmd0aCkgcmV0dXJuIHIgPyByICsgdGhpcy50ZXh0KGJ1ZiwgaSkgOiB0aGlzLnRleHQoYnVmLCBpKTtcbiAgcmV0dXJuIHIgfHwgJyc7XG59O1xuXG5TdHJpbmdEZWNvZGVyLnByb3RvdHlwZS5lbmQgPSB1dGY4RW5kO1xuXG4vLyBSZXR1cm5zIG9ubHkgY29tcGxldGUgY2hhcmFjdGVycyBpbiBhIEJ1ZmZlclxuU3RyaW5nRGVjb2Rlci5wcm90b3R5cGUudGV4dCA9IHV0ZjhUZXh0O1xuXG4vLyBBdHRlbXB0cyB0byBjb21wbGV0ZSBhIHBhcnRpYWwgbm9uLVVURi04IGNoYXJhY3RlciB1c2luZyBieXRlcyBmcm9tIGEgQnVmZmVyXG5TdHJpbmdEZWNvZGVyLnByb3RvdHlwZS5maWxsTGFzdCA9IGZ1bmN0aW9uIChidWYpIHtcbiAgaWYgKHRoaXMubGFzdE5lZWQgPD0gYnVmLmxlbmd0aCkge1xuICAgIGJ1Zi5jb3B5KHRoaXMubGFzdENoYXIsIHRoaXMubGFzdFRvdGFsIC0gdGhpcy5sYXN0TmVlZCwgMCwgdGhpcy5sYXN0TmVlZCk7XG4gICAgcmV0dXJuIHRoaXMubGFzdENoYXIudG9TdHJpbmcodGhpcy5lbmNvZGluZywgMCwgdGhpcy5sYXN0VG90YWwpO1xuICB9XG4gIGJ1Zi5jb3B5KHRoaXMubGFzdENoYXIsIHRoaXMubGFzdFRvdGFsIC0gdGhpcy5sYXN0TmVlZCwgMCwgYnVmLmxlbmd0aCk7XG4gIHRoaXMubGFzdE5lZWQgLT0gYnVmLmxlbmd0aDtcbn07XG5cbi8vIENoZWNrcyB0aGUgdHlwZSBvZiBhIFVURi04IGJ5dGUsIHdoZXRoZXIgaXQncyBBU0NJSSwgYSBsZWFkaW5nIGJ5dGUsIG9yIGFcbi8vIGNvbnRpbnVhdGlvbiBieXRlLiBJZiBhbiBpbnZhbGlkIGJ5dGUgaXMgZGV0ZWN0ZWQsIC0yIGlzIHJldHVybmVkLlxuZnVuY3Rpb24gdXRmOENoZWNrQnl0ZShieXRlKSB7XG4gIGlmIChieXRlIDw9IDB4N0YpIHJldHVybiAwO2Vsc2UgaWYgKGJ5dGUgPj4gNSA9PT0gMHgwNikgcmV0dXJuIDI7ZWxzZSBpZiAoYnl0ZSA+PiA0ID09PSAweDBFKSByZXR1cm4gMztlbHNlIGlmIChieXRlID4+IDMgPT09IDB4MUUpIHJldHVybiA0O1xuICByZXR1cm4gYnl0ZSA+PiA2ID09PSAweDAyID8gLTEgOiAtMjtcbn1cblxuLy8gQ2hlY2tzIGF0IG1vc3QgMyBieXRlcyBhdCB0aGUgZW5kIG9mIGEgQnVmZmVyIGluIG9yZGVyIHRvIGRldGVjdCBhblxuLy8gaW5jb21wbGV0ZSBtdWx0aS1ieXRlIFVURi04IGNoYXJhY3Rlci4gVGhlIHRvdGFsIG51bWJlciBvZiBieXRlcyAoMiwgMywgb3IgNClcbi8vIG5lZWRlZCB0byBjb21wbGV0ZSB0aGUgVVRGLTggY2hhcmFjdGVyIChpZiBhcHBsaWNhYmxlKSBhcmUgcmV0dXJuZWQuXG5mdW5jdGlvbiB1dGY4Q2hlY2tJbmNvbXBsZXRlKHNlbGYsIGJ1ZiwgaSkge1xuICB2YXIgaiA9IGJ1Zi5sZW5ndGggLSAxO1xuICBpZiAoaiA8IGkpIHJldHVybiAwO1xuICB2YXIgbmIgPSB1dGY4Q2hlY2tCeXRlKGJ1ZltqXSk7XG4gIGlmIChuYiA+PSAwKSB7XG4gICAgaWYgKG5iID4gMCkgc2VsZi5sYXN0TmVlZCA9IG5iIC0gMTtcbiAgICByZXR1cm4gbmI7XG4gIH1cbiAgaWYgKC0taiA8IGkgfHwgbmIgPT09IC0yKSByZXR1cm4gMDtcbiAgbmIgPSB1dGY4Q2hlY2tCeXRlKGJ1ZltqXSk7XG4gIGlmIChuYiA+PSAwKSB7XG4gICAgaWYgKG5iID4gMCkgc2VsZi5sYXN0TmVlZCA9IG5iIC0gMjtcbiAgICByZXR1cm4gbmI7XG4gIH1cbiAgaWYgKC0taiA8IGkgfHwgbmIgPT09IC0yKSByZXR1cm4gMDtcbiAgbmIgPSB1dGY4Q2hlY2tCeXRlKGJ1ZltqXSk7XG4gIGlmIChuYiA+PSAwKSB7XG4gICAgaWYgKG5iID4gMCkge1xuICAgICAgaWYgKG5iID09PSAyKSBuYiA9IDA7ZWxzZSBzZWxmLmxhc3ROZWVkID0gbmIgLSAzO1xuICAgIH1cbiAgICByZXR1cm4gbmI7XG4gIH1cbiAgcmV0dXJuIDA7XG59XG5cbi8vIFZhbGlkYXRlcyBhcyBtYW55IGNvbnRpbnVhdGlvbiBieXRlcyBmb3IgYSBtdWx0aS1ieXRlIFVURi04IGNoYXJhY3RlciBhc1xuLy8gbmVlZGVkIG9yIGFyZSBhdmFpbGFibGUuIElmIHdlIHNlZSBhIG5vbi1jb250aW51YXRpb24gYnl0ZSB3aGVyZSB3ZSBleHBlY3Rcbi8vIG9uZSwgd2UgXCJyZXBsYWNlXCIgdGhlIHZhbGlkYXRlZCBjb250aW51YXRpb24gYnl0ZXMgd2UndmUgc2VlbiBzbyBmYXIgd2l0aFxuLy8gYSBzaW5nbGUgVVRGLTggcmVwbGFjZW1lbnQgY2hhcmFjdGVyICgnXFx1ZmZmZCcpLCB0byBtYXRjaCB2OCdzIFVURi04IGRlY29kaW5nXG4vLyBiZWhhdmlvci4gVGhlIGNvbnRpbnVhdGlvbiBieXRlIGNoZWNrIGlzIGluY2x1ZGVkIHRocmVlIHRpbWVzIGluIHRoZSBjYXNlXG4vLyB3aGVyZSBhbGwgb2YgdGhlIGNvbnRpbnVhdGlvbiBieXRlcyBmb3IgYSBjaGFyYWN0ZXIgZXhpc3QgaW4gdGhlIHNhbWUgYnVmZmVyLlxuLy8gSXQgaXMgYWxzbyBkb25lIHRoaXMgd2F5IGFzIGEgc2xpZ2h0IHBlcmZvcm1hbmNlIGluY3JlYXNlIGluc3RlYWQgb2YgdXNpbmcgYVxuLy8gbG9vcC5cbmZ1bmN0aW9uIHV0ZjhDaGVja0V4dHJhQnl0ZXMoc2VsZiwgYnVmLCBwKSB7XG4gIGlmICgoYnVmWzBdICYgMHhDMCkgIT09IDB4ODApIHtcbiAgICBzZWxmLmxhc3ROZWVkID0gMDtcbiAgICByZXR1cm4gJ1xcdWZmZmQnO1xuICB9XG4gIGlmIChzZWxmLmxhc3ROZWVkID4gMSAmJiBidWYubGVuZ3RoID4gMSkge1xuICAgIGlmICgoYnVmWzFdICYgMHhDMCkgIT09IDB4ODApIHtcbiAgICAgIHNlbGYubGFzdE5lZWQgPSAxO1xuICAgICAgcmV0dXJuICdcXHVmZmZkJztcbiAgICB9XG4gICAgaWYgKHNlbGYubGFzdE5lZWQgPiAyICYmIGJ1Zi5sZW5ndGggPiAyKSB7XG4gICAgICBpZiAoKGJ1ZlsyXSAmIDB4QzApICE9PSAweDgwKSB7XG4gICAgICAgIHNlbGYubGFzdE5lZWQgPSAyO1xuICAgICAgICByZXR1cm4gJ1xcdWZmZmQnO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vLyBBdHRlbXB0cyB0byBjb21wbGV0ZSBhIG11bHRpLWJ5dGUgVVRGLTggY2hhcmFjdGVyIHVzaW5nIGJ5dGVzIGZyb20gYSBCdWZmZXIuXG5mdW5jdGlvbiB1dGY4RmlsbExhc3QoYnVmKSB7XG4gIHZhciBwID0gdGhpcy5sYXN0VG90YWwgLSB0aGlzLmxhc3ROZWVkO1xuICB2YXIgciA9IHV0ZjhDaGVja0V4dHJhQnl0ZXModGhpcywgYnVmLCBwKTtcbiAgaWYgKHIgIT09IHVuZGVmaW5lZCkgcmV0dXJuIHI7XG4gIGlmICh0aGlzLmxhc3ROZWVkIDw9IGJ1Zi5sZW5ndGgpIHtcbiAgICBidWYuY29weSh0aGlzLmxhc3RDaGFyLCBwLCAwLCB0aGlzLmxhc3ROZWVkKTtcbiAgICByZXR1cm4gdGhpcy5sYXN0Q2hhci50b1N0cmluZyh0aGlzLmVuY29kaW5nLCAwLCB0aGlzLmxhc3RUb3RhbCk7XG4gIH1cbiAgYnVmLmNvcHkodGhpcy5sYXN0Q2hhciwgcCwgMCwgYnVmLmxlbmd0aCk7XG4gIHRoaXMubGFzdE5lZWQgLT0gYnVmLmxlbmd0aDtcbn1cblxuLy8gUmV0dXJucyBhbGwgY29tcGxldGUgVVRGLTggY2hhcmFjdGVycyBpbiBhIEJ1ZmZlci4gSWYgdGhlIEJ1ZmZlciBlbmRlZCBvbiBhXG4vLyBwYXJ0aWFsIGNoYXJhY3RlciwgdGhlIGNoYXJhY3RlcidzIGJ5dGVzIGFyZSBidWZmZXJlZCB1bnRpbCB0aGUgcmVxdWlyZWRcbi8vIG51bWJlciBvZiBieXRlcyBhcmUgYXZhaWxhYmxlLlxuZnVuY3Rpb24gdXRmOFRleHQoYnVmLCBpKSB7XG4gIHZhciB0b3RhbCA9IHV0ZjhDaGVja0luY29tcGxldGUodGhpcywgYnVmLCBpKTtcbiAgaWYgKCF0aGlzLmxhc3ROZWVkKSByZXR1cm4gYnVmLnRvU3RyaW5nKCd1dGY4JywgaSk7XG4gIHRoaXMubGFzdFRvdGFsID0gdG90YWw7XG4gIHZhciBlbmQgPSBidWYubGVuZ3RoIC0gKHRvdGFsIC0gdGhpcy5sYXN0TmVlZCk7XG4gIGJ1Zi5jb3B5KHRoaXMubGFzdENoYXIsIDAsIGVuZCk7XG4gIHJldHVybiBidWYudG9TdHJpbmcoJ3V0ZjgnLCBpLCBlbmQpO1xufVxuXG4vLyBGb3IgVVRGLTgsIGEgcmVwbGFjZW1lbnQgY2hhcmFjdGVyIGlzIGFkZGVkIHdoZW4gZW5kaW5nIG9uIGEgcGFydGlhbFxuLy8gY2hhcmFjdGVyLlxuZnVuY3Rpb24gdXRmOEVuZChidWYpIHtcbiAgdmFyIHIgPSBidWYgJiYgYnVmLmxlbmd0aCA/IHRoaXMud3JpdGUoYnVmKSA6ICcnO1xuICBpZiAodGhpcy5sYXN0TmVlZCkgcmV0dXJuIHIgKyAnXFx1ZmZmZCc7XG4gIHJldHVybiByO1xufVxuXG4vLyBVVEYtMTZMRSB0eXBpY2FsbHkgbmVlZHMgdHdvIGJ5dGVzIHBlciBjaGFyYWN0ZXIsIGJ1dCBldmVuIGlmIHdlIGhhdmUgYW4gZXZlblxuLy8gbnVtYmVyIG9mIGJ5dGVzIGF2YWlsYWJsZSwgd2UgbmVlZCB0byBjaGVjayBpZiB3ZSBlbmQgb24gYSBsZWFkaW5nL2hpZ2hcbi8vIHN1cnJvZ2F0ZS4gSW4gdGhhdCBjYXNlLCB3ZSBuZWVkIHRvIHdhaXQgZm9yIHRoZSBuZXh0IHR3byBieXRlcyBpbiBvcmRlciB0b1xuLy8gZGVjb2RlIHRoZSBsYXN0IGNoYXJhY3RlciBwcm9wZXJseS5cbmZ1bmN0aW9uIHV0ZjE2VGV4dChidWYsIGkpIHtcbiAgaWYgKChidWYubGVuZ3RoIC0gaSkgJSAyID09PSAwKSB7XG4gICAgdmFyIHIgPSBidWYudG9TdHJpbmcoJ3V0ZjE2bGUnLCBpKTtcbiAgICBpZiAocikge1xuICAgICAgdmFyIGMgPSByLmNoYXJDb2RlQXQoci5sZW5ndGggLSAxKTtcbiAgICAgIGlmIChjID49IDB4RDgwMCAmJiBjIDw9IDB4REJGRikge1xuICAgICAgICB0aGlzLmxhc3ROZWVkID0gMjtcbiAgICAgICAgdGhpcy5sYXN0VG90YWwgPSA0O1xuICAgICAgICB0aGlzLmxhc3RDaGFyWzBdID0gYnVmW2J1Zi5sZW5ndGggLSAyXTtcbiAgICAgICAgdGhpcy5sYXN0Q2hhclsxXSA9IGJ1ZltidWYubGVuZ3RoIC0gMV07XG4gICAgICAgIHJldHVybiByLnNsaWNlKDAsIC0xKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHI7XG4gIH1cbiAgdGhpcy5sYXN0TmVlZCA9IDE7XG4gIHRoaXMubGFzdFRvdGFsID0gMjtcbiAgdGhpcy5sYXN0Q2hhclswXSA9IGJ1ZltidWYubGVuZ3RoIC0gMV07XG4gIHJldHVybiBidWYudG9TdHJpbmcoJ3V0ZjE2bGUnLCBpLCBidWYubGVuZ3RoIC0gMSk7XG59XG5cbi8vIEZvciBVVEYtMTZMRSB3ZSBkbyBub3QgZXhwbGljaXRseSBhcHBlbmQgc3BlY2lhbCByZXBsYWNlbWVudCBjaGFyYWN0ZXJzIGlmIHdlXG4vLyBlbmQgb24gYSBwYXJ0aWFsIGNoYXJhY3Rlciwgd2Ugc2ltcGx5IGxldCB2OCBoYW5kbGUgdGhhdC5cbmZ1bmN0aW9uIHV0ZjE2RW5kKGJ1Zikge1xuICB2YXIgciA9IGJ1ZiAmJiBidWYubGVuZ3RoID8gdGhpcy53cml0ZShidWYpIDogJyc7XG4gIGlmICh0aGlzLmxhc3ROZWVkKSB7XG4gICAgdmFyIGVuZCA9IHRoaXMubGFzdFRvdGFsIC0gdGhpcy5sYXN0TmVlZDtcbiAgICByZXR1cm4gciArIHRoaXMubGFzdENoYXIudG9TdHJpbmcoJ3V0ZjE2bGUnLCAwLCBlbmQpO1xuICB9XG4gIHJldHVybiByO1xufVxuXG5mdW5jdGlvbiBiYXNlNjRUZXh0KGJ1ZiwgaSkge1xuICB2YXIgbiA9IChidWYubGVuZ3RoIC0gaSkgJSAzO1xuICBpZiAobiA9PT0gMCkgcmV0dXJuIGJ1Zi50b1N0cmluZygnYmFzZTY0JywgaSk7XG4gIHRoaXMubGFzdE5lZWQgPSAzIC0gbjtcbiAgdGhpcy5sYXN0VG90YWwgPSAzO1xuICBpZiAobiA9PT0gMSkge1xuICAgIHRoaXMubGFzdENoYXJbMF0gPSBidWZbYnVmLmxlbmd0aCAtIDFdO1xuICB9IGVsc2Uge1xuICAgIHRoaXMubGFzdENoYXJbMF0gPSBidWZbYnVmLmxlbmd0aCAtIDJdO1xuICAgIHRoaXMubGFzdENoYXJbMV0gPSBidWZbYnVmLmxlbmd0aCAtIDFdO1xuICB9XG4gIHJldHVybiBidWYudG9TdHJpbmcoJ2Jhc2U2NCcsIGksIGJ1Zi5sZW5ndGggLSBuKTtcbn1cblxuZnVuY3Rpb24gYmFzZTY0RW5kKGJ1Zikge1xuICB2YXIgciA9IGJ1ZiAmJiBidWYubGVuZ3RoID8gdGhpcy53cml0ZShidWYpIDogJyc7XG4gIGlmICh0aGlzLmxhc3ROZWVkKSByZXR1cm4gciArIHRoaXMubGFzdENoYXIudG9TdHJpbmcoJ2Jhc2U2NCcsIDAsIDMgLSB0aGlzLmxhc3ROZWVkKTtcbiAgcmV0dXJuIHI7XG59XG5cbi8vIFBhc3MgYnl0ZXMgb24gdGhyb3VnaCBmb3Igc2luZ2xlLWJ5dGUgZW5jb2RpbmdzIChlLmcuIGFzY2lpLCBsYXRpbjEsIGhleClcbmZ1bmN0aW9uIHNpbXBsZVdyaXRlKGJ1Zikge1xuICByZXR1cm4gYnVmLnRvU3RyaW5nKHRoaXMuZW5jb2RpbmcpO1xufVxuXG5mdW5jdGlvbiBzaW1wbGVFbmQoYnVmKSB7XG4gIHJldHVybiBidWYgJiYgYnVmLmxlbmd0aCA/IHRoaXMud3JpdGUoYnVmKSA6ICcnO1xufSIsIid1c2Ugc3RyaWN0J1xudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ2J1ZmZlcicpLkJ1ZmZlclxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIEhhc2hCYXNlID0gcmVxdWlyZSgnaGFzaC1iYXNlJylcblxudmFyIEFSUkFZMTYgPSBuZXcgQXJyYXkoMTYpXG5cbnZhciB6bCA9IFtcbiAgMCwgMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOSwgMTAsIDExLCAxMiwgMTMsIDE0LCAxNSxcbiAgNywgNCwgMTMsIDEsIDEwLCA2LCAxNSwgMywgMTIsIDAsIDksIDUsIDIsIDE0LCAxMSwgOCxcbiAgMywgMTAsIDE0LCA0LCA5LCAxNSwgOCwgMSwgMiwgNywgMCwgNiwgMTMsIDExLCA1LCAxMixcbiAgMSwgOSwgMTEsIDEwLCAwLCA4LCAxMiwgNCwgMTMsIDMsIDcsIDE1LCAxNCwgNSwgNiwgMixcbiAgNCwgMCwgNSwgOSwgNywgMTIsIDIsIDEwLCAxNCwgMSwgMywgOCwgMTEsIDYsIDE1LCAxM1xuXVxuXG52YXIgenIgPSBbXG4gIDUsIDE0LCA3LCAwLCA5LCAyLCAxMSwgNCwgMTMsIDYsIDE1LCA4LCAxLCAxMCwgMywgMTIsXG4gIDYsIDExLCAzLCA3LCAwLCAxMywgNSwgMTAsIDE0LCAxNSwgOCwgMTIsIDQsIDksIDEsIDIsXG4gIDE1LCA1LCAxLCAzLCA3LCAxNCwgNiwgOSwgMTEsIDgsIDEyLCAyLCAxMCwgMCwgNCwgMTMsXG4gIDgsIDYsIDQsIDEsIDMsIDExLCAxNSwgMCwgNSwgMTIsIDIsIDEzLCA5LCA3LCAxMCwgMTQsXG4gIDEyLCAxNSwgMTAsIDQsIDEsIDUsIDgsIDcsIDYsIDIsIDEzLCAxNCwgMCwgMywgOSwgMTFcbl1cblxudmFyIHNsID0gW1xuICAxMSwgMTQsIDE1LCAxMiwgNSwgOCwgNywgOSwgMTEsIDEzLCAxNCwgMTUsIDYsIDcsIDksIDgsXG4gIDcsIDYsIDgsIDEzLCAxMSwgOSwgNywgMTUsIDcsIDEyLCAxNSwgOSwgMTEsIDcsIDEzLCAxMixcbiAgMTEsIDEzLCA2LCA3LCAxNCwgOSwgMTMsIDE1LCAxNCwgOCwgMTMsIDYsIDUsIDEyLCA3LCA1LFxuICAxMSwgMTIsIDE0LCAxNSwgMTQsIDE1LCA5LCA4LCA5LCAxNCwgNSwgNiwgOCwgNiwgNSwgMTIsXG4gIDksIDE1LCA1LCAxMSwgNiwgOCwgMTMsIDEyLCA1LCAxMiwgMTMsIDE0LCAxMSwgOCwgNSwgNlxuXVxuXG52YXIgc3IgPSBbXG4gIDgsIDksIDksIDExLCAxMywgMTUsIDE1LCA1LCA3LCA3LCA4LCAxMSwgMTQsIDE0LCAxMiwgNixcbiAgOSwgMTMsIDE1LCA3LCAxMiwgOCwgOSwgMTEsIDcsIDcsIDEyLCA3LCA2LCAxNSwgMTMsIDExLFxuICA5LCA3LCAxNSwgMTEsIDgsIDYsIDYsIDE0LCAxMiwgMTMsIDUsIDE0LCAxMywgMTMsIDcsIDUsXG4gIDE1LCA1LCA4LCAxMSwgMTQsIDE0LCA2LCAxNCwgNiwgOSwgMTIsIDksIDEyLCA1LCAxNSwgOCxcbiAgOCwgNSwgMTIsIDksIDEyLCA1LCAxNCwgNiwgOCwgMTMsIDYsIDUsIDE1LCAxMywgMTEsIDExXG5dXG5cbnZhciBobCA9IFsweDAwMDAwMDAwLCAweDVhODI3OTk5LCAweDZlZDllYmExLCAweDhmMWJiY2RjLCAweGE5NTNmZDRlXVxudmFyIGhyID0gWzB4NTBhMjhiZTYsIDB4NWM0ZGQxMjQsIDB4NmQ3MDNlZjMsIDB4N2E2ZDc2ZTksIDB4MDAwMDAwMDBdXG5cbmZ1bmN0aW9uIFJJUEVNRDE2MCAoKSB7XG4gIEhhc2hCYXNlLmNhbGwodGhpcywgNjQpXG5cbiAgLy8gc3RhdGVcbiAgdGhpcy5fYSA9IDB4Njc0NTIzMDFcbiAgdGhpcy5fYiA9IDB4ZWZjZGFiODlcbiAgdGhpcy5fYyA9IDB4OThiYWRjZmVcbiAgdGhpcy5fZCA9IDB4MTAzMjU0NzZcbiAgdGhpcy5fZSA9IDB4YzNkMmUxZjBcbn1cblxuaW5oZXJpdHMoUklQRU1EMTYwLCBIYXNoQmFzZSlcblxuUklQRU1EMTYwLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICB2YXIgd29yZHMgPSBBUlJBWTE2XG4gIGZvciAodmFyIGogPSAwOyBqIDwgMTY7ICsraikgd29yZHNbal0gPSB0aGlzLl9ibG9jay5yZWFkSW50MzJMRShqICogNClcblxuICB2YXIgYWwgPSB0aGlzLl9hIHwgMFxuICB2YXIgYmwgPSB0aGlzLl9iIHwgMFxuICB2YXIgY2wgPSB0aGlzLl9jIHwgMFxuICB2YXIgZGwgPSB0aGlzLl9kIHwgMFxuICB2YXIgZWwgPSB0aGlzLl9lIHwgMFxuXG4gIHZhciBhciA9IHRoaXMuX2EgfCAwXG4gIHZhciBiciA9IHRoaXMuX2IgfCAwXG4gIHZhciBjciA9IHRoaXMuX2MgfCAwXG4gIHZhciBkciA9IHRoaXMuX2QgfCAwXG4gIHZhciBlciA9IHRoaXMuX2UgfCAwXG5cbiAgLy8gY29tcHV0YXRpb25cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCA4MDsgaSArPSAxKSB7XG4gICAgdmFyIHRsXG4gICAgdmFyIHRyXG4gICAgaWYgKGkgPCAxNikge1xuICAgICAgdGwgPSBmbjEoYWwsIGJsLCBjbCwgZGwsIGVsLCB3b3Jkc1t6bFtpXV0sIGhsWzBdLCBzbFtpXSlcbiAgICAgIHRyID0gZm41KGFyLCBiciwgY3IsIGRyLCBlciwgd29yZHNbenJbaV1dLCBoclswXSwgc3JbaV0pXG4gICAgfSBlbHNlIGlmIChpIDwgMzIpIHtcbiAgICAgIHRsID0gZm4yKGFsLCBibCwgY2wsIGRsLCBlbCwgd29yZHNbemxbaV1dLCBobFsxXSwgc2xbaV0pXG4gICAgICB0ciA9IGZuNChhciwgYnIsIGNyLCBkciwgZXIsIHdvcmRzW3pyW2ldXSwgaHJbMV0sIHNyW2ldKVxuICAgIH0gZWxzZSBpZiAoaSA8IDQ4KSB7XG4gICAgICB0bCA9IGZuMyhhbCwgYmwsIGNsLCBkbCwgZWwsIHdvcmRzW3psW2ldXSwgaGxbMl0sIHNsW2ldKVxuICAgICAgdHIgPSBmbjMoYXIsIGJyLCBjciwgZHIsIGVyLCB3b3Jkc1t6cltpXV0sIGhyWzJdLCBzcltpXSlcbiAgICB9IGVsc2UgaWYgKGkgPCA2NCkge1xuICAgICAgdGwgPSBmbjQoYWwsIGJsLCBjbCwgZGwsIGVsLCB3b3Jkc1t6bFtpXV0sIGhsWzNdLCBzbFtpXSlcbiAgICAgIHRyID0gZm4yKGFyLCBiciwgY3IsIGRyLCBlciwgd29yZHNbenJbaV1dLCBoclszXSwgc3JbaV0pXG4gICAgfSBlbHNlIHsgLy8gaWYgKGk8ODApIHtcbiAgICAgIHRsID0gZm41KGFsLCBibCwgY2wsIGRsLCBlbCwgd29yZHNbemxbaV1dLCBobFs0XSwgc2xbaV0pXG4gICAgICB0ciA9IGZuMShhciwgYnIsIGNyLCBkciwgZXIsIHdvcmRzW3pyW2ldXSwgaHJbNF0sIHNyW2ldKVxuICAgIH1cblxuICAgIGFsID0gZWxcbiAgICBlbCA9IGRsXG4gICAgZGwgPSByb3RsKGNsLCAxMClcbiAgICBjbCA9IGJsXG4gICAgYmwgPSB0bFxuXG4gICAgYXIgPSBlclxuICAgIGVyID0gZHJcbiAgICBkciA9IHJvdGwoY3IsIDEwKVxuICAgIGNyID0gYnJcbiAgICBiciA9IHRyXG4gIH1cblxuICAvLyB1cGRhdGUgc3RhdGVcbiAgdmFyIHQgPSAodGhpcy5fYiArIGNsICsgZHIpIHwgMFxuICB0aGlzLl9iID0gKHRoaXMuX2MgKyBkbCArIGVyKSB8IDBcbiAgdGhpcy5fYyA9ICh0aGlzLl9kICsgZWwgKyBhcikgfCAwXG4gIHRoaXMuX2QgPSAodGhpcy5fZSArIGFsICsgYnIpIHwgMFxuICB0aGlzLl9lID0gKHRoaXMuX2EgKyBibCArIGNyKSB8IDBcbiAgdGhpcy5fYSA9IHRcbn1cblxuUklQRU1EMTYwLnByb3RvdHlwZS5fZGlnZXN0ID0gZnVuY3Rpb24gKCkge1xuICAvLyBjcmVhdGUgcGFkZGluZyBhbmQgaGFuZGxlIGJsb2Nrc1xuICB0aGlzLl9ibG9ja1t0aGlzLl9ibG9ja09mZnNldCsrXSA9IDB4ODBcbiAgaWYgKHRoaXMuX2Jsb2NrT2Zmc2V0ID4gNTYpIHtcbiAgICB0aGlzLl9ibG9jay5maWxsKDAsIHRoaXMuX2Jsb2NrT2Zmc2V0LCA2NClcbiAgICB0aGlzLl91cGRhdGUoKVxuICAgIHRoaXMuX2Jsb2NrT2Zmc2V0ID0gMFxuICB9XG5cbiAgdGhpcy5fYmxvY2suZmlsbCgwLCB0aGlzLl9ibG9ja09mZnNldCwgNTYpXG4gIHRoaXMuX2Jsb2NrLndyaXRlVUludDMyTEUodGhpcy5fbGVuZ3RoWzBdLCA1NilcbiAgdGhpcy5fYmxvY2sud3JpdGVVSW50MzJMRSh0aGlzLl9sZW5ndGhbMV0sIDYwKVxuICB0aGlzLl91cGRhdGUoKVxuXG4gIC8vIHByb2R1Y2UgcmVzdWx0XG4gIHZhciBidWZmZXIgPSBCdWZmZXIuYWxsb2MgPyBCdWZmZXIuYWxsb2MoMjApIDogbmV3IEJ1ZmZlcigyMClcbiAgYnVmZmVyLndyaXRlSW50MzJMRSh0aGlzLl9hLCAwKVxuICBidWZmZXIud3JpdGVJbnQzMkxFKHRoaXMuX2IsIDQpXG4gIGJ1ZmZlci53cml0ZUludDMyTEUodGhpcy5fYywgOClcbiAgYnVmZmVyLndyaXRlSW50MzJMRSh0aGlzLl9kLCAxMilcbiAgYnVmZmVyLndyaXRlSW50MzJMRSh0aGlzLl9lLCAxNilcbiAgcmV0dXJuIGJ1ZmZlclxufVxuXG5mdW5jdGlvbiByb3RsICh4LCBuKSB7XG4gIHJldHVybiAoeCA8PCBuKSB8ICh4ID4+PiAoMzIgLSBuKSlcbn1cblxuZnVuY3Rpb24gZm4xIChhLCBiLCBjLCBkLCBlLCBtLCBrLCBzKSB7XG4gIHJldHVybiAocm90bCgoYSArIChiIF4gYyBeIGQpICsgbSArIGspIHwgMCwgcykgKyBlKSB8IDBcbn1cblxuZnVuY3Rpb24gZm4yIChhLCBiLCBjLCBkLCBlLCBtLCBrLCBzKSB7XG4gIHJldHVybiAocm90bCgoYSArICgoYiAmIGMpIHwgKCh+YikgJiBkKSkgKyBtICsgaykgfCAwLCBzKSArIGUpIHwgMFxufVxuXG5mdW5jdGlvbiBmbjMgKGEsIGIsIGMsIGQsIGUsIG0sIGssIHMpIHtcbiAgcmV0dXJuIChyb3RsKChhICsgKChiIHwgKH5jKSkgXiBkKSArIG0gKyBrKSB8IDAsIHMpICsgZSkgfCAwXG59XG5cbmZ1bmN0aW9uIGZuNCAoYSwgYiwgYywgZCwgZSwgbSwgaywgcykge1xuICByZXR1cm4gKHJvdGwoKGEgKyAoKGIgJiBkKSB8IChjICYgKH5kKSkpICsgbSArIGspIHwgMCwgcykgKyBlKSB8IDBcbn1cblxuZnVuY3Rpb24gZm41IChhLCBiLCBjLCBkLCBlLCBtLCBrLCBzKSB7XG4gIHJldHVybiAocm90bCgoYSArIChiIF4gKGMgfCAofmQpKSkgKyBtICsgaykgfCAwLCBzKSArIGUpIHwgMFxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJJUEVNRDE2MFxuIiwidmFyIGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIFNIQSAoYWxnb3JpdGhtKSB7XG4gIGFsZ29yaXRobSA9IGFsZ29yaXRobS50b0xvd2VyQ2FzZSgpXG5cbiAgdmFyIEFsZ29yaXRobSA9IGV4cG9ydHNbYWxnb3JpdGhtXVxuICBpZiAoIUFsZ29yaXRobSkgdGhyb3cgbmV3IEVycm9yKGFsZ29yaXRobSArICcgaXMgbm90IHN1cHBvcnRlZCAod2UgYWNjZXB0IHB1bGwgcmVxdWVzdHMpJylcblxuICByZXR1cm4gbmV3IEFsZ29yaXRobSgpXG59XG5cbmV4cG9ydHMuc2hhID0gcmVxdWlyZSgnLi9zaGEnKVxuZXhwb3J0cy5zaGExID0gcmVxdWlyZSgnLi9zaGExJylcbmV4cG9ydHMuc2hhMjI0ID0gcmVxdWlyZSgnLi9zaGEyMjQnKVxuZXhwb3J0cy5zaGEyNTYgPSByZXF1aXJlKCcuL3NoYTI1NicpXG5leHBvcnRzLnNoYTM4NCA9IHJlcXVpcmUoJy4vc2hhMzg0JylcbmV4cG9ydHMuc2hhNTEyID0gcmVxdWlyZSgnLi9zaGE1MTInKVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLnV0aWxzID0gcmVxdWlyZSgnLi9kZXMvdXRpbHMnKTtcbmV4cG9ydHMuQ2lwaGVyID0gcmVxdWlyZSgnLi9kZXMvY2lwaGVyJyk7XG5leHBvcnRzLkRFUyA9IHJlcXVpcmUoJy4vZGVzL2RlcycpO1xuZXhwb3J0cy5DQkMgPSByZXF1aXJlKCcuL2Rlcy9jYmMnKTtcbmV4cG9ydHMuRURFID0gcmVxdWlyZSgnLi9kZXMvZWRlJyk7XG4iLCJ2YXIgY2lwaGVycyA9IHJlcXVpcmUoJy4vZW5jcnlwdGVyJylcbnZhciBkZWNpcGhlcnMgPSByZXF1aXJlKCcuL2RlY3J5cHRlcicpXG52YXIgbW9kZXMgPSByZXF1aXJlKCcuL21vZGVzL2xpc3QuanNvbicpXG5cbmZ1bmN0aW9uIGdldENpcGhlcnMgKCkge1xuICByZXR1cm4gT2JqZWN0LmtleXMobW9kZXMpXG59XG5cbmV4cG9ydHMuY3JlYXRlQ2lwaGVyID0gZXhwb3J0cy5DaXBoZXIgPSBjaXBoZXJzLmNyZWF0ZUNpcGhlclxuZXhwb3J0cy5jcmVhdGVDaXBoZXJpdiA9IGV4cG9ydHMuQ2lwaGVyaXYgPSBjaXBoZXJzLmNyZWF0ZUNpcGhlcml2XG5leHBvcnRzLmNyZWF0ZURlY2lwaGVyID0gZXhwb3J0cy5EZWNpcGhlciA9IGRlY2lwaGVycy5jcmVhdGVEZWNpcGhlclxuZXhwb3J0cy5jcmVhdGVEZWNpcGhlcml2ID0gZXhwb3J0cy5EZWNpcGhlcml2ID0gZGVjaXBoZXJzLmNyZWF0ZURlY2lwaGVyaXZcbmV4cG9ydHMubGlzdENpcGhlcnMgPSBleHBvcnRzLmdldENpcGhlcnMgPSBnZXRDaXBoZXJzXG4iLCJ2YXIgbW9kZU1vZHVsZXMgPSB7XG4gIEVDQjogcmVxdWlyZSgnLi9lY2InKSxcbiAgQ0JDOiByZXF1aXJlKCcuL2NiYycpLFxuICBDRkI6IHJlcXVpcmUoJy4vY2ZiJyksXG4gIENGQjg6IHJlcXVpcmUoJy4vY2ZiOCcpLFxuICBDRkIxOiByZXF1aXJlKCcuL2NmYjEnKSxcbiAgT0ZCOiByZXF1aXJlKCcuL29mYicpLFxuICBDVFI6IHJlcXVpcmUoJy4vY3RyJyksXG4gIEdDTTogcmVxdWlyZSgnLi9jdHInKVxufVxuXG52YXIgbW9kZXMgPSByZXF1aXJlKCcuL2xpc3QuanNvbicpXG5cbmZvciAodmFyIGtleSBpbiBtb2Rlcykge1xuICBtb2Rlc1trZXldLm1vZHVsZSA9IG1vZGVNb2R1bGVzW21vZGVzW2tleV0ubW9kZV1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtb2Rlc1xuIiwidmFyIHI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcmFuZChsZW4pIHtcbiAgaWYgKCFyKVxuICAgIHIgPSBuZXcgUmFuZChudWxsKTtcblxuICByZXR1cm4gci5nZW5lcmF0ZShsZW4pO1xufTtcblxuZnVuY3Rpb24gUmFuZChyYW5kKSB7XG4gIHRoaXMucmFuZCA9IHJhbmQ7XG59XG5tb2R1bGUuZXhwb3J0cy5SYW5kID0gUmFuZDtcblxuUmFuZC5wcm90b3R5cGUuZ2VuZXJhdGUgPSBmdW5jdGlvbiBnZW5lcmF0ZShsZW4pIHtcbiAgcmV0dXJuIHRoaXMuX3JhbmQobGVuKTtcbn07XG5cbi8vIEVtdWxhdGUgY3J5cHRvIEFQSSB1c2luZyByYW5keVxuUmFuZC5wcm90b3R5cGUuX3JhbmQgPSBmdW5jdGlvbiBfcmFuZChuKSB7XG4gIGlmICh0aGlzLnJhbmQuZ2V0Qnl0ZXMpXG4gICAgcmV0dXJuIHRoaXMucmFuZC5nZXRCeXRlcyhuKTtcblxuICB2YXIgcmVzID0gbmV3IFVpbnQ4QXJyYXkobik7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmVzLmxlbmd0aDsgaSsrKVxuICAgIHJlc1tpXSA9IHRoaXMucmFuZC5nZXRCeXRlKCk7XG4gIHJldHVybiByZXM7XG59O1xuXG5pZiAodHlwZW9mIHNlbGYgPT09ICdvYmplY3QnKSB7XG4gIGlmIChzZWxmLmNyeXB0byAmJiBzZWxmLmNyeXB0by5nZXRSYW5kb21WYWx1ZXMpIHtcbiAgICAvLyBNb2Rlcm4gYnJvd3NlcnNcbiAgICBSYW5kLnByb3RvdHlwZS5fcmFuZCA9IGZ1bmN0aW9uIF9yYW5kKG4pIHtcbiAgICAgIHZhciBhcnIgPSBuZXcgVWludDhBcnJheShuKTtcbiAgICAgIHNlbGYuY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhhcnIpO1xuICAgICAgcmV0dXJuIGFycjtcbiAgICB9O1xuICB9IGVsc2UgaWYgKHNlbGYubXNDcnlwdG8gJiYgc2VsZi5tc0NyeXB0by5nZXRSYW5kb21WYWx1ZXMpIHtcbiAgICAvLyBJRVxuICAgIFJhbmQucHJvdG90eXBlLl9yYW5kID0gZnVuY3Rpb24gX3JhbmQobikge1xuICAgICAgdmFyIGFyciA9IG5ldyBVaW50OEFycmF5KG4pO1xuICAgICAgc2VsZi5tc0NyeXB0by5nZXRSYW5kb21WYWx1ZXMoYXJyKTtcbiAgICAgIHJldHVybiBhcnI7XG4gICAgfTtcblxuICAvLyBTYWZhcmkncyBXZWJXb3JrZXJzIGRvIG5vdCBoYXZlIGBjcnlwdG9gXG4gIH0gZWxzZSBpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHtcbiAgICAvLyBPbGQganVua1xuICAgIFJhbmQucHJvdG90eXBlLl9yYW5kID0gZnVuY3Rpb24oKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBpbXBsZW1lbnRlZCB5ZXQnKTtcbiAgICB9O1xuICB9XG59IGVsc2Uge1xuICAvLyBOb2RlLmpzIG9yIFdlYiB3b3JrZXIgd2l0aCBubyBjcnlwdG8gc3VwcG9ydFxuICB0cnkge1xuICAgIHZhciBjcnlwdG8gPSByZXF1aXJlKCdjcnlwdG8nKTtcbiAgICBpZiAodHlwZW9mIGNyeXB0by5yYW5kb21CeXRlcyAhPT0gJ2Z1bmN0aW9uJylcbiAgICAgIHRocm93IG5ldyBFcnJvcignTm90IHN1cHBvcnRlZCcpO1xuXG4gICAgUmFuZC5wcm90b3R5cGUuX3JhbmQgPSBmdW5jdGlvbiBfcmFuZChuKSB7XG4gICAgICByZXR1cm4gY3J5cHRvLnJhbmRvbUJ5dGVzKG4pO1xuICAgIH07XG4gIH0gY2F0Y2ggKGUpIHtcbiAgfVxufVxuIiwidmFyIGJuID0gcmVxdWlyZSgnYm4uanMnKTtcbnZhciByYW5kb21CeXRlcyA9IHJlcXVpcmUoJ3JhbmRvbWJ5dGVzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGNydDtcbmZ1bmN0aW9uIGJsaW5kKHByaXYpIHtcbiAgdmFyIHIgPSBnZXRyKHByaXYpO1xuICB2YXIgYmxpbmRlciA9IHIudG9SZWQoYm4ubW9udChwcml2Lm1vZHVsdXMpKVxuICAucmVkUG93KG5ldyBibihwcml2LnB1YmxpY0V4cG9uZW50KSkuZnJvbVJlZCgpO1xuICByZXR1cm4ge1xuICAgIGJsaW5kZXI6IGJsaW5kZXIsXG4gICAgdW5ibGluZGVyOnIuaW52bShwcml2Lm1vZHVsdXMpXG4gIH07XG59XG5mdW5jdGlvbiBjcnQobXNnLCBwcml2KSB7XG4gIHZhciBibGluZHMgPSBibGluZChwcml2KTtcbiAgdmFyIGxlbiA9IHByaXYubW9kdWx1cy5ieXRlTGVuZ3RoKCk7XG4gIHZhciBtb2QgPSBibi5tb250KHByaXYubW9kdWx1cyk7XG4gIHZhciBibGluZGVkID0gbmV3IGJuKG1zZykubXVsKGJsaW5kcy5ibGluZGVyKS51bW9kKHByaXYubW9kdWx1cyk7XG4gIHZhciBjMSA9IGJsaW5kZWQudG9SZWQoYm4ubW9udChwcml2LnByaW1lMSkpO1xuICB2YXIgYzIgPSBibGluZGVkLnRvUmVkKGJuLm1vbnQocHJpdi5wcmltZTIpKTtcbiAgdmFyIHFpbnYgPSBwcml2LmNvZWZmaWNpZW50O1xuICB2YXIgcCA9IHByaXYucHJpbWUxO1xuICB2YXIgcSA9IHByaXYucHJpbWUyO1xuICB2YXIgbTEgPSBjMS5yZWRQb3cocHJpdi5leHBvbmVudDEpO1xuICB2YXIgbTIgPSBjMi5yZWRQb3cocHJpdi5leHBvbmVudDIpO1xuICBtMSA9IG0xLmZyb21SZWQoKTtcbiAgbTIgPSBtMi5mcm9tUmVkKCk7XG4gIHZhciBoID0gbTEuaXN1YihtMikuaW11bChxaW52KS51bW9kKHApO1xuICBoLmltdWwocSk7XG4gIG0yLmlhZGQoaCk7XG4gIHJldHVybiBuZXcgQnVmZmVyKG0yLmltdWwoYmxpbmRzLnVuYmxpbmRlcikudW1vZChwcml2Lm1vZHVsdXMpLnRvQXJyYXkoZmFsc2UsIGxlbikpO1xufVxuY3J0LmdldHIgPSBnZXRyO1xuZnVuY3Rpb24gZ2V0cihwcml2KSB7XG4gIHZhciBsZW4gPSBwcml2Lm1vZHVsdXMuYnl0ZUxlbmd0aCgpO1xuICB2YXIgciA9IG5ldyBibihyYW5kb21CeXRlcyhsZW4pKTtcbiAgd2hpbGUgKHIuY21wKHByaXYubW9kdWx1cykgPj0gIDAgfHwgIXIudW1vZChwcml2LnByaW1lMSkgfHwgIXIudW1vZChwcml2LnByaW1lMikpIHtcbiAgICByID0gbmV3IGJuKHJhbmRvbUJ5dGVzKGxlbikpO1xuICB9XG4gIHJldHVybiByO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZWxsaXB0aWMgPSBleHBvcnRzO1xuXG5lbGxpcHRpYy52ZXJzaW9uID0gcmVxdWlyZSgnLi4vcGFja2FnZS5qc29uJykudmVyc2lvbjtcbmVsbGlwdGljLnV0aWxzID0gcmVxdWlyZSgnLi9lbGxpcHRpYy91dGlscycpO1xuZWxsaXB0aWMucmFuZCA9IHJlcXVpcmUoJ2Jyb3JhbmQnKTtcbmVsbGlwdGljLmN1cnZlID0gcmVxdWlyZSgnLi9lbGxpcHRpYy9jdXJ2ZScpO1xuZWxsaXB0aWMuY3VydmVzID0gcmVxdWlyZSgnLi9lbGxpcHRpYy9jdXJ2ZXMnKTtcblxuLy8gUHJvdG9jb2xzXG5lbGxpcHRpYy5lYyA9IHJlcXVpcmUoJy4vZWxsaXB0aWMvZWMnKTtcbmVsbGlwdGljLmVkZHNhID0gcmVxdWlyZSgnLi9lbGxpcHRpYy9lZGRzYScpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY3VydmVzID0gZXhwb3J0cztcblxudmFyIGhhc2ggPSByZXF1aXJlKCdoYXNoLmpzJyk7XG52YXIgY3VydmUgPSByZXF1aXJlKCcuL2N1cnZlJyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG5cbnZhciBhc3NlcnQgPSB1dGlscy5hc3NlcnQ7XG5cbmZ1bmN0aW9uIFByZXNldEN1cnZlKG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMudHlwZSA9PT0gJ3Nob3J0JylcbiAgICB0aGlzLmN1cnZlID0gbmV3IGN1cnZlLnNob3J0KG9wdGlvbnMpO1xuICBlbHNlIGlmIChvcHRpb25zLnR5cGUgPT09ICdlZHdhcmRzJylcbiAgICB0aGlzLmN1cnZlID0gbmV3IGN1cnZlLmVkd2FyZHMob3B0aW9ucyk7XG4gIGVsc2VcbiAgICB0aGlzLmN1cnZlID0gbmV3IGN1cnZlLm1vbnQob3B0aW9ucyk7XG4gIHRoaXMuZyA9IHRoaXMuY3VydmUuZztcbiAgdGhpcy5uID0gdGhpcy5jdXJ2ZS5uO1xuICB0aGlzLmhhc2ggPSBvcHRpb25zLmhhc2g7XG5cbiAgYXNzZXJ0KHRoaXMuZy52YWxpZGF0ZSgpLCAnSW52YWxpZCBjdXJ2ZScpO1xuICBhc3NlcnQodGhpcy5nLm11bCh0aGlzLm4pLmlzSW5maW5pdHkoKSwgJ0ludmFsaWQgY3VydmUsIEcqTiAhPSBPJyk7XG59XG5jdXJ2ZXMuUHJlc2V0Q3VydmUgPSBQcmVzZXRDdXJ2ZTtcblxuZnVuY3Rpb24gZGVmaW5lQ3VydmUobmFtZSwgb3B0aW9ucykge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3VydmVzLCBuYW1lLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBjdXJ2ZSA9IG5ldyBQcmVzZXRDdXJ2ZShvcHRpb25zKTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjdXJ2ZXMsIG5hbWUsIHtcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogY3VydmVcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGN1cnZlO1xuICAgIH1cbiAgfSk7XG59XG5cbmRlZmluZUN1cnZlKCdwMTkyJywge1xuICB0eXBlOiAnc2hvcnQnLFxuICBwcmltZTogJ3AxOTInLFxuICBwOiAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmUgZmZmZmZmZmYgZmZmZmZmZmYnLFxuICBhOiAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmUgZmZmZmZmZmYgZmZmZmZmZmMnLFxuICBiOiAnNjQyMTA1MTkgZTU5YzgwZTcgMGZhN2U5YWIgNzIyNDMwNDkgZmViOGRlZWMgYzE0NmI5YjEnLFxuICBuOiAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgOTlkZWY4MzYgMTQ2YmM5YjEgYjRkMjI4MzEnLFxuICBoYXNoOiBoYXNoLnNoYTI1NixcbiAgZ1JlZDogZmFsc2UsXG4gIGc6IFtcbiAgICAnMTg4ZGE4MGUgYjAzMDkwZjYgN2NiZjIwZWIgNDNhMTg4MDAgZjRmZjBhZmQgODJmZjEwMTInLFxuICAgICcwNzE5MmI5NSBmZmM4ZGE3OCA2MzEwMTFlZCA2YjI0Y2RkNSA3M2Y5NzdhMSAxZTc5NDgxMSdcbiAgXVxufSk7XG5cbmRlZmluZUN1cnZlKCdwMjI0Jywge1xuICB0eXBlOiAnc2hvcnQnLFxuICBwcmltZTogJ3AyMjQnLFxuICBwOiAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgMDAwMDAwMDAgMDAwMDAwMDAgMDAwMDAwMDEnLFxuICBhOiAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmUgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmUnLFxuICBiOiAnYjQwNTBhODUgMGMwNGIzYWIgZjU0MTMyNTYgNTA0NGIwYjcgZDdiZmQ4YmEgMjcwYjM5NDMgMjM1NWZmYjQnLFxuICBuOiAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZjE2YTIgZTBiOGYwM2UgMTNkZDI5NDUgNWM1YzJhM2QnLFxuICBoYXNoOiBoYXNoLnNoYTI1NixcbiAgZ1JlZDogZmFsc2UsXG4gIGc6IFtcbiAgICAnYjcwZTBjYmQgNmJiNGJmN2YgMzIxMzkwYjkgNGEwM2MxZDMgNTZjMjExMjIgMzQzMjgwZDYgMTE1YzFkMjEnLFxuICAgICdiZDM3NjM4OCBiNWY3MjNmYiA0YzIyZGZlNiBjZDQzNzVhMCA1YTA3NDc2NCA0NGQ1ODE5OSA4NTAwN2UzNCdcbiAgXVxufSk7XG5cbmRlZmluZUN1cnZlKCdwMjU2Jywge1xuICB0eXBlOiAnc2hvcnQnLFxuICBwcmltZTogbnVsbCxcbiAgcDogJ2ZmZmZmZmZmIDAwMDAwMDAxIDAwMDAwMDAwIDAwMDAwMDAwIDAwMDAwMDAwIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmJyxcbiAgYTogJ2ZmZmZmZmZmIDAwMDAwMDAxIDAwMDAwMDAwIDAwMDAwMDAwIDAwMDAwMDAwIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZjJyxcbiAgYjogJzVhYzYzNWQ4IGFhM2E5M2U3IGIzZWJiZDU1IDc2OTg4NmJjIDY1MWQwNmIwIGNjNTNiMGY2IDNiY2UzYzNlIDI3ZDI2MDRiJyxcbiAgbjogJ2ZmZmZmZmZmIDAwMDAwMDAwIGZmZmZmZmZmIGZmZmZmZmZmIGJjZTZmYWFkIGE3MTc5ZTg0IGYzYjljYWMyIGZjNjMyNTUxJyxcbiAgaGFzaDogaGFzaC5zaGEyNTYsXG4gIGdSZWQ6IGZhbHNlLFxuICBnOiBbXG4gICAgJzZiMTdkMWYyIGUxMmM0MjQ3IGY4YmNlNmU1IDYzYTQ0MGYyIDc3MDM3ZDgxIDJkZWIzM2EwIGY0YTEzOTQ1IGQ4OThjMjk2JyxcbiAgICAnNGZlMzQyZTIgZmUxYTdmOWIgOGVlN2ViNGEgN2MwZjllMTYgMmJjZTMzNTcgNmIzMTVlY2UgY2JiNjQwNjggMzdiZjUxZjUnXG4gIF1cbn0pO1xuXG5kZWZpbmVDdXJ2ZSgncDM4NCcsIHtcbiAgdHlwZTogJ3Nob3J0JyxcbiAgcHJpbWU6IG51bGwsXG4gIHA6ICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiAnICtcbiAgICAgJ2ZmZmZmZmZlIGZmZmZmZmZmIDAwMDAwMDAwIDAwMDAwMDAwIGZmZmZmZmZmJyxcbiAgYTogJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmICcgK1xuICAgICAnZmZmZmZmZmUgZmZmZmZmZmYgMDAwMDAwMDAgMDAwMDAwMDAgZmZmZmZmZmMnLFxuICBiOiAnYjMzMTJmYTcgZTIzZWU3ZTQgOTg4ZTA1NmIgZTNmODJkMTkgMTgxZDljNmUgZmU4MTQxMTIgMDMxNDA4OGYgJyArXG4gICAgICc1MDEzODc1YSBjNjU2Mzk4ZCA4YTJlZDE5ZCAyYTg1YzhlZCBkM2VjMmFlZicsXG4gIG46ICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBjNzYzNGQ4MSAnICtcbiAgICAgJ2Y0MzcyZGRmIDU4MWEwZGIyIDQ4YjBhNzdhIGVjZWMxOTZhIGNjYzUyOTczJyxcbiAgaGFzaDogaGFzaC5zaGEzODQsXG4gIGdSZWQ6IGZhbHNlLFxuICBnOiBbXG4gICAgJ2FhODdjYTIyIGJlOGIwNTM3IDhlYjFjNzFlIGYzMjBhZDc0IDZlMWQzYjYyIDhiYTc5Yjk4IDU5Zjc0MWUwIDgyNTQyYTM4ICcgK1xuICAgICc1NTAyZjI1ZCBiZjU1Mjk2YyAzYTU0NWUzOCA3Mjc2MGFiNycsXG4gICAgJzM2MTdkZTRhIDk2MjYyYzZmIDVkOWU5OGJmIDkyOTJkYzI5IGY4ZjQxZGJkIDI4OWExNDdjIGU5ZGEzMTEzIGI1ZjBiOGMwICcgK1xuICAgICcwYTYwYjFjZSAxZDdlODE5ZCA3YTQzMWQ3YyA5MGVhMGU1ZidcbiAgXVxufSk7XG5cbmRlZmluZUN1cnZlKCdwNTIxJywge1xuICB0eXBlOiAnc2hvcnQnLFxuICBwcmltZTogbnVsbCxcbiAgcDogJzAwMDAwMWZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmICcgK1xuICAgICAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgJyArXG4gICAgICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZicsXG4gIGE6ICcwMDAwMDFmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiAnICtcbiAgICAgJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmICcgK1xuICAgICAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmMnLFxuICBiOiAnMDAwMDAwNTEgOTUzZWI5NjEgOGUxYzlhMWYgOTI5YTIxYTAgYjY4NTQwZWUgYTJkYTcyNWIgJyArXG4gICAgICc5OWIzMTVmMyBiOGI0ODk5MSA4ZWYxMDllMSA1NjE5Mzk1MSBlYzdlOTM3YiAxNjUyYzBiZCAnICtcbiAgICAgJzNiYjFiZjA3IDM1NzNkZjg4IDNkMmMzNGYxIGVmNDUxZmQ0IDZiNTAzZjAwJyxcbiAgbjogJzAwMDAwMWZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmICcgK1xuICAgICAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmEgNTE4Njg3ODMgYmYyZjk2NmIgN2ZjYzAxNDggJyArXG4gICAgICdmNzA5YTVkMCAzYmI1YzliOCA4OTljNDdhZSBiYjZmYjcxZSA5MTM4NjQwOScsXG4gIGhhc2g6IGhhc2guc2hhNTEyLFxuICBnUmVkOiBmYWxzZSxcbiAgZzogW1xuICAgICcwMDAwMDBjNiA4NThlMDZiNyAwNDA0ZTljZCA5ZTNlY2I2NiAyMzk1YjQ0MiA5YzY0ODEzOSAnICtcbiAgICAnMDUzZmI1MjEgZjgyOGFmNjAgNmI0ZDNkYmEgYTE0YjVlNzcgZWZlNzU5MjggZmUxZGMxMjcgJyArXG4gICAgJ2EyZmZhOGRlIDMzNDhiM2MxIDg1NmE0MjliIGY5N2U3ZTMxIGMyZTViZDY2JyxcbiAgICAnMDAwMDAxMTggMzkyOTZhNzggOWEzYmMwMDQgNWM4YTVmYjQgMmM3ZDFiZDkgOThmNTQ0NDkgJyArXG4gICAgJzU3OWI0NDY4IDE3YWZiZDE3IDI3M2U2NjJjIDk3ZWU3Mjk5IDVlZjQyNjQwIGM1NTBiOTAxICcgK1xuICAgICczZmFkMDc2MSAzNTNjNzA4NiBhMjcyYzI0MCA4OGJlOTQ3NiA5ZmQxNjY1MCdcbiAgXVxufSk7XG5cbmRlZmluZUN1cnZlKCdjdXJ2ZTI1NTE5Jywge1xuICB0eXBlOiAnbW9udCcsXG4gIHByaW1lOiAncDI1NTE5JyxcbiAgcDogJzdmZmZmZmZmZmZmZmZmZmYgZmZmZmZmZmZmZmZmZmZmZiBmZmZmZmZmZmZmZmZmZmZmIGZmZmZmZmZmZmZmZmZmZWQnLFxuICBhOiAnNzZkMDYnLFxuICBiOiAnMScsXG4gIG46ICcxMDAwMDAwMDAwMDAwMDAwIDAwMDAwMDAwMDAwMDAwMDAgMTRkZWY5ZGVhMmY3OWNkNiA1ODEyNjMxYTVjZjVkM2VkJyxcbiAgaGFzaDogaGFzaC5zaGEyNTYsXG4gIGdSZWQ6IGZhbHNlLFxuICBnOiBbXG4gICAgJzknXG4gIF1cbn0pO1xuXG5kZWZpbmVDdXJ2ZSgnZWQyNTUxOScsIHtcbiAgdHlwZTogJ2Vkd2FyZHMnLFxuICBwcmltZTogJ3AyNTUxOScsXG4gIHA6ICc3ZmZmZmZmZmZmZmZmZmZmIGZmZmZmZmZmZmZmZmZmZmYgZmZmZmZmZmZmZmZmZmZmZiBmZmZmZmZmZmZmZmZmZmVkJyxcbiAgYTogJy0xJyxcbiAgYzogJzEnLFxuICAvLyAtMTIxNjY1ICogKDEyMTY2Nl4oLTEpKSAobW9kIFApXG4gIGQ6ICc1MjAzNmNlZTJiNmZmZTczIDhjYzc0MDc5Nzc3OWU4OTggMDA3MDBhNGQ0MTQxZDhhYiA3NWViNGRjYTEzNTk3OGEzJyxcbiAgbjogJzEwMDAwMDAwMDAwMDAwMDAgMDAwMDAwMDAwMDAwMDAwMCAxNGRlZjlkZWEyZjc5Y2Q2IDU4MTI2MzFhNWNmNWQzZWQnLFxuICBoYXNoOiBoYXNoLnNoYTI1NixcbiAgZ1JlZDogZmFsc2UsXG4gIGc6IFtcbiAgICAnMjE2OTM2ZDNjZDZlNTNmZWMwYTRlMjMxZmRkNmRjNWM2OTJjYzc2MDk1MjVhN2IyYzk1NjJkNjA4ZjI1ZDUxYScsXG5cbiAgICAvLyA0LzVcbiAgICAnNjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY1OCdcbiAgXVxufSk7XG5cbnZhciBwcmU7XG50cnkge1xuICBwcmUgPSByZXF1aXJlKCcuL3ByZWNvbXB1dGVkL3NlY3AyNTZrMScpO1xufSBjYXRjaCAoZSkge1xuICBwcmUgPSB1bmRlZmluZWQ7XG59XG5cbmRlZmluZUN1cnZlKCdzZWNwMjU2azEnLCB7XG4gIHR5cGU6ICdzaG9ydCcsXG4gIHByaW1lOiAnazI1NicsXG4gIHA6ICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZSBmZmZmZmMyZicsXG4gIGE6ICcwJyxcbiAgYjogJzcnLFxuICBuOiAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmUgYmFhZWRjZTYgYWY0OGEwM2IgYmZkMjVlOGMgZDAzNjQxNDEnLFxuICBoOiAnMScsXG4gIGhhc2g6IGhhc2guc2hhMjU2LFxuXG4gIC8vIFByZWNvbXB1dGVkIGVuZG9tb3JwaGlzbVxuICBiZXRhOiAnN2FlOTZhMmI2NTdjMDcxMDZlNjQ0NzllYWMzNDM0ZTk5Y2YwNDk3NTEyZjU4OTk1YzEzOTZjMjg3MTk1MDFlZScsXG4gIGxhbWJkYTogJzUzNjNhZDRjYzA1YzMwZTBhNTI2MWMwMjg4MTI2NDVhMTIyZTIyZWEyMDgxNjY3OGRmMDI5NjdjMWIyM2JkNzInLFxuICBiYXNpczogW1xuICAgIHtcbiAgICAgIGE6ICczMDg2ZDIyMWE3ZDQ2YmNkZTg2YzkwZTQ5Mjg0ZWIxNScsXG4gICAgICBiOiAnLWU0NDM3ZWQ2MDEwZTg4Mjg2ZjU0N2ZhOTBhYmZlNGMzJ1xuICAgIH0sXG4gICAge1xuICAgICAgYTogJzExNGNhNTBmN2E4ZTJmM2Y2NTdjMTEwOGQ5ZDQ0Y2ZkOCcsXG4gICAgICBiOiAnMzA4NmQyMjFhN2Q0NmJjZGU4NmM5MGU0OTI4NGViMTUnXG4gICAgfVxuICBdLFxuXG4gIGdSZWQ6IGZhbHNlLFxuICBnOiBbXG4gICAgJzc5YmU2NjdlZjlkY2JiYWM1NWEwNjI5NWNlODcwYjA3MDI5YmZjZGIyZGNlMjhkOTU5ZjI4MTViMTZmODE3OTgnLFxuICAgICc0ODNhZGE3NzI2YTNjNDY1NWRhNGZiZmMwZTExMDhhOGZkMTdiNDQ4YTY4NTU0MTk5YzQ3ZDA4ZmZiMTBkNGI4JyxcbiAgICBwcmVcbiAgXVxufSk7XG4iLCJ2YXIgaGFzaCA9IGV4cG9ydHM7XG5cbmhhc2gudXRpbHMgPSByZXF1aXJlKCcuL2hhc2gvdXRpbHMnKTtcbmhhc2guY29tbW9uID0gcmVxdWlyZSgnLi9oYXNoL2NvbW1vbicpO1xuaGFzaC5zaGEgPSByZXF1aXJlKCcuL2hhc2gvc2hhJyk7XG5oYXNoLnJpcGVtZCA9IHJlcXVpcmUoJy4vaGFzaC9yaXBlbWQnKTtcbmhhc2guaG1hYyA9IHJlcXVpcmUoJy4vaGFzaC9obWFjJyk7XG5cbi8vIFByb3h5IGhhc2ggZnVuY3Rpb25zIHRvIHRoZSBtYWluIG9iamVjdFxuaGFzaC5zaGExID0gaGFzaC5zaGEuc2hhMTtcbmhhc2guc2hhMjU2ID0gaGFzaC5zaGEuc2hhMjU2O1xuaGFzaC5zaGEyMjQgPSBoYXNoLnNoYS5zaGEyMjQ7XG5oYXNoLnNoYTM4NCA9IGhhc2guc2hhLnNoYTM4NDtcbmhhc2guc2hhNTEyID0gaGFzaC5zaGEuc2hhNTEyO1xuaGFzaC5yaXBlbWQxNjAgPSBoYXNoLnJpcGVtZC5yaXBlbWQxNjA7XG4iLCIndXNlIHN0cmljdCdcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxudmFyIFRyYW5zZm9ybSA9IHJlcXVpcmUoJ3N0cmVhbScpLlRyYW5zZm9ybVxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxuXG5mdW5jdGlvbiB0aHJvd0lmTm90U3RyaW5nT3JCdWZmZXIgKHZhbCwgcHJlZml4KSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHZhbCkgJiYgdHlwZW9mIHZhbCAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHByZWZpeCArICcgbXVzdCBiZSBhIHN0cmluZyBvciBhIGJ1ZmZlcicpXG4gIH1cbn1cblxuZnVuY3Rpb24gSGFzaEJhc2UgKGJsb2NrU2l6ZSkge1xuICBUcmFuc2Zvcm0uY2FsbCh0aGlzKVxuXG4gIHRoaXMuX2Jsb2NrID0gQnVmZmVyLmFsbG9jVW5zYWZlKGJsb2NrU2l6ZSlcbiAgdGhpcy5fYmxvY2tTaXplID0gYmxvY2tTaXplXG4gIHRoaXMuX2Jsb2NrT2Zmc2V0ID0gMFxuICB0aGlzLl9sZW5ndGggPSBbMCwgMCwgMCwgMF1cblxuICB0aGlzLl9maW5hbGl6ZWQgPSBmYWxzZVxufVxuXG5pbmhlcml0cyhIYXNoQmFzZSwgVHJhbnNmb3JtKVxuXG5IYXNoQmFzZS5wcm90b3R5cGUuX3RyYW5zZm9ybSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNhbGxiYWNrKSB7XG4gIHZhciBlcnJvciA9IG51bGxcbiAgdHJ5IHtcbiAgICB0aGlzLnVwZGF0ZShjaHVuaywgZW5jb2RpbmcpXG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGVycm9yID0gZXJyXG4gIH1cblxuICBjYWxsYmFjayhlcnJvcilcbn1cblxuSGFzaEJhc2UucHJvdG90eXBlLl9mbHVzaCA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICB2YXIgZXJyb3IgPSBudWxsXG4gIHRyeSB7XG4gICAgdGhpcy5wdXNoKHRoaXMuZGlnZXN0KCkpXG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGVycm9yID0gZXJyXG4gIH1cblxuICBjYWxsYmFjayhlcnJvcilcbn1cblxuSGFzaEJhc2UucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChkYXRhLCBlbmNvZGluZykge1xuICB0aHJvd0lmTm90U3RyaW5nT3JCdWZmZXIoZGF0YSwgJ0RhdGEnKVxuICBpZiAodGhpcy5fZmluYWxpemVkKSB0aHJvdyBuZXcgRXJyb3IoJ0RpZ2VzdCBhbHJlYWR5IGNhbGxlZCcpXG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGRhdGEpKSBkYXRhID0gQnVmZmVyLmZyb20oZGF0YSwgZW5jb2RpbmcpXG5cbiAgLy8gY29uc3VtZSBkYXRhXG4gIHZhciBibG9jayA9IHRoaXMuX2Jsb2NrXG4gIHZhciBvZmZzZXQgPSAwXG4gIHdoaWxlICh0aGlzLl9ibG9ja09mZnNldCArIGRhdGEubGVuZ3RoIC0gb2Zmc2V0ID49IHRoaXMuX2Jsb2NrU2l6ZSkge1xuICAgIGZvciAodmFyIGkgPSB0aGlzLl9ibG9ja09mZnNldDsgaSA8IHRoaXMuX2Jsb2NrU2l6ZTspIGJsb2NrW2krK10gPSBkYXRhW29mZnNldCsrXVxuICAgIHRoaXMuX3VwZGF0ZSgpXG4gICAgdGhpcy5fYmxvY2tPZmZzZXQgPSAwXG4gIH1cbiAgd2hpbGUgKG9mZnNldCA8IGRhdGEubGVuZ3RoKSBibG9ja1t0aGlzLl9ibG9ja09mZnNldCsrXSA9IGRhdGFbb2Zmc2V0KytdXG5cbiAgLy8gdXBkYXRlIGxlbmd0aFxuICBmb3IgKHZhciBqID0gMCwgY2FycnkgPSBkYXRhLmxlbmd0aCAqIDg7IGNhcnJ5ID4gMDsgKytqKSB7XG4gICAgdGhpcy5fbGVuZ3RoW2pdICs9IGNhcnJ5XG4gICAgY2FycnkgPSAodGhpcy5fbGVuZ3RoW2pdIC8gMHgwMTAwMDAwMDAwKSB8IDBcbiAgICBpZiAoY2FycnkgPiAwKSB0aGlzLl9sZW5ndGhbal0gLT0gMHgwMTAwMDAwMDAwICogY2FycnlcbiAgfVxuXG4gIHJldHVybiB0aGlzXG59XG5cbkhhc2hCYXNlLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ191cGRhdGUgaXMgbm90IGltcGxlbWVudGVkJylcbn1cblxuSGFzaEJhc2UucHJvdG90eXBlLmRpZ2VzdCA9IGZ1bmN0aW9uIChlbmNvZGluZykge1xuICBpZiAodGhpcy5fZmluYWxpemVkKSB0aHJvdyBuZXcgRXJyb3IoJ0RpZ2VzdCBhbHJlYWR5IGNhbGxlZCcpXG4gIHRoaXMuX2ZpbmFsaXplZCA9IHRydWVcblxuICB2YXIgZGlnZXN0ID0gdGhpcy5fZGlnZXN0KClcbiAgaWYgKGVuY29kaW5nICE9PSB1bmRlZmluZWQpIGRpZ2VzdCA9IGRpZ2VzdC50b1N0cmluZyhlbmNvZGluZylcblxuICAvLyByZXNldCBzdGF0ZVxuICB0aGlzLl9ibG9jay5maWxsKDApXG4gIHRoaXMuX2Jsb2NrT2Zmc2V0ID0gMFxuICBmb3IgKHZhciBpID0gMDsgaSA8IDQ7ICsraSkgdGhpcy5fbGVuZ3RoW2ldID0gMFxuXG4gIHJldHVybiBkaWdlc3Rcbn1cblxuSGFzaEJhc2UucHJvdG90eXBlLl9kaWdlc3QgPSBmdW5jdGlvbiAoKSB7XG4gIHRocm93IG5ldyBFcnJvcignX2RpZ2VzdCBpcyBub3QgaW1wbGVtZW50ZWQnKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEhhc2hCYXNlXG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xuXG52YXIgcG5hID0gcmVxdWlyZSgncHJvY2Vzcy1uZXh0aWNrLWFyZ3MnKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWRhYmxlO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCdpc2FycmF5Jyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBEdXBsZXg7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuUmVhZGFibGUuUmVhZGFibGVTdGF0ZSA9IFJlYWRhYmxlU3RhdGU7XG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgRUUgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXI7XG5cbnZhciBFRWxpc3RlbmVyQ291bnQgPSBmdW5jdGlvbiAoZW1pdHRlciwgdHlwZSkge1xuICByZXR1cm4gZW1pdHRlci5saXN0ZW5lcnModHlwZSkubGVuZ3RoO1xufTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIFN0cmVhbSA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvc3RyZWFtcy9zdHJlYW0nKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xuXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXI7XG52YXIgT3VyVWludDhBcnJheSA9IGdsb2JhbC5VaW50OEFycmF5IHx8IGZ1bmN0aW9uICgpIHt9O1xuZnVuY3Rpb24gX3VpbnQ4QXJyYXlUb0J1ZmZlcihjaHVuaykge1xuICByZXR1cm4gQnVmZmVyLmZyb20oY2h1bmspO1xufVxuZnVuY3Rpb24gX2lzVWludDhBcnJheShvYmopIHtcbiAgcmV0dXJuIEJ1ZmZlci5pc0J1ZmZlcihvYmopIHx8IG9iaiBpbnN0YW5jZW9mIE91clVpbnQ4QXJyYXk7XG59XG5cbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIHV0aWwgPSByZXF1aXJlKCdjb3JlLXV0aWwtaXMnKTtcbnV0aWwuaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgZGVidWdVdGlsID0gcmVxdWlyZSgndXRpbCcpO1xudmFyIGRlYnVnID0gdm9pZCAwO1xuaWYgKGRlYnVnVXRpbCAmJiBkZWJ1Z1V0aWwuZGVidWdsb2cpIHtcbiAgZGVidWcgPSBkZWJ1Z1V0aWwuZGVidWdsb2coJ3N0cmVhbScpO1xufSBlbHNlIHtcbiAgZGVidWcgPSBmdW5jdGlvbiAoKSB7fTtcbn1cbi8qPC9yZXBsYWNlbWVudD4qL1xuXG52YXIgQnVmZmVyTGlzdCA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvc3RyZWFtcy9CdWZmZXJMaXN0Jyk7XG52YXIgZGVzdHJveUltcGwgPSByZXF1aXJlKCcuL2ludGVybmFsL3N0cmVhbXMvZGVzdHJveScpO1xudmFyIFN0cmluZ0RlY29kZXI7XG5cbnV0aWwuaW5oZXJpdHMoUmVhZGFibGUsIFN0cmVhbSk7XG5cbnZhciBrUHJveHlFdmVudHMgPSBbJ2Vycm9yJywgJ2Nsb3NlJywgJ2Rlc3Ryb3knLCAncGF1c2UnLCAncmVzdW1lJ107XG5cbmZ1bmN0aW9uIHByZXBlbmRMaXN0ZW5lcihlbWl0dGVyLCBldmVudCwgZm4pIHtcbiAgLy8gU2FkbHkgdGhpcyBpcyBub3QgY2FjaGVhYmxlIGFzIHNvbWUgbGlicmFyaWVzIGJ1bmRsZSB0aGVpciBvd25cbiAgLy8gZXZlbnQgZW1pdHRlciBpbXBsZW1lbnRhdGlvbiB3aXRoIHRoZW0uXG4gIGlmICh0eXBlb2YgZW1pdHRlci5wcmVwZW5kTGlzdGVuZXIgPT09ICdmdW5jdGlvbicpIHJldHVybiBlbWl0dGVyLnByZXBlbmRMaXN0ZW5lcihldmVudCwgZm4pO1xuXG4gIC8vIFRoaXMgaXMgYSBoYWNrIHRvIG1ha2Ugc3VyZSB0aGF0IG91ciBlcnJvciBoYW5kbGVyIGlzIGF0dGFjaGVkIGJlZm9yZSBhbnlcbiAgLy8gdXNlcmxhbmQgb25lcy4gIE5FVkVSIERPIFRISVMuIFRoaXMgaXMgaGVyZSBvbmx5IGJlY2F1c2UgdGhpcyBjb2RlIG5lZWRzXG4gIC8vIHRvIGNvbnRpbnVlIHRvIHdvcmsgd2l0aCBvbGRlciB2ZXJzaW9ucyBvZiBOb2RlLmpzIHRoYXQgZG8gbm90IGluY2x1ZGVcbiAgLy8gdGhlIHByZXBlbmRMaXN0ZW5lcigpIG1ldGhvZC4gVGhlIGdvYWwgaXMgdG8gZXZlbnR1YWxseSByZW1vdmUgdGhpcyBoYWNrLlxuICBpZiAoIWVtaXR0ZXIuX2V2ZW50cyB8fCAhZW1pdHRlci5fZXZlbnRzW2V2ZW50XSkgZW1pdHRlci5vbihldmVudCwgZm4pO2Vsc2UgaWYgKGlzQXJyYXkoZW1pdHRlci5fZXZlbnRzW2V2ZW50XSkpIGVtaXR0ZXIuX2V2ZW50c1tldmVudF0udW5zaGlmdChmbik7ZWxzZSBlbWl0dGVyLl9ldmVudHNbZXZlbnRdID0gW2ZuLCBlbWl0dGVyLl9ldmVudHNbZXZlbnRdXTtcbn1cblxuZnVuY3Rpb24gUmVhZGFibGVTdGF0ZShvcHRpb25zLCBzdHJlYW0pIHtcbiAgRHVwbGV4ID0gRHVwbGV4IHx8IHJlcXVpcmUoJy4vX3N0cmVhbV9kdXBsZXgnKTtcblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAvLyBEdXBsZXggc3RyZWFtcyBhcmUgYm90aCByZWFkYWJsZSBhbmQgd3JpdGFibGUsIGJ1dCBzaGFyZVxuICAvLyB0aGUgc2FtZSBvcHRpb25zIG9iamVjdC5cbiAgLy8gSG93ZXZlciwgc29tZSBjYXNlcyByZXF1aXJlIHNldHRpbmcgb3B0aW9ucyB0byBkaWZmZXJlbnRcbiAgLy8gdmFsdWVzIGZvciB0aGUgcmVhZGFibGUgYW5kIHRoZSB3cml0YWJsZSBzaWRlcyBvZiB0aGUgZHVwbGV4IHN0cmVhbS5cbiAgLy8gVGhlc2Ugb3B0aW9ucyBjYW4gYmUgcHJvdmlkZWQgc2VwYXJhdGVseSBhcyByZWFkYWJsZVhYWCBhbmQgd3JpdGFibGVYWFguXG4gIHZhciBpc0R1cGxleCA9IHN0cmVhbSBpbnN0YW5jZW9mIER1cGxleDtcblxuICAvLyBvYmplY3Qgc3RyZWFtIGZsYWcuIFVzZWQgdG8gbWFrZSByZWFkKG4pIGlnbm9yZSBuIGFuZCB0b1xuICAvLyBtYWtlIGFsbCB0aGUgYnVmZmVyIG1lcmdpbmcgYW5kIGxlbmd0aCBjaGVja3MgZ28gYXdheVxuICB0aGlzLm9iamVjdE1vZGUgPSAhIW9wdGlvbnMub2JqZWN0TW9kZTtcblxuICBpZiAoaXNEdXBsZXgpIHRoaXMub2JqZWN0TW9kZSA9IHRoaXMub2JqZWN0TW9kZSB8fCAhIW9wdGlvbnMucmVhZGFibGVPYmplY3RNb2RlO1xuXG4gIC8vIHRoZSBwb2ludCBhdCB3aGljaCBpdCBzdG9wcyBjYWxsaW5nIF9yZWFkKCkgdG8gZmlsbCB0aGUgYnVmZmVyXG4gIC8vIE5vdGU6IDAgaXMgYSB2YWxpZCB2YWx1ZSwgbWVhbnMgXCJkb24ndCBjYWxsIF9yZWFkIHByZWVtcHRpdmVseSBldmVyXCJcbiAgdmFyIGh3bSA9IG9wdGlvbnMuaGlnaFdhdGVyTWFyaztcbiAgdmFyIHJlYWRhYmxlSHdtID0gb3B0aW9ucy5yZWFkYWJsZUhpZ2hXYXRlck1hcms7XG4gIHZhciBkZWZhdWx0SHdtID0gdGhpcy5vYmplY3RNb2RlID8gMTYgOiAxNiAqIDEwMjQ7XG5cbiAgaWYgKGh3bSB8fCBod20gPT09IDApIHRoaXMuaGlnaFdhdGVyTWFyayA9IGh3bTtlbHNlIGlmIChpc0R1cGxleCAmJiAocmVhZGFibGVId20gfHwgcmVhZGFibGVId20gPT09IDApKSB0aGlzLmhpZ2hXYXRlck1hcmsgPSByZWFkYWJsZUh3bTtlbHNlIHRoaXMuaGlnaFdhdGVyTWFyayA9IGRlZmF1bHRId207XG5cbiAgLy8gY2FzdCB0byBpbnRzLlxuICB0aGlzLmhpZ2hXYXRlck1hcmsgPSBNYXRoLmZsb29yKHRoaXMuaGlnaFdhdGVyTWFyayk7XG5cbiAgLy8gQSBsaW5rZWQgbGlzdCBpcyB1c2VkIHRvIHN0b3JlIGRhdGEgY2h1bmtzIGluc3RlYWQgb2YgYW4gYXJyYXkgYmVjYXVzZSB0aGVcbiAgLy8gbGlua2VkIGxpc3QgY2FuIHJlbW92ZSBlbGVtZW50cyBmcm9tIHRoZSBiZWdpbm5pbmcgZmFzdGVyIHRoYW5cbiAgLy8gYXJyYXkuc2hpZnQoKVxuICB0aGlzLmJ1ZmZlciA9IG5ldyBCdWZmZXJMaXN0KCk7XG4gIHRoaXMubGVuZ3RoID0gMDtcbiAgdGhpcy5waXBlcyA9IG51bGw7XG4gIHRoaXMucGlwZXNDb3VudCA9IDA7XG4gIHRoaXMuZmxvd2luZyA9IG51bGw7XG4gIHRoaXMuZW5kZWQgPSBmYWxzZTtcbiAgdGhpcy5lbmRFbWl0dGVkID0gZmFsc2U7XG4gIHRoaXMucmVhZGluZyA9IGZhbHNlO1xuXG4gIC8vIGEgZmxhZyB0byBiZSBhYmxlIHRvIHRlbGwgaWYgdGhlIGV2ZW50ICdyZWFkYWJsZScvJ2RhdGEnIGlzIGVtaXR0ZWRcbiAgLy8gaW1tZWRpYXRlbHksIG9yIG9uIGEgbGF0ZXIgdGljay4gIFdlIHNldCB0aGlzIHRvIHRydWUgYXQgZmlyc3QsIGJlY2F1c2VcbiAgLy8gYW55IGFjdGlvbnMgdGhhdCBzaG91bGRuJ3QgaGFwcGVuIHVudGlsIFwibGF0ZXJcIiBzaG91bGQgZ2VuZXJhbGx5IGFsc29cbiAgLy8gbm90IGhhcHBlbiBiZWZvcmUgdGhlIGZpcnN0IHJlYWQgY2FsbC5cbiAgdGhpcy5zeW5jID0gdHJ1ZTtcblxuICAvLyB3aGVuZXZlciB3ZSByZXR1cm4gbnVsbCwgdGhlbiB3ZSBzZXQgYSBmbGFnIHRvIHNheVxuICAvLyB0aGF0IHdlJ3JlIGF3YWl0aW5nIGEgJ3JlYWRhYmxlJyBldmVudCBlbWlzc2lvbi5cbiAgdGhpcy5uZWVkUmVhZGFibGUgPSBmYWxzZTtcbiAgdGhpcy5lbWl0dGVkUmVhZGFibGUgPSBmYWxzZTtcbiAgdGhpcy5yZWFkYWJsZUxpc3RlbmluZyA9IGZhbHNlO1xuICB0aGlzLnJlc3VtZVNjaGVkdWxlZCA9IGZhbHNlO1xuXG4gIC8vIGhhcyBpdCBiZWVuIGRlc3Ryb3llZFxuICB0aGlzLmRlc3Ryb3llZCA9IGZhbHNlO1xuXG4gIC8vIENyeXB0byBpcyBraW5kIG9mIG9sZCBhbmQgY3J1c3R5LiAgSGlzdG9yaWNhbGx5LCBpdHMgZGVmYXVsdCBzdHJpbmdcbiAgLy8gZW5jb2RpbmcgaXMgJ2JpbmFyeScgc28gd2UgaGF2ZSB0byBtYWtlIHRoaXMgY29uZmlndXJhYmxlLlxuICAvLyBFdmVyeXRoaW5nIGVsc2UgaW4gdGhlIHVuaXZlcnNlIHVzZXMgJ3V0ZjgnLCB0aG91Z2guXG4gIHRoaXMuZGVmYXVsdEVuY29kaW5nID0gb3B0aW9ucy5kZWZhdWx0RW5jb2RpbmcgfHwgJ3V0ZjgnO1xuXG4gIC8vIHRoZSBudW1iZXIgb2Ygd3JpdGVycyB0aGF0IGFyZSBhd2FpdGluZyBhIGRyYWluIGV2ZW50IGluIC5waXBlKClzXG4gIHRoaXMuYXdhaXREcmFpbiA9IDA7XG5cbiAgLy8gaWYgdHJ1ZSwgYSBtYXliZVJlYWRNb3JlIGhhcyBiZWVuIHNjaGVkdWxlZFxuICB0aGlzLnJlYWRpbmdNb3JlID0gZmFsc2U7XG5cbiAgdGhpcy5kZWNvZGVyID0gbnVsbDtcbiAgdGhpcy5lbmNvZGluZyA9IG51bGw7XG4gIGlmIChvcHRpb25zLmVuY29kaW5nKSB7XG4gICAgaWYgKCFTdHJpbmdEZWNvZGVyKSBTdHJpbmdEZWNvZGVyID0gcmVxdWlyZSgnc3RyaW5nX2RlY29kZXIvJykuU3RyaW5nRGVjb2RlcjtcbiAgICB0aGlzLmRlY29kZXIgPSBuZXcgU3RyaW5nRGVjb2RlcihvcHRpb25zLmVuY29kaW5nKTtcbiAgICB0aGlzLmVuY29kaW5nID0gb3B0aW9ucy5lbmNvZGluZztcbiAgfVxufVxuXG5mdW5jdGlvbiBSZWFkYWJsZShvcHRpb25zKSB7XG4gIER1cGxleCA9IER1cGxleCB8fCByZXF1aXJlKCcuL19zdHJlYW1fZHVwbGV4Jyk7XG5cbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFJlYWRhYmxlKSkgcmV0dXJuIG5ldyBSZWFkYWJsZShvcHRpb25zKTtcblxuICB0aGlzLl9yZWFkYWJsZVN0YXRlID0gbmV3IFJlYWRhYmxlU3RhdGUob3B0aW9ucywgdGhpcyk7XG5cbiAgLy8gbGVnYWN5XG4gIHRoaXMucmVhZGFibGUgPSB0cnVlO1xuXG4gIGlmIChvcHRpb25zKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLnJlYWQgPT09ICdmdW5jdGlvbicpIHRoaXMuX3JlYWQgPSBvcHRpb25zLnJlYWQ7XG5cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMuZGVzdHJveSA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fZGVzdHJveSA9IG9wdGlvbnMuZGVzdHJveTtcbiAgfVxuXG4gIFN0cmVhbS5jYWxsKHRoaXMpO1xufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoUmVhZGFibGUucHJvdG90eXBlLCAnZGVzdHJveWVkJywge1xuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5fcmVhZGFibGVTdGF0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZDtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAvLyB3ZSBpZ25vcmUgdGhlIHZhbHVlIGlmIHRoZSBzdHJlYW1cbiAgICAvLyBoYXMgbm90IGJlZW4gaW5pdGlhbGl6ZWQgeWV0XG4gICAgaWYgKCF0aGlzLl9yZWFkYWJsZVN0YXRlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgdGhlIHVzZXIgaXMgZXhwbGljaXRseVxuICAgIC8vIG1hbmFnaW5nIGRlc3Ryb3llZFxuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkID0gdmFsdWU7XG4gIH1cbn0pO1xuXG5SZWFkYWJsZS5wcm90b3R5cGUuZGVzdHJveSA9IGRlc3Ryb3lJbXBsLmRlc3Ryb3k7XG5SZWFkYWJsZS5wcm90b3R5cGUuX3VuZGVzdHJveSA9IGRlc3Ryb3lJbXBsLnVuZGVzdHJveTtcblJlYWRhYmxlLnByb3RvdHlwZS5fZGVzdHJveSA9IGZ1bmN0aW9uIChlcnIsIGNiKSB7XG4gIHRoaXMucHVzaChudWxsKTtcbiAgY2IoZXJyKTtcbn07XG5cbi8vIE1hbnVhbGx5IHNob3ZlIHNvbWV0aGluZyBpbnRvIHRoZSByZWFkKCkgYnVmZmVyLlxuLy8gVGhpcyByZXR1cm5zIHRydWUgaWYgdGhlIGhpZ2hXYXRlck1hcmsgaGFzIG5vdCBiZWVuIGhpdCB5ZXQsXG4vLyBzaW1pbGFyIHRvIGhvdyBXcml0YWJsZS53cml0ZSgpIHJldHVybnMgdHJ1ZSBpZiB5b3Ugc2hvdWxkXG4vLyB3cml0ZSgpIHNvbWUgbW9yZS5cblJlYWRhYmxlLnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZykge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICB2YXIgc2tpcENodW5rQ2hlY2s7XG5cbiAgaWYgKCFzdGF0ZS5vYmplY3RNb2RlKSB7XG4gICAgaWYgKHR5cGVvZiBjaHVuayA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVuY29kaW5nID0gZW5jb2RpbmcgfHwgc3RhdGUuZGVmYXVsdEVuY29kaW5nO1xuICAgICAgaWYgKGVuY29kaW5nICE9PSBzdGF0ZS5lbmNvZGluZykge1xuICAgICAgICBjaHVuayA9IEJ1ZmZlci5mcm9tKGNodW5rLCBlbmNvZGluZyk7XG4gICAgICAgIGVuY29kaW5nID0gJyc7XG4gICAgICB9XG4gICAgICBza2lwQ2h1bmtDaGVjayA9IHRydWU7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHNraXBDaHVua0NoZWNrID0gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiByZWFkYWJsZUFkZENodW5rKHRoaXMsIGNodW5rLCBlbmNvZGluZywgZmFsc2UsIHNraXBDaHVua0NoZWNrKTtcbn07XG5cbi8vIFVuc2hpZnQgc2hvdWxkICphbHdheXMqIGJlIHNvbWV0aGluZyBkaXJlY3RseSBvdXQgb2YgcmVhZCgpXG5SZWFkYWJsZS5wcm90b3R5cGUudW5zaGlmdCA9IGZ1bmN0aW9uIChjaHVuaykge1xuICByZXR1cm4gcmVhZGFibGVBZGRDaHVuayh0aGlzLCBjaHVuaywgbnVsbCwgdHJ1ZSwgZmFsc2UpO1xufTtcblxuZnVuY3Rpb24gcmVhZGFibGVBZGRDaHVuayhzdHJlYW0sIGNodW5rLCBlbmNvZGluZywgYWRkVG9Gcm9udCwgc2tpcENodW5rQ2hlY2spIHtcbiAgdmFyIHN0YXRlID0gc3RyZWFtLl9yZWFkYWJsZVN0YXRlO1xuICBpZiAoY2h1bmsgPT09IG51bGwpIHtcbiAgICBzdGF0ZS5yZWFkaW5nID0gZmFsc2U7XG4gICAgb25Fb2ZDaHVuayhzdHJlYW0sIHN0YXRlKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgZXI7XG4gICAgaWYgKCFza2lwQ2h1bmtDaGVjaykgZXIgPSBjaHVua0ludmFsaWQoc3RhdGUsIGNodW5rKTtcbiAgICBpZiAoZXIpIHtcbiAgICAgIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVyKTtcbiAgICB9IGVsc2UgaWYgKHN0YXRlLm9iamVjdE1vZGUgfHwgY2h1bmsgJiYgY2h1bmsubGVuZ3RoID4gMCkge1xuICAgICAgaWYgKHR5cGVvZiBjaHVuayAhPT0gJ3N0cmluZycgJiYgIXN0YXRlLm9iamVjdE1vZGUgJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mKGNodW5rKSAhPT0gQnVmZmVyLnByb3RvdHlwZSkge1xuICAgICAgICBjaHVuayA9IF91aW50OEFycmF5VG9CdWZmZXIoY2h1bmspO1xuICAgICAgfVxuXG4gICAgICBpZiAoYWRkVG9Gcm9udCkge1xuICAgICAgICBpZiAoc3RhdGUuZW5kRW1pdHRlZCkgc3RyZWFtLmVtaXQoJ2Vycm9yJywgbmV3IEVycm9yKCdzdHJlYW0udW5zaGlmdCgpIGFmdGVyIGVuZCBldmVudCcpKTtlbHNlIGFkZENodW5rKHN0cmVhbSwgc3RhdGUsIGNodW5rLCB0cnVlKTtcbiAgICAgIH0gZWxzZSBpZiAoc3RhdGUuZW5kZWQpIHtcbiAgICAgICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgbmV3IEVycm9yKCdzdHJlYW0ucHVzaCgpIGFmdGVyIEVPRicpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0YXRlLnJlYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgaWYgKHN0YXRlLmRlY29kZXIgJiYgIWVuY29kaW5nKSB7XG4gICAgICAgICAgY2h1bmsgPSBzdGF0ZS5kZWNvZGVyLndyaXRlKGNodW5rKTtcbiAgICAgICAgICBpZiAoc3RhdGUub2JqZWN0TW9kZSB8fCBjaHVuay5sZW5ndGggIT09IDApIGFkZENodW5rKHN0cmVhbSwgc3RhdGUsIGNodW5rLCBmYWxzZSk7ZWxzZSBtYXliZVJlYWRNb3JlKHN0cmVhbSwgc3RhdGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFkZENodW5rKHN0cmVhbSwgc3RhdGUsIGNodW5rLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCFhZGRUb0Zyb250KSB7XG4gICAgICBzdGF0ZS5yZWFkaW5nID0gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5lZWRNb3JlRGF0YShzdGF0ZSk7XG59XG5cbmZ1bmN0aW9uIGFkZENodW5rKHN0cmVhbSwgc3RhdGUsIGNodW5rLCBhZGRUb0Zyb250KSB7XG4gIGlmIChzdGF0ZS5mbG93aW5nICYmIHN0YXRlLmxlbmd0aCA9PT0gMCAmJiAhc3RhdGUuc3luYykge1xuICAgIHN0cmVhbS5lbWl0KCdkYXRhJywgY2h1bmspO1xuICAgIHN0cmVhbS5yZWFkKDApO1xuICB9IGVsc2Uge1xuICAgIC8vIHVwZGF0ZSB0aGUgYnVmZmVyIGluZm8uXG4gICAgc3RhdGUubGVuZ3RoICs9IHN0YXRlLm9iamVjdE1vZGUgPyAxIDogY2h1bmsubGVuZ3RoO1xuICAgIGlmIChhZGRUb0Zyb250KSBzdGF0ZS5idWZmZXIudW5zaGlmdChjaHVuayk7ZWxzZSBzdGF0ZS5idWZmZXIucHVzaChjaHVuayk7XG5cbiAgICBpZiAoc3RhdGUubmVlZFJlYWRhYmxlKSBlbWl0UmVhZGFibGUoc3RyZWFtKTtcbiAgfVxuICBtYXliZVJlYWRNb3JlKHN0cmVhbSwgc3RhdGUpO1xufVxuXG5mdW5jdGlvbiBjaHVua0ludmFsaWQoc3RhdGUsIGNodW5rKSB7XG4gIHZhciBlcjtcbiAgaWYgKCFfaXNVaW50OEFycmF5KGNodW5rKSAmJiB0eXBlb2YgY2h1bmsgIT09ICdzdHJpbmcnICYmIGNodW5rICE9PSB1bmRlZmluZWQgJiYgIXN0YXRlLm9iamVjdE1vZGUpIHtcbiAgICBlciA9IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgbm9uLXN0cmluZy9idWZmZXIgY2h1bmsnKTtcbiAgfVxuICByZXR1cm4gZXI7XG59XG5cbi8vIGlmIGl0J3MgcGFzdCB0aGUgaGlnaCB3YXRlciBtYXJrLCB3ZSBjYW4gcHVzaCBpbiBzb21lIG1vcmUuXG4vLyBBbHNvLCBpZiB3ZSBoYXZlIG5vIGRhdGEgeWV0LCB3ZSBjYW4gc3RhbmQgc29tZVxuLy8gbW9yZSBieXRlcy4gIFRoaXMgaXMgdG8gd29yayBhcm91bmQgY2FzZXMgd2hlcmUgaHdtPTAsXG4vLyBzdWNoIGFzIHRoZSByZXBsLiAgQWxzbywgaWYgdGhlIHB1c2goKSB0cmlnZ2VyZWQgYVxuLy8gcmVhZGFibGUgZXZlbnQsIGFuZCB0aGUgdXNlciBjYWxsZWQgcmVhZChsYXJnZU51bWJlcikgc3VjaCB0aGF0XG4vLyBuZWVkUmVhZGFibGUgd2FzIHNldCwgdGhlbiB3ZSBvdWdodCB0byBwdXNoIG1vcmUsIHNvIHRoYXQgYW5vdGhlclxuLy8gJ3JlYWRhYmxlJyBldmVudCB3aWxsIGJlIHRyaWdnZXJlZC5cbmZ1bmN0aW9uIG5lZWRNb3JlRGF0YShzdGF0ZSkge1xuICByZXR1cm4gIXN0YXRlLmVuZGVkICYmIChzdGF0ZS5uZWVkUmVhZGFibGUgfHwgc3RhdGUubGVuZ3RoIDwgc3RhdGUuaGlnaFdhdGVyTWFyayB8fCBzdGF0ZS5sZW5ndGggPT09IDApO1xufVxuXG5SZWFkYWJsZS5wcm90b3R5cGUuaXNQYXVzZWQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmcgPT09IGZhbHNlO1xufTtcblxuLy8gYmFja3dhcmRzIGNvbXBhdGliaWxpdHkuXG5SZWFkYWJsZS5wcm90b3R5cGUuc2V0RW5jb2RpbmcgPSBmdW5jdGlvbiAoZW5jKSB7XG4gIGlmICghU3RyaW5nRGVjb2RlcikgU3RyaW5nRGVjb2RlciA9IHJlcXVpcmUoJ3N0cmluZ19kZWNvZGVyLycpLlN0cmluZ0RlY29kZXI7XG4gIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVjb2RlciA9IG5ldyBTdHJpbmdEZWNvZGVyKGVuYyk7XG4gIHRoaXMuX3JlYWRhYmxlU3RhdGUuZW5jb2RpbmcgPSBlbmM7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLy8gRG9uJ3QgcmFpc2UgdGhlIGh3bSA+IDhNQlxudmFyIE1BWF9IV00gPSAweDgwMDAwMDtcbmZ1bmN0aW9uIGNvbXB1dGVOZXdIaWdoV2F0ZXJNYXJrKG4pIHtcbiAgaWYgKG4gPj0gTUFYX0hXTSkge1xuICAgIG4gPSBNQVhfSFdNO1xuICB9IGVsc2Uge1xuICAgIC8vIEdldCB0aGUgbmV4dCBoaWdoZXN0IHBvd2VyIG9mIDIgdG8gcHJldmVudCBpbmNyZWFzaW5nIGh3bSBleGNlc3NpdmVseSBpblxuICAgIC8vIHRpbnkgYW1vdW50c1xuICAgIG4tLTtcbiAgICBuIHw9IG4gPj4+IDE7XG4gICAgbiB8PSBuID4+PiAyO1xuICAgIG4gfD0gbiA+Pj4gNDtcbiAgICBuIHw9IG4gPj4+IDg7XG4gICAgbiB8PSBuID4+PiAxNjtcbiAgICBuKys7XG4gIH1cbiAgcmV0dXJuIG47XG59XG5cbi8vIFRoaXMgZnVuY3Rpb24gaXMgZGVzaWduZWQgdG8gYmUgaW5saW5hYmxlLCBzbyBwbGVhc2UgdGFrZSBjYXJlIHdoZW4gbWFraW5nXG4vLyBjaGFuZ2VzIHRvIHRoZSBmdW5jdGlvbiBib2R5LlxuZnVuY3Rpb24gaG93TXVjaFRvUmVhZChuLCBzdGF0ZSkge1xuICBpZiAobiA8PSAwIHx8IHN0YXRlLmxlbmd0aCA9PT0gMCAmJiBzdGF0ZS5lbmRlZCkgcmV0dXJuIDA7XG4gIGlmIChzdGF0ZS5vYmplY3RNb2RlKSByZXR1cm4gMTtcbiAgaWYgKG4gIT09IG4pIHtcbiAgICAvLyBPbmx5IGZsb3cgb25lIGJ1ZmZlciBhdCBhIHRpbWVcbiAgICBpZiAoc3RhdGUuZmxvd2luZyAmJiBzdGF0ZS5sZW5ndGgpIHJldHVybiBzdGF0ZS5idWZmZXIuaGVhZC5kYXRhLmxlbmd0aDtlbHNlIHJldHVybiBzdGF0ZS5sZW5ndGg7XG4gIH1cbiAgLy8gSWYgd2UncmUgYXNraW5nIGZvciBtb3JlIHRoYW4gdGhlIGN1cnJlbnQgaHdtLCB0aGVuIHJhaXNlIHRoZSBod20uXG4gIGlmIChuID4gc3RhdGUuaGlnaFdhdGVyTWFyaykgc3RhdGUuaGlnaFdhdGVyTWFyayA9IGNvbXB1dGVOZXdIaWdoV2F0ZXJNYXJrKG4pO1xuICBpZiAobiA8PSBzdGF0ZS5sZW5ndGgpIHJldHVybiBuO1xuICAvLyBEb24ndCBoYXZlIGVub3VnaFxuICBpZiAoIXN0YXRlLmVuZGVkKSB7XG4gICAgc3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTtcbiAgICByZXR1cm4gMDtcbiAgfVxuICByZXR1cm4gc3RhdGUubGVuZ3RoO1xufVxuXG4vLyB5b3UgY2FuIG92ZXJyaWRlIGVpdGhlciB0aGlzIG1ldGhvZCwgb3IgdGhlIGFzeW5jIF9yZWFkKG4pIGJlbG93LlxuUmVhZGFibGUucHJvdG90eXBlLnJlYWQgPSBmdW5jdGlvbiAobikge1xuICBkZWJ1ZygncmVhZCcsIG4pO1xuICBuID0gcGFyc2VJbnQobiwgMTApO1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICB2YXIgbk9yaWcgPSBuO1xuXG4gIGlmIChuICE9PSAwKSBzdGF0ZS5lbWl0dGVkUmVhZGFibGUgPSBmYWxzZTtcblxuICAvLyBpZiB3ZSdyZSBkb2luZyByZWFkKDApIHRvIHRyaWdnZXIgYSByZWFkYWJsZSBldmVudCwgYnV0IHdlXG4gIC8vIGFscmVhZHkgaGF2ZSBhIGJ1bmNoIG9mIGRhdGEgaW4gdGhlIGJ1ZmZlciwgdGhlbiBqdXN0IHRyaWdnZXJcbiAgLy8gdGhlICdyZWFkYWJsZScgZXZlbnQgYW5kIG1vdmUgb24uXG4gIGlmIChuID09PSAwICYmIHN0YXRlLm5lZWRSZWFkYWJsZSAmJiAoc3RhdGUubGVuZ3RoID49IHN0YXRlLmhpZ2hXYXRlck1hcmsgfHwgc3RhdGUuZW5kZWQpKSB7XG4gICAgZGVidWcoJ3JlYWQ6IGVtaXRSZWFkYWJsZScsIHN0YXRlLmxlbmd0aCwgc3RhdGUuZW5kZWQpO1xuICAgIGlmIChzdGF0ZS5sZW5ndGggPT09IDAgJiYgc3RhdGUuZW5kZWQpIGVuZFJlYWRhYmxlKHRoaXMpO2Vsc2UgZW1pdFJlYWRhYmxlKHRoaXMpO1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgbiA9IGhvd011Y2hUb1JlYWQobiwgc3RhdGUpO1xuXG4gIC8vIGlmIHdlJ3ZlIGVuZGVkLCBhbmQgd2UncmUgbm93IGNsZWFyLCB0aGVuIGZpbmlzaCBpdCB1cC5cbiAgaWYgKG4gPT09IDAgJiYgc3RhdGUuZW5kZWQpIHtcbiAgICBpZiAoc3RhdGUubGVuZ3RoID09PSAwKSBlbmRSZWFkYWJsZSh0aGlzKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8vIEFsbCB0aGUgYWN0dWFsIGNodW5rIGdlbmVyYXRpb24gbG9naWMgbmVlZHMgdG8gYmVcbiAgLy8gKmJlbG93KiB0aGUgY2FsbCB0byBfcmVhZC4gIFRoZSByZWFzb24gaXMgdGhhdCBpbiBjZXJ0YWluXG4gIC8vIHN5bnRoZXRpYyBzdHJlYW0gY2FzZXMsIHN1Y2ggYXMgcGFzc3Rocm91Z2ggc3RyZWFtcywgX3JlYWRcbiAgLy8gbWF5IGJlIGEgY29tcGxldGVseSBzeW5jaHJvbm91cyBvcGVyYXRpb24gd2hpY2ggbWF5IGNoYW5nZVxuICAvLyB0aGUgc3RhdGUgb2YgdGhlIHJlYWQgYnVmZmVyLCBwcm92aWRpbmcgZW5vdWdoIGRhdGEgd2hlblxuICAvLyBiZWZvcmUgdGhlcmUgd2FzICpub3QqIGVub3VnaC5cbiAgLy9cbiAgLy8gU28sIHRoZSBzdGVwcyBhcmU6XG4gIC8vIDEuIEZpZ3VyZSBvdXQgd2hhdCB0aGUgc3RhdGUgb2YgdGhpbmdzIHdpbGwgYmUgYWZ0ZXIgd2UgZG9cbiAgLy8gYSByZWFkIGZyb20gdGhlIGJ1ZmZlci5cbiAgLy9cbiAgLy8gMi4gSWYgdGhhdCByZXN1bHRpbmcgc3RhdGUgd2lsbCB0cmlnZ2VyIGEgX3JlYWQsIHRoZW4gY2FsbCBfcmVhZC5cbiAgLy8gTm90ZSB0aGF0IHRoaXMgbWF5IGJlIGFzeW5jaHJvbm91cywgb3Igc3luY2hyb25vdXMuICBZZXMsIGl0IGlzXG4gIC8vIGRlZXBseSB1Z2x5IHRvIHdyaXRlIEFQSXMgdGhpcyB3YXksIGJ1dCB0aGF0IHN0aWxsIGRvZXNuJ3QgbWVhblxuICAvLyB0aGF0IHRoZSBSZWFkYWJsZSBjbGFzcyBzaG91bGQgYmVoYXZlIGltcHJvcGVybHksIGFzIHN0cmVhbXMgYXJlXG4gIC8vIGRlc2lnbmVkIHRvIGJlIHN5bmMvYXN5bmMgYWdub3N0aWMuXG4gIC8vIFRha2Ugbm90ZSBpZiB0aGUgX3JlYWQgY2FsbCBpcyBzeW5jIG9yIGFzeW5jIChpZSwgaWYgdGhlIHJlYWQgY2FsbFxuICAvLyBoYXMgcmV0dXJuZWQgeWV0KSwgc28gdGhhdCB3ZSBrbm93IHdoZXRoZXIgb3Igbm90IGl0J3Mgc2FmZSB0byBlbWl0XG4gIC8vICdyZWFkYWJsZScgZXRjLlxuICAvL1xuICAvLyAzLiBBY3R1YWxseSBwdWxsIHRoZSByZXF1ZXN0ZWQgY2h1bmtzIG91dCBvZiB0aGUgYnVmZmVyIGFuZCByZXR1cm4uXG5cbiAgLy8gaWYgd2UgbmVlZCBhIHJlYWRhYmxlIGV2ZW50LCB0aGVuIHdlIG5lZWQgdG8gZG8gc29tZSByZWFkaW5nLlxuICB2YXIgZG9SZWFkID0gc3RhdGUubmVlZFJlYWRhYmxlO1xuICBkZWJ1ZygnbmVlZCByZWFkYWJsZScsIGRvUmVhZCk7XG5cbiAgLy8gaWYgd2UgY3VycmVudGx5IGhhdmUgbGVzcyB0aGFuIHRoZSBoaWdoV2F0ZXJNYXJrLCB0aGVuIGFsc28gcmVhZCBzb21lXG4gIGlmIChzdGF0ZS5sZW5ndGggPT09IDAgfHwgc3RhdGUubGVuZ3RoIC0gbiA8IHN0YXRlLmhpZ2hXYXRlck1hcmspIHtcbiAgICBkb1JlYWQgPSB0cnVlO1xuICAgIGRlYnVnKCdsZW5ndGggbGVzcyB0aGFuIHdhdGVybWFyaycsIGRvUmVhZCk7XG4gIH1cblxuICAvLyBob3dldmVyLCBpZiB3ZSd2ZSBlbmRlZCwgdGhlbiB0aGVyZSdzIG5vIHBvaW50LCBhbmQgaWYgd2UncmUgYWxyZWFkeVxuICAvLyByZWFkaW5nLCB0aGVuIGl0J3MgdW5uZWNlc3NhcnkuXG4gIGlmIChzdGF0ZS5lbmRlZCB8fCBzdGF0ZS5yZWFkaW5nKSB7XG4gICAgZG9SZWFkID0gZmFsc2U7XG4gICAgZGVidWcoJ3JlYWRpbmcgb3IgZW5kZWQnLCBkb1JlYWQpO1xuICB9IGVsc2UgaWYgKGRvUmVhZCkge1xuICAgIGRlYnVnKCdkbyByZWFkJyk7XG4gICAgc3RhdGUucmVhZGluZyA9IHRydWU7XG4gICAgc3RhdGUuc3luYyA9IHRydWU7XG4gICAgLy8gaWYgdGhlIGxlbmd0aCBpcyBjdXJyZW50bHkgemVybywgdGhlbiB3ZSAqbmVlZCogYSByZWFkYWJsZSBldmVudC5cbiAgICBpZiAoc3RhdGUubGVuZ3RoID09PSAwKSBzdGF0ZS5uZWVkUmVhZGFibGUgPSB0cnVlO1xuICAgIC8vIGNhbGwgaW50ZXJuYWwgcmVhZCBtZXRob2RcbiAgICB0aGlzLl9yZWFkKHN0YXRlLmhpZ2hXYXRlck1hcmspO1xuICAgIHN0YXRlLnN5bmMgPSBmYWxzZTtcbiAgICAvLyBJZiBfcmVhZCBwdXNoZWQgZGF0YSBzeW5jaHJvbm91c2x5LCB0aGVuIGByZWFkaW5nYCB3aWxsIGJlIGZhbHNlLFxuICAgIC8vIGFuZCB3ZSBuZWVkIHRvIHJlLWV2YWx1YXRlIGhvdyBtdWNoIGRhdGEgd2UgY2FuIHJldHVybiB0byB0aGUgdXNlci5cbiAgICBpZiAoIXN0YXRlLnJlYWRpbmcpIG4gPSBob3dNdWNoVG9SZWFkKG5PcmlnLCBzdGF0ZSk7XG4gIH1cblxuICB2YXIgcmV0O1xuICBpZiAobiA+IDApIHJldCA9IGZyb21MaXN0KG4sIHN0YXRlKTtlbHNlIHJldCA9IG51bGw7XG5cbiAgaWYgKHJldCA9PT0gbnVsbCkge1xuICAgIHN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7XG4gICAgbiA9IDA7XG4gIH0gZWxzZSB7XG4gICAgc3RhdGUubGVuZ3RoIC09IG47XG4gIH1cblxuICBpZiAoc3RhdGUubGVuZ3RoID09PSAwKSB7XG4gICAgLy8gSWYgd2UgaGF2ZSBub3RoaW5nIGluIHRoZSBidWZmZXIsIHRoZW4gd2Ugd2FudCB0byBrbm93XG4gICAgLy8gYXMgc29vbiBhcyB3ZSAqZG8qIGdldCBzb21ldGhpbmcgaW50byB0aGUgYnVmZmVyLlxuICAgIGlmICghc3RhdGUuZW5kZWQpIHN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7XG5cbiAgICAvLyBJZiB3ZSB0cmllZCB0byByZWFkKCkgcGFzdCB0aGUgRU9GLCB0aGVuIGVtaXQgZW5kIG9uIHRoZSBuZXh0IHRpY2suXG4gICAgaWYgKG5PcmlnICE9PSBuICYmIHN0YXRlLmVuZGVkKSBlbmRSZWFkYWJsZSh0aGlzKTtcbiAgfVxuXG4gIGlmIChyZXQgIT09IG51bGwpIHRoaXMuZW1pdCgnZGF0YScsIHJldCk7XG5cbiAgcmV0dXJuIHJldDtcbn07XG5cbmZ1bmN0aW9uIG9uRW9mQ2h1bmsoc3RyZWFtLCBzdGF0ZSkge1xuICBpZiAoc3RhdGUuZW5kZWQpIHJldHVybjtcbiAgaWYgKHN0YXRlLmRlY29kZXIpIHtcbiAgICB2YXIgY2h1bmsgPSBzdGF0ZS5kZWNvZGVyLmVuZCgpO1xuICAgIGlmIChjaHVuayAmJiBjaHVuay5sZW5ndGgpIHtcbiAgICAgIHN0YXRlLmJ1ZmZlci5wdXNoKGNodW5rKTtcbiAgICAgIHN0YXRlLmxlbmd0aCArPSBzdGF0ZS5vYmplY3RNb2RlID8gMSA6IGNodW5rLmxlbmd0aDtcbiAgICB9XG4gIH1cbiAgc3RhdGUuZW5kZWQgPSB0cnVlO1xuXG4gIC8vIGVtaXQgJ3JlYWRhYmxlJyBub3cgdG8gbWFrZSBzdXJlIGl0IGdldHMgcGlja2VkIHVwLlxuICBlbWl0UmVhZGFibGUoc3RyZWFtKTtcbn1cblxuLy8gRG9uJ3QgZW1pdCByZWFkYWJsZSByaWdodCBhd2F5IGluIHN5bmMgbW9kZSwgYmVjYXVzZSB0aGlzIGNhbiB0cmlnZ2VyXG4vLyBhbm90aGVyIHJlYWQoKSBjYWxsID0+IHN0YWNrIG92ZXJmbG93LiAgVGhpcyB3YXksIGl0IG1pZ2h0IHRyaWdnZXJcbi8vIGEgbmV4dFRpY2sgcmVjdXJzaW9uIHdhcm5pbmcsIGJ1dCB0aGF0J3Mgbm90IHNvIGJhZC5cbmZ1bmN0aW9uIGVtaXRSZWFkYWJsZShzdHJlYW0pIHtcbiAgdmFyIHN0YXRlID0gc3RyZWFtLl9yZWFkYWJsZVN0YXRlO1xuICBzdGF0ZS5uZWVkUmVhZGFibGUgPSBmYWxzZTtcbiAgaWYgKCFzdGF0ZS5lbWl0dGVkUmVhZGFibGUpIHtcbiAgICBkZWJ1ZygnZW1pdFJlYWRhYmxlJywgc3RhdGUuZmxvd2luZyk7XG4gICAgc3RhdGUuZW1pdHRlZFJlYWRhYmxlID0gdHJ1ZTtcbiAgICBpZiAoc3RhdGUuc3luYykgcG5hLm5leHRUaWNrKGVtaXRSZWFkYWJsZV8sIHN0cmVhbSk7ZWxzZSBlbWl0UmVhZGFibGVfKHN0cmVhbSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZW1pdFJlYWRhYmxlXyhzdHJlYW0pIHtcbiAgZGVidWcoJ2VtaXQgcmVhZGFibGUnKTtcbiAgc3RyZWFtLmVtaXQoJ3JlYWRhYmxlJyk7XG4gIGZsb3coc3RyZWFtKTtcbn1cblxuLy8gYXQgdGhpcyBwb2ludCwgdGhlIHVzZXIgaGFzIHByZXN1bWFibHkgc2VlbiB0aGUgJ3JlYWRhYmxlJyBldmVudCxcbi8vIGFuZCBjYWxsZWQgcmVhZCgpIHRvIGNvbnN1bWUgc29tZSBkYXRhLiAgdGhhdCBtYXkgaGF2ZSB0cmlnZ2VyZWRcbi8vIGluIHR1cm4gYW5vdGhlciBfcmVhZChuKSBjYWxsLCBpbiB3aGljaCBjYXNlIHJlYWRpbmcgPSB0cnVlIGlmXG4vLyBpdCdzIGluIHByb2dyZXNzLlxuLy8gSG93ZXZlciwgaWYgd2UncmUgbm90IGVuZGVkLCBvciByZWFkaW5nLCBhbmQgdGhlIGxlbmd0aCA8IGh3bSxcbi8vIHRoZW4gZ28gYWhlYWQgYW5kIHRyeSB0byByZWFkIHNvbWUgbW9yZSBwcmVlbXB0aXZlbHkuXG5mdW5jdGlvbiBtYXliZVJlYWRNb3JlKHN0cmVhbSwgc3RhdGUpIHtcbiAgaWYgKCFzdGF0ZS5yZWFkaW5nTW9yZSkge1xuICAgIHN0YXRlLnJlYWRpbmdNb3JlID0gdHJ1ZTtcbiAgICBwbmEubmV4dFRpY2sobWF5YmVSZWFkTW9yZV8sIHN0cmVhbSwgc3RhdGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1heWJlUmVhZE1vcmVfKHN0cmVhbSwgc3RhdGUpIHtcbiAgdmFyIGxlbiA9IHN0YXRlLmxlbmd0aDtcbiAgd2hpbGUgKCFzdGF0ZS5yZWFkaW5nICYmICFzdGF0ZS5mbG93aW5nICYmICFzdGF0ZS5lbmRlZCAmJiBzdGF0ZS5sZW5ndGggPCBzdGF0ZS5oaWdoV2F0ZXJNYXJrKSB7XG4gICAgZGVidWcoJ21heWJlUmVhZE1vcmUgcmVhZCAwJyk7XG4gICAgc3RyZWFtLnJlYWQoMCk7XG4gICAgaWYgKGxlbiA9PT0gc3RhdGUubGVuZ3RoKVxuICAgICAgLy8gZGlkbid0IGdldCBhbnkgZGF0YSwgc3RvcCBzcGlubmluZy5cbiAgICAgIGJyZWFrO2Vsc2UgbGVuID0gc3RhdGUubGVuZ3RoO1xuICB9XG4gIHN0YXRlLnJlYWRpbmdNb3JlID0gZmFsc2U7XG59XG5cbi8vIGFic3RyYWN0IG1ldGhvZC4gIHRvIGJlIG92ZXJyaWRkZW4gaW4gc3BlY2lmaWMgaW1wbGVtZW50YXRpb24gY2xhc3Nlcy5cbi8vIGNhbGwgY2IoZXIsIGRhdGEpIHdoZXJlIGRhdGEgaXMgPD0gbiBpbiBsZW5ndGguXG4vLyBmb3IgdmlydHVhbCAobm9uLXN0cmluZywgbm9uLWJ1ZmZlcikgc3RyZWFtcywgXCJsZW5ndGhcIiBpcyBzb21ld2hhdFxuLy8gYXJiaXRyYXJ5LCBhbmQgcGVyaGFwcyBub3QgdmVyeSBtZWFuaW5nZnVsLlxuUmVhZGFibGUucHJvdG90eXBlLl9yZWFkID0gZnVuY3Rpb24gKG4pIHtcbiAgdGhpcy5lbWl0KCdlcnJvcicsIG5ldyBFcnJvcignX3JlYWQoKSBpcyBub3QgaW1wbGVtZW50ZWQnKSk7XG59O1xuXG5SZWFkYWJsZS5wcm90b3R5cGUucGlwZSA9IGZ1bmN0aW9uIChkZXN0LCBwaXBlT3B0cykge1xuICB2YXIgc3JjID0gdGhpcztcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcblxuICBzd2l0Y2ggKHN0YXRlLnBpcGVzQ291bnQpIHtcbiAgICBjYXNlIDA6XG4gICAgICBzdGF0ZS5waXBlcyA9IGRlc3Q7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDE6XG4gICAgICBzdGF0ZS5waXBlcyA9IFtzdGF0ZS5waXBlcywgZGVzdF07XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgc3RhdGUucGlwZXMucHVzaChkZXN0KTtcbiAgICAgIGJyZWFrO1xuICB9XG4gIHN0YXRlLnBpcGVzQ291bnQgKz0gMTtcbiAgZGVidWcoJ3BpcGUgY291bnQ9JWQgb3B0cz0laicsIHN0YXRlLnBpcGVzQ291bnQsIHBpcGVPcHRzKTtcblxuICB2YXIgZG9FbmQgPSAoIXBpcGVPcHRzIHx8IHBpcGVPcHRzLmVuZCAhPT0gZmFsc2UpICYmIGRlc3QgIT09IHByb2Nlc3Muc3Rkb3V0ICYmIGRlc3QgIT09IHByb2Nlc3Muc3RkZXJyO1xuXG4gIHZhciBlbmRGbiA9IGRvRW5kID8gb25lbmQgOiB1bnBpcGU7XG4gIGlmIChzdGF0ZS5lbmRFbWl0dGVkKSBwbmEubmV4dFRpY2soZW5kRm4pO2Vsc2Ugc3JjLm9uY2UoJ2VuZCcsIGVuZEZuKTtcblxuICBkZXN0Lm9uKCd1bnBpcGUnLCBvbnVucGlwZSk7XG4gIGZ1bmN0aW9uIG9udW5waXBlKHJlYWRhYmxlLCB1bnBpcGVJbmZvKSB7XG4gICAgZGVidWcoJ29udW5waXBlJyk7XG4gICAgaWYgKHJlYWRhYmxlID09PSBzcmMpIHtcbiAgICAgIGlmICh1bnBpcGVJbmZvICYmIHVucGlwZUluZm8uaGFzVW5waXBlZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgdW5waXBlSW5mby5oYXNVbnBpcGVkID0gdHJ1ZTtcbiAgICAgICAgY2xlYW51cCgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG9uZW5kKCkge1xuICAgIGRlYnVnKCdvbmVuZCcpO1xuICAgIGRlc3QuZW5kKCk7XG4gIH1cblxuICAvLyB3aGVuIHRoZSBkZXN0IGRyYWlucywgaXQgcmVkdWNlcyB0aGUgYXdhaXREcmFpbiBjb3VudGVyXG4gIC8vIG9uIHRoZSBzb3VyY2UuICBUaGlzIHdvdWxkIGJlIG1vcmUgZWxlZ2FudCB3aXRoIGEgLm9uY2UoKVxuICAvLyBoYW5kbGVyIGluIGZsb3coKSwgYnV0IGFkZGluZyBhbmQgcmVtb3ZpbmcgcmVwZWF0ZWRseSBpc1xuICAvLyB0b28gc2xvdy5cbiAgdmFyIG9uZHJhaW4gPSBwaXBlT25EcmFpbihzcmMpO1xuICBkZXN0Lm9uKCdkcmFpbicsIG9uZHJhaW4pO1xuXG4gIHZhciBjbGVhbmVkVXAgPSBmYWxzZTtcbiAgZnVuY3Rpb24gY2xlYW51cCgpIHtcbiAgICBkZWJ1ZygnY2xlYW51cCcpO1xuICAgIC8vIGNsZWFudXAgZXZlbnQgaGFuZGxlcnMgb25jZSB0aGUgcGlwZSBpcyBicm9rZW5cbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdjbG9zZScsIG9uY2xvc2UpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2ZpbmlzaCcsIG9uZmluaXNoKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdkcmFpbicsIG9uZHJhaW4pO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgb25lcnJvcik7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcigndW5waXBlJywgb251bnBpcGUpO1xuICAgIHNyYy5yZW1vdmVMaXN0ZW5lcignZW5kJywgb25lbmQpO1xuICAgIHNyYy5yZW1vdmVMaXN0ZW5lcignZW5kJywgdW5waXBlKTtcbiAgICBzcmMucmVtb3ZlTGlzdGVuZXIoJ2RhdGEnLCBvbmRhdGEpO1xuXG4gICAgY2xlYW5lZFVwID0gdHJ1ZTtcblxuICAgIC8vIGlmIHRoZSByZWFkZXIgaXMgd2FpdGluZyBmb3IgYSBkcmFpbiBldmVudCBmcm9tIHRoaXNcbiAgICAvLyBzcGVjaWZpYyB3cml0ZXIsIHRoZW4gaXQgd291bGQgY2F1c2UgaXQgdG8gbmV2ZXIgc3RhcnRcbiAgICAvLyBmbG93aW5nIGFnYWluLlxuICAgIC8vIFNvLCBpZiB0aGlzIGlzIGF3YWl0aW5nIGEgZHJhaW4sIHRoZW4gd2UganVzdCBjYWxsIGl0IG5vdy5cbiAgICAvLyBJZiB3ZSBkb24ndCBrbm93LCB0aGVuIGFzc3VtZSB0aGF0IHdlIGFyZSB3YWl0aW5nIGZvciBvbmUuXG4gICAgaWYgKHN0YXRlLmF3YWl0RHJhaW4gJiYgKCFkZXN0Ll93cml0YWJsZVN0YXRlIHx8IGRlc3QuX3dyaXRhYmxlU3RhdGUubmVlZERyYWluKSkgb25kcmFpbigpO1xuICB9XG5cbiAgLy8gSWYgdGhlIHVzZXIgcHVzaGVzIG1vcmUgZGF0YSB3aGlsZSB3ZSdyZSB3cml0aW5nIHRvIGRlc3QgdGhlbiB3ZSdsbCBlbmQgdXBcbiAgLy8gaW4gb25kYXRhIGFnYWluLiBIb3dldmVyLCB3ZSBvbmx5IHdhbnQgdG8gaW5jcmVhc2UgYXdhaXREcmFpbiBvbmNlIGJlY2F1c2VcbiAgLy8gZGVzdCB3aWxsIG9ubHkgZW1pdCBvbmUgJ2RyYWluJyBldmVudCBmb3IgdGhlIG11bHRpcGxlIHdyaXRlcy5cbiAgLy8gPT4gSW50cm9kdWNlIGEgZ3VhcmQgb24gaW5jcmVhc2luZyBhd2FpdERyYWluLlxuICB2YXIgaW5jcmVhc2VkQXdhaXREcmFpbiA9IGZhbHNlO1xuICBzcmMub24oJ2RhdGEnLCBvbmRhdGEpO1xuICBmdW5jdGlvbiBvbmRhdGEoY2h1bmspIHtcbiAgICBkZWJ1Zygnb25kYXRhJyk7XG4gICAgaW5jcmVhc2VkQXdhaXREcmFpbiA9IGZhbHNlO1xuICAgIHZhciByZXQgPSBkZXN0LndyaXRlKGNodW5rKTtcbiAgICBpZiAoZmFsc2UgPT09IHJldCAmJiAhaW5jcmVhc2VkQXdhaXREcmFpbikge1xuICAgICAgLy8gSWYgdGhlIHVzZXIgdW5waXBlZCBkdXJpbmcgYGRlc3Qud3JpdGUoKWAsIGl0IGlzIHBvc3NpYmxlXG4gICAgICAvLyB0byBnZXQgc3R1Y2sgaW4gYSBwZXJtYW5lbnRseSBwYXVzZWQgc3RhdGUgaWYgdGhhdCB3cml0ZVxuICAgICAgLy8gYWxzbyByZXR1cm5lZCBmYWxzZS5cbiAgICAgIC8vID0+IENoZWNrIHdoZXRoZXIgYGRlc3RgIGlzIHN0aWxsIGEgcGlwaW5nIGRlc3RpbmF0aW9uLlxuICAgICAgaWYgKChzdGF0ZS5waXBlc0NvdW50ID09PSAxICYmIHN0YXRlLnBpcGVzID09PSBkZXN0IHx8IHN0YXRlLnBpcGVzQ291bnQgPiAxICYmIGluZGV4T2Yoc3RhdGUucGlwZXMsIGRlc3QpICE9PSAtMSkgJiYgIWNsZWFuZWRVcCkge1xuICAgICAgICBkZWJ1ZygnZmFsc2Ugd3JpdGUgcmVzcG9uc2UsIHBhdXNlJywgc3JjLl9yZWFkYWJsZVN0YXRlLmF3YWl0RHJhaW4pO1xuICAgICAgICBzcmMuX3JlYWRhYmxlU3RhdGUuYXdhaXREcmFpbisrO1xuICAgICAgICBpbmNyZWFzZWRBd2FpdERyYWluID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHNyYy5wYXVzZSgpO1xuICAgIH1cbiAgfVxuXG4gIC8vIGlmIHRoZSBkZXN0IGhhcyBhbiBlcnJvciwgdGhlbiBzdG9wIHBpcGluZyBpbnRvIGl0LlxuICAvLyBob3dldmVyLCBkb24ndCBzdXBwcmVzcyB0aGUgdGhyb3dpbmcgYmVoYXZpb3IgZm9yIHRoaXMuXG4gIGZ1bmN0aW9uIG9uZXJyb3IoZXIpIHtcbiAgICBkZWJ1Zygnb25lcnJvcicsIGVyKTtcbiAgICB1bnBpcGUoKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIG9uZXJyb3IpO1xuICAgIGlmIChFRWxpc3RlbmVyQ291bnQoZGVzdCwgJ2Vycm9yJykgPT09IDApIGRlc3QuZW1pdCgnZXJyb3InLCBlcik7XG4gIH1cblxuICAvLyBNYWtlIHN1cmUgb3VyIGVycm9yIGhhbmRsZXIgaXMgYXR0YWNoZWQgYmVmb3JlIHVzZXJsYW5kIG9uZXMuXG4gIHByZXBlbmRMaXN0ZW5lcihkZXN0LCAnZXJyb3InLCBvbmVycm9yKTtcblxuICAvLyBCb3RoIGNsb3NlIGFuZCBmaW5pc2ggc2hvdWxkIHRyaWdnZXIgdW5waXBlLCBidXQgb25seSBvbmNlLlxuICBmdW5jdGlvbiBvbmNsb3NlKCkge1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2ZpbmlzaCcsIG9uZmluaXNoKTtcbiAgICB1bnBpcGUoKTtcbiAgfVxuICBkZXN0Lm9uY2UoJ2Nsb3NlJywgb25jbG9zZSk7XG4gIGZ1bmN0aW9uIG9uZmluaXNoKCkge1xuICAgIGRlYnVnKCdvbmZpbmlzaCcpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2Nsb3NlJywgb25jbG9zZSk7XG4gICAgdW5waXBlKCk7XG4gIH1cbiAgZGVzdC5vbmNlKCdmaW5pc2gnLCBvbmZpbmlzaCk7XG5cbiAgZnVuY3Rpb24gdW5waXBlKCkge1xuICAgIGRlYnVnKCd1bnBpcGUnKTtcbiAgICBzcmMudW5waXBlKGRlc3QpO1xuICB9XG5cbiAgLy8gdGVsbCB0aGUgZGVzdCB0aGF0IGl0J3MgYmVpbmcgcGlwZWQgdG9cbiAgZGVzdC5lbWl0KCdwaXBlJywgc3JjKTtcblxuICAvLyBzdGFydCB0aGUgZmxvdyBpZiBpdCBoYXNuJ3QgYmVlbiBzdGFydGVkIGFscmVhZHkuXG4gIGlmICghc3RhdGUuZmxvd2luZykge1xuICAgIGRlYnVnKCdwaXBlIHJlc3VtZScpO1xuICAgIHNyYy5yZXN1bWUoKTtcbiAgfVxuXG4gIHJldHVybiBkZXN0O1xufTtcblxuZnVuY3Rpb24gcGlwZU9uRHJhaW4oc3JjKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHN0YXRlID0gc3JjLl9yZWFkYWJsZVN0YXRlO1xuICAgIGRlYnVnKCdwaXBlT25EcmFpbicsIHN0YXRlLmF3YWl0RHJhaW4pO1xuICAgIGlmIChzdGF0ZS5hd2FpdERyYWluKSBzdGF0ZS5hd2FpdERyYWluLS07XG4gICAgaWYgKHN0YXRlLmF3YWl0RHJhaW4gPT09IDAgJiYgRUVsaXN0ZW5lckNvdW50KHNyYywgJ2RhdGEnKSkge1xuICAgICAgc3RhdGUuZmxvd2luZyA9IHRydWU7XG4gICAgICBmbG93KHNyYyk7XG4gICAgfVxuICB9O1xufVxuXG5SZWFkYWJsZS5wcm90b3R5cGUudW5waXBlID0gZnVuY3Rpb24gKGRlc3QpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgdmFyIHVucGlwZUluZm8gPSB7IGhhc1VucGlwZWQ6IGZhbHNlIH07XG5cbiAgLy8gaWYgd2UncmUgbm90IHBpcGluZyBhbnl3aGVyZSwgdGhlbiBkbyBub3RoaW5nLlxuICBpZiAoc3RhdGUucGlwZXNDb3VudCA9PT0gMCkgcmV0dXJuIHRoaXM7XG5cbiAgLy8ganVzdCBvbmUgZGVzdGluYXRpb24uICBtb3N0IGNvbW1vbiBjYXNlLlxuICBpZiAoc3RhdGUucGlwZXNDb3VudCA9PT0gMSkge1xuICAgIC8vIHBhc3NlZCBpbiBvbmUsIGJ1dCBpdCdzIG5vdCB0aGUgcmlnaHQgb25lLlxuICAgIGlmIChkZXN0ICYmIGRlc3QgIT09IHN0YXRlLnBpcGVzKSByZXR1cm4gdGhpcztcblxuICAgIGlmICghZGVzdCkgZGVzdCA9IHN0YXRlLnBpcGVzO1xuXG4gICAgLy8gZ290IGEgbWF0Y2guXG4gICAgc3RhdGUucGlwZXMgPSBudWxsO1xuICAgIHN0YXRlLnBpcGVzQ291bnQgPSAwO1xuICAgIHN0YXRlLmZsb3dpbmcgPSBmYWxzZTtcbiAgICBpZiAoZGVzdCkgZGVzdC5lbWl0KCd1bnBpcGUnLCB0aGlzLCB1bnBpcGVJbmZvKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8vIHNsb3cgY2FzZS4gbXVsdGlwbGUgcGlwZSBkZXN0aW5hdGlvbnMuXG5cbiAgaWYgKCFkZXN0KSB7XG4gICAgLy8gcmVtb3ZlIGFsbC5cbiAgICB2YXIgZGVzdHMgPSBzdGF0ZS5waXBlcztcbiAgICB2YXIgbGVuID0gc3RhdGUucGlwZXNDb3VudDtcbiAgICBzdGF0ZS5waXBlcyA9IG51bGw7XG4gICAgc3RhdGUucGlwZXNDb3VudCA9IDA7XG4gICAgc3RhdGUuZmxvd2luZyA9IGZhbHNlO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgZGVzdHNbaV0uZW1pdCgndW5waXBlJywgdGhpcywgdW5waXBlSW5mbyk7XG4gICAgfXJldHVybiB0aGlzO1xuICB9XG5cbiAgLy8gdHJ5IHRvIGZpbmQgdGhlIHJpZ2h0IG9uZS5cbiAgdmFyIGluZGV4ID0gaW5kZXhPZihzdGF0ZS5waXBlcywgZGVzdCk7XG4gIGlmIChpbmRleCA9PT0gLTEpIHJldHVybiB0aGlzO1xuXG4gIHN0YXRlLnBpcGVzLnNwbGljZShpbmRleCwgMSk7XG4gIHN0YXRlLnBpcGVzQ291bnQgLT0gMTtcbiAgaWYgKHN0YXRlLnBpcGVzQ291bnQgPT09IDEpIHN0YXRlLnBpcGVzID0gc3RhdGUucGlwZXNbMF07XG5cbiAgZGVzdC5lbWl0KCd1bnBpcGUnLCB0aGlzLCB1bnBpcGVJbmZvKTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8vIHNldCB1cCBkYXRhIGV2ZW50cyBpZiB0aGV5IGFyZSBhc2tlZCBmb3Jcbi8vIEVuc3VyZSByZWFkYWJsZSBsaXN0ZW5lcnMgZXZlbnR1YWxseSBnZXQgc29tZXRoaW5nXG5SZWFkYWJsZS5wcm90b3R5cGUub24gPSBmdW5jdGlvbiAoZXYsIGZuKSB7XG4gIHZhciByZXMgPSBTdHJlYW0ucHJvdG90eXBlLm9uLmNhbGwodGhpcywgZXYsIGZuKTtcblxuICBpZiAoZXYgPT09ICdkYXRhJykge1xuICAgIC8vIFN0YXJ0IGZsb3dpbmcgb24gbmV4dCB0aWNrIGlmIHN0cmVhbSBpc24ndCBleHBsaWNpdGx5IHBhdXNlZFxuICAgIGlmICh0aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmcgIT09IGZhbHNlKSB0aGlzLnJlc3VtZSgpO1xuICB9IGVsc2UgaWYgKGV2ID09PSAncmVhZGFibGUnKSB7XG4gICAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgICBpZiAoIXN0YXRlLmVuZEVtaXR0ZWQgJiYgIXN0YXRlLnJlYWRhYmxlTGlzdGVuaW5nKSB7XG4gICAgICBzdGF0ZS5yZWFkYWJsZUxpc3RlbmluZyA9IHN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7XG4gICAgICBzdGF0ZS5lbWl0dGVkUmVhZGFibGUgPSBmYWxzZTtcbiAgICAgIGlmICghc3RhdGUucmVhZGluZykge1xuICAgICAgICBwbmEubmV4dFRpY2soblJlYWRpbmdOZXh0VGljaywgdGhpcyk7XG4gICAgICB9IGVsc2UgaWYgKHN0YXRlLmxlbmd0aCkge1xuICAgICAgICBlbWl0UmVhZGFibGUodGhpcyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlcztcbn07XG5SZWFkYWJsZS5wcm90b3R5cGUuYWRkTGlzdGVuZXIgPSBSZWFkYWJsZS5wcm90b3R5cGUub247XG5cbmZ1bmN0aW9uIG5SZWFkaW5nTmV4dFRpY2soc2VsZikge1xuICBkZWJ1ZygncmVhZGFibGUgbmV4dHRpY2sgcmVhZCAwJyk7XG4gIHNlbGYucmVhZCgwKTtcbn1cblxuLy8gcGF1c2UoKSBhbmQgcmVzdW1lKCkgYXJlIHJlbW5hbnRzIG9mIHRoZSBsZWdhY3kgcmVhZGFibGUgc3RyZWFtIEFQSVxuLy8gSWYgdGhlIHVzZXIgdXNlcyB0aGVtLCB0aGVuIHN3aXRjaCBpbnRvIG9sZCBtb2RlLlxuUmVhZGFibGUucHJvdG90eXBlLnJlc3VtZSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgaWYgKCFzdGF0ZS5mbG93aW5nKSB7XG4gICAgZGVidWcoJ3Jlc3VtZScpO1xuICAgIHN0YXRlLmZsb3dpbmcgPSB0cnVlO1xuICAgIHJlc3VtZSh0aGlzLCBzdGF0ZSk7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5mdW5jdGlvbiByZXN1bWUoc3RyZWFtLCBzdGF0ZSkge1xuICBpZiAoIXN0YXRlLnJlc3VtZVNjaGVkdWxlZCkge1xuICAgIHN0YXRlLnJlc3VtZVNjaGVkdWxlZCA9IHRydWU7XG4gICAgcG5hLm5leHRUaWNrKHJlc3VtZV8sIHN0cmVhbSwgc3RhdGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlc3VtZV8oc3RyZWFtLCBzdGF0ZSkge1xuICBpZiAoIXN0YXRlLnJlYWRpbmcpIHtcbiAgICBkZWJ1ZygncmVzdW1lIHJlYWQgMCcpO1xuICAgIHN0cmVhbS5yZWFkKDApO1xuICB9XG5cbiAgc3RhdGUucmVzdW1lU2NoZWR1bGVkID0gZmFsc2U7XG4gIHN0YXRlLmF3YWl0RHJhaW4gPSAwO1xuICBzdHJlYW0uZW1pdCgncmVzdW1lJyk7XG4gIGZsb3coc3RyZWFtKTtcbiAgaWYgKHN0YXRlLmZsb3dpbmcgJiYgIXN0YXRlLnJlYWRpbmcpIHN0cmVhbS5yZWFkKDApO1xufVxuXG5SZWFkYWJsZS5wcm90b3R5cGUucGF1c2UgPSBmdW5jdGlvbiAoKSB7XG4gIGRlYnVnKCdjYWxsIHBhdXNlIGZsb3dpbmc9JWonLCB0aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmcpO1xuICBpZiAoZmFsc2UgIT09IHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZykge1xuICAgIGRlYnVnKCdwYXVzZScpO1xuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZyA9IGZhbHNlO1xuICAgIHRoaXMuZW1pdCgncGF1c2UnKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn07XG5cbmZ1bmN0aW9uIGZsb3coc3RyZWFtKSB7XG4gIHZhciBzdGF0ZSA9IHN0cmVhbS5fcmVhZGFibGVTdGF0ZTtcbiAgZGVidWcoJ2Zsb3cnLCBzdGF0ZS5mbG93aW5nKTtcbiAgd2hpbGUgKHN0YXRlLmZsb3dpbmcgJiYgc3RyZWFtLnJlYWQoKSAhPT0gbnVsbCkge31cbn1cblxuLy8gd3JhcCBhbiBvbGQtc3R5bGUgc3RyZWFtIGFzIHRoZSBhc3luYyBkYXRhIHNvdXJjZS5cbi8vIFRoaXMgaXMgKm5vdCogcGFydCBvZiB0aGUgcmVhZGFibGUgc3RyZWFtIGludGVyZmFjZS5cbi8vIEl0IGlzIGFuIHVnbHkgdW5mb3J0dW5hdGUgbWVzcyBvZiBoaXN0b3J5LlxuUmVhZGFibGUucHJvdG90eXBlLndyYXAgPSBmdW5jdGlvbiAoc3RyZWFtKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgdmFyIHBhdXNlZCA9IGZhbHNlO1xuXG4gIHN0cmVhbS5vbignZW5kJywgZnVuY3Rpb24gKCkge1xuICAgIGRlYnVnKCd3cmFwcGVkIGVuZCcpO1xuICAgIGlmIChzdGF0ZS5kZWNvZGVyICYmICFzdGF0ZS5lbmRlZCkge1xuICAgICAgdmFyIGNodW5rID0gc3RhdGUuZGVjb2Rlci5lbmQoKTtcbiAgICAgIGlmIChjaHVuayAmJiBjaHVuay5sZW5ndGgpIF90aGlzLnB1c2goY2h1bmspO1xuICAgIH1cblxuICAgIF90aGlzLnB1c2gobnVsbCk7XG4gIH0pO1xuXG4gIHN0cmVhbS5vbignZGF0YScsIGZ1bmN0aW9uIChjaHVuaykge1xuICAgIGRlYnVnKCd3cmFwcGVkIGRhdGEnKTtcbiAgICBpZiAoc3RhdGUuZGVjb2RlcikgY2h1bmsgPSBzdGF0ZS5kZWNvZGVyLndyaXRlKGNodW5rKTtcblxuICAgIC8vIGRvbid0IHNraXAgb3ZlciBmYWxzeSB2YWx1ZXMgaW4gb2JqZWN0TW9kZVxuICAgIGlmIChzdGF0ZS5vYmplY3RNb2RlICYmIChjaHVuayA9PT0gbnVsbCB8fCBjaHVuayA9PT0gdW5kZWZpbmVkKSkgcmV0dXJuO2Vsc2UgaWYgKCFzdGF0ZS5vYmplY3RNb2RlICYmICghY2h1bmsgfHwgIWNodW5rLmxlbmd0aCkpIHJldHVybjtcblxuICAgIHZhciByZXQgPSBfdGhpcy5wdXNoKGNodW5rKTtcbiAgICBpZiAoIXJldCkge1xuICAgICAgcGF1c2VkID0gdHJ1ZTtcbiAgICAgIHN0cmVhbS5wYXVzZSgpO1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gcHJveHkgYWxsIHRoZSBvdGhlciBtZXRob2RzLlxuICAvLyBpbXBvcnRhbnQgd2hlbiB3cmFwcGluZyBmaWx0ZXJzIGFuZCBkdXBsZXhlcy5cbiAgZm9yICh2YXIgaSBpbiBzdHJlYW0pIHtcbiAgICBpZiAodGhpc1tpXSA9PT0gdW5kZWZpbmVkICYmIHR5cGVvZiBzdHJlYW1baV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRoaXNbaV0gPSBmdW5jdGlvbiAobWV0aG9kKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIHN0cmVhbVttZXRob2RdLmFwcGx5KHN0cmVhbSwgYXJndW1lbnRzKTtcbiAgICAgICAgfTtcbiAgICAgIH0oaSk7XG4gICAgfVxuICB9XG5cbiAgLy8gcHJveHkgY2VydGFpbiBpbXBvcnRhbnQgZXZlbnRzLlxuICBmb3IgKHZhciBuID0gMDsgbiA8IGtQcm94eUV2ZW50cy5sZW5ndGg7IG4rKykge1xuICAgIHN0cmVhbS5vbihrUHJveHlFdmVudHNbbl0sIHRoaXMuZW1pdC5iaW5kKHRoaXMsIGtQcm94eUV2ZW50c1tuXSkpO1xuICB9XG5cbiAgLy8gd2hlbiB3ZSB0cnkgdG8gY29uc3VtZSBzb21lIG1vcmUgYnl0ZXMsIHNpbXBseSB1bnBhdXNlIHRoZVxuICAvLyB1bmRlcmx5aW5nIHN0cmVhbS5cbiAgdGhpcy5fcmVhZCA9IGZ1bmN0aW9uIChuKSB7XG4gICAgZGVidWcoJ3dyYXBwZWQgX3JlYWQnLCBuKTtcbiAgICBpZiAocGF1c2VkKSB7XG4gICAgICBwYXVzZWQgPSBmYWxzZTtcbiAgICAgIHN0cmVhbS5yZXN1bWUoKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoUmVhZGFibGUucHJvdG90eXBlLCAncmVhZGFibGVIaWdoV2F0ZXJNYXJrJywge1xuICAvLyBtYWtpbmcgaXQgZXhwbGljaXQgdGhpcyBwcm9wZXJ0eSBpcyBub3QgZW51bWVyYWJsZVxuICAvLyBiZWNhdXNlIG90aGVyd2lzZSBzb21lIHByb3RvdHlwZSBtYW5pcHVsYXRpb24gaW5cbiAgLy8gdXNlcmxhbmQgd2lsbCBmYWlsXG4gIGVudW1lcmFibGU6IGZhbHNlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5fcmVhZGFibGVTdGF0ZS5oaWdoV2F0ZXJNYXJrO1xuICB9XG59KTtcblxuLy8gZXhwb3NlZCBmb3IgdGVzdGluZyBwdXJwb3NlcyBvbmx5LlxuUmVhZGFibGUuX2Zyb21MaXN0ID0gZnJvbUxpc3Q7XG5cbi8vIFBsdWNrIG9mZiBuIGJ5dGVzIGZyb20gYW4gYXJyYXkgb2YgYnVmZmVycy5cbi8vIExlbmd0aCBpcyB0aGUgY29tYmluZWQgbGVuZ3RocyBvZiBhbGwgdGhlIGJ1ZmZlcnMgaW4gdGhlIGxpc3QuXG4vLyBUaGlzIGZ1bmN0aW9uIGlzIGRlc2lnbmVkIHRvIGJlIGlubGluYWJsZSwgc28gcGxlYXNlIHRha2UgY2FyZSB3aGVuIG1ha2luZ1xuLy8gY2hhbmdlcyB0byB0aGUgZnVuY3Rpb24gYm9keS5cbmZ1bmN0aW9uIGZyb21MaXN0KG4sIHN0YXRlKSB7XG4gIC8vIG5vdGhpbmcgYnVmZmVyZWRcbiAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCkgcmV0dXJuIG51bGw7XG5cbiAgdmFyIHJldDtcbiAgaWYgKHN0YXRlLm9iamVjdE1vZGUpIHJldCA9IHN0YXRlLmJ1ZmZlci5zaGlmdCgpO2Vsc2UgaWYgKCFuIHx8IG4gPj0gc3RhdGUubGVuZ3RoKSB7XG4gICAgLy8gcmVhZCBpdCBhbGwsIHRydW5jYXRlIHRoZSBsaXN0XG4gICAgaWYgKHN0YXRlLmRlY29kZXIpIHJldCA9IHN0YXRlLmJ1ZmZlci5qb2luKCcnKTtlbHNlIGlmIChzdGF0ZS5idWZmZXIubGVuZ3RoID09PSAxKSByZXQgPSBzdGF0ZS5idWZmZXIuaGVhZC5kYXRhO2Vsc2UgcmV0ID0gc3RhdGUuYnVmZmVyLmNvbmNhdChzdGF0ZS5sZW5ndGgpO1xuICAgIHN0YXRlLmJ1ZmZlci5jbGVhcigpO1xuICB9IGVsc2Uge1xuICAgIC8vIHJlYWQgcGFydCBvZiBsaXN0XG4gICAgcmV0ID0gZnJvbUxpc3RQYXJ0aWFsKG4sIHN0YXRlLmJ1ZmZlciwgc3RhdGUuZGVjb2Rlcik7XG4gIH1cblxuICByZXR1cm4gcmV0O1xufVxuXG4vLyBFeHRyYWN0cyBvbmx5IGVub3VnaCBidWZmZXJlZCBkYXRhIHRvIHNhdGlzZnkgdGhlIGFtb3VudCByZXF1ZXN0ZWQuXG4vLyBUaGlzIGZ1bmN0aW9uIGlzIGRlc2lnbmVkIHRvIGJlIGlubGluYWJsZSwgc28gcGxlYXNlIHRha2UgY2FyZSB3aGVuIG1ha2luZ1xuLy8gY2hhbmdlcyB0byB0aGUgZnVuY3Rpb24gYm9keS5cbmZ1bmN0aW9uIGZyb21MaXN0UGFydGlhbChuLCBsaXN0LCBoYXNTdHJpbmdzKSB7XG4gIHZhciByZXQ7XG4gIGlmIChuIDwgbGlzdC5oZWFkLmRhdGEubGVuZ3RoKSB7XG4gICAgLy8gc2xpY2UgaXMgdGhlIHNhbWUgZm9yIGJ1ZmZlcnMgYW5kIHN0cmluZ3NcbiAgICByZXQgPSBsaXN0LmhlYWQuZGF0YS5zbGljZSgwLCBuKTtcbiAgICBsaXN0LmhlYWQuZGF0YSA9IGxpc3QuaGVhZC5kYXRhLnNsaWNlKG4pO1xuICB9IGVsc2UgaWYgKG4gPT09IGxpc3QuaGVhZC5kYXRhLmxlbmd0aCkge1xuICAgIC8vIGZpcnN0IGNodW5rIGlzIGEgcGVyZmVjdCBtYXRjaFxuICAgIHJldCA9IGxpc3Quc2hpZnQoKTtcbiAgfSBlbHNlIHtcbiAgICAvLyByZXN1bHQgc3BhbnMgbW9yZSB0aGFuIG9uZSBidWZmZXJcbiAgICByZXQgPSBoYXNTdHJpbmdzID8gY29weUZyb21CdWZmZXJTdHJpbmcobiwgbGlzdCkgOiBjb3B5RnJvbUJ1ZmZlcihuLCBsaXN0KTtcbiAgfVxuICByZXR1cm4gcmV0O1xufVxuXG4vLyBDb3BpZXMgYSBzcGVjaWZpZWQgYW1vdW50IG9mIGNoYXJhY3RlcnMgZnJvbSB0aGUgbGlzdCBvZiBidWZmZXJlZCBkYXRhXG4vLyBjaHVua3MuXG4vLyBUaGlzIGZ1bmN0aW9uIGlzIGRlc2lnbmVkIHRvIGJlIGlubGluYWJsZSwgc28gcGxlYXNlIHRha2UgY2FyZSB3aGVuIG1ha2luZ1xuLy8gY2hhbmdlcyB0byB0aGUgZnVuY3Rpb24gYm9keS5cbmZ1bmN0aW9uIGNvcHlGcm9tQnVmZmVyU3RyaW5nKG4sIGxpc3QpIHtcbiAgdmFyIHAgPSBsaXN0LmhlYWQ7XG4gIHZhciBjID0gMTtcbiAgdmFyIHJldCA9IHAuZGF0YTtcbiAgbiAtPSByZXQubGVuZ3RoO1xuICB3aGlsZSAocCA9IHAubmV4dCkge1xuICAgIHZhciBzdHIgPSBwLmRhdGE7XG4gICAgdmFyIG5iID0gbiA+IHN0ci5sZW5ndGggPyBzdHIubGVuZ3RoIDogbjtcbiAgICBpZiAobmIgPT09IHN0ci5sZW5ndGgpIHJldCArPSBzdHI7ZWxzZSByZXQgKz0gc3RyLnNsaWNlKDAsIG4pO1xuICAgIG4gLT0gbmI7XG4gICAgaWYgKG4gPT09IDApIHtcbiAgICAgIGlmIChuYiA9PT0gc3RyLmxlbmd0aCkge1xuICAgICAgICArK2M7XG4gICAgICAgIGlmIChwLm5leHQpIGxpc3QuaGVhZCA9IHAubmV4dDtlbHNlIGxpc3QuaGVhZCA9IGxpc3QudGFpbCA9IG51bGw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsaXN0LmhlYWQgPSBwO1xuICAgICAgICBwLmRhdGEgPSBzdHIuc2xpY2UobmIpO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgfVxuICAgICsrYztcbiAgfVxuICBsaXN0Lmxlbmd0aCAtPSBjO1xuICByZXR1cm4gcmV0O1xufVxuXG4vLyBDb3BpZXMgYSBzcGVjaWZpZWQgYW1vdW50IG9mIGJ5dGVzIGZyb20gdGhlIGxpc3Qgb2YgYnVmZmVyZWQgZGF0YSBjaHVua3MuXG4vLyBUaGlzIGZ1bmN0aW9uIGlzIGRlc2lnbmVkIHRvIGJlIGlubGluYWJsZSwgc28gcGxlYXNlIHRha2UgY2FyZSB3aGVuIG1ha2luZ1xuLy8gY2hhbmdlcyB0byB0aGUgZnVuY3Rpb24gYm9keS5cbmZ1bmN0aW9uIGNvcHlGcm9tQnVmZmVyKG4sIGxpc3QpIHtcbiAgdmFyIHJldCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShuKTtcbiAgdmFyIHAgPSBsaXN0LmhlYWQ7XG4gIHZhciBjID0gMTtcbiAgcC5kYXRhLmNvcHkocmV0KTtcbiAgbiAtPSBwLmRhdGEubGVuZ3RoO1xuICB3aGlsZSAocCA9IHAubmV4dCkge1xuICAgIHZhciBidWYgPSBwLmRhdGE7XG4gICAgdmFyIG5iID0gbiA+IGJ1Zi5sZW5ndGggPyBidWYubGVuZ3RoIDogbjtcbiAgICBidWYuY29weShyZXQsIHJldC5sZW5ndGggLSBuLCAwLCBuYik7XG4gICAgbiAtPSBuYjtcbiAgICBpZiAobiA9PT0gMCkge1xuICAgICAgaWYgKG5iID09PSBidWYubGVuZ3RoKSB7XG4gICAgICAgICsrYztcbiAgICAgICAgaWYgKHAubmV4dCkgbGlzdC5oZWFkID0gcC5uZXh0O2Vsc2UgbGlzdC5oZWFkID0gbGlzdC50YWlsID0gbnVsbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxpc3QuaGVhZCA9IHA7XG4gICAgICAgIHAuZGF0YSA9IGJ1Zi5zbGljZShuYik7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgKytjO1xuICB9XG4gIGxpc3QubGVuZ3RoIC09IGM7XG4gIHJldHVybiByZXQ7XG59XG5cbmZ1bmN0aW9uIGVuZFJlYWRhYmxlKHN0cmVhbSkge1xuICB2YXIgc3RhdGUgPSBzdHJlYW0uX3JlYWRhYmxlU3RhdGU7XG5cbiAgLy8gSWYgd2UgZ2V0IGhlcmUgYmVmb3JlIGNvbnN1bWluZyBhbGwgdGhlIGJ5dGVzLCB0aGVuIHRoYXQgaXMgYVxuICAvLyBidWcgaW4gbm9kZS4gIFNob3VsZCBuZXZlciBoYXBwZW4uXG4gIGlmIChzdGF0ZS5sZW5ndGggPiAwKSB0aHJvdyBuZXcgRXJyb3IoJ1wiZW5kUmVhZGFibGUoKVwiIGNhbGxlZCBvbiBub24tZW1wdHkgc3RyZWFtJyk7XG5cbiAgaWYgKCFzdGF0ZS5lbmRFbWl0dGVkKSB7XG4gICAgc3RhdGUuZW5kZWQgPSB0cnVlO1xuICAgIHBuYS5uZXh0VGljayhlbmRSZWFkYWJsZU5ULCBzdGF0ZSwgc3RyZWFtKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBlbmRSZWFkYWJsZU5UKHN0YXRlLCBzdHJlYW0pIHtcbiAgLy8gQ2hlY2sgdGhhdCB3ZSBkaWRuJ3QgZ2V0IG9uZSBsYXN0IHVuc2hpZnQuXG4gIGlmICghc3RhdGUuZW5kRW1pdHRlZCAmJiBzdGF0ZS5sZW5ndGggPT09IDApIHtcbiAgICBzdGF0ZS5lbmRFbWl0dGVkID0gdHJ1ZTtcbiAgICBzdHJlYW0ucmVhZGFibGUgPSBmYWxzZTtcbiAgICBzdHJlYW0uZW1pdCgnZW5kJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5kZXhPZih4cywgeCkge1xuICBmb3IgKHZhciBpID0gMCwgbCA9IHhzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGlmICh4c1tpXSA9PT0geCkgcmV0dXJuIGk7XG4gIH1cbiAgcmV0dXJuIC0xO1xufSIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xuXG52YXIgcG5hID0gcmVxdWlyZSgncHJvY2Vzcy1uZXh0aWNrLWFyZ3MnKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vLyB1bmRvY3VtZW50ZWQgY2IoKSBBUEksIG5lZWRlZCBmb3IgY29yZSwgbm90IGZvciBwdWJsaWMgQVBJXG5mdW5jdGlvbiBkZXN0cm95KGVyciwgY2IpIHtcbiAgdmFyIF90aGlzID0gdGhpcztcblxuICB2YXIgcmVhZGFibGVEZXN0cm95ZWQgPSB0aGlzLl9yZWFkYWJsZVN0YXRlICYmIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkO1xuICB2YXIgd3JpdGFibGVEZXN0cm95ZWQgPSB0aGlzLl93cml0YWJsZVN0YXRlICYmIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkO1xuXG4gIGlmIChyZWFkYWJsZURlc3Ryb3llZCB8fCB3cml0YWJsZURlc3Ryb3llZCkge1xuICAgIGlmIChjYikge1xuICAgICAgY2IoZXJyKTtcbiAgICB9IGVsc2UgaWYgKGVyciAmJiAoIXRoaXMuX3dyaXRhYmxlU3RhdGUgfHwgIXRoaXMuX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkKSkge1xuICAgICAgcG5hLm5leHRUaWNrKGVtaXRFcnJvck5ULCB0aGlzLCBlcnIpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8vIHdlIHNldCBkZXN0cm95ZWQgdG8gdHJ1ZSBiZWZvcmUgZmlyaW5nIGVycm9yIGNhbGxiYWNrcyBpbiBvcmRlclxuICAvLyB0byBtYWtlIGl0IHJlLWVudHJhbmNlIHNhZmUgaW4gY2FzZSBkZXN0cm95KCkgaXMgY2FsbGVkIHdpdGhpbiBjYWxsYmFja3NcblxuICBpZiAodGhpcy5fcmVhZGFibGVTdGF0ZSkge1xuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkID0gdHJ1ZTtcbiAgfVxuXG4gIC8vIGlmIHRoaXMgaXMgYSBkdXBsZXggc3RyZWFtIG1hcmsgdGhlIHdyaXRhYmxlIHBhcnQgYXMgZGVzdHJveWVkIGFzIHdlbGxcbiAgaWYgKHRoaXMuX3dyaXRhYmxlU3RhdGUpIHtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZCA9IHRydWU7XG4gIH1cblxuICB0aGlzLl9kZXN0cm95KGVyciB8fCBudWxsLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgaWYgKCFjYiAmJiBlcnIpIHtcbiAgICAgIHBuYS5uZXh0VGljayhlbWl0RXJyb3JOVCwgX3RoaXMsIGVycik7XG4gICAgICBpZiAoX3RoaXMuX3dyaXRhYmxlU3RhdGUpIHtcbiAgICAgICAgX3RoaXMuX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGNiKSB7XG4gICAgICBjYihlcnIpO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIHVuZGVzdHJveSgpIHtcbiAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUpIHtcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZCA9IGZhbHNlO1xuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUucmVhZGluZyA9IGZhbHNlO1xuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZW5kZWQgPSBmYWxzZTtcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmVuZEVtaXR0ZWQgPSBmYWxzZTtcbiAgfVxuXG4gIGlmICh0aGlzLl93cml0YWJsZVN0YXRlKSB7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQgPSBmYWxzZTtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmVuZGVkID0gZmFsc2U7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5lbmRpbmcgPSBmYWxzZTtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmZpbmlzaGVkID0gZmFsc2U7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWQgPSBmYWxzZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBlbWl0RXJyb3JOVChzZWxmLCBlcnIpIHtcbiAgc2VsZi5lbWl0KCdlcnJvcicsIGVycik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBkZXN0cm95OiBkZXN0cm95LFxuICB1bmRlc3Ryb3k6IHVuZGVzdHJveVxufTsiLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuLy8gYSB0cmFuc2Zvcm0gc3RyZWFtIGlzIGEgcmVhZGFibGUvd3JpdGFibGUgc3RyZWFtIHdoZXJlIHlvdSBkb1xuLy8gc29tZXRoaW5nIHdpdGggdGhlIGRhdGEuICBTb21ldGltZXMgaXQncyBjYWxsZWQgYSBcImZpbHRlclwiLFxuLy8gYnV0IHRoYXQncyBub3QgYSBncmVhdCBuYW1lIGZvciBpdCwgc2luY2UgdGhhdCBpbXBsaWVzIGEgdGhpbmcgd2hlcmVcbi8vIHNvbWUgYml0cyBwYXNzIHRocm91Z2gsIGFuZCBvdGhlcnMgYXJlIHNpbXBseSBpZ25vcmVkLiAgKFRoYXQgd291bGRcbi8vIGJlIGEgdmFsaWQgZXhhbXBsZSBvZiBhIHRyYW5zZm9ybSwgb2YgY291cnNlLilcbi8vXG4vLyBXaGlsZSB0aGUgb3V0cHV0IGlzIGNhdXNhbGx5IHJlbGF0ZWQgdG8gdGhlIGlucHV0LCBpdCdzIG5vdCBhXG4vLyBuZWNlc3NhcmlseSBzeW1tZXRyaWMgb3Igc3luY2hyb25vdXMgdHJhbnNmb3JtYXRpb24uICBGb3IgZXhhbXBsZSxcbi8vIGEgemxpYiBzdHJlYW0gbWlnaHQgdGFrZSBtdWx0aXBsZSBwbGFpbi10ZXh0IHdyaXRlcygpLCBhbmQgdGhlblxuLy8gZW1pdCBhIHNpbmdsZSBjb21wcmVzc2VkIGNodW5rIHNvbWUgdGltZSBpbiB0aGUgZnV0dXJlLlxuLy9cbi8vIEhlcmUncyBob3cgdGhpcyB3b3Jrczpcbi8vXG4vLyBUaGUgVHJhbnNmb3JtIHN0cmVhbSBoYXMgYWxsIHRoZSBhc3BlY3RzIG9mIHRoZSByZWFkYWJsZSBhbmQgd3JpdGFibGVcbi8vIHN0cmVhbSBjbGFzc2VzLiAgV2hlbiB5b3Ugd3JpdGUoY2h1bmspLCB0aGF0IGNhbGxzIF93cml0ZShjaHVuayxjYilcbi8vIGludGVybmFsbHksIGFuZCByZXR1cm5zIGZhbHNlIGlmIHRoZXJlJ3MgYSBsb3Qgb2YgcGVuZGluZyB3cml0ZXNcbi8vIGJ1ZmZlcmVkIHVwLiAgV2hlbiB5b3UgY2FsbCByZWFkKCksIHRoYXQgY2FsbHMgX3JlYWQobikgdW50aWxcbi8vIHRoZXJlJ3MgZW5vdWdoIHBlbmRpbmcgcmVhZGFibGUgZGF0YSBidWZmZXJlZCB1cC5cbi8vXG4vLyBJbiBhIHRyYW5zZm9ybSBzdHJlYW0sIHRoZSB3cml0dGVuIGRhdGEgaXMgcGxhY2VkIGluIGEgYnVmZmVyLiAgV2hlblxuLy8gX3JlYWQobikgaXMgY2FsbGVkLCBpdCB0cmFuc2Zvcm1zIHRoZSBxdWV1ZWQgdXAgZGF0YSwgY2FsbGluZyB0aGVcbi8vIGJ1ZmZlcmVkIF93cml0ZSBjYidzIGFzIGl0IGNvbnN1bWVzIGNodW5rcy4gIElmIGNvbnN1bWluZyBhIHNpbmdsZVxuLy8gd3JpdHRlbiBjaHVuayB3b3VsZCByZXN1bHQgaW4gbXVsdGlwbGUgb3V0cHV0IGNodW5rcywgdGhlbiB0aGUgZmlyc3Rcbi8vIG91dHB1dHRlZCBiaXQgY2FsbHMgdGhlIHJlYWRjYiwgYW5kIHN1YnNlcXVlbnQgY2h1bmtzIGp1c3QgZ28gaW50b1xuLy8gdGhlIHJlYWQgYnVmZmVyLCBhbmQgd2lsbCBjYXVzZSBpdCB0byBlbWl0ICdyZWFkYWJsZScgaWYgbmVjZXNzYXJ5LlxuLy9cbi8vIFRoaXMgd2F5LCBiYWNrLXByZXNzdXJlIGlzIGFjdHVhbGx5IGRldGVybWluZWQgYnkgdGhlIHJlYWRpbmcgc2lkZSxcbi8vIHNpbmNlIF9yZWFkIGhhcyB0byBiZSBjYWxsZWQgdG8gc3RhcnQgcHJvY2Vzc2luZyBhIG5ldyBjaHVuay4gIEhvd2V2ZXIsXG4vLyBhIHBhdGhvbG9naWNhbCBpbmZsYXRlIHR5cGUgb2YgdHJhbnNmb3JtIGNhbiBjYXVzZSBleGNlc3NpdmUgYnVmZmVyaW5nXG4vLyBoZXJlLiAgRm9yIGV4YW1wbGUsIGltYWdpbmUgYSBzdHJlYW0gd2hlcmUgZXZlcnkgYnl0ZSBvZiBpbnB1dCBpc1xuLy8gaW50ZXJwcmV0ZWQgYXMgYW4gaW50ZWdlciBmcm9tIDAtMjU1LCBhbmQgdGhlbiByZXN1bHRzIGluIHRoYXQgbWFueVxuLy8gYnl0ZXMgb2Ygb3V0cHV0LiAgV3JpdGluZyB0aGUgNCBieXRlcyB7ZmYsZmYsZmYsZmZ9IHdvdWxkIHJlc3VsdCBpblxuLy8gMWtiIG9mIGRhdGEgYmVpbmcgb3V0cHV0LiAgSW4gdGhpcyBjYXNlLCB5b3UgY291bGQgd3JpdGUgYSB2ZXJ5IHNtYWxsXG4vLyBhbW91bnQgb2YgaW5wdXQsIGFuZCBlbmQgdXAgd2l0aCBhIHZlcnkgbGFyZ2UgYW1vdW50IG9mIG91dHB1dC4gIEluXG4vLyBzdWNoIGEgcGF0aG9sb2dpY2FsIGluZmxhdGluZyBtZWNoYW5pc20sIHRoZXJlJ2QgYmUgbm8gd2F5IHRvIHRlbGxcbi8vIHRoZSBzeXN0ZW0gdG8gc3RvcCBkb2luZyB0aGUgdHJhbnNmb3JtLiAgQSBzaW5nbGUgNE1CIHdyaXRlIGNvdWxkXG4vLyBjYXVzZSB0aGUgc3lzdGVtIHRvIHJ1biBvdXQgb2YgbWVtb3J5LlxuLy9cbi8vIEhvd2V2ZXIsIGV2ZW4gaW4gc3VjaCBhIHBhdGhvbG9naWNhbCBjYXNlLCBvbmx5IGEgc2luZ2xlIHdyaXR0ZW4gY2h1bmtcbi8vIHdvdWxkIGJlIGNvbnN1bWVkLCBhbmQgdGhlbiB0aGUgcmVzdCB3b3VsZCB3YWl0ICh1bi10cmFuc2Zvcm1lZCkgdW50aWxcbi8vIHRoZSByZXN1bHRzIG9mIHRoZSBwcmV2aW91cyB0cmFuc2Zvcm1lZCBjaHVuayB3ZXJlIGNvbnN1bWVkLlxuXG4ndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gVHJhbnNmb3JtO1xuXG52YXIgRHVwbGV4ID0gcmVxdWlyZSgnLi9fc3RyZWFtX2R1cGxleCcpO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIHV0aWwgPSByZXF1aXJlKCdjb3JlLXV0aWwtaXMnKTtcbnV0aWwuaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbnV0aWwuaW5oZXJpdHMoVHJhbnNmb3JtLCBEdXBsZXgpO1xuXG5mdW5jdGlvbiBhZnRlclRyYW5zZm9ybShlciwgZGF0YSkge1xuICB2YXIgdHMgPSB0aGlzLl90cmFuc2Zvcm1TdGF0ZTtcbiAgdHMudHJhbnNmb3JtaW5nID0gZmFsc2U7XG5cbiAgdmFyIGNiID0gdHMud3JpdGVjYjtcblxuICBpZiAoIWNiKSB7XG4gICAgcmV0dXJuIHRoaXMuZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ3dyaXRlIGNhbGxiYWNrIGNhbGxlZCBtdWx0aXBsZSB0aW1lcycpKTtcbiAgfVxuXG4gIHRzLndyaXRlY2h1bmsgPSBudWxsO1xuICB0cy53cml0ZWNiID0gbnVsbDtcblxuICBpZiAoZGF0YSAhPSBudWxsKSAvLyBzaW5nbGUgZXF1YWxzIGNoZWNrIGZvciBib3RoIGBudWxsYCBhbmQgYHVuZGVmaW5lZGBcbiAgICB0aGlzLnB1c2goZGF0YSk7XG5cbiAgY2IoZXIpO1xuXG4gIHZhciBycyA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gIHJzLnJlYWRpbmcgPSBmYWxzZTtcbiAgaWYgKHJzLm5lZWRSZWFkYWJsZSB8fCBycy5sZW5ndGggPCBycy5oaWdoV2F0ZXJNYXJrKSB7XG4gICAgdGhpcy5fcmVhZChycy5oaWdoV2F0ZXJNYXJrKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBUcmFuc2Zvcm0ob3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgVHJhbnNmb3JtKSkgcmV0dXJuIG5ldyBUcmFuc2Zvcm0ob3B0aW9ucyk7XG5cbiAgRHVwbGV4LmNhbGwodGhpcywgb3B0aW9ucyk7XG5cbiAgdGhpcy5fdHJhbnNmb3JtU3RhdGUgPSB7XG4gICAgYWZ0ZXJUcmFuc2Zvcm06IGFmdGVyVHJhbnNmb3JtLmJpbmQodGhpcyksXG4gICAgbmVlZFRyYW5zZm9ybTogZmFsc2UsXG4gICAgdHJhbnNmb3JtaW5nOiBmYWxzZSxcbiAgICB3cml0ZWNiOiBudWxsLFxuICAgIHdyaXRlY2h1bms6IG51bGwsXG4gICAgd3JpdGVlbmNvZGluZzogbnVsbFxuICB9O1xuXG4gIC8vIHN0YXJ0IG91dCBhc2tpbmcgZm9yIGEgcmVhZGFibGUgZXZlbnQgb25jZSBkYXRhIGlzIHRyYW5zZm9ybWVkLlxuICB0aGlzLl9yZWFkYWJsZVN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7XG5cbiAgLy8gd2UgaGF2ZSBpbXBsZW1lbnRlZCB0aGUgX3JlYWQgbWV0aG9kLCBhbmQgZG9uZSB0aGUgb3RoZXIgdGhpbmdzXG4gIC8vIHRoYXQgUmVhZGFibGUgd2FudHMgYmVmb3JlIHRoZSBmaXJzdCBfcmVhZCBjYWxsLCBzbyB1bnNldCB0aGVcbiAgLy8gc3luYyBndWFyZCBmbGFnLlxuICB0aGlzLl9yZWFkYWJsZVN0YXRlLnN5bmMgPSBmYWxzZTtcblxuICBpZiAob3B0aW9ucykge1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy50cmFuc2Zvcm0gPT09ICdmdW5jdGlvbicpIHRoaXMuX3RyYW5zZm9ybSA9IG9wdGlvbnMudHJhbnNmb3JtO1xuXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLmZsdXNoID09PSAnZnVuY3Rpb24nKSB0aGlzLl9mbHVzaCA9IG9wdGlvbnMuZmx1c2g7XG4gIH1cblxuICAvLyBXaGVuIHRoZSB3cml0YWJsZSBzaWRlIGZpbmlzaGVzLCB0aGVuIGZsdXNoIG91dCBhbnl0aGluZyByZW1haW5pbmcuXG4gIHRoaXMub24oJ3ByZWZpbmlzaCcsIHByZWZpbmlzaCk7XG59XG5cbmZ1bmN0aW9uIHByZWZpbmlzaCgpIHtcbiAgdmFyIF90aGlzID0gdGhpcztcblxuICBpZiAodHlwZW9mIHRoaXMuX2ZsdXNoID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhpcy5fZmx1c2goZnVuY3Rpb24gKGVyLCBkYXRhKSB7XG4gICAgICBkb25lKF90aGlzLCBlciwgZGF0YSk7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgZG9uZSh0aGlzLCBudWxsLCBudWxsKTtcbiAgfVxufVxuXG5UcmFuc2Zvcm0ucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nKSB7XG4gIHRoaXMuX3RyYW5zZm9ybVN0YXRlLm5lZWRUcmFuc2Zvcm0gPSBmYWxzZTtcbiAgcmV0dXJuIER1cGxleC5wcm90b3R5cGUucHVzaC5jYWxsKHRoaXMsIGNodW5rLCBlbmNvZGluZyk7XG59O1xuXG4vLyBUaGlzIGlzIHRoZSBwYXJ0IHdoZXJlIHlvdSBkbyBzdHVmZiFcbi8vIG92ZXJyaWRlIHRoaXMgZnVuY3Rpb24gaW4gaW1wbGVtZW50YXRpb24gY2xhc3Nlcy5cbi8vICdjaHVuaycgaXMgYW4gaW5wdXQgY2h1bmsuXG4vL1xuLy8gQ2FsbCBgcHVzaChuZXdDaHVuaylgIHRvIHBhc3MgYWxvbmcgdHJhbnNmb3JtZWQgb3V0cHV0XG4vLyB0byB0aGUgcmVhZGFibGUgc2lkZS4gIFlvdSBtYXkgY2FsbCAncHVzaCcgemVybyBvciBtb3JlIHRpbWVzLlxuLy9cbi8vIENhbGwgYGNiKGVycilgIHdoZW4geW91IGFyZSBkb25lIHdpdGggdGhpcyBjaHVuay4gIElmIHlvdSBwYXNzXG4vLyBhbiBlcnJvciwgdGhlbiB0aGF0J2xsIHB1dCB0aGUgaHVydCBvbiB0aGUgd2hvbGUgb3BlcmF0aW9uLiAgSWYgeW91XG4vLyBuZXZlciBjYWxsIGNiKCksIHRoZW4geW91J2xsIG5ldmVyIGdldCBhbm90aGVyIGNodW5rLlxuVHJhbnNmb3JtLnByb3RvdHlwZS5fdHJhbnNmb3JtID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdfdHJhbnNmb3JtKCkgaXMgbm90IGltcGxlbWVudGVkJyk7XG59O1xuXG5UcmFuc2Zvcm0ucHJvdG90eXBlLl93cml0ZSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIHZhciB0cyA9IHRoaXMuX3RyYW5zZm9ybVN0YXRlO1xuICB0cy53cml0ZWNiID0gY2I7XG4gIHRzLndyaXRlY2h1bmsgPSBjaHVuaztcbiAgdHMud3JpdGVlbmNvZGluZyA9IGVuY29kaW5nO1xuICBpZiAoIXRzLnRyYW5zZm9ybWluZykge1xuICAgIHZhciBycyA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gICAgaWYgKHRzLm5lZWRUcmFuc2Zvcm0gfHwgcnMubmVlZFJlYWRhYmxlIHx8IHJzLmxlbmd0aCA8IHJzLmhpZ2hXYXRlck1hcmspIHRoaXMuX3JlYWQocnMuaGlnaFdhdGVyTWFyayk7XG4gIH1cbn07XG5cbi8vIERvZXNuJ3QgbWF0dGVyIHdoYXQgdGhlIGFyZ3MgYXJlIGhlcmUuXG4vLyBfdHJhbnNmb3JtIGRvZXMgYWxsIHRoZSB3b3JrLlxuLy8gVGhhdCB3ZSBnb3QgaGVyZSBtZWFucyB0aGF0IHRoZSByZWFkYWJsZSBzaWRlIHdhbnRzIG1vcmUgZGF0YS5cblRyYW5zZm9ybS5wcm90b3R5cGUuX3JlYWQgPSBmdW5jdGlvbiAobikge1xuICB2YXIgdHMgPSB0aGlzLl90cmFuc2Zvcm1TdGF0ZTtcblxuICBpZiAodHMud3JpdGVjaHVuayAhPT0gbnVsbCAmJiB0cy53cml0ZWNiICYmICF0cy50cmFuc2Zvcm1pbmcpIHtcbiAgICB0cy50cmFuc2Zvcm1pbmcgPSB0cnVlO1xuICAgIHRoaXMuX3RyYW5zZm9ybSh0cy53cml0ZWNodW5rLCB0cy53cml0ZWVuY29kaW5nLCB0cy5hZnRlclRyYW5zZm9ybSk7XG4gIH0gZWxzZSB7XG4gICAgLy8gbWFyayB0aGF0IHdlIG5lZWQgYSB0cmFuc2Zvcm0sIHNvIHRoYXQgYW55IGRhdGEgdGhhdCBjb21lcyBpblxuICAgIC8vIHdpbGwgZ2V0IHByb2Nlc3NlZCwgbm93IHRoYXQgd2UndmUgYXNrZWQgZm9yIGl0LlxuICAgIHRzLm5lZWRUcmFuc2Zvcm0gPSB0cnVlO1xuICB9XG59O1xuXG5UcmFuc2Zvcm0ucHJvdG90eXBlLl9kZXN0cm95ID0gZnVuY3Rpb24gKGVyciwgY2IpIHtcbiAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgRHVwbGV4LnByb3RvdHlwZS5fZGVzdHJveS5jYWxsKHRoaXMsIGVyciwgZnVuY3Rpb24gKGVycjIpIHtcbiAgICBjYihlcnIyKTtcbiAgICBfdGhpczIuZW1pdCgnY2xvc2UnKTtcbiAgfSk7XG59O1xuXG5mdW5jdGlvbiBkb25lKHN0cmVhbSwgZXIsIGRhdGEpIHtcbiAgaWYgKGVyKSByZXR1cm4gc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpO1xuXG4gIGlmIChkYXRhICE9IG51bGwpIC8vIHNpbmdsZSBlcXVhbHMgY2hlY2sgZm9yIGJvdGggYG51bGxgIGFuZCBgdW5kZWZpbmVkYFxuICAgIHN0cmVhbS5wdXNoKGRhdGEpO1xuXG4gIC8vIGlmIHRoZXJlJ3Mgbm90aGluZyBpbiB0aGUgd3JpdGUgYnVmZmVyLCB0aGVuIHRoYXQgbWVhbnNcbiAgLy8gdGhhdCBub3RoaW5nIG1vcmUgd2lsbCBldmVyIGJlIHByb3ZpZGVkXG4gIGlmIChzdHJlYW0uX3dyaXRhYmxlU3RhdGUubGVuZ3RoKSB0aHJvdyBuZXcgRXJyb3IoJ0NhbGxpbmcgdHJhbnNmb3JtIGRvbmUgd2hlbiB3cy5sZW5ndGggIT0gMCcpO1xuXG4gIGlmIChzdHJlYW0uX3RyYW5zZm9ybVN0YXRlLnRyYW5zZm9ybWluZykgdGhyb3cgbmV3IEVycm9yKCdDYWxsaW5nIHRyYW5zZm9ybSBkb25lIHdoZW4gc3RpbGwgdHJhbnNmb3JtaW5nJyk7XG5cbiAgcmV0dXJuIHN0cmVhbS5wdXNoKG51bGwpO1xufSIsIi8qKlxuICogQSBKYXZhU2NyaXB0IGltcGxlbWVudGF0aW9uIG9mIHRoZSBTZWN1cmUgSGFzaCBBbGdvcml0aG0sIFNIQS0yNTYsIGFzIGRlZmluZWRcbiAqIGluIEZJUFMgMTgwLTJcbiAqIFZlcnNpb24gMi4yLWJldGEgQ29weXJpZ2h0IEFuZ2VsIE1hcmluLCBQYXVsIEpvaG5zdG9uIDIwMDAgLSAyMDA5LlxuICogT3RoZXIgY29udHJpYnV0b3JzOiBHcmVnIEhvbHQsIEFuZHJldyBLZXBlcnQsIFlkbmFyLCBMb3N0aW5ldFxuICpcbiAqL1xuXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgSGFzaCA9IHJlcXVpcmUoJy4vaGFzaCcpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcblxudmFyIEsgPSBbXG4gIDB4NDI4QTJGOTgsIDB4NzEzNzQ0OTEsIDB4QjVDMEZCQ0YsIDB4RTlCNURCQTUsXG4gIDB4Mzk1NkMyNUIsIDB4NTlGMTExRjEsIDB4OTIzRjgyQTQsIDB4QUIxQzVFRDUsXG4gIDB4RDgwN0FBOTgsIDB4MTI4MzVCMDEsIDB4MjQzMTg1QkUsIDB4NTUwQzdEQzMsXG4gIDB4NzJCRTVENzQsIDB4ODBERUIxRkUsIDB4OUJEQzA2QTcsIDB4QzE5QkYxNzQsXG4gIDB4RTQ5QjY5QzEsIDB4RUZCRTQ3ODYsIDB4MEZDMTlEQzYsIDB4MjQwQ0ExQ0MsXG4gIDB4MkRFOTJDNkYsIDB4NEE3NDg0QUEsIDB4NUNCMEE5REMsIDB4NzZGOTg4REEsXG4gIDB4OTgzRTUxNTIsIDB4QTgzMUM2NkQsIDB4QjAwMzI3QzgsIDB4QkY1OTdGQzcsXG4gIDB4QzZFMDBCRjMsIDB4RDVBNzkxNDcsIDB4MDZDQTYzNTEsIDB4MTQyOTI5NjcsXG4gIDB4MjdCNzBBODUsIDB4MkUxQjIxMzgsIDB4NEQyQzZERkMsIDB4NTMzODBEMTMsXG4gIDB4NjUwQTczNTQsIDB4NzY2QTBBQkIsIDB4ODFDMkM5MkUsIDB4OTI3MjJDODUsXG4gIDB4QTJCRkU4QTEsIDB4QTgxQTY2NEIsIDB4QzI0QjhCNzAsIDB4Qzc2QzUxQTMsXG4gIDB4RDE5MkU4MTksIDB4RDY5OTA2MjQsIDB4RjQwRTM1ODUsIDB4MTA2QUEwNzAsXG4gIDB4MTlBNEMxMTYsIDB4MUUzNzZDMDgsIDB4Mjc0ODc3NEMsIDB4MzRCMEJDQjUsXG4gIDB4MzkxQzBDQjMsIDB4NEVEOEFBNEEsIDB4NUI5Q0NBNEYsIDB4NjgyRTZGRjMsXG4gIDB4NzQ4RjgyRUUsIDB4NzhBNTYzNkYsIDB4ODRDODc4MTQsIDB4OENDNzAyMDgsXG4gIDB4OTBCRUZGRkEsIDB4QTQ1MDZDRUIsIDB4QkVGOUEzRjcsIDB4QzY3MTc4RjJcbl1cblxudmFyIFcgPSBuZXcgQXJyYXkoNjQpXG5cbmZ1bmN0aW9uIFNoYTI1NiAoKSB7XG4gIHRoaXMuaW5pdCgpXG5cbiAgdGhpcy5fdyA9IFcgLy8gbmV3IEFycmF5KDY0KVxuXG4gIEhhc2guY2FsbCh0aGlzLCA2NCwgNTYpXG59XG5cbmluaGVyaXRzKFNoYTI1NiwgSGFzaClcblxuU2hhMjU2LnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLl9hID0gMHg2YTA5ZTY2N1xuICB0aGlzLl9iID0gMHhiYjY3YWU4NVxuICB0aGlzLl9jID0gMHgzYzZlZjM3MlxuICB0aGlzLl9kID0gMHhhNTRmZjUzYVxuICB0aGlzLl9lID0gMHg1MTBlNTI3ZlxuICB0aGlzLl9mID0gMHg5YjA1Njg4Y1xuICB0aGlzLl9nID0gMHgxZjgzZDlhYlxuICB0aGlzLl9oID0gMHg1YmUwY2QxOVxuXG4gIHJldHVybiB0aGlzXG59XG5cbmZ1bmN0aW9uIGNoICh4LCB5LCB6KSB7XG4gIHJldHVybiB6IF4gKHggJiAoeSBeIHopKVxufVxuXG5mdW5jdGlvbiBtYWogKHgsIHksIHopIHtcbiAgcmV0dXJuICh4ICYgeSkgfCAoeiAmICh4IHwgeSkpXG59XG5cbmZ1bmN0aW9uIHNpZ21hMCAoeCkge1xuICByZXR1cm4gKHggPj4+IDIgfCB4IDw8IDMwKSBeICh4ID4+PiAxMyB8IHggPDwgMTkpIF4gKHggPj4+IDIyIHwgeCA8PCAxMClcbn1cblxuZnVuY3Rpb24gc2lnbWExICh4KSB7XG4gIHJldHVybiAoeCA+Pj4gNiB8IHggPDwgMjYpIF4gKHggPj4+IDExIHwgeCA8PCAyMSkgXiAoeCA+Pj4gMjUgfCB4IDw8IDcpXG59XG5cbmZ1bmN0aW9uIGdhbW1hMCAoeCkge1xuICByZXR1cm4gKHggPj4+IDcgfCB4IDw8IDI1KSBeICh4ID4+PiAxOCB8IHggPDwgMTQpIF4gKHggPj4+IDMpXG59XG5cbmZ1bmN0aW9uIGdhbW1hMSAoeCkge1xuICByZXR1cm4gKHggPj4+IDE3IHwgeCA8PCAxNSkgXiAoeCA+Pj4gMTkgfCB4IDw8IDEzKSBeICh4ID4+PiAxMClcbn1cblxuU2hhMjU2LnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKE0pIHtcbiAgdmFyIFcgPSB0aGlzLl93XG5cbiAgdmFyIGEgPSB0aGlzLl9hIHwgMFxuICB2YXIgYiA9IHRoaXMuX2IgfCAwXG4gIHZhciBjID0gdGhpcy5fYyB8IDBcbiAgdmFyIGQgPSB0aGlzLl9kIHwgMFxuICB2YXIgZSA9IHRoaXMuX2UgfCAwXG4gIHZhciBmID0gdGhpcy5fZiB8IDBcbiAgdmFyIGcgPSB0aGlzLl9nIHwgMFxuICB2YXIgaCA9IHRoaXMuX2ggfCAwXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCAxNjsgKytpKSBXW2ldID0gTS5yZWFkSW50MzJCRShpICogNClcbiAgZm9yICg7IGkgPCA2NDsgKytpKSBXW2ldID0gKGdhbW1hMShXW2kgLSAyXSkgKyBXW2kgLSA3XSArIGdhbW1hMChXW2kgLSAxNV0pICsgV1tpIC0gMTZdKSB8IDBcblxuICBmb3IgKHZhciBqID0gMDsgaiA8IDY0OyArK2opIHtcbiAgICB2YXIgVDEgPSAoaCArIHNpZ21hMShlKSArIGNoKGUsIGYsIGcpICsgS1tqXSArIFdbal0pIHwgMFxuICAgIHZhciBUMiA9IChzaWdtYTAoYSkgKyBtYWooYSwgYiwgYykpIHwgMFxuXG4gICAgaCA9IGdcbiAgICBnID0gZlxuICAgIGYgPSBlXG4gICAgZSA9IChkICsgVDEpIHwgMFxuICAgIGQgPSBjXG4gICAgYyA9IGJcbiAgICBiID0gYVxuICAgIGEgPSAoVDEgKyBUMikgfCAwXG4gIH1cblxuICB0aGlzLl9hID0gKGEgKyB0aGlzLl9hKSB8IDBcbiAgdGhpcy5fYiA9IChiICsgdGhpcy5fYikgfCAwXG4gIHRoaXMuX2MgPSAoYyArIHRoaXMuX2MpIHwgMFxuICB0aGlzLl9kID0gKGQgKyB0aGlzLl9kKSB8IDBcbiAgdGhpcy5fZSA9IChlICsgdGhpcy5fZSkgfCAwXG4gIHRoaXMuX2YgPSAoZiArIHRoaXMuX2YpIHwgMFxuICB0aGlzLl9nID0gKGcgKyB0aGlzLl9nKSB8IDBcbiAgdGhpcy5faCA9IChoICsgdGhpcy5faCkgfCAwXG59XG5cblNoYTI1Ni5wcm90b3R5cGUuX2hhc2ggPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBIID0gQnVmZmVyLmFsbG9jVW5zYWZlKDMyKVxuXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2EsIDApXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2IsIDQpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2MsIDgpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2QsIDEyKVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9lLCAxNilcbiAgSC53cml0ZUludDMyQkUodGhpcy5fZiwgMjApXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2csIDI0KVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9oLCAyOClcblxuICByZXR1cm4gSFxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFNoYTI1NlxuIiwidmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIEhhc2ggPSByZXF1aXJlKCcuL2hhc2gnKVxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG5cbnZhciBLID0gW1xuICAweDQyOGEyZjk4LCAweGQ3MjhhZTIyLCAweDcxMzc0NDkxLCAweDIzZWY2NWNkLFxuICAweGI1YzBmYmNmLCAweGVjNGQzYjJmLCAweGU5YjVkYmE1LCAweDgxODlkYmJjLFxuICAweDM5NTZjMjViLCAweGYzNDhiNTM4LCAweDU5ZjExMWYxLCAweGI2MDVkMDE5LFxuICAweDkyM2Y4MmE0LCAweGFmMTk0ZjliLCAweGFiMWM1ZWQ1LCAweGRhNmQ4MTE4LFxuICAweGQ4MDdhYTk4LCAweGEzMDMwMjQyLCAweDEyODM1YjAxLCAweDQ1NzA2ZmJlLFxuICAweDI0MzE4NWJlLCAweDRlZTRiMjhjLCAweDU1MGM3ZGMzLCAweGQ1ZmZiNGUyLFxuICAweDcyYmU1ZDc0LCAweGYyN2I4OTZmLCAweDgwZGViMWZlLCAweDNiMTY5NmIxLFxuICAweDliZGMwNmE3LCAweDI1YzcxMjM1LCAweGMxOWJmMTc0LCAweGNmNjkyNjk0LFxuICAweGU0OWI2OWMxLCAweDllZjE0YWQyLCAweGVmYmU0Nzg2LCAweDM4NGYyNWUzLFxuICAweDBmYzE5ZGM2LCAweDhiOGNkNWI1LCAweDI0MGNhMWNjLCAweDc3YWM5YzY1LFxuICAweDJkZTkyYzZmLCAweDU5MmIwMjc1LCAweDRhNzQ4NGFhLCAweDZlYTZlNDgzLFxuICAweDVjYjBhOWRjLCAweGJkNDFmYmQ0LCAweDc2Zjk4OGRhLCAweDgzMTE1M2I1LFxuICAweDk4M2U1MTUyLCAweGVlNjZkZmFiLCAweGE4MzFjNjZkLCAweDJkYjQzMjEwLFxuICAweGIwMDMyN2M4LCAweDk4ZmIyMTNmLCAweGJmNTk3ZmM3LCAweGJlZWYwZWU0LFxuICAweGM2ZTAwYmYzLCAweDNkYTg4ZmMyLCAweGQ1YTc5MTQ3LCAweDkzMGFhNzI1LFxuICAweDA2Y2E2MzUxLCAweGUwMDM4MjZmLCAweDE0MjkyOTY3LCAweDBhMGU2ZTcwLFxuICAweDI3YjcwYTg1LCAweDQ2ZDIyZmZjLCAweDJlMWIyMTM4LCAweDVjMjZjOTI2LFxuICAweDRkMmM2ZGZjLCAweDVhYzQyYWVkLCAweDUzMzgwZDEzLCAweDlkOTViM2RmLFxuICAweDY1MGE3MzU0LCAweDhiYWY2M2RlLCAweDc2NmEwYWJiLCAweDNjNzdiMmE4LFxuICAweDgxYzJjOTJlLCAweDQ3ZWRhZWU2LCAweDkyNzIyYzg1LCAweDE0ODIzNTNiLFxuICAweGEyYmZlOGExLCAweDRjZjEwMzY0LCAweGE4MWE2NjRiLCAweGJjNDIzMDAxLFxuICAweGMyNGI4YjcwLCAweGQwZjg5NzkxLCAweGM3NmM1MWEzLCAweDA2NTRiZTMwLFxuICAweGQxOTJlODE5LCAweGQ2ZWY1MjE4LCAweGQ2OTkwNjI0LCAweDU1NjVhOTEwLFxuICAweGY0MGUzNTg1LCAweDU3NzEyMDJhLCAweDEwNmFhMDcwLCAweDMyYmJkMWI4LFxuICAweDE5YTRjMTE2LCAweGI4ZDJkMGM4LCAweDFlMzc2YzA4LCAweDUxNDFhYjUzLFxuICAweDI3NDg3NzRjLCAweGRmOGVlYjk5LCAweDM0YjBiY2I1LCAweGUxOWI0OGE4LFxuICAweDM5MWMwY2IzLCAweGM1Yzk1YTYzLCAweDRlZDhhYTRhLCAweGUzNDE4YWNiLFxuICAweDViOWNjYTRmLCAweDc3NjNlMzczLCAweDY4MmU2ZmYzLCAweGQ2YjJiOGEzLFxuICAweDc0OGY4MmVlLCAweDVkZWZiMmZjLCAweDc4YTU2MzZmLCAweDQzMTcyZjYwLFxuICAweDg0Yzg3ODE0LCAweGExZjBhYjcyLCAweDhjYzcwMjA4LCAweDFhNjQzOWVjLFxuICAweDkwYmVmZmZhLCAweDIzNjMxZTI4LCAweGE0NTA2Y2ViLCAweGRlODJiZGU5LFxuICAweGJlZjlhM2Y3LCAweGIyYzY3OTE1LCAweGM2NzE3OGYyLCAweGUzNzI1MzJiLFxuICAweGNhMjczZWNlLCAweGVhMjY2MTljLCAweGQxODZiOGM3LCAweDIxYzBjMjA3LFxuICAweGVhZGE3ZGQ2LCAweGNkZTBlYjFlLCAweGY1N2Q0ZjdmLCAweGVlNmVkMTc4LFxuICAweDA2ZjA2N2FhLCAweDcyMTc2ZmJhLCAweDBhNjM3ZGM1LCAweGEyYzg5OGE2LFxuICAweDExM2Y5ODA0LCAweGJlZjkwZGFlLCAweDFiNzEwYjM1LCAweDEzMWM0NzFiLFxuICAweDI4ZGI3N2Y1LCAweDIzMDQ3ZDg0LCAweDMyY2FhYjdiLCAweDQwYzcyNDkzLFxuICAweDNjOWViZTBhLCAweDE1YzliZWJjLCAweDQzMWQ2N2M0LCAweDljMTAwZDRjLFxuICAweDRjYzVkNGJlLCAweGNiM2U0MmI2LCAweDU5N2YyOTljLCAweGZjNjU3ZTJhLFxuICAweDVmY2I2ZmFiLCAweDNhZDZmYWVjLCAweDZjNDQxOThjLCAweDRhNDc1ODE3XG5dXG5cbnZhciBXID0gbmV3IEFycmF5KDE2MClcblxuZnVuY3Rpb24gU2hhNTEyICgpIHtcbiAgdGhpcy5pbml0KClcbiAgdGhpcy5fdyA9IFdcblxuICBIYXNoLmNhbGwodGhpcywgMTI4LCAxMTIpXG59XG5cbmluaGVyaXRzKFNoYTUxMiwgSGFzaClcblxuU2hhNTEyLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLl9haCA9IDB4NmEwOWU2NjdcbiAgdGhpcy5fYmggPSAweGJiNjdhZTg1XG4gIHRoaXMuX2NoID0gMHgzYzZlZjM3MlxuICB0aGlzLl9kaCA9IDB4YTU0ZmY1M2FcbiAgdGhpcy5fZWggPSAweDUxMGU1MjdmXG4gIHRoaXMuX2ZoID0gMHg5YjA1Njg4Y1xuICB0aGlzLl9naCA9IDB4MWY4M2Q5YWJcbiAgdGhpcy5faGggPSAweDViZTBjZDE5XG5cbiAgdGhpcy5fYWwgPSAweGYzYmNjOTA4XG4gIHRoaXMuX2JsID0gMHg4NGNhYTczYlxuICB0aGlzLl9jbCA9IDB4ZmU5NGY4MmJcbiAgdGhpcy5fZGwgPSAweDVmMWQzNmYxXG4gIHRoaXMuX2VsID0gMHhhZGU2ODJkMVxuICB0aGlzLl9mbCA9IDB4MmIzZTZjMWZcbiAgdGhpcy5fZ2wgPSAweGZiNDFiZDZiXG4gIHRoaXMuX2hsID0gMHgxMzdlMjE3OVxuXG4gIHJldHVybiB0aGlzXG59XG5cbmZ1bmN0aW9uIENoICh4LCB5LCB6KSB7XG4gIHJldHVybiB6IF4gKHggJiAoeSBeIHopKVxufVxuXG5mdW5jdGlvbiBtYWogKHgsIHksIHopIHtcbiAgcmV0dXJuICh4ICYgeSkgfCAoeiAmICh4IHwgeSkpXG59XG5cbmZ1bmN0aW9uIHNpZ21hMCAoeCwgeGwpIHtcbiAgcmV0dXJuICh4ID4+PiAyOCB8IHhsIDw8IDQpIF4gKHhsID4+PiAyIHwgeCA8PCAzMCkgXiAoeGwgPj4+IDcgfCB4IDw8IDI1KVxufVxuXG5mdW5jdGlvbiBzaWdtYTEgKHgsIHhsKSB7XG4gIHJldHVybiAoeCA+Pj4gMTQgfCB4bCA8PCAxOCkgXiAoeCA+Pj4gMTggfCB4bCA8PCAxNCkgXiAoeGwgPj4+IDkgfCB4IDw8IDIzKVxufVxuXG5mdW5jdGlvbiBHYW1tYTAgKHgsIHhsKSB7XG4gIHJldHVybiAoeCA+Pj4gMSB8IHhsIDw8IDMxKSBeICh4ID4+PiA4IHwgeGwgPDwgMjQpIF4gKHggPj4+IDcpXG59XG5cbmZ1bmN0aW9uIEdhbW1hMGwgKHgsIHhsKSB7XG4gIHJldHVybiAoeCA+Pj4gMSB8IHhsIDw8IDMxKSBeICh4ID4+PiA4IHwgeGwgPDwgMjQpIF4gKHggPj4+IDcgfCB4bCA8PCAyNSlcbn1cblxuZnVuY3Rpb24gR2FtbWExICh4LCB4bCkge1xuICByZXR1cm4gKHggPj4+IDE5IHwgeGwgPDwgMTMpIF4gKHhsID4+PiAyOSB8IHggPDwgMykgXiAoeCA+Pj4gNilcbn1cblxuZnVuY3Rpb24gR2FtbWExbCAoeCwgeGwpIHtcbiAgcmV0dXJuICh4ID4+PiAxOSB8IHhsIDw8IDEzKSBeICh4bCA+Pj4gMjkgfCB4IDw8IDMpIF4gKHggPj4+IDYgfCB4bCA8PCAyNilcbn1cblxuZnVuY3Rpb24gZ2V0Q2FycnkgKGEsIGIpIHtcbiAgcmV0dXJuIChhID4+PiAwKSA8IChiID4+PiAwKSA/IDEgOiAwXG59XG5cblNoYTUxMi5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIChNKSB7XG4gIHZhciBXID0gdGhpcy5fd1xuXG4gIHZhciBhaCA9IHRoaXMuX2FoIHwgMFxuICB2YXIgYmggPSB0aGlzLl9iaCB8IDBcbiAgdmFyIGNoID0gdGhpcy5fY2ggfCAwXG4gIHZhciBkaCA9IHRoaXMuX2RoIHwgMFxuICB2YXIgZWggPSB0aGlzLl9laCB8IDBcbiAgdmFyIGZoID0gdGhpcy5fZmggfCAwXG4gIHZhciBnaCA9IHRoaXMuX2doIHwgMFxuICB2YXIgaGggPSB0aGlzLl9oaCB8IDBcblxuICB2YXIgYWwgPSB0aGlzLl9hbCB8IDBcbiAgdmFyIGJsID0gdGhpcy5fYmwgfCAwXG4gIHZhciBjbCA9IHRoaXMuX2NsIHwgMFxuICB2YXIgZGwgPSB0aGlzLl9kbCB8IDBcbiAgdmFyIGVsID0gdGhpcy5fZWwgfCAwXG4gIHZhciBmbCA9IHRoaXMuX2ZsIHwgMFxuICB2YXIgZ2wgPSB0aGlzLl9nbCB8IDBcbiAgdmFyIGhsID0gdGhpcy5faGwgfCAwXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCAzMjsgaSArPSAyKSB7XG4gICAgV1tpXSA9IE0ucmVhZEludDMyQkUoaSAqIDQpXG4gICAgV1tpICsgMV0gPSBNLnJlYWRJbnQzMkJFKGkgKiA0ICsgNClcbiAgfVxuICBmb3IgKDsgaSA8IDE2MDsgaSArPSAyKSB7XG4gICAgdmFyIHhoID0gV1tpIC0gMTUgKiAyXVxuICAgIHZhciB4bCA9IFdbaSAtIDE1ICogMiArIDFdXG4gICAgdmFyIGdhbW1hMCA9IEdhbW1hMCh4aCwgeGwpXG4gICAgdmFyIGdhbW1hMGwgPSBHYW1tYTBsKHhsLCB4aClcblxuICAgIHhoID0gV1tpIC0gMiAqIDJdXG4gICAgeGwgPSBXW2kgLSAyICogMiArIDFdXG4gICAgdmFyIGdhbW1hMSA9IEdhbW1hMSh4aCwgeGwpXG4gICAgdmFyIGdhbW1hMWwgPSBHYW1tYTFsKHhsLCB4aClcblxuICAgIC8vIFdbaV0gPSBnYW1tYTAgKyBXW2kgLSA3XSArIGdhbW1hMSArIFdbaSAtIDE2XVxuICAgIHZhciBXaTdoID0gV1tpIC0gNyAqIDJdXG4gICAgdmFyIFdpN2wgPSBXW2kgLSA3ICogMiArIDFdXG5cbiAgICB2YXIgV2kxNmggPSBXW2kgLSAxNiAqIDJdXG4gICAgdmFyIFdpMTZsID0gV1tpIC0gMTYgKiAyICsgMV1cblxuICAgIHZhciBXaWwgPSAoZ2FtbWEwbCArIFdpN2wpIHwgMFxuICAgIHZhciBXaWggPSAoZ2FtbWEwICsgV2k3aCArIGdldENhcnJ5KFdpbCwgZ2FtbWEwbCkpIHwgMFxuICAgIFdpbCA9IChXaWwgKyBnYW1tYTFsKSB8IDBcbiAgICBXaWggPSAoV2loICsgZ2FtbWExICsgZ2V0Q2FycnkoV2lsLCBnYW1tYTFsKSkgfCAwXG4gICAgV2lsID0gKFdpbCArIFdpMTZsKSB8IDBcbiAgICBXaWggPSAoV2loICsgV2kxNmggKyBnZXRDYXJyeShXaWwsIFdpMTZsKSkgfCAwXG5cbiAgICBXW2ldID0gV2loXG4gICAgV1tpICsgMV0gPSBXaWxcbiAgfVxuXG4gIGZvciAodmFyIGogPSAwOyBqIDwgMTYwOyBqICs9IDIpIHtcbiAgICBXaWggPSBXW2pdXG4gICAgV2lsID0gV1tqICsgMV1cblxuICAgIHZhciBtYWpoID0gbWFqKGFoLCBiaCwgY2gpXG4gICAgdmFyIG1hamwgPSBtYWooYWwsIGJsLCBjbClcblxuICAgIHZhciBzaWdtYTBoID0gc2lnbWEwKGFoLCBhbClcbiAgICB2YXIgc2lnbWEwbCA9IHNpZ21hMChhbCwgYWgpXG4gICAgdmFyIHNpZ21hMWggPSBzaWdtYTEoZWgsIGVsKVxuICAgIHZhciBzaWdtYTFsID0gc2lnbWExKGVsLCBlaClcblxuICAgIC8vIHQxID0gaCArIHNpZ21hMSArIGNoICsgS1tqXSArIFdbal1cbiAgICB2YXIgS2loID0gS1tqXVxuICAgIHZhciBLaWwgPSBLW2ogKyAxXVxuXG4gICAgdmFyIGNoaCA9IENoKGVoLCBmaCwgZ2gpXG4gICAgdmFyIGNobCA9IENoKGVsLCBmbCwgZ2wpXG5cbiAgICB2YXIgdDFsID0gKGhsICsgc2lnbWExbCkgfCAwXG4gICAgdmFyIHQxaCA9IChoaCArIHNpZ21hMWggKyBnZXRDYXJyeSh0MWwsIGhsKSkgfCAwXG4gICAgdDFsID0gKHQxbCArIGNobCkgfCAwXG4gICAgdDFoID0gKHQxaCArIGNoaCArIGdldENhcnJ5KHQxbCwgY2hsKSkgfCAwXG4gICAgdDFsID0gKHQxbCArIEtpbCkgfCAwXG4gICAgdDFoID0gKHQxaCArIEtpaCArIGdldENhcnJ5KHQxbCwgS2lsKSkgfCAwXG4gICAgdDFsID0gKHQxbCArIFdpbCkgfCAwXG4gICAgdDFoID0gKHQxaCArIFdpaCArIGdldENhcnJ5KHQxbCwgV2lsKSkgfCAwXG5cbiAgICAvLyB0MiA9IHNpZ21hMCArIG1halxuICAgIHZhciB0MmwgPSAoc2lnbWEwbCArIG1hamwpIHwgMFxuICAgIHZhciB0MmggPSAoc2lnbWEwaCArIG1hamggKyBnZXRDYXJyeSh0MmwsIHNpZ21hMGwpKSB8IDBcblxuICAgIGhoID0gZ2hcbiAgICBobCA9IGdsXG4gICAgZ2ggPSBmaFxuICAgIGdsID0gZmxcbiAgICBmaCA9IGVoXG4gICAgZmwgPSBlbFxuICAgIGVsID0gKGRsICsgdDFsKSB8IDBcbiAgICBlaCA9IChkaCArIHQxaCArIGdldENhcnJ5KGVsLCBkbCkpIHwgMFxuICAgIGRoID0gY2hcbiAgICBkbCA9IGNsXG4gICAgY2ggPSBiaFxuICAgIGNsID0gYmxcbiAgICBiaCA9IGFoXG4gICAgYmwgPSBhbFxuICAgIGFsID0gKHQxbCArIHQybCkgfCAwXG4gICAgYWggPSAodDFoICsgdDJoICsgZ2V0Q2FycnkoYWwsIHQxbCkpIHwgMFxuICB9XG5cbiAgdGhpcy5fYWwgPSAodGhpcy5fYWwgKyBhbCkgfCAwXG4gIHRoaXMuX2JsID0gKHRoaXMuX2JsICsgYmwpIHwgMFxuICB0aGlzLl9jbCA9ICh0aGlzLl9jbCArIGNsKSB8IDBcbiAgdGhpcy5fZGwgPSAodGhpcy5fZGwgKyBkbCkgfCAwXG4gIHRoaXMuX2VsID0gKHRoaXMuX2VsICsgZWwpIHwgMFxuICB0aGlzLl9mbCA9ICh0aGlzLl9mbCArIGZsKSB8IDBcbiAgdGhpcy5fZ2wgPSAodGhpcy5fZ2wgKyBnbCkgfCAwXG4gIHRoaXMuX2hsID0gKHRoaXMuX2hsICsgaGwpIHwgMFxuXG4gIHRoaXMuX2FoID0gKHRoaXMuX2FoICsgYWggKyBnZXRDYXJyeSh0aGlzLl9hbCwgYWwpKSB8IDBcbiAgdGhpcy5fYmggPSAodGhpcy5fYmggKyBiaCArIGdldENhcnJ5KHRoaXMuX2JsLCBibCkpIHwgMFxuICB0aGlzLl9jaCA9ICh0aGlzLl9jaCArIGNoICsgZ2V0Q2FycnkodGhpcy5fY2wsIGNsKSkgfCAwXG4gIHRoaXMuX2RoID0gKHRoaXMuX2RoICsgZGggKyBnZXRDYXJyeSh0aGlzLl9kbCwgZGwpKSB8IDBcbiAgdGhpcy5fZWggPSAodGhpcy5fZWggKyBlaCArIGdldENhcnJ5KHRoaXMuX2VsLCBlbCkpIHwgMFxuICB0aGlzLl9maCA9ICh0aGlzLl9maCArIGZoICsgZ2V0Q2FycnkodGhpcy5fZmwsIGZsKSkgfCAwXG4gIHRoaXMuX2doID0gKHRoaXMuX2doICsgZ2ggKyBnZXRDYXJyeSh0aGlzLl9nbCwgZ2wpKSB8IDBcbiAgdGhpcy5faGggPSAodGhpcy5faGggKyBoaCArIGdldENhcnJ5KHRoaXMuX2hsLCBobCkpIHwgMFxufVxuXG5TaGE1MTIucHJvdG90eXBlLl9oYXNoID0gZnVuY3Rpb24gKCkge1xuICB2YXIgSCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSg2NClcblxuICBmdW5jdGlvbiB3cml0ZUludDY0QkUgKGgsIGwsIG9mZnNldCkge1xuICAgIEgud3JpdGVJbnQzMkJFKGgsIG9mZnNldClcbiAgICBILndyaXRlSW50MzJCRShsLCBvZmZzZXQgKyA0KVxuICB9XG5cbiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2FoLCB0aGlzLl9hbCwgMClcbiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2JoLCB0aGlzLl9ibCwgOClcbiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2NoLCB0aGlzLl9jbCwgMTYpXG4gIHdyaXRlSW50NjRCRSh0aGlzLl9kaCwgdGhpcy5fZGwsIDI0KVxuICB3cml0ZUludDY0QkUodGhpcy5fZWgsIHRoaXMuX2VsLCAzMilcbiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2ZoLCB0aGlzLl9mbCwgNDApXG4gIHdyaXRlSW50NjRCRSh0aGlzLl9naCwgdGhpcy5fZ2wsIDQ4KVxuICB3cml0ZUludDY0QkUodGhpcy5faGgsIHRoaXMuX2hsLCA1NilcblxuICByZXR1cm4gSFxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFNoYTUxMlxuIiwiJ3VzZSBzdHJpY3QnXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgTGVnYWN5ID0gcmVxdWlyZSgnLi9sZWdhY3knKVxudmFyIEJhc2UgPSByZXF1aXJlKCdjaXBoZXItYmFzZScpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcbnZhciBtZDUgPSByZXF1aXJlKCdjcmVhdGUtaGFzaC9tZDUnKVxudmFyIFJJUEVNRDE2MCA9IHJlcXVpcmUoJ3JpcGVtZDE2MCcpXG5cbnZhciBzaGEgPSByZXF1aXJlKCdzaGEuanMnKVxuXG52YXIgWkVST1MgPSBCdWZmZXIuYWxsb2MoMTI4KVxuXG5mdW5jdGlvbiBIbWFjIChhbGcsIGtleSkge1xuICBCYXNlLmNhbGwodGhpcywgJ2RpZ2VzdCcpXG4gIGlmICh0eXBlb2Yga2V5ID09PSAnc3RyaW5nJykge1xuICAgIGtleSA9IEJ1ZmZlci5mcm9tKGtleSlcbiAgfVxuXG4gIHZhciBibG9ja3NpemUgPSAoYWxnID09PSAnc2hhNTEyJyB8fCBhbGcgPT09ICdzaGEzODQnKSA/IDEyOCA6IDY0XG5cbiAgdGhpcy5fYWxnID0gYWxnXG4gIHRoaXMuX2tleSA9IGtleVxuICBpZiAoa2V5Lmxlbmd0aCA+IGJsb2Nrc2l6ZSkge1xuICAgIHZhciBoYXNoID0gYWxnID09PSAncm1kMTYwJyA/IG5ldyBSSVBFTUQxNjAoKSA6IHNoYShhbGcpXG4gICAga2V5ID0gaGFzaC51cGRhdGUoa2V5KS5kaWdlc3QoKVxuICB9IGVsc2UgaWYgKGtleS5sZW5ndGggPCBibG9ja3NpemUpIHtcbiAgICBrZXkgPSBCdWZmZXIuY29uY2F0KFtrZXksIFpFUk9TXSwgYmxvY2tzaXplKVxuICB9XG5cbiAgdmFyIGlwYWQgPSB0aGlzLl9pcGFkID0gQnVmZmVyLmFsbG9jVW5zYWZlKGJsb2Nrc2l6ZSlcbiAgdmFyIG9wYWQgPSB0aGlzLl9vcGFkID0gQnVmZmVyLmFsbG9jVW5zYWZlKGJsb2Nrc2l6ZSlcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGJsb2Nrc2l6ZTsgaSsrKSB7XG4gICAgaXBhZFtpXSA9IGtleVtpXSBeIDB4MzZcbiAgICBvcGFkW2ldID0ga2V5W2ldIF4gMHg1Q1xuICB9XG4gIHRoaXMuX2hhc2ggPSBhbGcgPT09ICdybWQxNjAnID8gbmV3IFJJUEVNRDE2MCgpIDogc2hhKGFsZylcbiAgdGhpcy5faGFzaC51cGRhdGUoaXBhZClcbn1cblxuaW5oZXJpdHMoSG1hYywgQmFzZSlcblxuSG1hYy5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHRoaXMuX2hhc2gudXBkYXRlKGRhdGEpXG59XG5cbkhtYWMucHJvdG90eXBlLl9maW5hbCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGggPSB0aGlzLl9oYXNoLmRpZ2VzdCgpXG4gIHZhciBoYXNoID0gdGhpcy5fYWxnID09PSAncm1kMTYwJyA/IG5ldyBSSVBFTUQxNjAoKSA6IHNoYSh0aGlzLl9hbGcpXG4gIHJldHVybiBoYXNoLnVwZGF0ZSh0aGlzLl9vcGFkKS51cGRhdGUoaCkuZGlnZXN0KClcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjcmVhdGVIbWFjIChhbGcsIGtleSkge1xuICBhbGcgPSBhbGcudG9Mb3dlckNhc2UoKVxuICBpZiAoYWxnID09PSAncm1kMTYwJyB8fCBhbGcgPT09ICdyaXBlbWQxNjAnKSB7XG4gICAgcmV0dXJuIG5ldyBIbWFjKCdybWQxNjAnLCBrZXkpXG4gIH1cbiAgaWYgKGFsZyA9PT0gJ21kNScpIHtcbiAgICByZXR1cm4gbmV3IExlZ2FjeShtZDUsIGtleSlcbiAgfVxuICByZXR1cm4gbmV3IEhtYWMoYWxnLCBrZXkpXG59XG4iLCJ2YXIgTUQ1ID0gcmVxdWlyZSgnbWQ1LmpzJylcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYnVmZmVyKSB7XG4gIHJldHVybiBuZXcgTUQ1KCkudXBkYXRlKGJ1ZmZlcikuZGlnZXN0KClcbn1cbiIsImV4cG9ydHMucGJrZGYyID0gcmVxdWlyZSgnLi9saWIvYXN5bmMnKVxuZXhwb3J0cy5wYmtkZjJTeW5jID0gcmVxdWlyZSgnLi9saWIvc3luYycpXG4iLCJ2YXIgTUFYX0FMTE9DID0gTWF0aC5wb3coMiwgMzApIC0gMSAvLyBkZWZhdWx0IGluIGlvanNcblxuZnVuY3Rpb24gY2hlY2tCdWZmZXIgKGJ1ZiwgbmFtZSkge1xuICBpZiAodHlwZW9mIGJ1ZiAhPT0gJ3N0cmluZycgJiYgIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihuYW1lICsgJyBtdXN0IGJlIGEgYnVmZmVyIG9yIHN0cmluZycpXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAocGFzc3dvcmQsIHNhbHQsIGl0ZXJhdGlvbnMsIGtleWxlbikge1xuICBjaGVja0J1ZmZlcihwYXNzd29yZCwgJ1Bhc3N3b3JkJylcbiAgY2hlY2tCdWZmZXIoc2FsdCwgJ1NhbHQnKVxuXG4gIGlmICh0eXBlb2YgaXRlcmF0aW9ucyAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJdGVyYXRpb25zIG5vdCBhIG51bWJlcicpXG4gIH1cblxuICBpZiAoaXRlcmF0aW9ucyA8IDApIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdCYWQgaXRlcmF0aW9ucycpXG4gIH1cblxuICBpZiAodHlwZW9mIGtleWxlbiAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdLZXkgbGVuZ3RoIG5vdCBhIG51bWJlcicpXG4gIH1cblxuICBpZiAoa2V5bGVuIDwgMCB8fCBrZXlsZW4gPiBNQVhfQUxMT0MgfHwga2V5bGVuICE9PSBrZXlsZW4pIHsgLyogZXNsaW50IG5vLXNlbGYtY29tcGFyZTogMCAqL1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0JhZCBrZXkgbGVuZ3RoJylcbiAgfVxufVxuIiwidmFyIGRlZmF1bHRFbmNvZGluZ1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmlmIChwcm9jZXNzLmJyb3dzZXIpIHtcbiAgZGVmYXVsdEVuY29kaW5nID0gJ3V0Zi04J1xufSBlbHNlIHtcbiAgdmFyIHBWZXJzaW9uTWFqb3IgPSBwYXJzZUludChwcm9jZXNzLnZlcnNpb24uc3BsaXQoJy4nKVswXS5zbGljZSgxKSwgMTApXG5cbiAgZGVmYXVsdEVuY29kaW5nID0gcFZlcnNpb25NYWpvciA+PSA2ID8gJ3V0Zi04JyA6ICdiaW5hcnknXG59XG5tb2R1bGUuZXhwb3J0cyA9IGRlZmF1bHRFbmNvZGluZ1xuIiwidmFyIG1kNSA9IHJlcXVpcmUoJ2NyZWF0ZS1oYXNoL21kNScpXG52YXIgUklQRU1EMTYwID0gcmVxdWlyZSgncmlwZW1kMTYwJylcbnZhciBzaGEgPSByZXF1aXJlKCdzaGEuanMnKVxuXG52YXIgY2hlY2tQYXJhbWV0ZXJzID0gcmVxdWlyZSgnLi9wcmVjb25kaXRpb24nKVxudmFyIGRlZmF1bHRFbmNvZGluZyA9IHJlcXVpcmUoJy4vZGVmYXVsdC1lbmNvZGluZycpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcbnZhciBaRVJPUyA9IEJ1ZmZlci5hbGxvYygxMjgpXG52YXIgc2l6ZXMgPSB7XG4gIG1kNTogMTYsXG4gIHNoYTE6IDIwLFxuICBzaGEyMjQ6IDI4LFxuICBzaGEyNTY6IDMyLFxuICBzaGEzODQ6IDQ4LFxuICBzaGE1MTI6IDY0LFxuICBybWQxNjA6IDIwLFxuICByaXBlbWQxNjA6IDIwXG59XG5cbmZ1bmN0aW9uIEhtYWMgKGFsZywga2V5LCBzYWx0TGVuKSB7XG4gIHZhciBoYXNoID0gZ2V0RGlnZXN0KGFsZylcbiAgdmFyIGJsb2Nrc2l6ZSA9IChhbGcgPT09ICdzaGE1MTInIHx8IGFsZyA9PT0gJ3NoYTM4NCcpID8gMTI4IDogNjRcblxuICBpZiAoa2V5Lmxlbmd0aCA+IGJsb2Nrc2l6ZSkge1xuICAgIGtleSA9IGhhc2goa2V5KVxuICB9IGVsc2UgaWYgKGtleS5sZW5ndGggPCBibG9ja3NpemUpIHtcbiAgICBrZXkgPSBCdWZmZXIuY29uY2F0KFtrZXksIFpFUk9TXSwgYmxvY2tzaXplKVxuICB9XG5cbiAgdmFyIGlwYWQgPSBCdWZmZXIuYWxsb2NVbnNhZmUoYmxvY2tzaXplICsgc2l6ZXNbYWxnXSlcbiAgdmFyIG9wYWQgPSBCdWZmZXIuYWxsb2NVbnNhZmUoYmxvY2tzaXplICsgc2l6ZXNbYWxnXSlcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBibG9ja3NpemU7IGkrKykge1xuICAgIGlwYWRbaV0gPSBrZXlbaV0gXiAweDM2XG4gICAgb3BhZFtpXSA9IGtleVtpXSBeIDB4NUNcbiAgfVxuXG4gIHZhciBpcGFkMSA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShibG9ja3NpemUgKyBzYWx0TGVuICsgNClcbiAgaXBhZC5jb3B5KGlwYWQxLCAwLCAwLCBibG9ja3NpemUpXG4gIHRoaXMuaXBhZDEgPSBpcGFkMVxuICB0aGlzLmlwYWQyID0gaXBhZFxuICB0aGlzLm9wYWQgPSBvcGFkXG4gIHRoaXMuYWxnID0gYWxnXG4gIHRoaXMuYmxvY2tzaXplID0gYmxvY2tzaXplXG4gIHRoaXMuaGFzaCA9IGhhc2hcbiAgdGhpcy5zaXplID0gc2l6ZXNbYWxnXVxufVxuXG5IbWFjLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoZGF0YSwgaXBhZCkge1xuICBkYXRhLmNvcHkoaXBhZCwgdGhpcy5ibG9ja3NpemUpXG4gIHZhciBoID0gdGhpcy5oYXNoKGlwYWQpXG4gIGguY29weSh0aGlzLm9wYWQsIHRoaXMuYmxvY2tzaXplKVxuICByZXR1cm4gdGhpcy5oYXNoKHRoaXMub3BhZClcbn1cblxuZnVuY3Rpb24gZ2V0RGlnZXN0IChhbGcpIHtcbiAgZnVuY3Rpb24gc2hhRnVuYyAoZGF0YSkge1xuICAgIHJldHVybiBzaGEoYWxnKS51cGRhdGUoZGF0YSkuZGlnZXN0KClcbiAgfVxuICBmdW5jdGlvbiBybWQxNjBGdW5jIChkYXRhKSB7XG4gICAgcmV0dXJuIG5ldyBSSVBFTUQxNjAoKS51cGRhdGUoZGF0YSkuZGlnZXN0KClcbiAgfVxuXG4gIGlmIChhbGcgPT09ICdybWQxNjAnIHx8IGFsZyA9PT0gJ3JpcGVtZDE2MCcpIHJldHVybiBybWQxNjBGdW5jXG4gIGlmIChhbGcgPT09ICdtZDUnKSByZXR1cm4gbWQ1XG4gIHJldHVybiBzaGFGdW5jXG59XG5cbmZ1bmN0aW9uIHBia2RmMiAocGFzc3dvcmQsIHNhbHQsIGl0ZXJhdGlvbnMsIGtleWxlbiwgZGlnZXN0KSB7XG4gIGNoZWNrUGFyYW1ldGVycyhwYXNzd29yZCwgc2FsdCwgaXRlcmF0aW9ucywga2V5bGVuKVxuXG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHBhc3N3b3JkKSkgcGFzc3dvcmQgPSBCdWZmZXIuZnJvbShwYXNzd29yZCwgZGVmYXVsdEVuY29kaW5nKVxuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihzYWx0KSkgc2FsdCA9IEJ1ZmZlci5mcm9tKHNhbHQsIGRlZmF1bHRFbmNvZGluZylcblxuICBkaWdlc3QgPSBkaWdlc3QgfHwgJ3NoYTEnXG5cbiAgdmFyIGhtYWMgPSBuZXcgSG1hYyhkaWdlc3QsIHBhc3N3b3JkLCBzYWx0Lmxlbmd0aClcblxuICB2YXIgREsgPSBCdWZmZXIuYWxsb2NVbnNhZmUoa2V5bGVuKVxuICB2YXIgYmxvY2sxID0gQnVmZmVyLmFsbG9jVW5zYWZlKHNhbHQubGVuZ3RoICsgNClcbiAgc2FsdC5jb3B5KGJsb2NrMSwgMCwgMCwgc2FsdC5sZW5ndGgpXG5cbiAgdmFyIGRlc3RQb3MgPSAwXG4gIHZhciBoTGVuID0gc2l6ZXNbZGlnZXN0XVxuICB2YXIgbCA9IE1hdGguY2VpbChrZXlsZW4gLyBoTGVuKVxuXG4gIGZvciAodmFyIGkgPSAxOyBpIDw9IGw7IGkrKykge1xuICAgIGJsb2NrMS53cml0ZVVJbnQzMkJFKGksIHNhbHQubGVuZ3RoKVxuXG4gICAgdmFyIFQgPSBobWFjLnJ1bihibG9jazEsIGhtYWMuaXBhZDEpXG4gICAgdmFyIFUgPSBUXG5cbiAgICBmb3IgKHZhciBqID0gMTsgaiA8IGl0ZXJhdGlvbnM7IGorKykge1xuICAgICAgVSA9IGhtYWMucnVuKFUsIGhtYWMuaXBhZDIpXG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IGhMZW47IGsrKykgVFtrXSBePSBVW2tdXG4gICAgfVxuXG4gICAgVC5jb3B5KERLLCBkZXN0UG9zKVxuICAgIGRlc3RQb3MgKz0gaExlblxuICB9XG5cbiAgcmV0dXJuIERLXG59XG5cbm1vZHVsZS5leHBvcnRzID0gcGJrZGYyXG4iLCJ2YXIgeG9yID0gcmVxdWlyZSgnYnVmZmVyLXhvcicpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcbnZhciBpbmNyMzIgPSByZXF1aXJlKCcuLi9pbmNyMzInKVxuXG5mdW5jdGlvbiBnZXRCbG9jayAoc2VsZikge1xuICB2YXIgb3V0ID0gc2VsZi5fY2lwaGVyLmVuY3J5cHRCbG9ja1JhdyhzZWxmLl9wcmV2KVxuICBpbmNyMzIoc2VsZi5fcHJldilcbiAgcmV0dXJuIG91dFxufVxuXG52YXIgYmxvY2tTaXplID0gMTZcbmV4cG9ydHMuZW5jcnlwdCA9IGZ1bmN0aW9uIChzZWxmLCBjaHVuaykge1xuICB2YXIgY2h1bmtOdW0gPSBNYXRoLmNlaWwoY2h1bmsubGVuZ3RoIC8gYmxvY2tTaXplKVxuICB2YXIgc3RhcnQgPSBzZWxmLl9jYWNoZS5sZW5ndGhcbiAgc2VsZi5fY2FjaGUgPSBCdWZmZXIuY29uY2F0KFtcbiAgICBzZWxmLl9jYWNoZSxcbiAgICBCdWZmZXIuYWxsb2NVbnNhZmUoY2h1bmtOdW0gKiBibG9ja1NpemUpXG4gIF0pXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY2h1bmtOdW07IGkrKykge1xuICAgIHZhciBvdXQgPSBnZXRCbG9jayhzZWxmKVxuICAgIHZhciBvZmZzZXQgPSBzdGFydCArIGkgKiBibG9ja1NpemVcbiAgICBzZWxmLl9jYWNoZS53cml0ZVVJbnQzMkJFKG91dFswXSwgb2Zmc2V0ICsgMClcbiAgICBzZWxmLl9jYWNoZS53cml0ZVVJbnQzMkJFKG91dFsxXSwgb2Zmc2V0ICsgNClcbiAgICBzZWxmLl9jYWNoZS53cml0ZVVJbnQzMkJFKG91dFsyXSwgb2Zmc2V0ICsgOClcbiAgICBzZWxmLl9jYWNoZS53cml0ZVVJbnQzMkJFKG91dFszXSwgb2Zmc2V0ICsgMTIpXG4gIH1cbiAgdmFyIHBhZCA9IHNlbGYuX2NhY2hlLnNsaWNlKDAsIGNodW5rLmxlbmd0aClcbiAgc2VsZi5fY2FjaGUgPSBzZWxmLl9jYWNoZS5zbGljZShjaHVuay5sZW5ndGgpXG4gIHJldHVybiB4b3IoY2h1bmssIHBhZClcbn1cbiIsImZ1bmN0aW9uIGluY3IzMiAoaXYpIHtcbiAgdmFyIGxlbiA9IGl2Lmxlbmd0aFxuICB2YXIgaXRlbVxuICB3aGlsZSAobGVuLS0pIHtcbiAgICBpdGVtID0gaXYucmVhZFVJbnQ4KGxlbilcbiAgICBpZiAoaXRlbSA9PT0gMjU1KSB7XG4gICAgICBpdi53cml0ZVVJbnQ4KDAsIGxlbilcbiAgICB9IGVsc2Uge1xuICAgICAgaXRlbSsrXG4gICAgICBpdi53cml0ZVVJbnQ4KGl0ZW0sIGxlbilcbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IGluY3IzMlxuIiwidmFyIGFlcyA9IHJlcXVpcmUoJy4vYWVzJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxudmFyIFRyYW5zZm9ybSA9IHJlcXVpcmUoJ2NpcGhlci1iYXNlJylcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBHSEFTSCA9IHJlcXVpcmUoJy4vZ2hhc2gnKVxudmFyIHhvciA9IHJlcXVpcmUoJ2J1ZmZlci14b3InKVxudmFyIGluY3IzMiA9IHJlcXVpcmUoJy4vaW5jcjMyJylcblxuZnVuY3Rpb24geG9yVGVzdCAoYSwgYikge1xuICB2YXIgb3V0ID0gMFxuICBpZiAoYS5sZW5ndGggIT09IGIubGVuZ3RoKSBvdXQrK1xuXG4gIHZhciBsZW4gPSBNYXRoLm1pbihhLmxlbmd0aCwgYi5sZW5ndGgpXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICBvdXQgKz0gKGFbaV0gXiBiW2ldKVxuICB9XG5cbiAgcmV0dXJuIG91dFxufVxuXG5mdW5jdGlvbiBjYWxjSXYgKHNlbGYsIGl2LCBjaykge1xuICBpZiAoaXYubGVuZ3RoID09PSAxMikge1xuICAgIHNlbGYuX2ZpbklEID0gQnVmZmVyLmNvbmNhdChbaXYsIEJ1ZmZlci5mcm9tKFswLCAwLCAwLCAxXSldKVxuICAgIHJldHVybiBCdWZmZXIuY29uY2F0KFtpdiwgQnVmZmVyLmZyb20oWzAsIDAsIDAsIDJdKV0pXG4gIH1cbiAgdmFyIGdoYXNoID0gbmV3IEdIQVNIKGNrKVxuICB2YXIgbGVuID0gaXYubGVuZ3RoXG4gIHZhciB0b1BhZCA9IGxlbiAlIDE2XG4gIGdoYXNoLnVwZGF0ZShpdilcbiAgaWYgKHRvUGFkKSB7XG4gICAgdG9QYWQgPSAxNiAtIHRvUGFkXG4gICAgZ2hhc2gudXBkYXRlKEJ1ZmZlci5hbGxvYyh0b1BhZCwgMCkpXG4gIH1cbiAgZ2hhc2gudXBkYXRlKEJ1ZmZlci5hbGxvYyg4LCAwKSlcbiAgdmFyIGl2Qml0cyA9IGxlbiAqIDhcbiAgdmFyIHRhaWwgPSBCdWZmZXIuYWxsb2MoOClcbiAgdGFpbC53cml0ZVVJbnRCRShpdkJpdHMsIDAsIDgpXG4gIGdoYXNoLnVwZGF0ZSh0YWlsKVxuICBzZWxmLl9maW5JRCA9IGdoYXNoLnN0YXRlXG4gIHZhciBvdXQgPSBCdWZmZXIuZnJvbShzZWxmLl9maW5JRClcbiAgaW5jcjMyKG91dClcbiAgcmV0dXJuIG91dFxufVxuZnVuY3Rpb24gU3RyZWFtQ2lwaGVyIChtb2RlLCBrZXksIGl2LCBkZWNyeXB0KSB7XG4gIFRyYW5zZm9ybS5jYWxsKHRoaXMpXG5cbiAgdmFyIGggPSBCdWZmZXIuYWxsb2MoNCwgMClcblxuICB0aGlzLl9jaXBoZXIgPSBuZXcgYWVzLkFFUyhrZXkpXG4gIHZhciBjayA9IHRoaXMuX2NpcGhlci5lbmNyeXB0QmxvY2soaClcbiAgdGhpcy5fZ2hhc2ggPSBuZXcgR0hBU0goY2spXG4gIGl2ID0gY2FsY0l2KHRoaXMsIGl2LCBjaylcblxuICB0aGlzLl9wcmV2ID0gQnVmZmVyLmZyb20oaXYpXG4gIHRoaXMuX2NhY2hlID0gQnVmZmVyLmFsbG9jVW5zYWZlKDApXG4gIHRoaXMuX3NlY0NhY2hlID0gQnVmZmVyLmFsbG9jVW5zYWZlKDApXG4gIHRoaXMuX2RlY3J5cHQgPSBkZWNyeXB0XG4gIHRoaXMuX2FsZW4gPSAwXG4gIHRoaXMuX2xlbiA9IDBcbiAgdGhpcy5fbW9kZSA9IG1vZGVcblxuICB0aGlzLl9hdXRoVGFnID0gbnVsbFxuICB0aGlzLl9jYWxsZWQgPSBmYWxzZVxufVxuXG5pbmhlcml0cyhTdHJlYW1DaXBoZXIsIFRyYW5zZm9ybSlcblxuU3RyZWFtQ2lwaGVyLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKGNodW5rKSB7XG4gIGlmICghdGhpcy5fY2FsbGVkICYmIHRoaXMuX2FsZW4pIHtcbiAgICB2YXIgcnVtcCA9IDE2IC0gKHRoaXMuX2FsZW4gJSAxNilcbiAgICBpZiAocnVtcCA8IDE2KSB7XG4gICAgICBydW1wID0gQnVmZmVyLmFsbG9jKHJ1bXAsIDApXG4gICAgICB0aGlzLl9naGFzaC51cGRhdGUocnVtcClcbiAgICB9XG4gIH1cblxuICB0aGlzLl9jYWxsZWQgPSB0cnVlXG4gIHZhciBvdXQgPSB0aGlzLl9tb2RlLmVuY3J5cHQodGhpcywgY2h1bmspXG4gIGlmICh0aGlzLl9kZWNyeXB0KSB7XG4gICAgdGhpcy5fZ2hhc2gudXBkYXRlKGNodW5rKVxuICB9IGVsc2Uge1xuICAgIHRoaXMuX2doYXNoLnVwZGF0ZShvdXQpXG4gIH1cbiAgdGhpcy5fbGVuICs9IGNodW5rLmxlbmd0aFxuICByZXR1cm4gb3V0XG59XG5cblN0cmVhbUNpcGhlci5wcm90b3R5cGUuX2ZpbmFsID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5fZGVjcnlwdCAmJiAhdGhpcy5fYXV0aFRhZykgdGhyb3cgbmV3IEVycm9yKCdVbnN1cHBvcnRlZCBzdGF0ZSBvciB1bmFibGUgdG8gYXV0aGVudGljYXRlIGRhdGEnKVxuXG4gIHZhciB0YWcgPSB4b3IodGhpcy5fZ2hhc2guZmluYWwodGhpcy5fYWxlbiAqIDgsIHRoaXMuX2xlbiAqIDgpLCB0aGlzLl9jaXBoZXIuZW5jcnlwdEJsb2NrKHRoaXMuX2ZpbklEKSlcbiAgaWYgKHRoaXMuX2RlY3J5cHQgJiYgeG9yVGVzdCh0YWcsIHRoaXMuX2F1dGhUYWcpKSB0aHJvdyBuZXcgRXJyb3IoJ1Vuc3VwcG9ydGVkIHN0YXRlIG9yIHVuYWJsZSB0byBhdXRoZW50aWNhdGUgZGF0YScpXG5cbiAgdGhpcy5fYXV0aFRhZyA9IHRhZ1xuICB0aGlzLl9jaXBoZXIuc2NydWIoKVxufVxuXG5TdHJlYW1DaXBoZXIucHJvdG90eXBlLmdldEF1dGhUYWcgPSBmdW5jdGlvbiBnZXRBdXRoVGFnICgpIHtcbiAgaWYgKHRoaXMuX2RlY3J5cHQgfHwgIUJ1ZmZlci5pc0J1ZmZlcih0aGlzLl9hdXRoVGFnKSkgdGhyb3cgbmV3IEVycm9yKCdBdHRlbXB0aW5nIHRvIGdldCBhdXRoIHRhZyBpbiB1bnN1cHBvcnRlZCBzdGF0ZScpXG5cbiAgcmV0dXJuIHRoaXMuX2F1dGhUYWdcbn1cblxuU3RyZWFtQ2lwaGVyLnByb3RvdHlwZS5zZXRBdXRoVGFnID0gZnVuY3Rpb24gc2V0QXV0aFRhZyAodGFnKSB7XG4gIGlmICghdGhpcy5fZGVjcnlwdCkgdGhyb3cgbmV3IEVycm9yKCdBdHRlbXB0aW5nIHRvIHNldCBhdXRoIHRhZyBpbiB1bnN1cHBvcnRlZCBzdGF0ZScpXG5cbiAgdGhpcy5fYXV0aFRhZyA9IHRhZ1xufVxuXG5TdHJlYW1DaXBoZXIucHJvdG90eXBlLnNldEFBRCA9IGZ1bmN0aW9uIHNldEFBRCAoYnVmKSB7XG4gIGlmICh0aGlzLl9jYWxsZWQpIHRocm93IG5ldyBFcnJvcignQXR0ZW1wdGluZyB0byBzZXQgQUFEIGluIHVuc3VwcG9ydGVkIHN0YXRlJylcblxuICB0aGlzLl9naGFzaC51cGRhdGUoYnVmKVxuICB0aGlzLl9hbGVuICs9IGJ1Zi5sZW5ndGhcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTdHJlYW1DaXBoZXJcbiIsInZhciBhZXMgPSByZXF1aXJlKCcuL2FlcycpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcbnZhciBUcmFuc2Zvcm0gPSByZXF1aXJlKCdjaXBoZXItYmFzZScpXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG5cbmZ1bmN0aW9uIFN0cmVhbUNpcGhlciAobW9kZSwga2V5LCBpdiwgZGVjcnlwdCkge1xuICBUcmFuc2Zvcm0uY2FsbCh0aGlzKVxuXG4gIHRoaXMuX2NpcGhlciA9IG5ldyBhZXMuQUVTKGtleSlcbiAgdGhpcy5fcHJldiA9IEJ1ZmZlci5mcm9tKGl2KVxuICB0aGlzLl9jYWNoZSA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgwKVxuICB0aGlzLl9zZWNDYWNoZSA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgwKVxuICB0aGlzLl9kZWNyeXB0ID0gZGVjcnlwdFxuICB0aGlzLl9tb2RlID0gbW9kZVxufVxuXG5pbmhlcml0cyhTdHJlYW1DaXBoZXIsIFRyYW5zZm9ybSlcblxuU3RyZWFtQ2lwaGVyLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKGNodW5rKSB7XG4gIHJldHVybiB0aGlzLl9tb2RlLmVuY3J5cHQodGhpcywgY2h1bmssIHRoaXMuX2RlY3J5cHQpXG59XG5cblN0cmVhbUNpcGhlci5wcm90b3R5cGUuX2ZpbmFsID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLl9jaXBoZXIuc2NydWIoKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFN0cmVhbUNpcGhlclxuIiwidmFyIHJhbmRvbUJ5dGVzID0gcmVxdWlyZSgncmFuZG9tYnl0ZXMnKTtcbm1vZHVsZS5leHBvcnRzID0gZmluZFByaW1lO1xuZmluZFByaW1lLnNpbXBsZVNpZXZlID0gc2ltcGxlU2lldmU7XG5maW5kUHJpbWUuZmVybWF0VGVzdCA9IGZlcm1hdFRlc3Q7XG52YXIgQk4gPSByZXF1aXJlKCdibi5qcycpO1xudmFyIFRXRU5UWUZPVVIgPSBuZXcgQk4oMjQpO1xudmFyIE1pbGxlclJhYmluID0gcmVxdWlyZSgnbWlsbGVyLXJhYmluJyk7XG52YXIgbWlsbGVyUmFiaW4gPSBuZXcgTWlsbGVyUmFiaW4oKTtcbnZhciBPTkUgPSBuZXcgQk4oMSk7XG52YXIgVFdPID0gbmV3IEJOKDIpO1xudmFyIEZJVkUgPSBuZXcgQk4oNSk7XG52YXIgU0lYVEVFTiA9IG5ldyBCTigxNik7XG52YXIgRUlHSFQgPSBuZXcgQk4oOCk7XG52YXIgVEVOID0gbmV3IEJOKDEwKTtcbnZhciBUSFJFRSA9IG5ldyBCTigzKTtcbnZhciBTRVZFTiA9IG5ldyBCTig3KTtcbnZhciBFTEVWRU4gPSBuZXcgQk4oMTEpO1xudmFyIEZPVVIgPSBuZXcgQk4oNCk7XG52YXIgVFdFTFZFID0gbmV3IEJOKDEyKTtcbnZhciBwcmltZXMgPSBudWxsO1xuXG5mdW5jdGlvbiBfZ2V0UHJpbWVzKCkge1xuICBpZiAocHJpbWVzICE9PSBudWxsKVxuICAgIHJldHVybiBwcmltZXM7XG5cbiAgdmFyIGxpbWl0ID0gMHgxMDAwMDA7XG4gIHZhciByZXMgPSBbXTtcbiAgcmVzWzBdID0gMjtcbiAgZm9yICh2YXIgaSA9IDEsIGsgPSAzOyBrIDwgbGltaXQ7IGsgKz0gMikge1xuICAgIHZhciBzcXJ0ID0gTWF0aC5jZWlsKE1hdGguc3FydChrKSk7XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBpICYmIHJlc1tqXSA8PSBzcXJ0OyBqKyspXG4gICAgICBpZiAoayAlIHJlc1tqXSA9PT0gMClcbiAgICAgICAgYnJlYWs7XG5cbiAgICBpZiAoaSAhPT0gaiAmJiByZXNbal0gPD0gc3FydClcbiAgICAgIGNvbnRpbnVlO1xuXG4gICAgcmVzW2krK10gPSBrO1xuICB9XG4gIHByaW1lcyA9IHJlcztcbiAgcmV0dXJuIHJlcztcbn1cblxuZnVuY3Rpb24gc2ltcGxlU2lldmUocCkge1xuICB2YXIgcHJpbWVzID0gX2dldFByaW1lcygpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJpbWVzLmxlbmd0aDsgaSsrKVxuICAgIGlmIChwLm1vZG4ocHJpbWVzW2ldKSA9PT0gMCkge1xuICAgICAgaWYgKHAuY21wbihwcmltZXNbaV0pID09PSAwKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gZmVybWF0VGVzdChwKSB7XG4gIHZhciByZWQgPSBCTi5tb250KHApO1xuICByZXR1cm4gVFdPLnRvUmVkKHJlZCkucmVkUG93KHAuc3VibigxKSkuZnJvbVJlZCgpLmNtcG4oMSkgPT09IDA7XG59XG5cbmZ1bmN0aW9uIGZpbmRQcmltZShiaXRzLCBnZW4pIHtcbiAgaWYgKGJpdHMgPCAxNikge1xuICAgIC8vIHRoaXMgaXMgd2hhdCBvcGVuc3NsIGRvZXNcbiAgICBpZiAoZ2VuID09PSAyIHx8IGdlbiA9PT0gNSkge1xuICAgICAgcmV0dXJuIG5ldyBCTihbMHg4YywgMHg3Yl0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbmV3IEJOKFsweDhjLCAweDI3XSk7XG4gICAgfVxuICB9XG4gIGdlbiA9IG5ldyBCTihnZW4pO1xuXG4gIHZhciBudW0sIG4yO1xuXG4gIHdoaWxlICh0cnVlKSB7XG4gICAgbnVtID0gbmV3IEJOKHJhbmRvbUJ5dGVzKE1hdGguY2VpbChiaXRzIC8gOCkpKTtcbiAgICB3aGlsZSAobnVtLmJpdExlbmd0aCgpID4gYml0cykge1xuICAgICAgbnVtLmlzaHJuKDEpO1xuICAgIH1cbiAgICBpZiAobnVtLmlzRXZlbigpKSB7XG4gICAgICBudW0uaWFkZChPTkUpO1xuICAgIH1cbiAgICBpZiAoIW51bS50ZXN0bigxKSkge1xuICAgICAgbnVtLmlhZGQoVFdPKTtcbiAgICB9XG4gICAgaWYgKCFnZW4uY21wKFRXTykpIHtcbiAgICAgIHdoaWxlIChudW0ubW9kKFRXRU5UWUZPVVIpLmNtcChFTEVWRU4pKSB7XG4gICAgICAgIG51bS5pYWRkKEZPVVIpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIWdlbi5jbXAoRklWRSkpIHtcbiAgICAgIHdoaWxlIChudW0ubW9kKFRFTikuY21wKFRIUkVFKSkge1xuICAgICAgICBudW0uaWFkZChGT1VSKTtcbiAgICAgIH1cbiAgICB9XG4gICAgbjIgPSBudW0uc2hybigxKTtcbiAgICBpZiAoc2ltcGxlU2lldmUobjIpICYmIHNpbXBsZVNpZXZlKG51bSkgJiZcbiAgICAgIGZlcm1hdFRlc3QobjIpICYmIGZlcm1hdFRlc3QobnVtKSAmJlxuICAgICAgbWlsbGVyUmFiaW4udGVzdChuMikgJiYgbWlsbGVyUmFiaW4udGVzdChudW0pKSB7XG4gICAgICByZXR1cm4gbnVtO1xuICAgIH1cbiAgfVxuXG59XG4iLCJ2YXIgYm4gPSByZXF1aXJlKCdibi5qcycpO1xudmFyIGJyb3JhbmQgPSByZXF1aXJlKCdicm9yYW5kJyk7XG5cbmZ1bmN0aW9uIE1pbGxlclJhYmluKHJhbmQpIHtcbiAgdGhpcy5yYW5kID0gcmFuZCB8fCBuZXcgYnJvcmFuZC5SYW5kKCk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IE1pbGxlclJhYmluO1xuXG5NaWxsZXJSYWJpbi5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUocmFuZCkge1xuICByZXR1cm4gbmV3IE1pbGxlclJhYmluKHJhbmQpO1xufTtcblxuTWlsbGVyUmFiaW4ucHJvdG90eXBlLl9yYW5kYmVsb3cgPSBmdW5jdGlvbiBfcmFuZGJlbG93KG4pIHtcbiAgdmFyIGxlbiA9IG4uYml0TGVuZ3RoKCk7XG4gIHZhciBtaW5fYnl0ZXMgPSBNYXRoLmNlaWwobGVuIC8gOCk7XG5cbiAgLy8gR2VuZXJhZ2UgcmFuZG9tIGJ5dGVzIHVudGlsIGEgbnVtYmVyIGxlc3MgdGhhbiBuIGlzIGZvdW5kLlxuICAvLyBUaGlzIGVuc3VyZXMgdGhhdCAwLi5uLTEgaGF2ZSBhbiBlcXVhbCBwcm9iYWJpbGl0eSBvZiBiZWluZyBzZWxlY3RlZC5cbiAgZG9cbiAgICB2YXIgYSA9IG5ldyBibih0aGlzLnJhbmQuZ2VuZXJhdGUobWluX2J5dGVzKSk7XG4gIHdoaWxlIChhLmNtcChuKSA+PSAwKTtcblxuICByZXR1cm4gYTtcbn07XG5cbk1pbGxlclJhYmluLnByb3RvdHlwZS5fcmFuZHJhbmdlID0gZnVuY3Rpb24gX3JhbmRyYW5nZShzdGFydCwgc3RvcCkge1xuICAvLyBHZW5lcmF0ZSBhIHJhbmRvbSBudW1iZXIgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIHN0YXJ0IGFuZCBsZXNzIHRoYW4gc3RvcC5cbiAgdmFyIHNpemUgPSBzdG9wLnN1YihzdGFydCk7XG4gIHJldHVybiBzdGFydC5hZGQodGhpcy5fcmFuZGJlbG93KHNpemUpKTtcbn07XG5cbk1pbGxlclJhYmluLnByb3RvdHlwZS50ZXN0ID0gZnVuY3Rpb24gdGVzdChuLCBrLCBjYikge1xuICB2YXIgbGVuID0gbi5iaXRMZW5ndGgoKTtcbiAgdmFyIHJlZCA9IGJuLm1vbnQobik7XG4gIHZhciByb25lID0gbmV3IGJuKDEpLnRvUmVkKHJlZCk7XG5cbiAgaWYgKCFrKVxuICAgIGsgPSBNYXRoLm1heCgxLCAobGVuIC8gNDgpIHwgMCk7XG5cbiAgLy8gRmluZCBkIGFuZCBzLCAobiAtIDEpID0gKDIgXiBzKSAqIGQ7XG4gIHZhciBuMSA9IG4uc3VibigxKTtcbiAgZm9yICh2YXIgcyA9IDA7ICFuMS50ZXN0bihzKTsgcysrKSB7fVxuICB2YXIgZCA9IG4uc2hybihzKTtcblxuICB2YXIgcm4xID0gbjEudG9SZWQocmVkKTtcblxuICB2YXIgcHJpbWUgPSB0cnVlO1xuICBmb3IgKDsgayA+IDA7IGstLSkge1xuICAgIHZhciBhID0gdGhpcy5fcmFuZHJhbmdlKG5ldyBibigyKSwgbjEpO1xuICAgIGlmIChjYilcbiAgICAgIGNiKGEpO1xuXG4gICAgdmFyIHggPSBhLnRvUmVkKHJlZCkucmVkUG93KGQpO1xuICAgIGlmICh4LmNtcChyb25lKSA9PT0gMCB8fCB4LmNtcChybjEpID09PSAwKVxuICAgICAgY29udGludWU7XG5cbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IHM7IGkrKykge1xuICAgICAgeCA9IHgucmVkU3FyKCk7XG5cbiAgICAgIGlmICh4LmNtcChyb25lKSA9PT0gMClcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgaWYgKHguY21wKHJuMSkgPT09IDApXG4gICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGlmIChpID09PSBzKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHByaW1lO1xufTtcblxuTWlsbGVyUmFiaW4ucHJvdG90eXBlLmdldERpdmlzb3IgPSBmdW5jdGlvbiBnZXREaXZpc29yKG4sIGspIHtcbiAgdmFyIGxlbiA9IG4uYml0TGVuZ3RoKCk7XG4gIHZhciByZWQgPSBibi5tb250KG4pO1xuICB2YXIgcm9uZSA9IG5ldyBibigxKS50b1JlZChyZWQpO1xuXG4gIGlmICghaylcbiAgICBrID0gTWF0aC5tYXgoMSwgKGxlbiAvIDQ4KSB8IDApO1xuXG4gIC8vIEZpbmQgZCBhbmQgcywgKG4gLSAxKSA9ICgyIF4gcykgKiBkO1xuICB2YXIgbjEgPSBuLnN1Ym4oMSk7XG4gIGZvciAodmFyIHMgPSAwOyAhbjEudGVzdG4ocyk7IHMrKykge31cbiAgdmFyIGQgPSBuLnNocm4ocyk7XG5cbiAgdmFyIHJuMSA9IG4xLnRvUmVkKHJlZCk7XG5cbiAgZm9yICg7IGsgPiAwOyBrLS0pIHtcbiAgICB2YXIgYSA9IHRoaXMuX3JhbmRyYW5nZShuZXcgYm4oMiksIG4xKTtcblxuICAgIHZhciBnID0gbi5nY2QoYSk7XG4gICAgaWYgKGcuY21wbigxKSAhPT0gMClcbiAgICAgIHJldHVybiBnO1xuXG4gICAgdmFyIHggPSBhLnRvUmVkKHJlZCkucmVkUG93KGQpO1xuICAgIGlmICh4LmNtcChyb25lKSA9PT0gMCB8fCB4LmNtcChybjEpID09PSAwKVxuICAgICAgY29udGludWU7XG5cbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IHM7IGkrKykge1xuICAgICAgeCA9IHgucmVkU3FyKCk7XG5cbiAgICAgIGlmICh4LmNtcChyb25lKSA9PT0gMClcbiAgICAgICAgcmV0dXJuIHguZnJvbVJlZCgpLnN1Ym4oMSkuZ2NkKG4pO1xuICAgICAgaWYgKHguY21wKHJuMSkgPT09IDApXG4gICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGlmIChpID09PSBzKSB7XG4gICAgICB4ID0geC5yZWRTcXIoKTtcbiAgICAgIHJldHVybiB4LmZyb21SZWQoKS5zdWJuKDEpLmdjZChuKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSBleHBvcnRzO1xuXG5mdW5jdGlvbiB0b0FycmF5KG1zZywgZW5jKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KG1zZykpXG4gICAgcmV0dXJuIG1zZy5zbGljZSgpO1xuICBpZiAoIW1zZylcbiAgICByZXR1cm4gW107XG4gIHZhciByZXMgPSBbXTtcbiAgaWYgKHR5cGVvZiBtc2cgIT09ICdzdHJpbmcnKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtc2cubGVuZ3RoOyBpKyspXG4gICAgICByZXNbaV0gPSBtc2dbaV0gfCAwO1xuICAgIHJldHVybiByZXM7XG4gIH1cbiAgaWYgKGVuYyA9PT0gJ2hleCcpIHtcbiAgICBtc2cgPSBtc2cucmVwbGFjZSgvW15hLXowLTldKy9pZywgJycpO1xuICAgIGlmIChtc2cubGVuZ3RoICUgMiAhPT0gMClcbiAgICAgIG1zZyA9ICcwJyArIG1zZztcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1zZy5sZW5ndGg7IGkgKz0gMilcbiAgICAgIHJlcy5wdXNoKHBhcnNlSW50KG1zZ1tpXSArIG1zZ1tpICsgMV0sIDE2KSk7XG4gIH0gZWxzZSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtc2cubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBjID0gbXNnLmNoYXJDb2RlQXQoaSk7XG4gICAgICB2YXIgaGkgPSBjID4+IDg7XG4gICAgICB2YXIgbG8gPSBjICYgMHhmZjtcbiAgICAgIGlmIChoaSlcbiAgICAgICAgcmVzLnB1c2goaGksIGxvKTtcbiAgICAgIGVsc2VcbiAgICAgICAgcmVzLnB1c2gobG8pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzO1xufVxudXRpbHMudG9BcnJheSA9IHRvQXJyYXk7XG5cbmZ1bmN0aW9uIHplcm8yKHdvcmQpIHtcbiAgaWYgKHdvcmQubGVuZ3RoID09PSAxKVxuICAgIHJldHVybiAnMCcgKyB3b3JkO1xuICBlbHNlXG4gICAgcmV0dXJuIHdvcmQ7XG59XG51dGlscy56ZXJvMiA9IHplcm8yO1xuXG5mdW5jdGlvbiB0b0hleChtc2cpIHtcbiAgdmFyIHJlcyA9ICcnO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IG1zZy5sZW5ndGg7IGkrKylcbiAgICByZXMgKz0gemVybzIobXNnW2ldLnRvU3RyaW5nKDE2KSk7XG4gIHJldHVybiByZXM7XG59XG51dGlscy50b0hleCA9IHRvSGV4O1xuXG51dGlscy5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUoYXJyLCBlbmMpIHtcbiAgaWYgKGVuYyA9PT0gJ2hleCcpXG4gICAgcmV0dXJuIHRvSGV4KGFycik7XG4gIGVsc2VcbiAgICByZXR1cm4gYXJyO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGN1cnZlID0gZXhwb3J0cztcblxuY3VydmUuYmFzZSA9IHJlcXVpcmUoJy4vYmFzZScpO1xuY3VydmUuc2hvcnQgPSByZXF1aXJlKCcuL3Nob3J0Jyk7XG5jdXJ2ZS5tb250ID0gcmVxdWlyZSgnLi9tb250Jyk7XG5jdXJ2ZS5lZHdhcmRzID0gcmVxdWlyZSgnLi9lZHdhcmRzJyk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG52YXIgcm90cjMyID0gdXRpbHMucm90cjMyO1xuXG5mdW5jdGlvbiBmdF8xKHMsIHgsIHksIHopIHtcbiAgaWYgKHMgPT09IDApXG4gICAgcmV0dXJuIGNoMzIoeCwgeSwgeik7XG4gIGlmIChzID09PSAxIHx8IHMgPT09IDMpXG4gICAgcmV0dXJuIHAzMih4LCB5LCB6KTtcbiAgaWYgKHMgPT09IDIpXG4gICAgcmV0dXJuIG1hajMyKHgsIHksIHopO1xufVxuZXhwb3J0cy5mdF8xID0gZnRfMTtcblxuZnVuY3Rpb24gY2gzMih4LCB5LCB6KSB7XG4gIHJldHVybiAoeCAmIHkpIF4gKCh+eCkgJiB6KTtcbn1cbmV4cG9ydHMuY2gzMiA9IGNoMzI7XG5cbmZ1bmN0aW9uIG1hajMyKHgsIHksIHopIHtcbiAgcmV0dXJuICh4ICYgeSkgXiAoeCAmIHopIF4gKHkgJiB6KTtcbn1cbmV4cG9ydHMubWFqMzIgPSBtYWozMjtcblxuZnVuY3Rpb24gcDMyKHgsIHksIHopIHtcbiAgcmV0dXJuIHggXiB5IF4gejtcbn1cbmV4cG9ydHMucDMyID0gcDMyO1xuXG5mdW5jdGlvbiBzMF8yNTYoeCkge1xuICByZXR1cm4gcm90cjMyKHgsIDIpIF4gcm90cjMyKHgsIDEzKSBeIHJvdHIzMih4LCAyMik7XG59XG5leHBvcnRzLnMwXzI1NiA9IHMwXzI1NjtcblxuZnVuY3Rpb24gczFfMjU2KHgpIHtcbiAgcmV0dXJuIHJvdHIzMih4LCA2KSBeIHJvdHIzMih4LCAxMSkgXiByb3RyMzIoeCwgMjUpO1xufVxuZXhwb3J0cy5zMV8yNTYgPSBzMV8yNTY7XG5cbmZ1bmN0aW9uIGcwXzI1Nih4KSB7XG4gIHJldHVybiByb3RyMzIoeCwgNykgXiByb3RyMzIoeCwgMTgpIF4gKHggPj4+IDMpO1xufVxuZXhwb3J0cy5nMF8yNTYgPSBnMF8yNTY7XG5cbmZ1bmN0aW9uIGcxXzI1Nih4KSB7XG4gIHJldHVybiByb3RyMzIoeCwgMTcpIF4gcm90cjMyKHgsIDE5KSBeICh4ID4+PiAxMCk7XG59XG5leHBvcnRzLmcxXzI1NiA9IGcxXzI1NjtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcbnZhciBjb21tb24gPSByZXF1aXJlKCcuLi9jb21tb24nKTtcbnZhciBzaGFDb21tb24gPSByZXF1aXJlKCcuL2NvbW1vbicpO1xudmFyIGFzc2VydCA9IHJlcXVpcmUoJ21pbmltYWxpc3RpYy1hc3NlcnQnKTtcblxudmFyIHN1bTMyID0gdXRpbHMuc3VtMzI7XG52YXIgc3VtMzJfNCA9IHV0aWxzLnN1bTMyXzQ7XG52YXIgc3VtMzJfNSA9IHV0aWxzLnN1bTMyXzU7XG52YXIgY2gzMiA9IHNoYUNvbW1vbi5jaDMyO1xudmFyIG1hajMyID0gc2hhQ29tbW9uLm1hajMyO1xudmFyIHMwXzI1NiA9IHNoYUNvbW1vbi5zMF8yNTY7XG52YXIgczFfMjU2ID0gc2hhQ29tbW9uLnMxXzI1NjtcbnZhciBnMF8yNTYgPSBzaGFDb21tb24uZzBfMjU2O1xudmFyIGcxXzI1NiA9IHNoYUNvbW1vbi5nMV8yNTY7XG5cbnZhciBCbG9ja0hhc2ggPSBjb21tb24uQmxvY2tIYXNoO1xuXG52YXIgc2hhMjU2X0sgPSBbXG4gIDB4NDI4YTJmOTgsIDB4NzEzNzQ0OTEsIDB4YjVjMGZiY2YsIDB4ZTliNWRiYTUsXG4gIDB4Mzk1NmMyNWIsIDB4NTlmMTExZjEsIDB4OTIzZjgyYTQsIDB4YWIxYzVlZDUsXG4gIDB4ZDgwN2FhOTgsIDB4MTI4MzViMDEsIDB4MjQzMTg1YmUsIDB4NTUwYzdkYzMsXG4gIDB4NzJiZTVkNzQsIDB4ODBkZWIxZmUsIDB4OWJkYzA2YTcsIDB4YzE5YmYxNzQsXG4gIDB4ZTQ5YjY5YzEsIDB4ZWZiZTQ3ODYsIDB4MGZjMTlkYzYsIDB4MjQwY2ExY2MsXG4gIDB4MmRlOTJjNmYsIDB4NGE3NDg0YWEsIDB4NWNiMGE5ZGMsIDB4NzZmOTg4ZGEsXG4gIDB4OTgzZTUxNTIsIDB4YTgzMWM2NmQsIDB4YjAwMzI3YzgsIDB4YmY1OTdmYzcsXG4gIDB4YzZlMDBiZjMsIDB4ZDVhNzkxNDcsIDB4MDZjYTYzNTEsIDB4MTQyOTI5NjcsXG4gIDB4MjdiNzBhODUsIDB4MmUxYjIxMzgsIDB4NGQyYzZkZmMsIDB4NTMzODBkMTMsXG4gIDB4NjUwYTczNTQsIDB4NzY2YTBhYmIsIDB4ODFjMmM5MmUsIDB4OTI3MjJjODUsXG4gIDB4YTJiZmU4YTEsIDB4YTgxYTY2NGIsIDB4YzI0YjhiNzAsIDB4Yzc2YzUxYTMsXG4gIDB4ZDE5MmU4MTksIDB4ZDY5OTA2MjQsIDB4ZjQwZTM1ODUsIDB4MTA2YWEwNzAsXG4gIDB4MTlhNGMxMTYsIDB4MWUzNzZjMDgsIDB4Mjc0ODc3NGMsIDB4MzRiMGJjYjUsXG4gIDB4MzkxYzBjYjMsIDB4NGVkOGFhNGEsIDB4NWI5Y2NhNGYsIDB4NjgyZTZmZjMsXG4gIDB4NzQ4ZjgyZWUsIDB4NzhhNTYzNmYsIDB4ODRjODc4MTQsIDB4OGNjNzAyMDgsXG4gIDB4OTBiZWZmZmEsIDB4YTQ1MDZjZWIsIDB4YmVmOWEzZjcsIDB4YzY3MTc4ZjJcbl07XG5cbmZ1bmN0aW9uIFNIQTI1NigpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFNIQTI1NikpXG4gICAgcmV0dXJuIG5ldyBTSEEyNTYoKTtcblxuICBCbG9ja0hhc2guY2FsbCh0aGlzKTtcbiAgdGhpcy5oID0gW1xuICAgIDB4NmEwOWU2NjcsIDB4YmI2N2FlODUsIDB4M2M2ZWYzNzIsIDB4YTU0ZmY1M2EsXG4gICAgMHg1MTBlNTI3ZiwgMHg5YjA1Njg4YywgMHgxZjgzZDlhYiwgMHg1YmUwY2QxOVxuICBdO1xuICB0aGlzLmsgPSBzaGEyNTZfSztcbiAgdGhpcy5XID0gbmV3IEFycmF5KDY0KTtcbn1cbnV0aWxzLmluaGVyaXRzKFNIQTI1NiwgQmxvY2tIYXNoKTtcbm1vZHVsZS5leHBvcnRzID0gU0hBMjU2O1xuXG5TSEEyNTYuYmxvY2tTaXplID0gNTEyO1xuU0hBMjU2Lm91dFNpemUgPSAyNTY7XG5TSEEyNTYuaG1hY1N0cmVuZ3RoID0gMTkyO1xuU0hBMjU2LnBhZExlbmd0aCA9IDY0O1xuXG5TSEEyNTYucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiBfdXBkYXRlKG1zZywgc3RhcnQpIHtcbiAgdmFyIFcgPSB0aGlzLlc7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCAxNjsgaSsrKVxuICAgIFdbaV0gPSBtc2dbc3RhcnQgKyBpXTtcbiAgZm9yICg7IGkgPCBXLmxlbmd0aDsgaSsrKVxuICAgIFdbaV0gPSBzdW0zMl80KGcxXzI1NihXW2kgLSAyXSksIFdbaSAtIDddLCBnMF8yNTYoV1tpIC0gMTVdKSwgV1tpIC0gMTZdKTtcblxuICB2YXIgYSA9IHRoaXMuaFswXTtcbiAgdmFyIGIgPSB0aGlzLmhbMV07XG4gIHZhciBjID0gdGhpcy5oWzJdO1xuICB2YXIgZCA9IHRoaXMuaFszXTtcbiAgdmFyIGUgPSB0aGlzLmhbNF07XG4gIHZhciBmID0gdGhpcy5oWzVdO1xuICB2YXIgZyA9IHRoaXMuaFs2XTtcbiAgdmFyIGggPSB0aGlzLmhbN107XG5cbiAgYXNzZXJ0KHRoaXMuay5sZW5ndGggPT09IFcubGVuZ3RoKTtcbiAgZm9yIChpID0gMDsgaSA8IFcubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgVDEgPSBzdW0zMl81KGgsIHMxXzI1NihlKSwgY2gzMihlLCBmLCBnKSwgdGhpcy5rW2ldLCBXW2ldKTtcbiAgICB2YXIgVDIgPSBzdW0zMihzMF8yNTYoYSksIG1hajMyKGEsIGIsIGMpKTtcbiAgICBoID0gZztcbiAgICBnID0gZjtcbiAgICBmID0gZTtcbiAgICBlID0gc3VtMzIoZCwgVDEpO1xuICAgIGQgPSBjO1xuICAgIGMgPSBiO1xuICAgIGIgPSBhO1xuICAgIGEgPSBzdW0zMihUMSwgVDIpO1xuICB9XG5cbiAgdGhpcy5oWzBdID0gc3VtMzIodGhpcy5oWzBdLCBhKTtcbiAgdGhpcy5oWzFdID0gc3VtMzIodGhpcy5oWzFdLCBiKTtcbiAgdGhpcy5oWzJdID0gc3VtMzIodGhpcy5oWzJdLCBjKTtcbiAgdGhpcy5oWzNdID0gc3VtMzIodGhpcy5oWzNdLCBkKTtcbiAgdGhpcy5oWzRdID0gc3VtMzIodGhpcy5oWzRdLCBlKTtcbiAgdGhpcy5oWzVdID0gc3VtMzIodGhpcy5oWzVdLCBmKTtcbiAgdGhpcy5oWzZdID0gc3VtMzIodGhpcy5oWzZdLCBnKTtcbiAgdGhpcy5oWzddID0gc3VtMzIodGhpcy5oWzddLCBoKTtcbn07XG5cblNIQTI1Ni5wcm90b3R5cGUuX2RpZ2VzdCA9IGZ1bmN0aW9uIGRpZ2VzdChlbmMpIHtcbiAgaWYgKGVuYyA9PT0gJ2hleCcpXG4gICAgcmV0dXJuIHV0aWxzLnRvSGV4MzIodGhpcy5oLCAnYmlnJyk7XG4gIGVsc2VcbiAgICByZXR1cm4gdXRpbHMuc3BsaXQzMih0aGlzLmgsICdiaWcnKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG52YXIgY29tbW9uID0gcmVxdWlyZSgnLi4vY29tbW9uJyk7XG52YXIgYXNzZXJ0ID0gcmVxdWlyZSgnbWluaW1hbGlzdGljLWFzc2VydCcpO1xuXG52YXIgcm90cjY0X2hpID0gdXRpbHMucm90cjY0X2hpO1xudmFyIHJvdHI2NF9sbyA9IHV0aWxzLnJvdHI2NF9sbztcbnZhciBzaHI2NF9oaSA9IHV0aWxzLnNocjY0X2hpO1xudmFyIHNocjY0X2xvID0gdXRpbHMuc2hyNjRfbG87XG52YXIgc3VtNjQgPSB1dGlscy5zdW02NDtcbnZhciBzdW02NF9oaSA9IHV0aWxzLnN1bTY0X2hpO1xudmFyIHN1bTY0X2xvID0gdXRpbHMuc3VtNjRfbG87XG52YXIgc3VtNjRfNF9oaSA9IHV0aWxzLnN1bTY0XzRfaGk7XG52YXIgc3VtNjRfNF9sbyA9IHV0aWxzLnN1bTY0XzRfbG87XG52YXIgc3VtNjRfNV9oaSA9IHV0aWxzLnN1bTY0XzVfaGk7XG52YXIgc3VtNjRfNV9sbyA9IHV0aWxzLnN1bTY0XzVfbG87XG5cbnZhciBCbG9ja0hhc2ggPSBjb21tb24uQmxvY2tIYXNoO1xuXG52YXIgc2hhNTEyX0sgPSBbXG4gIDB4NDI4YTJmOTgsIDB4ZDcyOGFlMjIsIDB4NzEzNzQ0OTEsIDB4MjNlZjY1Y2QsXG4gIDB4YjVjMGZiY2YsIDB4ZWM0ZDNiMmYsIDB4ZTliNWRiYTUsIDB4ODE4OWRiYmMsXG4gIDB4Mzk1NmMyNWIsIDB4ZjM0OGI1MzgsIDB4NTlmMTExZjEsIDB4YjYwNWQwMTksXG4gIDB4OTIzZjgyYTQsIDB4YWYxOTRmOWIsIDB4YWIxYzVlZDUsIDB4ZGE2ZDgxMTgsXG4gIDB4ZDgwN2FhOTgsIDB4YTMwMzAyNDIsIDB4MTI4MzViMDEsIDB4NDU3MDZmYmUsXG4gIDB4MjQzMTg1YmUsIDB4NGVlNGIyOGMsIDB4NTUwYzdkYzMsIDB4ZDVmZmI0ZTIsXG4gIDB4NzJiZTVkNzQsIDB4ZjI3Yjg5NmYsIDB4ODBkZWIxZmUsIDB4M2IxNjk2YjEsXG4gIDB4OWJkYzA2YTcsIDB4MjVjNzEyMzUsIDB4YzE5YmYxNzQsIDB4Y2Y2OTI2OTQsXG4gIDB4ZTQ5YjY5YzEsIDB4OWVmMTRhZDIsIDB4ZWZiZTQ3ODYsIDB4Mzg0ZjI1ZTMsXG4gIDB4MGZjMTlkYzYsIDB4OGI4Y2Q1YjUsIDB4MjQwY2ExY2MsIDB4NzdhYzljNjUsXG4gIDB4MmRlOTJjNmYsIDB4NTkyYjAyNzUsIDB4NGE3NDg0YWEsIDB4NmVhNmU0ODMsXG4gIDB4NWNiMGE5ZGMsIDB4YmQ0MWZiZDQsIDB4NzZmOTg4ZGEsIDB4ODMxMTUzYjUsXG4gIDB4OTgzZTUxNTIsIDB4ZWU2NmRmYWIsIDB4YTgzMWM2NmQsIDB4MmRiNDMyMTAsXG4gIDB4YjAwMzI3YzgsIDB4OThmYjIxM2YsIDB4YmY1OTdmYzcsIDB4YmVlZjBlZTQsXG4gIDB4YzZlMDBiZjMsIDB4M2RhODhmYzIsIDB4ZDVhNzkxNDcsIDB4OTMwYWE3MjUsXG4gIDB4MDZjYTYzNTEsIDB4ZTAwMzgyNmYsIDB4MTQyOTI5NjcsIDB4MGEwZTZlNzAsXG4gIDB4MjdiNzBhODUsIDB4NDZkMjJmZmMsIDB4MmUxYjIxMzgsIDB4NWMyNmM5MjYsXG4gIDB4NGQyYzZkZmMsIDB4NWFjNDJhZWQsIDB4NTMzODBkMTMsIDB4OWQ5NWIzZGYsXG4gIDB4NjUwYTczNTQsIDB4OGJhZjYzZGUsIDB4NzY2YTBhYmIsIDB4M2M3N2IyYTgsXG4gIDB4ODFjMmM5MmUsIDB4NDdlZGFlZTYsIDB4OTI3MjJjODUsIDB4MTQ4MjM1M2IsXG4gIDB4YTJiZmU4YTEsIDB4NGNmMTAzNjQsIDB4YTgxYTY2NGIsIDB4YmM0MjMwMDEsXG4gIDB4YzI0YjhiNzAsIDB4ZDBmODk3OTEsIDB4Yzc2YzUxYTMsIDB4MDY1NGJlMzAsXG4gIDB4ZDE5MmU4MTksIDB4ZDZlZjUyMTgsIDB4ZDY5OTA2MjQsIDB4NTU2NWE5MTAsXG4gIDB4ZjQwZTM1ODUsIDB4NTc3MTIwMmEsIDB4MTA2YWEwNzAsIDB4MzJiYmQxYjgsXG4gIDB4MTlhNGMxMTYsIDB4YjhkMmQwYzgsIDB4MWUzNzZjMDgsIDB4NTE0MWFiNTMsXG4gIDB4Mjc0ODc3NGMsIDB4ZGY4ZWViOTksIDB4MzRiMGJjYjUsIDB4ZTE5YjQ4YTgsXG4gIDB4MzkxYzBjYjMsIDB4YzVjOTVhNjMsIDB4NGVkOGFhNGEsIDB4ZTM0MThhY2IsXG4gIDB4NWI5Y2NhNGYsIDB4Nzc2M2UzNzMsIDB4NjgyZTZmZjMsIDB4ZDZiMmI4YTMsXG4gIDB4NzQ4ZjgyZWUsIDB4NWRlZmIyZmMsIDB4NzhhNTYzNmYsIDB4NDMxNzJmNjAsXG4gIDB4ODRjODc4MTQsIDB4YTFmMGFiNzIsIDB4OGNjNzAyMDgsIDB4MWE2NDM5ZWMsXG4gIDB4OTBiZWZmZmEsIDB4MjM2MzFlMjgsIDB4YTQ1MDZjZWIsIDB4ZGU4MmJkZTksXG4gIDB4YmVmOWEzZjcsIDB4YjJjNjc5MTUsIDB4YzY3MTc4ZjIsIDB4ZTM3MjUzMmIsXG4gIDB4Y2EyNzNlY2UsIDB4ZWEyNjYxOWMsIDB4ZDE4NmI4YzcsIDB4MjFjMGMyMDcsXG4gIDB4ZWFkYTdkZDYsIDB4Y2RlMGViMWUsIDB4ZjU3ZDRmN2YsIDB4ZWU2ZWQxNzgsXG4gIDB4MDZmMDY3YWEsIDB4NzIxNzZmYmEsIDB4MGE2MzdkYzUsIDB4YTJjODk4YTYsXG4gIDB4MTEzZjk4MDQsIDB4YmVmOTBkYWUsIDB4MWI3MTBiMzUsIDB4MTMxYzQ3MWIsXG4gIDB4MjhkYjc3ZjUsIDB4MjMwNDdkODQsIDB4MzJjYWFiN2IsIDB4NDBjNzI0OTMsXG4gIDB4M2M5ZWJlMGEsIDB4MTVjOWJlYmMsIDB4NDMxZDY3YzQsIDB4OWMxMDBkNGMsXG4gIDB4NGNjNWQ0YmUsIDB4Y2IzZTQyYjYsIDB4NTk3ZjI5OWMsIDB4ZmM2NTdlMmEsXG4gIDB4NWZjYjZmYWIsIDB4M2FkNmZhZWMsIDB4NmM0NDE5OGMsIDB4NGE0NzU4MTdcbl07XG5cbmZ1bmN0aW9uIFNIQTUxMigpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFNIQTUxMikpXG4gICAgcmV0dXJuIG5ldyBTSEE1MTIoKTtcblxuICBCbG9ja0hhc2guY2FsbCh0aGlzKTtcbiAgdGhpcy5oID0gW1xuICAgIDB4NmEwOWU2NjcsIDB4ZjNiY2M5MDgsXG4gICAgMHhiYjY3YWU4NSwgMHg4NGNhYTczYixcbiAgICAweDNjNmVmMzcyLCAweGZlOTRmODJiLFxuICAgIDB4YTU0ZmY1M2EsIDB4NWYxZDM2ZjEsXG4gICAgMHg1MTBlNTI3ZiwgMHhhZGU2ODJkMSxcbiAgICAweDliMDU2ODhjLCAweDJiM2U2YzFmLFxuICAgIDB4MWY4M2Q5YWIsIDB4ZmI0MWJkNmIsXG4gICAgMHg1YmUwY2QxOSwgMHgxMzdlMjE3OSBdO1xuICB0aGlzLmsgPSBzaGE1MTJfSztcbiAgdGhpcy5XID0gbmV3IEFycmF5KDE2MCk7XG59XG51dGlscy5pbmhlcml0cyhTSEE1MTIsIEJsb2NrSGFzaCk7XG5tb2R1bGUuZXhwb3J0cyA9IFNIQTUxMjtcblxuU0hBNTEyLmJsb2NrU2l6ZSA9IDEwMjQ7XG5TSEE1MTIub3V0U2l6ZSA9IDUxMjtcblNIQTUxMi5obWFjU3RyZW5ndGggPSAxOTI7XG5TSEE1MTIucGFkTGVuZ3RoID0gMTI4O1xuXG5TSEE1MTIucHJvdG90eXBlLl9wcmVwYXJlQmxvY2sgPSBmdW5jdGlvbiBfcHJlcGFyZUJsb2NrKG1zZywgc3RhcnQpIHtcbiAgdmFyIFcgPSB0aGlzLlc7XG5cbiAgLy8gMzIgeCAzMmJpdCB3b3Jkc1xuICBmb3IgKHZhciBpID0gMDsgaSA8IDMyOyBpKyspXG4gICAgV1tpXSA9IG1zZ1tzdGFydCArIGldO1xuICBmb3IgKDsgaSA8IFcubGVuZ3RoOyBpICs9IDIpIHtcbiAgICB2YXIgYzBfaGkgPSBnMV81MTJfaGkoV1tpIC0gNF0sIFdbaSAtIDNdKTsgIC8vIGkgLSAyXG4gICAgdmFyIGMwX2xvID0gZzFfNTEyX2xvKFdbaSAtIDRdLCBXW2kgLSAzXSk7XG4gICAgdmFyIGMxX2hpID0gV1tpIC0gMTRdOyAgLy8gaSAtIDdcbiAgICB2YXIgYzFfbG8gPSBXW2kgLSAxM107XG4gICAgdmFyIGMyX2hpID0gZzBfNTEyX2hpKFdbaSAtIDMwXSwgV1tpIC0gMjldKTsgIC8vIGkgLSAxNVxuICAgIHZhciBjMl9sbyA9IGcwXzUxMl9sbyhXW2kgLSAzMF0sIFdbaSAtIDI5XSk7XG4gICAgdmFyIGMzX2hpID0gV1tpIC0gMzJdOyAgLy8gaSAtIDE2XG4gICAgdmFyIGMzX2xvID0gV1tpIC0gMzFdO1xuXG4gICAgV1tpXSA9IHN1bTY0XzRfaGkoXG4gICAgICBjMF9oaSwgYzBfbG8sXG4gICAgICBjMV9oaSwgYzFfbG8sXG4gICAgICBjMl9oaSwgYzJfbG8sXG4gICAgICBjM19oaSwgYzNfbG8pO1xuICAgIFdbaSArIDFdID0gc3VtNjRfNF9sbyhcbiAgICAgIGMwX2hpLCBjMF9sbyxcbiAgICAgIGMxX2hpLCBjMV9sbyxcbiAgICAgIGMyX2hpLCBjMl9sbyxcbiAgICAgIGMzX2hpLCBjM19sbyk7XG4gIH1cbn07XG5cblNIQTUxMi5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIF91cGRhdGUobXNnLCBzdGFydCkge1xuICB0aGlzLl9wcmVwYXJlQmxvY2sobXNnLCBzdGFydCk7XG5cbiAgdmFyIFcgPSB0aGlzLlc7XG5cbiAgdmFyIGFoID0gdGhpcy5oWzBdO1xuICB2YXIgYWwgPSB0aGlzLmhbMV07XG4gIHZhciBiaCA9IHRoaXMuaFsyXTtcbiAgdmFyIGJsID0gdGhpcy5oWzNdO1xuICB2YXIgY2ggPSB0aGlzLmhbNF07XG4gIHZhciBjbCA9IHRoaXMuaFs1XTtcbiAgdmFyIGRoID0gdGhpcy5oWzZdO1xuICB2YXIgZGwgPSB0aGlzLmhbN107XG4gIHZhciBlaCA9IHRoaXMuaFs4XTtcbiAgdmFyIGVsID0gdGhpcy5oWzldO1xuICB2YXIgZmggPSB0aGlzLmhbMTBdO1xuICB2YXIgZmwgPSB0aGlzLmhbMTFdO1xuICB2YXIgZ2ggPSB0aGlzLmhbMTJdO1xuICB2YXIgZ2wgPSB0aGlzLmhbMTNdO1xuICB2YXIgaGggPSB0aGlzLmhbMTRdO1xuICB2YXIgaGwgPSB0aGlzLmhbMTVdO1xuXG4gIGFzc2VydCh0aGlzLmsubGVuZ3RoID09PSBXLmxlbmd0aCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgVy5sZW5ndGg7IGkgKz0gMikge1xuICAgIHZhciBjMF9oaSA9IGhoO1xuICAgIHZhciBjMF9sbyA9IGhsO1xuICAgIHZhciBjMV9oaSA9IHMxXzUxMl9oaShlaCwgZWwpO1xuICAgIHZhciBjMV9sbyA9IHMxXzUxMl9sbyhlaCwgZWwpO1xuICAgIHZhciBjMl9oaSA9IGNoNjRfaGkoZWgsIGVsLCBmaCwgZmwsIGdoLCBnbCk7XG4gICAgdmFyIGMyX2xvID0gY2g2NF9sbyhlaCwgZWwsIGZoLCBmbCwgZ2gsIGdsKTtcbiAgICB2YXIgYzNfaGkgPSB0aGlzLmtbaV07XG4gICAgdmFyIGMzX2xvID0gdGhpcy5rW2kgKyAxXTtcbiAgICB2YXIgYzRfaGkgPSBXW2ldO1xuICAgIHZhciBjNF9sbyA9IFdbaSArIDFdO1xuXG4gICAgdmFyIFQxX2hpID0gc3VtNjRfNV9oaShcbiAgICAgIGMwX2hpLCBjMF9sbyxcbiAgICAgIGMxX2hpLCBjMV9sbyxcbiAgICAgIGMyX2hpLCBjMl9sbyxcbiAgICAgIGMzX2hpLCBjM19sbyxcbiAgICAgIGM0X2hpLCBjNF9sbyk7XG4gICAgdmFyIFQxX2xvID0gc3VtNjRfNV9sbyhcbiAgICAgIGMwX2hpLCBjMF9sbyxcbiAgICAgIGMxX2hpLCBjMV9sbyxcbiAgICAgIGMyX2hpLCBjMl9sbyxcbiAgICAgIGMzX2hpLCBjM19sbyxcbiAgICAgIGM0X2hpLCBjNF9sbyk7XG5cbiAgICBjMF9oaSA9IHMwXzUxMl9oaShhaCwgYWwpO1xuICAgIGMwX2xvID0gczBfNTEyX2xvKGFoLCBhbCk7XG4gICAgYzFfaGkgPSBtYWo2NF9oaShhaCwgYWwsIGJoLCBibCwgY2gsIGNsKTtcbiAgICBjMV9sbyA9IG1hajY0X2xvKGFoLCBhbCwgYmgsIGJsLCBjaCwgY2wpO1xuXG4gICAgdmFyIFQyX2hpID0gc3VtNjRfaGkoYzBfaGksIGMwX2xvLCBjMV9oaSwgYzFfbG8pO1xuICAgIHZhciBUMl9sbyA9IHN1bTY0X2xvKGMwX2hpLCBjMF9sbywgYzFfaGksIGMxX2xvKTtcblxuICAgIGhoID0gZ2g7XG4gICAgaGwgPSBnbDtcblxuICAgIGdoID0gZmg7XG4gICAgZ2wgPSBmbDtcblxuICAgIGZoID0gZWg7XG4gICAgZmwgPSBlbDtcblxuICAgIGVoID0gc3VtNjRfaGkoZGgsIGRsLCBUMV9oaSwgVDFfbG8pO1xuICAgIGVsID0gc3VtNjRfbG8oZGwsIGRsLCBUMV9oaSwgVDFfbG8pO1xuXG4gICAgZGggPSBjaDtcbiAgICBkbCA9IGNsO1xuXG4gICAgY2ggPSBiaDtcbiAgICBjbCA9IGJsO1xuXG4gICAgYmggPSBhaDtcbiAgICBibCA9IGFsO1xuXG4gICAgYWggPSBzdW02NF9oaShUMV9oaSwgVDFfbG8sIFQyX2hpLCBUMl9sbyk7XG4gICAgYWwgPSBzdW02NF9sbyhUMV9oaSwgVDFfbG8sIFQyX2hpLCBUMl9sbyk7XG4gIH1cblxuICBzdW02NCh0aGlzLmgsIDAsIGFoLCBhbCk7XG4gIHN1bTY0KHRoaXMuaCwgMiwgYmgsIGJsKTtcbiAgc3VtNjQodGhpcy5oLCA0LCBjaCwgY2wpO1xuICBzdW02NCh0aGlzLmgsIDYsIGRoLCBkbCk7XG4gIHN1bTY0KHRoaXMuaCwgOCwgZWgsIGVsKTtcbiAgc3VtNjQodGhpcy5oLCAxMCwgZmgsIGZsKTtcbiAgc3VtNjQodGhpcy5oLCAxMiwgZ2gsIGdsKTtcbiAgc3VtNjQodGhpcy5oLCAxNCwgaGgsIGhsKTtcbn07XG5cblNIQTUxMi5wcm90b3R5cGUuX2RpZ2VzdCA9IGZ1bmN0aW9uIGRpZ2VzdChlbmMpIHtcbiAgaWYgKGVuYyA9PT0gJ2hleCcpXG4gICAgcmV0dXJuIHV0aWxzLnRvSGV4MzIodGhpcy5oLCAnYmlnJyk7XG4gIGVsc2VcbiAgICByZXR1cm4gdXRpbHMuc3BsaXQzMih0aGlzLmgsICdiaWcnKTtcbn07XG5cbmZ1bmN0aW9uIGNoNjRfaGkoeGgsIHhsLCB5aCwgeWwsIHpoKSB7XG4gIHZhciByID0gKHhoICYgeWgpIF4gKCh+eGgpICYgemgpO1xuICBpZiAociA8IDApXG4gICAgciArPSAweDEwMDAwMDAwMDtcbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIGNoNjRfbG8oeGgsIHhsLCB5aCwgeWwsIHpoLCB6bCkge1xuICB2YXIgciA9ICh4bCAmIHlsKSBeICgofnhsKSAmIHpsKTtcbiAgaWYgKHIgPCAwKVxuICAgIHIgKz0gMHgxMDAwMDAwMDA7XG4gIHJldHVybiByO1xufVxuXG5mdW5jdGlvbiBtYWo2NF9oaSh4aCwgeGwsIHloLCB5bCwgemgpIHtcbiAgdmFyIHIgPSAoeGggJiB5aCkgXiAoeGggJiB6aCkgXiAoeWggJiB6aCk7XG4gIGlmIChyIDwgMClcbiAgICByICs9IDB4MTAwMDAwMDAwO1xuICByZXR1cm4gcjtcbn1cblxuZnVuY3Rpb24gbWFqNjRfbG8oeGgsIHhsLCB5aCwgeWwsIHpoLCB6bCkge1xuICB2YXIgciA9ICh4bCAmIHlsKSBeICh4bCAmIHpsKSBeICh5bCAmIHpsKTtcbiAgaWYgKHIgPCAwKVxuICAgIHIgKz0gMHgxMDAwMDAwMDA7XG4gIHJldHVybiByO1xufVxuXG5mdW5jdGlvbiBzMF81MTJfaGkoeGgsIHhsKSB7XG4gIHZhciBjMF9oaSA9IHJvdHI2NF9oaSh4aCwgeGwsIDI4KTtcbiAgdmFyIGMxX2hpID0gcm90cjY0X2hpKHhsLCB4aCwgMik7ICAvLyAzNFxuICB2YXIgYzJfaGkgPSByb3RyNjRfaGkoeGwsIHhoLCA3KTsgIC8vIDM5XG5cbiAgdmFyIHIgPSBjMF9oaSBeIGMxX2hpIF4gYzJfaGk7XG4gIGlmIChyIDwgMClcbiAgICByICs9IDB4MTAwMDAwMDAwO1xuICByZXR1cm4gcjtcbn1cblxuZnVuY3Rpb24gczBfNTEyX2xvKHhoLCB4bCkge1xuICB2YXIgYzBfbG8gPSByb3RyNjRfbG8oeGgsIHhsLCAyOCk7XG4gIHZhciBjMV9sbyA9IHJvdHI2NF9sbyh4bCwgeGgsIDIpOyAgLy8gMzRcbiAgdmFyIGMyX2xvID0gcm90cjY0X2xvKHhsLCB4aCwgNyk7ICAvLyAzOVxuXG4gIHZhciByID0gYzBfbG8gXiBjMV9sbyBeIGMyX2xvO1xuICBpZiAociA8IDApXG4gICAgciArPSAweDEwMDAwMDAwMDtcbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIHMxXzUxMl9oaSh4aCwgeGwpIHtcbiAgdmFyIGMwX2hpID0gcm90cjY0X2hpKHhoLCB4bCwgMTQpO1xuICB2YXIgYzFfaGkgPSByb3RyNjRfaGkoeGgsIHhsLCAxOCk7XG4gIHZhciBjMl9oaSA9IHJvdHI2NF9oaSh4bCwgeGgsIDkpOyAgLy8gNDFcblxuICB2YXIgciA9IGMwX2hpIF4gYzFfaGkgXiBjMl9oaTtcbiAgaWYgKHIgPCAwKVxuICAgIHIgKz0gMHgxMDAwMDAwMDA7XG4gIHJldHVybiByO1xufVxuXG5mdW5jdGlvbiBzMV81MTJfbG8oeGgsIHhsKSB7XG4gIHZhciBjMF9sbyA9IHJvdHI2NF9sbyh4aCwgeGwsIDE0KTtcbiAgdmFyIGMxX2xvID0gcm90cjY0X2xvKHhoLCB4bCwgMTgpO1xuICB2YXIgYzJfbG8gPSByb3RyNjRfbG8oeGwsIHhoLCA5KTsgIC8vIDQxXG5cbiAgdmFyIHIgPSBjMF9sbyBeIGMxX2xvIF4gYzJfbG87XG4gIGlmIChyIDwgMClcbiAgICByICs9IDB4MTAwMDAwMDAwO1xuICByZXR1cm4gcjtcbn1cblxuZnVuY3Rpb24gZzBfNTEyX2hpKHhoLCB4bCkge1xuICB2YXIgYzBfaGkgPSByb3RyNjRfaGkoeGgsIHhsLCAxKTtcbiAgdmFyIGMxX2hpID0gcm90cjY0X2hpKHhoLCB4bCwgOCk7XG4gIHZhciBjMl9oaSA9IHNocjY0X2hpKHhoLCB4bCwgNyk7XG5cbiAgdmFyIHIgPSBjMF9oaSBeIGMxX2hpIF4gYzJfaGk7XG4gIGlmIChyIDwgMClcbiAgICByICs9IDB4MTAwMDAwMDAwO1xuICByZXR1cm4gcjtcbn1cblxuZnVuY3Rpb24gZzBfNTEyX2xvKHhoLCB4bCkge1xuICB2YXIgYzBfbG8gPSByb3RyNjRfbG8oeGgsIHhsLCAxKTtcbiAgdmFyIGMxX2xvID0gcm90cjY0X2xvKHhoLCB4bCwgOCk7XG4gIHZhciBjMl9sbyA9IHNocjY0X2xvKHhoLCB4bCwgNyk7XG5cbiAgdmFyIHIgPSBjMF9sbyBeIGMxX2xvIF4gYzJfbG87XG4gIGlmIChyIDwgMClcbiAgICByICs9IDB4MTAwMDAwMDAwO1xuICByZXR1cm4gcjtcbn1cblxuZnVuY3Rpb24gZzFfNTEyX2hpKHhoLCB4bCkge1xuICB2YXIgYzBfaGkgPSByb3RyNjRfaGkoeGgsIHhsLCAxOSk7XG4gIHZhciBjMV9oaSA9IHJvdHI2NF9oaSh4bCwgeGgsIDI5KTsgIC8vIDYxXG4gIHZhciBjMl9oaSA9IHNocjY0X2hpKHhoLCB4bCwgNik7XG5cbiAgdmFyIHIgPSBjMF9oaSBeIGMxX2hpIF4gYzJfaGk7XG4gIGlmIChyIDwgMClcbiAgICByICs9IDB4MTAwMDAwMDAwO1xuICByZXR1cm4gcjtcbn1cblxuZnVuY3Rpb24gZzFfNTEyX2xvKHhoLCB4bCkge1xuICB2YXIgYzBfbG8gPSByb3RyNjRfbG8oeGgsIHhsLCAxOSk7XG4gIHZhciBjMV9sbyA9IHJvdHI2NF9sbyh4bCwgeGgsIDI5KTsgIC8vIDYxXG4gIHZhciBjMl9sbyA9IHNocjY0X2xvKHhoLCB4bCwgNik7XG5cbiAgdmFyIHIgPSBjMF9sbyBeIGMxX2xvIF4gYzJfbG87XG4gIGlmIChyIDwgMClcbiAgICByICs9IDB4MTAwMDAwMDAwO1xuICByZXR1cm4gcjtcbn1cbiIsInZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG52YXIgUmVwb3J0ZXIgPSByZXF1aXJlKCcuLi9iYXNlJykuUmVwb3J0ZXI7XG52YXIgQnVmZmVyID0gcmVxdWlyZSgnYnVmZmVyJykuQnVmZmVyO1xuXG5mdW5jdGlvbiBEZWNvZGVyQnVmZmVyKGJhc2UsIG9wdGlvbnMpIHtcbiAgUmVwb3J0ZXIuY2FsbCh0aGlzLCBvcHRpb25zKTtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYmFzZSkpIHtcbiAgICB0aGlzLmVycm9yKCdJbnB1dCBub3QgQnVmZmVyJyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdGhpcy5iYXNlID0gYmFzZTtcbiAgdGhpcy5vZmZzZXQgPSAwO1xuICB0aGlzLmxlbmd0aCA9IGJhc2UubGVuZ3RoO1xufVxuaW5oZXJpdHMoRGVjb2RlckJ1ZmZlciwgUmVwb3J0ZXIpO1xuZXhwb3J0cy5EZWNvZGVyQnVmZmVyID0gRGVjb2RlckJ1ZmZlcjtcblxuRGVjb2RlckJ1ZmZlci5wcm90b3R5cGUuc2F2ZSA9IGZ1bmN0aW9uIHNhdmUoKSB7XG4gIHJldHVybiB7IG9mZnNldDogdGhpcy5vZmZzZXQsIHJlcG9ydGVyOiBSZXBvcnRlci5wcm90b3R5cGUuc2F2ZS5jYWxsKHRoaXMpIH07XG59O1xuXG5EZWNvZGVyQnVmZmVyLnByb3RvdHlwZS5yZXN0b3JlID0gZnVuY3Rpb24gcmVzdG9yZShzYXZlKSB7XG4gIC8vIFJldHVybiBza2lwcGVkIGRhdGFcbiAgdmFyIHJlcyA9IG5ldyBEZWNvZGVyQnVmZmVyKHRoaXMuYmFzZSk7XG4gIHJlcy5vZmZzZXQgPSBzYXZlLm9mZnNldDtcbiAgcmVzLmxlbmd0aCA9IHRoaXMub2Zmc2V0O1xuXG4gIHRoaXMub2Zmc2V0ID0gc2F2ZS5vZmZzZXQ7XG4gIFJlcG9ydGVyLnByb3RvdHlwZS5yZXN0b3JlLmNhbGwodGhpcywgc2F2ZS5yZXBvcnRlcik7XG5cbiAgcmV0dXJuIHJlcztcbn07XG5cbkRlY29kZXJCdWZmZXIucHJvdG90eXBlLmlzRW1wdHkgPSBmdW5jdGlvbiBpc0VtcHR5KCkge1xuICByZXR1cm4gdGhpcy5vZmZzZXQgPT09IHRoaXMubGVuZ3RoO1xufTtcblxuRGVjb2RlckJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQ4ID0gZnVuY3Rpb24gcmVhZFVJbnQ4KGZhaWwpIHtcbiAgaWYgKHRoaXMub2Zmc2V0ICsgMSA8PSB0aGlzLmxlbmd0aClcbiAgICByZXR1cm4gdGhpcy5iYXNlLnJlYWRVSW50OCh0aGlzLm9mZnNldCsrLCB0cnVlKTtcbiAgZWxzZVxuICAgIHJldHVybiB0aGlzLmVycm9yKGZhaWwgfHwgJ0RlY29kZXJCdWZmZXIgb3ZlcnJ1bicpO1xufVxuXG5EZWNvZGVyQnVmZmVyLnByb3RvdHlwZS5za2lwID0gZnVuY3Rpb24gc2tpcChieXRlcywgZmFpbCkge1xuICBpZiAoISh0aGlzLm9mZnNldCArIGJ5dGVzIDw9IHRoaXMubGVuZ3RoKSlcbiAgICByZXR1cm4gdGhpcy5lcnJvcihmYWlsIHx8ICdEZWNvZGVyQnVmZmVyIG92ZXJydW4nKTtcblxuICB2YXIgcmVzID0gbmV3IERlY29kZXJCdWZmZXIodGhpcy5iYXNlKTtcblxuICAvLyBTaGFyZSByZXBvcnRlciBzdGF0ZVxuICByZXMuX3JlcG9ydGVyU3RhdGUgPSB0aGlzLl9yZXBvcnRlclN0YXRlO1xuXG4gIHJlcy5vZmZzZXQgPSB0aGlzLm9mZnNldDtcbiAgcmVzLmxlbmd0aCA9IHRoaXMub2Zmc2V0ICsgYnl0ZXM7XG4gIHRoaXMub2Zmc2V0ICs9IGJ5dGVzO1xuICByZXR1cm4gcmVzO1xufVxuXG5EZWNvZGVyQnVmZmVyLnByb3RvdHlwZS5yYXcgPSBmdW5jdGlvbiByYXcoc2F2ZSkge1xuICByZXR1cm4gdGhpcy5iYXNlLnNsaWNlKHNhdmUgPyBzYXZlLm9mZnNldCA6IHRoaXMub2Zmc2V0LCB0aGlzLmxlbmd0aCk7XG59XG5cbmZ1bmN0aW9uIEVuY29kZXJCdWZmZXIodmFsdWUsIHJlcG9ydGVyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIHRoaXMubGVuZ3RoID0gMDtcbiAgICB0aGlzLnZhbHVlID0gdmFsdWUubWFwKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgIGlmICghKGl0ZW0gaW5zdGFuY2VvZiBFbmNvZGVyQnVmZmVyKSlcbiAgICAgICAgaXRlbSA9IG5ldyBFbmNvZGVyQnVmZmVyKGl0ZW0sIHJlcG9ydGVyKTtcbiAgICAgIHRoaXMubGVuZ3RoICs9IGl0ZW0ubGVuZ3RoO1xuICAgICAgcmV0dXJuIGl0ZW07XG4gICAgfSwgdGhpcyk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgIGlmICghKDAgPD0gdmFsdWUgJiYgdmFsdWUgPD0gMHhmZikpXG4gICAgICByZXR1cm4gcmVwb3J0ZXIuZXJyb3IoJ25vbi1ieXRlIEVuY29kZXJCdWZmZXIgdmFsdWUnKTtcbiAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgdGhpcy5sZW5ndGggPSAxO1xuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgdGhpcy5sZW5ndGggPSBCdWZmZXIuYnl0ZUxlbmd0aCh2YWx1ZSk7XG4gIH0gZWxzZSBpZiAoQnVmZmVyLmlzQnVmZmVyKHZhbHVlKSkge1xuICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICB0aGlzLmxlbmd0aCA9IHZhbHVlLmxlbmd0aDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcmVwb3J0ZXIuZXJyb3IoJ1Vuc3VwcG9ydGVkIHR5cGU6ICcgKyB0eXBlb2YgdmFsdWUpO1xuICB9XG59XG5leHBvcnRzLkVuY29kZXJCdWZmZXIgPSBFbmNvZGVyQnVmZmVyO1xuXG5FbmNvZGVyQnVmZmVyLnByb3RvdHlwZS5qb2luID0gZnVuY3Rpb24gam9pbihvdXQsIG9mZnNldCkge1xuICBpZiAoIW91dClcbiAgICBvdXQgPSBuZXcgQnVmZmVyKHRoaXMubGVuZ3RoKTtcbiAgaWYgKCFvZmZzZXQpXG4gICAgb2Zmc2V0ID0gMDtcblxuICBpZiAodGhpcy5sZW5ndGggPT09IDApXG4gICAgcmV0dXJuIG91dDtcblxuICBpZiAoQXJyYXkuaXNBcnJheSh0aGlzLnZhbHVlKSkge1xuICAgIHRoaXMudmFsdWUuZm9yRWFjaChmdW5jdGlvbihpdGVtKSB7XG4gICAgICBpdGVtLmpvaW4ob3V0LCBvZmZzZXQpO1xuICAgICAgb2Zmc2V0ICs9IGl0ZW0ubGVuZ3RoO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIGlmICh0eXBlb2YgdGhpcy52YWx1ZSA9PT0gJ251bWJlcicpXG4gICAgICBvdXRbb2Zmc2V0XSA9IHRoaXMudmFsdWU7XG4gICAgZWxzZSBpZiAodHlwZW9mIHRoaXMudmFsdWUgPT09ICdzdHJpbmcnKVxuICAgICAgb3V0LndyaXRlKHRoaXMudmFsdWUsIG9mZnNldCk7XG4gICAgZWxzZSBpZiAoQnVmZmVyLmlzQnVmZmVyKHRoaXMudmFsdWUpKVxuICAgICAgdGhpcy52YWx1ZS5jb3B5KG91dCwgb2Zmc2V0KTtcbiAgICBvZmZzZXQgKz0gdGhpcy5sZW5ndGg7XG4gIH1cblxuICByZXR1cm4gb3V0O1xufTtcbiIsInZhciBjb25zdGFudHMgPSBleHBvcnRzO1xuXG4vLyBIZWxwZXJcbmNvbnN0YW50cy5fcmV2ZXJzZSA9IGZ1bmN0aW9uIHJldmVyc2UobWFwKSB7XG4gIHZhciByZXMgPSB7fTtcblxuICBPYmplY3Qua2V5cyhtYXApLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgLy8gQ29udmVydCBrZXkgdG8gaW50ZWdlciBpZiBpdCBpcyBzdHJpbmdpZmllZFxuICAgIGlmICgoa2V5IHwgMCkgPT0ga2V5KVxuICAgICAga2V5ID0ga2V5IHwgMDtcblxuICAgIHZhciB2YWx1ZSA9IG1hcFtrZXldO1xuICAgIHJlc1t2YWx1ZV0gPSBrZXk7XG4gIH0pO1xuXG4gIHJldHVybiByZXM7XG59O1xuXG5jb25zdGFudHMuZGVyID0gcmVxdWlyZSgnLi9kZXInKTtcbiIsInZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG5cbnZhciBhc24xID0gcmVxdWlyZSgnLi4vLi4vYXNuMScpO1xudmFyIGJhc2UgPSBhc24xLmJhc2U7XG52YXIgYmlnbnVtID0gYXNuMS5iaWdudW07XG5cbi8vIEltcG9ydCBERVIgY29uc3RhbnRzXG52YXIgZGVyID0gYXNuMS5jb25zdGFudHMuZGVyO1xuXG5mdW5jdGlvbiBERVJEZWNvZGVyKGVudGl0eSkge1xuICB0aGlzLmVuYyA9ICdkZXInO1xuICB0aGlzLm5hbWUgPSBlbnRpdHkubmFtZTtcbiAgdGhpcy5lbnRpdHkgPSBlbnRpdHk7XG5cbiAgLy8gQ29uc3RydWN0IGJhc2UgdHJlZVxuICB0aGlzLnRyZWUgPSBuZXcgREVSTm9kZSgpO1xuICB0aGlzLnRyZWUuX2luaXQoZW50aXR5LmJvZHkpO1xufTtcbm1vZHVsZS5leHBvcnRzID0gREVSRGVjb2RlcjtcblxuREVSRGVjb2Rlci5wcm90b3R5cGUuZGVjb2RlID0gZnVuY3Rpb24gZGVjb2RlKGRhdGEsIG9wdGlvbnMpIHtcbiAgaWYgKCEoZGF0YSBpbnN0YW5jZW9mIGJhc2UuRGVjb2RlckJ1ZmZlcikpXG4gICAgZGF0YSA9IG5ldyBiYXNlLkRlY29kZXJCdWZmZXIoZGF0YSwgb3B0aW9ucyk7XG5cbiAgcmV0dXJuIHRoaXMudHJlZS5fZGVjb2RlKGRhdGEsIG9wdGlvbnMpO1xufTtcblxuLy8gVHJlZSBtZXRob2RzXG5cbmZ1bmN0aW9uIERFUk5vZGUocGFyZW50KSB7XG4gIGJhc2UuTm9kZS5jYWxsKHRoaXMsICdkZXInLCBwYXJlbnQpO1xufVxuaW5oZXJpdHMoREVSTm9kZSwgYmFzZS5Ob2RlKTtcblxuREVSTm9kZS5wcm90b3R5cGUuX3BlZWtUYWcgPSBmdW5jdGlvbiBwZWVrVGFnKGJ1ZmZlciwgdGFnLCBhbnkpIHtcbiAgaWYgKGJ1ZmZlci5pc0VtcHR5KCkpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIHZhciBzdGF0ZSA9IGJ1ZmZlci5zYXZlKCk7XG4gIHZhciBkZWNvZGVkVGFnID0gZGVyRGVjb2RlVGFnKGJ1ZmZlciwgJ0ZhaWxlZCB0byBwZWVrIHRhZzogXCInICsgdGFnICsgJ1wiJyk7XG4gIGlmIChidWZmZXIuaXNFcnJvcihkZWNvZGVkVGFnKSlcbiAgICByZXR1cm4gZGVjb2RlZFRhZztcblxuICBidWZmZXIucmVzdG9yZShzdGF0ZSk7XG5cbiAgcmV0dXJuIGRlY29kZWRUYWcudGFnID09PSB0YWcgfHwgZGVjb2RlZFRhZy50YWdTdHIgPT09IHRhZyB8fFxuICAgIChkZWNvZGVkVGFnLnRhZ1N0ciArICdvZicpID09PSB0YWcgfHwgYW55O1xufTtcblxuREVSTm9kZS5wcm90b3R5cGUuX2RlY29kZVRhZyA9IGZ1bmN0aW9uIGRlY29kZVRhZyhidWZmZXIsIHRhZywgYW55KSB7XG4gIHZhciBkZWNvZGVkVGFnID0gZGVyRGVjb2RlVGFnKGJ1ZmZlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0ZhaWxlZCB0byBkZWNvZGUgdGFnIG9mIFwiJyArIHRhZyArICdcIicpO1xuICBpZiAoYnVmZmVyLmlzRXJyb3IoZGVjb2RlZFRhZykpXG4gICAgcmV0dXJuIGRlY29kZWRUYWc7XG5cbiAgdmFyIGxlbiA9IGRlckRlY29kZUxlbihidWZmZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgZGVjb2RlZFRhZy5wcmltaXRpdmUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgJ0ZhaWxlZCB0byBnZXQgbGVuZ3RoIG9mIFwiJyArIHRhZyArICdcIicpO1xuXG4gIC8vIEZhaWx1cmVcbiAgaWYgKGJ1ZmZlci5pc0Vycm9yKGxlbikpXG4gICAgcmV0dXJuIGxlbjtcblxuICBpZiAoIWFueSAmJlxuICAgICAgZGVjb2RlZFRhZy50YWcgIT09IHRhZyAmJlxuICAgICAgZGVjb2RlZFRhZy50YWdTdHIgIT09IHRhZyAmJlxuICAgICAgZGVjb2RlZFRhZy50YWdTdHIgKyAnb2YnICE9PSB0YWcpIHtcbiAgICByZXR1cm4gYnVmZmVyLmVycm9yKCdGYWlsZWQgdG8gbWF0Y2ggdGFnOiBcIicgKyB0YWcgKyAnXCInKTtcbiAgfVxuXG4gIGlmIChkZWNvZGVkVGFnLnByaW1pdGl2ZSB8fCBsZW4gIT09IG51bGwpXG4gICAgcmV0dXJuIGJ1ZmZlci5za2lwKGxlbiwgJ0ZhaWxlZCB0byBtYXRjaCBib2R5IG9mOiBcIicgKyB0YWcgKyAnXCInKTtcblxuICAvLyBJbmRlZmluaXRlIGxlbmd0aC4uLiBmaW5kIEVORCB0YWdcbiAgdmFyIHN0YXRlID0gYnVmZmVyLnNhdmUoKTtcbiAgdmFyIHJlcyA9IHRoaXMuX3NraXBVbnRpbEVuZChcbiAgICAgIGJ1ZmZlcixcbiAgICAgICdGYWlsZWQgdG8gc2tpcCBpbmRlZmluaXRlIGxlbmd0aCBib2R5OiBcIicgKyB0aGlzLnRhZyArICdcIicpO1xuICBpZiAoYnVmZmVyLmlzRXJyb3IocmVzKSlcbiAgICByZXR1cm4gcmVzO1xuXG4gIGxlbiA9IGJ1ZmZlci5vZmZzZXQgLSBzdGF0ZS5vZmZzZXQ7XG4gIGJ1ZmZlci5yZXN0b3JlKHN0YXRlKTtcbiAgcmV0dXJuIGJ1ZmZlci5za2lwKGxlbiwgJ0ZhaWxlZCB0byBtYXRjaCBib2R5IG9mOiBcIicgKyB0YWcgKyAnXCInKTtcbn07XG5cbkRFUk5vZGUucHJvdG90eXBlLl9za2lwVW50aWxFbmQgPSBmdW5jdGlvbiBza2lwVW50aWxFbmQoYnVmZmVyLCBmYWlsKSB7XG4gIHdoaWxlICh0cnVlKSB7XG4gICAgdmFyIHRhZyA9IGRlckRlY29kZVRhZyhidWZmZXIsIGZhaWwpO1xuICAgIGlmIChidWZmZXIuaXNFcnJvcih0YWcpKVxuICAgICAgcmV0dXJuIHRhZztcbiAgICB2YXIgbGVuID0gZGVyRGVjb2RlTGVuKGJ1ZmZlciwgdGFnLnByaW1pdGl2ZSwgZmFpbCk7XG4gICAgaWYgKGJ1ZmZlci5pc0Vycm9yKGxlbikpXG4gICAgICByZXR1cm4gbGVuO1xuXG4gICAgdmFyIHJlcztcbiAgICBpZiAodGFnLnByaW1pdGl2ZSB8fCBsZW4gIT09IG51bGwpXG4gICAgICByZXMgPSBidWZmZXIuc2tpcChsZW4pXG4gICAgZWxzZVxuICAgICAgcmVzID0gdGhpcy5fc2tpcFVudGlsRW5kKGJ1ZmZlciwgZmFpbCk7XG5cbiAgICAvLyBGYWlsdXJlXG4gICAgaWYgKGJ1ZmZlci5pc0Vycm9yKHJlcykpXG4gICAgICByZXR1cm4gcmVzO1xuXG4gICAgaWYgKHRhZy50YWdTdHIgPT09ICdlbmQnKVxuICAgICAgYnJlYWs7XG4gIH1cbn07XG5cbkRFUk5vZGUucHJvdG90eXBlLl9kZWNvZGVMaXN0ID0gZnVuY3Rpb24gZGVjb2RlTGlzdChidWZmZXIsIHRhZywgZGVjb2RlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zKSB7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgd2hpbGUgKCFidWZmZXIuaXNFbXB0eSgpKSB7XG4gICAgdmFyIHBvc3NpYmxlRW5kID0gdGhpcy5fcGVla1RhZyhidWZmZXIsICdlbmQnKTtcbiAgICBpZiAoYnVmZmVyLmlzRXJyb3IocG9zc2libGVFbmQpKVxuICAgICAgcmV0dXJuIHBvc3NpYmxlRW5kO1xuXG4gICAgdmFyIHJlcyA9IGRlY29kZXIuZGVjb2RlKGJ1ZmZlciwgJ2RlcicsIG9wdGlvbnMpO1xuICAgIGlmIChidWZmZXIuaXNFcnJvcihyZXMpICYmIHBvc3NpYmxlRW5kKVxuICAgICAgYnJlYWs7XG4gICAgcmVzdWx0LnB1c2gocmVzKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuREVSTm9kZS5wcm90b3R5cGUuX2RlY29kZVN0ciA9IGZ1bmN0aW9uIGRlY29kZVN0cihidWZmZXIsIHRhZykge1xuICBpZiAodGFnID09PSAnYml0c3RyJykge1xuICAgIHZhciB1bnVzZWQgPSBidWZmZXIucmVhZFVJbnQ4KCk7XG4gICAgaWYgKGJ1ZmZlci5pc0Vycm9yKHVudXNlZCkpXG4gICAgICByZXR1cm4gdW51c2VkO1xuICAgIHJldHVybiB7IHVudXNlZDogdW51c2VkLCBkYXRhOiBidWZmZXIucmF3KCkgfTtcbiAgfSBlbHNlIGlmICh0YWcgPT09ICdibXBzdHInKSB7XG4gICAgdmFyIHJhdyA9IGJ1ZmZlci5yYXcoKTtcbiAgICBpZiAocmF3Lmxlbmd0aCAlIDIgPT09IDEpXG4gICAgICByZXR1cm4gYnVmZmVyLmVycm9yKCdEZWNvZGluZyBvZiBzdHJpbmcgdHlwZTogYm1wc3RyIGxlbmd0aCBtaXNtYXRjaCcpO1xuXG4gICAgdmFyIHN0ciA9ICcnO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmF3Lmxlbmd0aCAvIDI7IGkrKykge1xuICAgICAgc3RyICs9IFN0cmluZy5mcm9tQ2hhckNvZGUocmF3LnJlYWRVSW50MTZCRShpICogMikpO1xuICAgIH1cbiAgICByZXR1cm4gc3RyO1xuICB9IGVsc2UgaWYgKHRhZyA9PT0gJ251bXN0cicpIHtcbiAgICB2YXIgbnVtc3RyID0gYnVmZmVyLnJhdygpLnRvU3RyaW5nKCdhc2NpaScpO1xuICAgIGlmICghdGhpcy5faXNOdW1zdHIobnVtc3RyKSkge1xuICAgICAgcmV0dXJuIGJ1ZmZlci5lcnJvcignRGVjb2Rpbmcgb2Ygc3RyaW5nIHR5cGU6ICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAnbnVtc3RyIHVuc3VwcG9ydGVkIGNoYXJhY3RlcnMnKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bXN0cjtcbiAgfSBlbHNlIGlmICh0YWcgPT09ICdvY3RzdHInKSB7XG4gICAgcmV0dXJuIGJ1ZmZlci5yYXcoKTtcbiAgfSBlbHNlIGlmICh0YWcgPT09ICdvYmpEZXNjJykge1xuICAgIHJldHVybiBidWZmZXIucmF3KCk7XG4gIH0gZWxzZSBpZiAodGFnID09PSAncHJpbnRzdHInKSB7XG4gICAgdmFyIHByaW50c3RyID0gYnVmZmVyLnJhdygpLnRvU3RyaW5nKCdhc2NpaScpO1xuICAgIGlmICghdGhpcy5faXNQcmludHN0cihwcmludHN0cikpIHtcbiAgICAgIHJldHVybiBidWZmZXIuZXJyb3IoJ0RlY29kaW5nIG9mIHN0cmluZyB0eXBlOiAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJ3ByaW50c3RyIHVuc3VwcG9ydGVkIGNoYXJhY3RlcnMnKTtcbiAgICB9XG4gICAgcmV0dXJuIHByaW50c3RyO1xuICB9IGVsc2UgaWYgKC9zdHIkLy50ZXN0KHRhZykpIHtcbiAgICByZXR1cm4gYnVmZmVyLnJhdygpLnRvU3RyaW5nKCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGJ1ZmZlci5lcnJvcignRGVjb2Rpbmcgb2Ygc3RyaW5nIHR5cGU6ICcgKyB0YWcgKyAnIHVuc3VwcG9ydGVkJyk7XG4gIH1cbn07XG5cbkRFUk5vZGUucHJvdG90eXBlLl9kZWNvZGVPYmppZCA9IGZ1bmN0aW9uIGRlY29kZU9iamlkKGJ1ZmZlciwgdmFsdWVzLCByZWxhdGl2ZSkge1xuICB2YXIgcmVzdWx0O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcbiAgdmFyIGlkZW50ID0gMDtcbiAgd2hpbGUgKCFidWZmZXIuaXNFbXB0eSgpKSB7XG4gICAgdmFyIHN1YmlkZW50ID0gYnVmZmVyLnJlYWRVSW50OCgpO1xuICAgIGlkZW50IDw8PSA3O1xuICAgIGlkZW50IHw9IHN1YmlkZW50ICYgMHg3ZjtcbiAgICBpZiAoKHN1YmlkZW50ICYgMHg4MCkgPT09IDApIHtcbiAgICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnQpO1xuICAgICAgaWRlbnQgPSAwO1xuICAgIH1cbiAgfVxuICBpZiAoc3ViaWRlbnQgJiAweDgwKVxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnQpO1xuXG4gIHZhciBmaXJzdCA9IChpZGVudGlmaWVyc1swXSAvIDQwKSB8IDA7XG4gIHZhciBzZWNvbmQgPSBpZGVudGlmaWVyc1swXSAlIDQwO1xuXG4gIGlmIChyZWxhdGl2ZSlcbiAgICByZXN1bHQgPSBpZGVudGlmaWVycztcbiAgZWxzZVxuICAgIHJlc3VsdCA9IFtmaXJzdCwgc2Vjb25kXS5jb25jYXQoaWRlbnRpZmllcnMuc2xpY2UoMSkpO1xuXG4gIGlmICh2YWx1ZXMpIHtcbiAgICB2YXIgdG1wID0gdmFsdWVzW3Jlc3VsdC5qb2luKCcgJyldO1xuICAgIGlmICh0bXAgPT09IHVuZGVmaW5lZClcbiAgICAgIHRtcCA9IHZhbHVlc1tyZXN1bHQuam9pbignLicpXTtcbiAgICBpZiAodG1wICE9PSB1bmRlZmluZWQpXG4gICAgICByZXN1bHQgPSB0bXA7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuREVSTm9kZS5wcm90b3R5cGUuX2RlY29kZVRpbWUgPSBmdW5jdGlvbiBkZWNvZGVUaW1lKGJ1ZmZlciwgdGFnKSB7XG4gIHZhciBzdHIgPSBidWZmZXIucmF3KCkudG9TdHJpbmcoKTtcbiAgaWYgKHRhZyA9PT0gJ2dlbnRpbWUnKSB7XG4gICAgdmFyIHllYXIgPSBzdHIuc2xpY2UoMCwgNCkgfCAwO1xuICAgIHZhciBtb24gPSBzdHIuc2xpY2UoNCwgNikgfCAwO1xuICAgIHZhciBkYXkgPSBzdHIuc2xpY2UoNiwgOCkgfCAwO1xuICAgIHZhciBob3VyID0gc3RyLnNsaWNlKDgsIDEwKSB8IDA7XG4gICAgdmFyIG1pbiA9IHN0ci5zbGljZSgxMCwgMTIpIHwgMDtcbiAgICB2YXIgc2VjID0gc3RyLnNsaWNlKDEyLCAxNCkgfCAwO1xuICB9IGVsc2UgaWYgKHRhZyA9PT0gJ3V0Y3RpbWUnKSB7XG4gICAgdmFyIHllYXIgPSBzdHIuc2xpY2UoMCwgMikgfCAwO1xuICAgIHZhciBtb24gPSBzdHIuc2xpY2UoMiwgNCkgfCAwO1xuICAgIHZhciBkYXkgPSBzdHIuc2xpY2UoNCwgNikgfCAwO1xuICAgIHZhciBob3VyID0gc3RyLnNsaWNlKDYsIDgpIHwgMDtcbiAgICB2YXIgbWluID0gc3RyLnNsaWNlKDgsIDEwKSB8IDA7XG4gICAgdmFyIHNlYyA9IHN0ci5zbGljZSgxMCwgMTIpIHwgMDtcbiAgICBpZiAoeWVhciA8IDcwKVxuICAgICAgeWVhciA9IDIwMDAgKyB5ZWFyO1xuICAgIGVsc2VcbiAgICAgIHllYXIgPSAxOTAwICsgeWVhcjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYnVmZmVyLmVycm9yKCdEZWNvZGluZyAnICsgdGFnICsgJyB0aW1lIGlzIG5vdCBzdXBwb3J0ZWQgeWV0Jyk7XG4gIH1cblxuICByZXR1cm4gRGF0ZS5VVEMoeWVhciwgbW9uIC0gMSwgZGF5LCBob3VyLCBtaW4sIHNlYywgMCk7XG59O1xuXG5ERVJOb2RlLnByb3RvdHlwZS5fZGVjb2RlTnVsbCA9IGZ1bmN0aW9uIGRlY29kZU51bGwoYnVmZmVyKSB7XG4gIHJldHVybiBudWxsO1xufTtcblxuREVSTm9kZS5wcm90b3R5cGUuX2RlY29kZUJvb2wgPSBmdW5jdGlvbiBkZWNvZGVCb29sKGJ1ZmZlcikge1xuICB2YXIgcmVzID0gYnVmZmVyLnJlYWRVSW50OCgpO1xuICBpZiAoYnVmZmVyLmlzRXJyb3IocmVzKSlcbiAgICByZXR1cm4gcmVzO1xuICBlbHNlXG4gICAgcmV0dXJuIHJlcyAhPT0gMDtcbn07XG5cbkRFUk5vZGUucHJvdG90eXBlLl9kZWNvZGVJbnQgPSBmdW5jdGlvbiBkZWNvZGVJbnQoYnVmZmVyLCB2YWx1ZXMpIHtcbiAgLy8gQmlnaW50LCByZXR1cm4gYXMgaXQgaXMgKGFzc3VtZSBiaWcgZW5kaWFuKVxuICB2YXIgcmF3ID0gYnVmZmVyLnJhdygpO1xuICB2YXIgcmVzID0gbmV3IGJpZ251bShyYXcpO1xuXG4gIGlmICh2YWx1ZXMpXG4gICAgcmVzID0gdmFsdWVzW3Jlcy50b1N0cmluZygxMCldIHx8IHJlcztcblxuICByZXR1cm4gcmVzO1xufTtcblxuREVSTm9kZS5wcm90b3R5cGUuX3VzZSA9IGZ1bmN0aW9uIHVzZShlbnRpdHksIG9iaikge1xuICBpZiAodHlwZW9mIGVudGl0eSA9PT0gJ2Z1bmN0aW9uJylcbiAgICBlbnRpdHkgPSBlbnRpdHkob2JqKTtcbiAgcmV0dXJuIGVudGl0eS5fZ2V0RGVjb2RlcignZGVyJykudHJlZTtcbn07XG5cbi8vIFV0aWxpdHkgbWV0aG9kc1xuXG5mdW5jdGlvbiBkZXJEZWNvZGVUYWcoYnVmLCBmYWlsKSB7XG4gIHZhciB0YWcgPSBidWYucmVhZFVJbnQ4KGZhaWwpO1xuICBpZiAoYnVmLmlzRXJyb3IodGFnKSlcbiAgICByZXR1cm4gdGFnO1xuXG4gIHZhciBjbHMgPSBkZXIudGFnQ2xhc3NbdGFnID4+IDZdO1xuICB2YXIgcHJpbWl0aXZlID0gKHRhZyAmIDB4MjApID09PSAwO1xuXG4gIC8vIE11bHRpLW9jdGV0IHRhZyAtIGxvYWRcbiAgaWYgKCh0YWcgJiAweDFmKSA9PT0gMHgxZikge1xuICAgIHZhciBvY3QgPSB0YWc7XG4gICAgdGFnID0gMDtcbiAgICB3aGlsZSAoKG9jdCAmIDB4ODApID09PSAweDgwKSB7XG4gICAgICBvY3QgPSBidWYucmVhZFVJbnQ4KGZhaWwpO1xuICAgICAgaWYgKGJ1Zi5pc0Vycm9yKG9jdCkpXG4gICAgICAgIHJldHVybiBvY3Q7XG5cbiAgICAgIHRhZyA8PD0gNztcbiAgICAgIHRhZyB8PSBvY3QgJiAweDdmO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0YWcgJj0gMHgxZjtcbiAgfVxuICB2YXIgdGFnU3RyID0gZGVyLnRhZ1t0YWddO1xuXG4gIHJldHVybiB7XG4gICAgY2xzOiBjbHMsXG4gICAgcHJpbWl0aXZlOiBwcmltaXRpdmUsXG4gICAgdGFnOiB0YWcsXG4gICAgdGFnU3RyOiB0YWdTdHJcbiAgfTtcbn1cblxuZnVuY3Rpb24gZGVyRGVjb2RlTGVuKGJ1ZiwgcHJpbWl0aXZlLCBmYWlsKSB7XG4gIHZhciBsZW4gPSBidWYucmVhZFVJbnQ4KGZhaWwpO1xuICBpZiAoYnVmLmlzRXJyb3IobGVuKSlcbiAgICByZXR1cm4gbGVuO1xuXG4gIC8vIEluZGVmaW5pdGUgZm9ybVxuICBpZiAoIXByaW1pdGl2ZSAmJiBsZW4gPT09IDB4ODApXG4gICAgcmV0dXJuIG51bGw7XG5cbiAgLy8gRGVmaW5pdGUgZm9ybVxuICBpZiAoKGxlbiAmIDB4ODApID09PSAwKSB7XG4gICAgLy8gU2hvcnQgZm9ybVxuICAgIHJldHVybiBsZW47XG4gIH1cblxuICAvLyBMb25nIGZvcm1cbiAgdmFyIG51bSA9IGxlbiAmIDB4N2Y7XG4gIGlmIChudW0gPiA0KVxuICAgIHJldHVybiBidWYuZXJyb3IoJ2xlbmd0aCBvY3RlY3QgaXMgdG9vIGxvbmcnKTtcblxuICBsZW4gPSAwO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IG51bTsgaSsrKSB7XG4gICAgbGVuIDw8PSA4O1xuICAgIHZhciBqID0gYnVmLnJlYWRVSW50OChmYWlsKTtcbiAgICBpZiAoYnVmLmlzRXJyb3IoaikpXG4gICAgICByZXR1cm4gajtcbiAgICBsZW4gfD0gajtcbiAgfVxuXG4gIHJldHVybiBsZW47XG59XG4iLCJ2YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ2J1ZmZlcicpLkJ1ZmZlcjtcblxudmFyIGFzbjEgPSByZXF1aXJlKCcuLi8uLi9hc24xJyk7XG52YXIgYmFzZSA9IGFzbjEuYmFzZTtcblxuLy8gSW1wb3J0IERFUiBjb25zdGFudHNcbnZhciBkZXIgPSBhc24xLmNvbnN0YW50cy5kZXI7XG5cbmZ1bmN0aW9uIERFUkVuY29kZXIoZW50aXR5KSB7XG4gIHRoaXMuZW5jID0gJ2Rlcic7XG4gIHRoaXMubmFtZSA9IGVudGl0eS5uYW1lO1xuICB0aGlzLmVudGl0eSA9IGVudGl0eTtcblxuICAvLyBDb25zdHJ1Y3QgYmFzZSB0cmVlXG4gIHRoaXMudHJlZSA9IG5ldyBERVJOb2RlKCk7XG4gIHRoaXMudHJlZS5faW5pdChlbnRpdHkuYm9keSk7XG59O1xubW9kdWxlLmV4cG9ydHMgPSBERVJFbmNvZGVyO1xuXG5ERVJFbmNvZGVyLnByb3RvdHlwZS5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUoZGF0YSwgcmVwb3J0ZXIpIHtcbiAgcmV0dXJuIHRoaXMudHJlZS5fZW5jb2RlKGRhdGEsIHJlcG9ydGVyKS5qb2luKCk7XG59O1xuXG4vLyBUcmVlIG1ldGhvZHNcblxuZnVuY3Rpb24gREVSTm9kZShwYXJlbnQpIHtcbiAgYmFzZS5Ob2RlLmNhbGwodGhpcywgJ2RlcicsIHBhcmVudCk7XG59XG5pbmhlcml0cyhERVJOb2RlLCBiYXNlLk5vZGUpO1xuXG5ERVJOb2RlLnByb3RvdHlwZS5fZW5jb2RlQ29tcG9zaXRlID0gZnVuY3Rpb24gZW5jb2RlQ29tcG9zaXRlKHRhZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbWl0aXZlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbHMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQpIHtcbiAgdmFyIGVuY29kZWRUYWcgPSBlbmNvZGVUYWcodGFnLCBwcmltaXRpdmUsIGNscywgdGhpcy5yZXBvcnRlcik7XG5cbiAgLy8gU2hvcnQgZm9ybVxuICBpZiAoY29udGVudC5sZW5ndGggPCAweDgwKSB7XG4gICAgdmFyIGhlYWRlciA9IG5ldyBCdWZmZXIoMik7XG4gICAgaGVhZGVyWzBdID0gZW5jb2RlZFRhZztcbiAgICBoZWFkZXJbMV0gPSBjb250ZW50Lmxlbmd0aDtcbiAgICByZXR1cm4gdGhpcy5fY3JlYXRlRW5jb2RlckJ1ZmZlcihbIGhlYWRlciwgY29udGVudCBdKTtcbiAgfVxuXG4gIC8vIExvbmcgZm9ybVxuICAvLyBDb3VudCBvY3RldHMgcmVxdWlyZWQgdG8gc3RvcmUgbGVuZ3RoXG4gIHZhciBsZW5PY3RldHMgPSAxO1xuICBmb3IgKHZhciBpID0gY29udGVudC5sZW5ndGg7IGkgPj0gMHgxMDA7IGkgPj49IDgpXG4gICAgbGVuT2N0ZXRzKys7XG5cbiAgdmFyIGhlYWRlciA9IG5ldyBCdWZmZXIoMSArIDEgKyBsZW5PY3RldHMpO1xuICBoZWFkZXJbMF0gPSBlbmNvZGVkVGFnO1xuICBoZWFkZXJbMV0gPSAweDgwIHwgbGVuT2N0ZXRzO1xuXG4gIGZvciAodmFyIGkgPSAxICsgbGVuT2N0ZXRzLCBqID0gY29udGVudC5sZW5ndGg7IGogPiAwOyBpLS0sIGogPj49IDgpXG4gICAgaGVhZGVyW2ldID0gaiAmIDB4ZmY7XG5cbiAgcmV0dXJuIHRoaXMuX2NyZWF0ZUVuY29kZXJCdWZmZXIoWyBoZWFkZXIsIGNvbnRlbnQgXSk7XG59O1xuXG5ERVJOb2RlLnByb3RvdHlwZS5fZW5jb2RlU3RyID0gZnVuY3Rpb24gZW5jb2RlU3RyKHN0ciwgdGFnKSB7XG4gIGlmICh0YWcgPT09ICdiaXRzdHInKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NyZWF0ZUVuY29kZXJCdWZmZXIoWyBzdHIudW51c2VkIHwgMCwgc3RyLmRhdGEgXSk7XG4gIH0gZWxzZSBpZiAodGFnID09PSAnYm1wc3RyJykge1xuICAgIHZhciBidWYgPSBuZXcgQnVmZmVyKHN0ci5sZW5ndGggKiAyKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xuICAgICAgYnVmLndyaXRlVUludDE2QkUoc3RyLmNoYXJDb2RlQXQoaSksIGkgKiAyKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2NyZWF0ZUVuY29kZXJCdWZmZXIoYnVmKTtcbiAgfSBlbHNlIGlmICh0YWcgPT09ICdudW1zdHInKSB7XG4gICAgaWYgKCF0aGlzLl9pc051bXN0cihzdHIpKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZXBvcnRlci5lcnJvcignRW5jb2Rpbmcgb2Ygc3RyaW5nIHR5cGU6IG51bXN0ciBzdXBwb3J0cyAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdvbmx5IGRpZ2l0cyBhbmQgc3BhY2UnKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2NyZWF0ZUVuY29kZXJCdWZmZXIoc3RyKTtcbiAgfSBlbHNlIGlmICh0YWcgPT09ICdwcmludHN0cicpIHtcbiAgICBpZiAoIXRoaXMuX2lzUHJpbnRzdHIoc3RyKSkge1xuICAgICAgcmV0dXJuIHRoaXMucmVwb3J0ZXIuZXJyb3IoJ0VuY29kaW5nIG9mIHN0cmluZyB0eXBlOiBwcmludHN0ciBzdXBwb3J0cyAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdvbmx5IGxhdGluIHVwcGVyIGFuZCBsb3dlciBjYXNlIGxldHRlcnMsICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RpZ2l0cywgc3BhY2UsIGFwb3N0cm9waGUsIGxlZnQgYW5kIHJpZ3RoICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3BhcmVudGhlc2lzLCBwbHVzIHNpZ24sIGNvbW1hLCBoeXBoZW4sICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RvdCwgc2xhc2gsIGNvbG9uLCBlcXVhbCBzaWduLCAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdxdWVzdGlvbiBtYXJrJyk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9jcmVhdGVFbmNvZGVyQnVmZmVyKHN0cik7XG4gIH0gZWxzZSBpZiAoL3N0ciQvLnRlc3QodGFnKSkge1xuICAgIHJldHVybiB0aGlzLl9jcmVhdGVFbmNvZGVyQnVmZmVyKHN0cik7XG4gIH0gZWxzZSBpZiAodGFnID09PSAnb2JqRGVzYycpIHtcbiAgICByZXR1cm4gdGhpcy5fY3JlYXRlRW5jb2RlckJ1ZmZlcihzdHIpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB0aGlzLnJlcG9ydGVyLmVycm9yKCdFbmNvZGluZyBvZiBzdHJpbmcgdHlwZTogJyArIHRhZyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyB1bnN1cHBvcnRlZCcpO1xuICB9XG59O1xuXG5ERVJOb2RlLnByb3RvdHlwZS5fZW5jb2RlT2JqaWQgPSBmdW5jdGlvbiBlbmNvZGVPYmppZChpZCwgdmFsdWVzLCByZWxhdGl2ZSkge1xuICBpZiAodHlwZW9mIGlkID09PSAnc3RyaW5nJykge1xuICAgIGlmICghdmFsdWVzKVxuICAgICAgcmV0dXJuIHRoaXMucmVwb3J0ZXIuZXJyb3IoJ3N0cmluZyBvYmppZCBnaXZlbiwgYnV0IG5vIHZhbHVlcyBtYXAgZm91bmQnKTtcbiAgICBpZiAoIXZhbHVlcy5oYXNPd25Qcm9wZXJ0eShpZCkpXG4gICAgICByZXR1cm4gdGhpcy5yZXBvcnRlci5lcnJvcignb2JqaWQgbm90IGZvdW5kIGluIHZhbHVlcyBtYXAnKTtcbiAgICBpZCA9IHZhbHVlc1tpZF0uc3BsaXQoL1tcXHNcXC5dKy9nKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGlkLmxlbmd0aDsgaSsrKVxuICAgICAgaWRbaV0gfD0gMDtcbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGlkKSkge1xuICAgIGlkID0gaWQuc2xpY2UoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGlkLmxlbmd0aDsgaSsrKVxuICAgICAgaWRbaV0gfD0gMDtcbiAgfVxuXG4gIGlmICghQXJyYXkuaXNBcnJheShpZCkpIHtcbiAgICByZXR1cm4gdGhpcy5yZXBvcnRlci5lcnJvcignb2JqaWQoKSBzaG91bGQgYmUgZWl0aGVyIGFycmF5IG9yIHN0cmluZywgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2dvdDogJyArIEpTT04uc3RyaW5naWZ5KGlkKSk7XG4gIH1cblxuICBpZiAoIXJlbGF0aXZlKSB7XG4gICAgaWYgKGlkWzFdID49IDQwKVxuICAgICAgcmV0dXJuIHRoaXMucmVwb3J0ZXIuZXJyb3IoJ1NlY29uZCBvYmppZCBpZGVudGlmaWVyIE9PQicpO1xuICAgIGlkLnNwbGljZSgwLCAyLCBpZFswXSAqIDQwICsgaWRbMV0pO1xuICB9XG5cbiAgLy8gQ291bnQgbnVtYmVyIG9mIG9jdGV0c1xuICB2YXIgc2l6ZSA9IDA7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgaWQubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaWRlbnQgPSBpZFtpXTtcbiAgICBmb3IgKHNpemUrKzsgaWRlbnQgPj0gMHg4MDsgaWRlbnQgPj49IDcpXG4gICAgICBzaXplKys7XG4gIH1cblxuICB2YXIgb2JqaWQgPSBuZXcgQnVmZmVyKHNpemUpO1xuICB2YXIgb2Zmc2V0ID0gb2JqaWQubGVuZ3RoIC0gMTtcbiAgZm9yICh2YXIgaSA9IGlkLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgdmFyIGlkZW50ID0gaWRbaV07XG4gICAgb2JqaWRbb2Zmc2V0LS1dID0gaWRlbnQgJiAweDdmO1xuICAgIHdoaWxlICgoaWRlbnQgPj49IDcpID4gMClcbiAgICAgIG9iamlkW29mZnNldC0tXSA9IDB4ODAgfCAoaWRlbnQgJiAweDdmKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzLl9jcmVhdGVFbmNvZGVyQnVmZmVyKG9iamlkKTtcbn07XG5cbmZ1bmN0aW9uIHR3byhudW0pIHtcbiAgaWYgKG51bSA8IDEwKVxuICAgIHJldHVybiAnMCcgKyBudW07XG4gIGVsc2VcbiAgICByZXR1cm4gbnVtO1xufVxuXG5ERVJOb2RlLnByb3RvdHlwZS5fZW5jb2RlVGltZSA9IGZ1bmN0aW9uIGVuY29kZVRpbWUodGltZSwgdGFnKSB7XG4gIHZhciBzdHI7XG4gIHZhciBkYXRlID0gbmV3IERhdGUodGltZSk7XG5cbiAgaWYgKHRhZyA9PT0gJ2dlbnRpbWUnKSB7XG4gICAgc3RyID0gW1xuICAgICAgdHdvKGRhdGUuZ2V0RnVsbFllYXIoKSksXG4gICAgICB0d28oZGF0ZS5nZXRVVENNb250aCgpICsgMSksXG4gICAgICB0d28oZGF0ZS5nZXRVVENEYXRlKCkpLFxuICAgICAgdHdvKGRhdGUuZ2V0VVRDSG91cnMoKSksXG4gICAgICB0d28oZGF0ZS5nZXRVVENNaW51dGVzKCkpLFxuICAgICAgdHdvKGRhdGUuZ2V0VVRDU2Vjb25kcygpKSxcbiAgICAgICdaJ1xuICAgIF0uam9pbignJyk7XG4gIH0gZWxzZSBpZiAodGFnID09PSAndXRjdGltZScpIHtcbiAgICBzdHIgPSBbXG4gICAgICB0d28oZGF0ZS5nZXRGdWxsWWVhcigpICUgMTAwKSxcbiAgICAgIHR3byhkYXRlLmdldFVUQ01vbnRoKCkgKyAxKSxcbiAgICAgIHR3byhkYXRlLmdldFVUQ0RhdGUoKSksXG4gICAgICB0d28oZGF0ZS5nZXRVVENIb3VycygpKSxcbiAgICAgIHR3byhkYXRlLmdldFVUQ01pbnV0ZXMoKSksXG4gICAgICB0d28oZGF0ZS5nZXRVVENTZWNvbmRzKCkpLFxuICAgICAgJ1onXG4gICAgXS5qb2luKCcnKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnJlcG9ydGVyLmVycm9yKCdFbmNvZGluZyAnICsgdGFnICsgJyB0aW1lIGlzIG5vdCBzdXBwb3J0ZWQgeWV0Jyk7XG4gIH1cblxuICByZXR1cm4gdGhpcy5fZW5jb2RlU3RyKHN0ciwgJ29jdHN0cicpO1xufTtcblxuREVSTm9kZS5wcm90b3R5cGUuX2VuY29kZU51bGwgPSBmdW5jdGlvbiBlbmNvZGVOdWxsKCkge1xuICByZXR1cm4gdGhpcy5fY3JlYXRlRW5jb2RlckJ1ZmZlcignJyk7XG59O1xuXG5ERVJOb2RlLnByb3RvdHlwZS5fZW5jb2RlSW50ID0gZnVuY3Rpb24gZW5jb2RlSW50KG51bSwgdmFsdWVzKSB7XG4gIGlmICh0eXBlb2YgbnVtID09PSAnc3RyaW5nJykge1xuICAgIGlmICghdmFsdWVzKVxuICAgICAgcmV0dXJuIHRoaXMucmVwb3J0ZXIuZXJyb3IoJ1N0cmluZyBpbnQgb3IgZW51bSBnaXZlbiwgYnV0IG5vIHZhbHVlcyBtYXAnKTtcbiAgICBpZiAoIXZhbHVlcy5oYXNPd25Qcm9wZXJ0eShudW0pKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZXBvcnRlci5lcnJvcignVmFsdWVzIG1hcCBkb2VzblxcJ3QgY29udGFpbjogJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBKU09OLnN0cmluZ2lmeShudW0pKTtcbiAgICB9XG4gICAgbnVtID0gdmFsdWVzW251bV07XG4gIH1cblxuICAvLyBCaWdudW0sIGFzc3VtZSBiaWcgZW5kaWFuXG4gIGlmICh0eXBlb2YgbnVtICE9PSAnbnVtYmVyJyAmJiAhQnVmZmVyLmlzQnVmZmVyKG51bSkpIHtcbiAgICB2YXIgbnVtQXJyYXkgPSBudW0udG9BcnJheSgpO1xuICAgIGlmICghbnVtLnNpZ24gJiYgbnVtQXJyYXlbMF0gJiAweDgwKSB7XG4gICAgICBudW1BcnJheS51bnNoaWZ0KDApO1xuICAgIH1cbiAgICBudW0gPSBuZXcgQnVmZmVyKG51bUFycmF5KTtcbiAgfVxuXG4gIGlmIChCdWZmZXIuaXNCdWZmZXIobnVtKSkge1xuICAgIHZhciBzaXplID0gbnVtLmxlbmd0aDtcbiAgICBpZiAobnVtLmxlbmd0aCA9PT0gMClcbiAgICAgIHNpemUrKztcblxuICAgIHZhciBvdXQgPSBuZXcgQnVmZmVyKHNpemUpO1xuICAgIG51bS5jb3B5KG91dCk7XG4gICAgaWYgKG51bS5sZW5ndGggPT09IDApXG4gICAgICBvdXRbMF0gPSAwXG4gICAgcmV0dXJuIHRoaXMuX2NyZWF0ZUVuY29kZXJCdWZmZXIob3V0KTtcbiAgfVxuXG4gIGlmIChudW0gPCAweDgwKVxuICAgIHJldHVybiB0aGlzLl9jcmVhdGVFbmNvZGVyQnVmZmVyKG51bSk7XG5cbiAgaWYgKG51bSA8IDB4MTAwKVxuICAgIHJldHVybiB0aGlzLl9jcmVhdGVFbmNvZGVyQnVmZmVyKFswLCBudW1dKTtcblxuICB2YXIgc2l6ZSA9IDE7XG4gIGZvciAodmFyIGkgPSBudW07IGkgPj0gMHgxMDA7IGkgPj49IDgpXG4gICAgc2l6ZSsrO1xuXG4gIHZhciBvdXQgPSBuZXcgQXJyYXkoc2l6ZSk7XG4gIGZvciAodmFyIGkgPSBvdXQubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICBvdXRbaV0gPSBudW0gJiAweGZmO1xuICAgIG51bSA+Pj0gODtcbiAgfVxuICBpZihvdXRbMF0gJiAweDgwKSB7XG4gICAgb3V0LnVuc2hpZnQoMCk7XG4gIH1cblxuICByZXR1cm4gdGhpcy5fY3JlYXRlRW5jb2RlckJ1ZmZlcihuZXcgQnVmZmVyKG91dCkpO1xufTtcblxuREVSTm9kZS5wcm90b3R5cGUuX2VuY29kZUJvb2wgPSBmdW5jdGlvbiBlbmNvZGVCb29sKHZhbHVlKSB7XG4gIHJldHVybiB0aGlzLl9jcmVhdGVFbmNvZGVyQnVmZmVyKHZhbHVlID8gMHhmZiA6IDApO1xufTtcblxuREVSTm9kZS5wcm90b3R5cGUuX3VzZSA9IGZ1bmN0aW9uIHVzZShlbnRpdHksIG9iaikge1xuICBpZiAodHlwZW9mIGVudGl0eSA9PT0gJ2Z1bmN0aW9uJylcbiAgICBlbnRpdHkgPSBlbnRpdHkob2JqKTtcbiAgcmV0dXJuIGVudGl0eS5fZ2V0RW5jb2RlcignZGVyJykudHJlZTtcbn07XG5cbkRFUk5vZGUucHJvdG90eXBlLl9za2lwRGVmYXVsdCA9IGZ1bmN0aW9uIHNraXBEZWZhdWx0KGRhdGFCdWZmZXIsIHJlcG9ydGVyLCBwYXJlbnQpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuICB2YXIgaTtcbiAgaWYgKHN0YXRlWydkZWZhdWx0J10gPT09IG51bGwpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIHZhciBkYXRhID0gZGF0YUJ1ZmZlci5qb2luKCk7XG4gIGlmIChzdGF0ZS5kZWZhdWx0QnVmZmVyID09PSB1bmRlZmluZWQpXG4gICAgc3RhdGUuZGVmYXVsdEJ1ZmZlciA9IHRoaXMuX2VuY29kZVZhbHVlKHN0YXRlWydkZWZhdWx0J10sIHJlcG9ydGVyLCBwYXJlbnQpLmpvaW4oKTtcblxuICBpZiAoZGF0YS5sZW5ndGggIT09IHN0YXRlLmRlZmF1bHRCdWZmZXIubGVuZ3RoKVxuICAgIHJldHVybiBmYWxzZTtcblxuICBmb3IgKGk9MDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspXG4gICAgaWYgKGRhdGFbaV0gIT09IHN0YXRlLmRlZmF1bHRCdWZmZXJbaV0pXG4gICAgICByZXR1cm4gZmFsc2U7XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG4vLyBVdGlsaXR5IG1ldGhvZHNcblxuZnVuY3Rpb24gZW5jb2RlVGFnKHRhZywgcHJpbWl0aXZlLCBjbHMsIHJlcG9ydGVyKSB7XG4gIHZhciByZXM7XG5cbiAgaWYgKHRhZyA9PT0gJ3NlcW9mJylcbiAgICB0YWcgPSAnc2VxJztcbiAgZWxzZSBpZiAodGFnID09PSAnc2V0b2YnKVxuICAgIHRhZyA9ICdzZXQnO1xuXG4gIGlmIChkZXIudGFnQnlOYW1lLmhhc093blByb3BlcnR5KHRhZykpXG4gICAgcmVzID0gZGVyLnRhZ0J5TmFtZVt0YWddO1xuICBlbHNlIGlmICh0eXBlb2YgdGFnID09PSAnbnVtYmVyJyAmJiAodGFnIHwgMCkgPT09IHRhZylcbiAgICByZXMgPSB0YWc7XG4gIGVsc2VcbiAgICByZXR1cm4gcmVwb3J0ZXIuZXJyb3IoJ1Vua25vd24gdGFnOiAnICsgdGFnKTtcblxuICBpZiAocmVzID49IDB4MWYpXG4gICAgcmV0dXJuIHJlcG9ydGVyLmVycm9yKCdNdWx0aS1vY3RldCB0YWcgZW5jb2RpbmcgdW5zdXBwb3J0ZWQnKTtcblxuICBpZiAoIXByaW1pdGl2ZSlcbiAgICByZXMgfD0gMHgyMDtcblxuICByZXMgfD0gKGRlci50YWdDbGFzc0J5TmFtZVtjbHMgfHwgJ3VuaXZlcnNhbCddIDw8IDYpO1xuXG4gIHJldHVybiByZXM7XG59XG4iLCJ2YXIgY3JlYXRlSGFzaCA9IHJlcXVpcmUoJ2NyZWF0ZS1oYXNoJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChzZWVkLCBsZW4pIHtcbiAgdmFyIHQgPSBCdWZmZXIuYWxsb2MoMClcbiAgdmFyIGkgPSAwXG4gIHZhciBjXG4gIHdoaWxlICh0Lmxlbmd0aCA8IGxlbikge1xuICAgIGMgPSBpMm9wcyhpKyspXG4gICAgdCA9IEJ1ZmZlci5jb25jYXQoW3QsIGNyZWF0ZUhhc2goJ3NoYTEnKS51cGRhdGUoc2VlZCkudXBkYXRlKGMpLmRpZ2VzdCgpXSlcbiAgfVxuICByZXR1cm4gdC5zbGljZSgwLCBsZW4pXG59XG5cbmZ1bmN0aW9uIGkyb3BzIChjKSB7XG4gIHZhciBvdXQgPSBCdWZmZXIuYWxsb2NVbnNhZmUoNClcbiAgb3V0LndyaXRlVUludDMyQkUoYywgMClcbiAgcmV0dXJuIG91dFxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB4b3IgKGEsIGIpIHtcbiAgdmFyIGxlbiA9IGEubGVuZ3RoXG4gIHZhciBpID0gLTFcbiAgd2hpbGUgKCsraSA8IGxlbikge1xuICAgIGFbaV0gXj0gYltpXVxuICB9XG4gIHJldHVybiBhXG59XG4iLCJ2YXIgQk4gPSByZXF1aXJlKCdibi5qcycpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcblxuZnVuY3Rpb24gd2l0aFB1YmxpYyAocGFkZGVkTXNnLCBrZXkpIHtcbiAgcmV0dXJuIEJ1ZmZlci5mcm9tKHBhZGRlZE1zZ1xuICAgIC50b1JlZChCTi5tb250KGtleS5tb2R1bHVzKSlcbiAgICAucmVkUG93KG5ldyBCTihrZXkucHVibGljRXhwb25lbnQpKVxuICAgIC5mcm9tUmVkKClcbiAgICAudG9BcnJheSgpKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHdpdGhQdWJsaWNcbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIHx8XG4gIGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnMob2JqKSB7XG4gICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICAgIHZhciBkZXNjcmlwdG9ycyA9IHt9O1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgZGVzY3JpcHRvcnNba2V5c1tpXV0gPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5c1tpXSk7XG4gICAgfVxuICAgIHJldHVybiBkZXNjcmlwdG9ycztcbiAgfTtcblxudmFyIGZvcm1hdFJlZ0V4cCA9IC8lW3NkaiVdL2c7XG5leHBvcnRzLmZvcm1hdCA9IGZ1bmN0aW9uKGYpIHtcbiAgaWYgKCFpc1N0cmluZyhmKSkge1xuICAgIHZhciBvYmplY3RzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIG9iamVjdHMucHVzaChpbnNwZWN0KGFyZ3VtZW50c1tpXSkpO1xuICAgIH1cbiAgICByZXR1cm4gb2JqZWN0cy5qb2luKCcgJyk7XG4gIH1cblxuICB2YXIgaSA9IDE7XG4gIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICB2YXIgbGVuID0gYXJncy5sZW5ndGg7XG4gIHZhciBzdHIgPSBTdHJpbmcoZikucmVwbGFjZShmb3JtYXRSZWdFeHAsIGZ1bmN0aW9uKHgpIHtcbiAgICBpZiAoeCA9PT0gJyUlJykgcmV0dXJuICclJztcbiAgICBpZiAoaSA+PSBsZW4pIHJldHVybiB4O1xuICAgIHN3aXRjaCAoeCkge1xuICAgICAgY2FzZSAnJXMnOiByZXR1cm4gU3RyaW5nKGFyZ3NbaSsrXSk7XG4gICAgICBjYXNlICclZCc6IHJldHVybiBOdW1iZXIoYXJnc1tpKytdKTtcbiAgICAgIGNhc2UgJyVqJzpcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoYXJnc1tpKytdKTtcbiAgICAgICAgfSBjYXRjaCAoXykge1xuICAgICAgICAgIHJldHVybiAnW0NpcmN1bGFyXSc7XG4gICAgICAgIH1cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiB4O1xuICAgIH1cbiAgfSk7XG4gIGZvciAodmFyIHggPSBhcmdzW2ldOyBpIDwgbGVuOyB4ID0gYXJnc1srK2ldKSB7XG4gICAgaWYgKGlzTnVsbCh4KSB8fCAhaXNPYmplY3QoeCkpIHtcbiAgICAgIHN0ciArPSAnICcgKyB4O1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHIgKz0gJyAnICsgaW5zcGVjdCh4KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHN0cjtcbn07XG5cblxuLy8gTWFyayB0aGF0IGEgbWV0aG9kIHNob3VsZCBub3QgYmUgdXNlZC5cbi8vIFJldHVybnMgYSBtb2RpZmllZCBmdW5jdGlvbiB3aGljaCB3YXJucyBvbmNlIGJ5IGRlZmF1bHQuXG4vLyBJZiAtLW5vLWRlcHJlY2F0aW9uIGlzIHNldCwgdGhlbiBpdCBpcyBhIG5vLW9wLlxuZXhwb3J0cy5kZXByZWNhdGUgPSBmdW5jdGlvbihmbiwgbXNnKSB7XG4gIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgcHJvY2Vzcy5ub0RlcHJlY2F0aW9uID09PSB0cnVlKSB7XG4gICAgcmV0dXJuIGZuO1xuICB9XG5cbiAgLy8gQWxsb3cgZm9yIGRlcHJlY2F0aW5nIHRoaW5ncyBpbiB0aGUgcHJvY2VzcyBvZiBzdGFydGluZyB1cC5cbiAgaWYgKHR5cGVvZiBwcm9jZXNzID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBleHBvcnRzLmRlcHJlY2F0ZShmbiwgbXNnKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH07XG4gIH1cblxuICB2YXIgd2FybmVkID0gZmFsc2U7XG4gIGZ1bmN0aW9uIGRlcHJlY2F0ZWQoKSB7XG4gICAgaWYgKCF3YXJuZWQpIHtcbiAgICAgIGlmIChwcm9jZXNzLnRocm93RGVwcmVjYXRpb24pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gICAgICB9IGVsc2UgaWYgKHByb2Nlc3MudHJhY2VEZXByZWNhdGlvbikge1xuICAgICAgICBjb25zb2xlLnRyYWNlKG1zZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLmVycm9yKG1zZyk7XG4gICAgICB9XG4gICAgICB3YXJuZWQgPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIHJldHVybiBkZXByZWNhdGVkO1xufTtcblxuXG52YXIgZGVidWdzID0ge307XG52YXIgZGVidWdFbnZpcm9uO1xuZXhwb3J0cy5kZWJ1Z2xvZyA9IGZ1bmN0aW9uKHNldCkge1xuICBpZiAoaXNVbmRlZmluZWQoZGVidWdFbnZpcm9uKSlcbiAgICBkZWJ1Z0Vudmlyb24gPSBwcm9jZXNzLmVudi5OT0RFX0RFQlVHIHx8ICcnO1xuICBzZXQgPSBzZXQudG9VcHBlckNhc2UoKTtcbiAgaWYgKCFkZWJ1Z3Nbc2V0XSkge1xuICAgIGlmIChuZXcgUmVnRXhwKCdcXFxcYicgKyBzZXQgKyAnXFxcXGInLCAnaScpLnRlc3QoZGVidWdFbnZpcm9uKSkge1xuICAgICAgdmFyIHBpZCA9IHByb2Nlc3MucGlkO1xuICAgICAgZGVidWdzW3NldF0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIG1zZyA9IGV4cG9ydHMuZm9ybWF0LmFwcGx5KGV4cG9ydHMsIGFyZ3VtZW50cyk7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJyVzICVkOiAlcycsIHNldCwgcGlkLCBtc2cpO1xuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVidWdzW3NldF0gPSBmdW5jdGlvbigpIHt9O1xuICAgIH1cbiAgfVxuICByZXR1cm4gZGVidWdzW3NldF07XG59O1xuXG5cbi8qKlxuICogRWNob3MgdGhlIHZhbHVlIG9mIGEgdmFsdWUuIFRyeXMgdG8gcHJpbnQgdGhlIHZhbHVlIG91dFxuICogaW4gdGhlIGJlc3Qgd2F5IHBvc3NpYmxlIGdpdmVuIHRoZSBkaWZmZXJlbnQgdHlwZXMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iaiBUaGUgb2JqZWN0IHRvIHByaW50IG91dC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIE9wdGlvbmFsIG9wdGlvbnMgb2JqZWN0IHRoYXQgYWx0ZXJzIHRoZSBvdXRwdXQuXG4gKi9cbi8qIGxlZ2FjeTogb2JqLCBzaG93SGlkZGVuLCBkZXB0aCwgY29sb3JzKi9cbmZ1bmN0aW9uIGluc3BlY3Qob2JqLCBvcHRzKSB7XG4gIC8vIGRlZmF1bHQgb3B0aW9uc1xuICB2YXIgY3R4ID0ge1xuICAgIHNlZW46IFtdLFxuICAgIHN0eWxpemU6IHN0eWxpemVOb0NvbG9yXG4gIH07XG4gIC8vIGxlZ2FjeS4uLlxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+PSAzKSBjdHguZGVwdGggPSBhcmd1bWVudHNbMl07XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID49IDQpIGN0eC5jb2xvcnMgPSBhcmd1bWVudHNbM107XG4gIGlmIChpc0Jvb2xlYW4ob3B0cykpIHtcbiAgICAvLyBsZWdhY3kuLi5cbiAgICBjdHguc2hvd0hpZGRlbiA9IG9wdHM7XG4gIH0gZWxzZSBpZiAob3B0cykge1xuICAgIC8vIGdvdCBhbiBcIm9wdGlvbnNcIiBvYmplY3RcbiAgICBleHBvcnRzLl9leHRlbmQoY3R4LCBvcHRzKTtcbiAgfVxuICAvLyBzZXQgZGVmYXVsdCBvcHRpb25zXG4gIGlmIChpc1VuZGVmaW5lZChjdHguc2hvd0hpZGRlbikpIGN0eC5zaG93SGlkZGVuID0gZmFsc2U7XG4gIGlmIChpc1VuZGVmaW5lZChjdHguZGVwdGgpKSBjdHguZGVwdGggPSAyO1xuICBpZiAoaXNVbmRlZmluZWQoY3R4LmNvbG9ycykpIGN0eC5jb2xvcnMgPSBmYWxzZTtcbiAgaWYgKGlzVW5kZWZpbmVkKGN0eC5jdXN0b21JbnNwZWN0KSkgY3R4LmN1c3RvbUluc3BlY3QgPSB0cnVlO1xuICBpZiAoY3R4LmNvbG9ycykgY3R4LnN0eWxpemUgPSBzdHlsaXplV2l0aENvbG9yO1xuICByZXR1cm4gZm9ybWF0VmFsdWUoY3R4LCBvYmosIGN0eC5kZXB0aCk7XG59XG5leHBvcnRzLmluc3BlY3QgPSBpbnNwZWN0O1xuXG5cbi8vIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQU5TSV9lc2NhcGVfY29kZSNncmFwaGljc1xuaW5zcGVjdC5jb2xvcnMgPSB7XG4gICdib2xkJyA6IFsxLCAyMl0sXG4gICdpdGFsaWMnIDogWzMsIDIzXSxcbiAgJ3VuZGVybGluZScgOiBbNCwgMjRdLFxuICAnaW52ZXJzZScgOiBbNywgMjddLFxuICAnd2hpdGUnIDogWzM3LCAzOV0sXG4gICdncmV5JyA6IFs5MCwgMzldLFxuICAnYmxhY2snIDogWzMwLCAzOV0sXG4gICdibHVlJyA6IFszNCwgMzldLFxuICAnY3lhbicgOiBbMzYsIDM5XSxcbiAgJ2dyZWVuJyA6IFszMiwgMzldLFxuICAnbWFnZW50YScgOiBbMzUsIDM5XSxcbiAgJ3JlZCcgOiBbMzEsIDM5XSxcbiAgJ3llbGxvdycgOiBbMzMsIDM5XVxufTtcblxuLy8gRG9uJ3QgdXNlICdibHVlJyBub3QgdmlzaWJsZSBvbiBjbWQuZXhlXG5pbnNwZWN0LnN0eWxlcyA9IHtcbiAgJ3NwZWNpYWwnOiAnY3lhbicsXG4gICdudW1iZXInOiAneWVsbG93JyxcbiAgJ2Jvb2xlYW4nOiAneWVsbG93JyxcbiAgJ3VuZGVmaW5lZCc6ICdncmV5JyxcbiAgJ251bGwnOiAnYm9sZCcsXG4gICdzdHJpbmcnOiAnZ3JlZW4nLFxuICAnZGF0ZSc6ICdtYWdlbnRhJyxcbiAgLy8gXCJuYW1lXCI6IGludGVudGlvbmFsbHkgbm90IHN0eWxpbmdcbiAgJ3JlZ2V4cCc6ICdyZWQnXG59O1xuXG5cbmZ1bmN0aW9uIHN0eWxpemVXaXRoQ29sb3Ioc3RyLCBzdHlsZVR5cGUpIHtcbiAgdmFyIHN0eWxlID0gaW5zcGVjdC5zdHlsZXNbc3R5bGVUeXBlXTtcblxuICBpZiAoc3R5bGUpIHtcbiAgICByZXR1cm4gJ1xcdTAwMWJbJyArIGluc3BlY3QuY29sb3JzW3N0eWxlXVswXSArICdtJyArIHN0ciArXG4gICAgICAgICAgICdcXHUwMDFiWycgKyBpbnNwZWN0LmNvbG9yc1tzdHlsZV1bMV0gKyAnbSc7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHN0cjtcbiAgfVxufVxuXG5cbmZ1bmN0aW9uIHN0eWxpemVOb0NvbG9yKHN0ciwgc3R5bGVUeXBlKSB7XG4gIHJldHVybiBzdHI7XG59XG5cblxuZnVuY3Rpb24gYXJyYXlUb0hhc2goYXJyYXkpIHtcbiAgdmFyIGhhc2ggPSB7fTtcblxuICBhcnJheS5mb3JFYWNoKGZ1bmN0aW9uKHZhbCwgaWR4KSB7XG4gICAgaGFzaFt2YWxdID0gdHJ1ZTtcbiAgfSk7XG5cbiAgcmV0dXJuIGhhc2g7XG59XG5cblxuZnVuY3Rpb24gZm9ybWF0VmFsdWUoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzKSB7XG4gIC8vIFByb3ZpZGUgYSBob29rIGZvciB1c2VyLXNwZWNpZmllZCBpbnNwZWN0IGZ1bmN0aW9ucy5cbiAgLy8gQ2hlY2sgdGhhdCB2YWx1ZSBpcyBhbiBvYmplY3Qgd2l0aCBhbiBpbnNwZWN0IGZ1bmN0aW9uIG9uIGl0XG4gIGlmIChjdHguY3VzdG9tSW5zcGVjdCAmJlxuICAgICAgdmFsdWUgJiZcbiAgICAgIGlzRnVuY3Rpb24odmFsdWUuaW5zcGVjdCkgJiZcbiAgICAgIC8vIEZpbHRlciBvdXQgdGhlIHV0aWwgbW9kdWxlLCBpdCdzIGluc3BlY3QgZnVuY3Rpb24gaXMgc3BlY2lhbFxuICAgICAgdmFsdWUuaW5zcGVjdCAhPT0gZXhwb3J0cy5pbnNwZWN0ICYmXG4gICAgICAvLyBBbHNvIGZpbHRlciBvdXQgYW55IHByb3RvdHlwZSBvYmplY3RzIHVzaW5nIHRoZSBjaXJjdWxhciBjaGVjay5cbiAgICAgICEodmFsdWUuY29uc3RydWN0b3IgJiYgdmFsdWUuY29uc3RydWN0b3IucHJvdG90eXBlID09PSB2YWx1ZSkpIHtcbiAgICB2YXIgcmV0ID0gdmFsdWUuaW5zcGVjdChyZWN1cnNlVGltZXMsIGN0eCk7XG4gICAgaWYgKCFpc1N0cmluZyhyZXQpKSB7XG4gICAgICByZXQgPSBmb3JtYXRWYWx1ZShjdHgsIHJldCwgcmVjdXJzZVRpbWVzKTtcbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbiAgfVxuXG4gIC8vIFByaW1pdGl2ZSB0eXBlcyBjYW5ub3QgaGF2ZSBwcm9wZXJ0aWVzXG4gIHZhciBwcmltaXRpdmUgPSBmb3JtYXRQcmltaXRpdmUoY3R4LCB2YWx1ZSk7XG4gIGlmIChwcmltaXRpdmUpIHtcbiAgICByZXR1cm4gcHJpbWl0aXZlO1xuICB9XG5cbiAgLy8gTG9vayB1cCB0aGUga2V5cyBvZiB0aGUgb2JqZWN0LlxuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHZhbHVlKTtcbiAgdmFyIHZpc2libGVLZXlzID0gYXJyYXlUb0hhc2goa2V5cyk7XG5cbiAgaWYgKGN0eC5zaG93SGlkZGVuKSB7XG4gICAga2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHZhbHVlKTtcbiAgfVxuXG4gIC8vIElFIGRvZXNuJ3QgbWFrZSBlcnJvciBmaWVsZHMgbm9uLWVudW1lcmFibGVcbiAgLy8gaHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2llL2R3dzUyc2J0KHY9dnMuOTQpLmFzcHhcbiAgaWYgKGlzRXJyb3IodmFsdWUpXG4gICAgICAmJiAoa2V5cy5pbmRleE9mKCdtZXNzYWdlJykgPj0gMCB8fCBrZXlzLmluZGV4T2YoJ2Rlc2NyaXB0aW9uJykgPj0gMCkpIHtcbiAgICByZXR1cm4gZm9ybWF0RXJyb3IodmFsdWUpO1xuICB9XG5cbiAgLy8gU29tZSB0eXBlIG9mIG9iamVjdCB3aXRob3V0IHByb3BlcnRpZXMgY2FuIGJlIHNob3J0Y3V0dGVkLlxuICBpZiAoa2V5cy5sZW5ndGggPT09IDApIHtcbiAgICBpZiAoaXNGdW5jdGlvbih2YWx1ZSkpIHtcbiAgICAgIHZhciBuYW1lID0gdmFsdWUubmFtZSA/ICc6ICcgKyB2YWx1ZS5uYW1lIDogJyc7XG4gICAgICByZXR1cm4gY3R4LnN0eWxpemUoJ1tGdW5jdGlvbicgKyBuYW1lICsgJ10nLCAnc3BlY2lhbCcpO1xuICAgIH1cbiAgICBpZiAoaXNSZWdFeHAodmFsdWUpKSB7XG4gICAgICByZXR1cm4gY3R4LnN0eWxpemUoUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSwgJ3JlZ2V4cCcpO1xuICAgIH1cbiAgICBpZiAoaXNEYXRlKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLCAnZGF0ZScpO1xuICAgIH1cbiAgICBpZiAoaXNFcnJvcih2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBmb3JtYXRFcnJvcih2YWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGJhc2UgPSAnJywgYXJyYXkgPSBmYWxzZSwgYnJhY2VzID0gWyd7JywgJ30nXTtcblxuICAvLyBNYWtlIEFycmF5IHNheSB0aGF0IHRoZXkgYXJlIEFycmF5XG4gIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgIGFycmF5ID0gdHJ1ZTtcbiAgICBicmFjZXMgPSBbJ1snLCAnXSddO1xuICB9XG5cbiAgLy8gTWFrZSBmdW5jdGlvbnMgc2F5IHRoYXQgdGhleSBhcmUgZnVuY3Rpb25zXG4gIGlmIChpc0Z1bmN0aW9uKHZhbHVlKSkge1xuICAgIHZhciBuID0gdmFsdWUubmFtZSA/ICc6ICcgKyB2YWx1ZS5uYW1lIDogJyc7XG4gICAgYmFzZSA9ICcgW0Z1bmN0aW9uJyArIG4gKyAnXSc7XG4gIH1cblxuICAvLyBNYWtlIFJlZ0V4cHMgc2F5IHRoYXQgdGhleSBhcmUgUmVnRXhwc1xuICBpZiAoaXNSZWdFeHAodmFsdWUpKSB7XG4gICAgYmFzZSA9ICcgJyArIFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gIH1cblxuICAvLyBNYWtlIGRhdGVzIHdpdGggcHJvcGVydGllcyBmaXJzdCBzYXkgdGhlIGRhdGVcbiAgaWYgKGlzRGF0ZSh2YWx1ZSkpIHtcbiAgICBiYXNlID0gJyAnICsgRGF0ZS5wcm90b3R5cGUudG9VVENTdHJpbmcuY2FsbCh2YWx1ZSk7XG4gIH1cblxuICAvLyBNYWtlIGVycm9yIHdpdGggbWVzc2FnZSBmaXJzdCBzYXkgdGhlIGVycm9yXG4gIGlmIChpc0Vycm9yKHZhbHVlKSkge1xuICAgIGJhc2UgPSAnICcgKyBmb3JtYXRFcnJvcih2YWx1ZSk7XG4gIH1cblxuICBpZiAoa2V5cy5sZW5ndGggPT09IDAgJiYgKCFhcnJheSB8fCB2YWx1ZS5sZW5ndGggPT0gMCkpIHtcbiAgICByZXR1cm4gYnJhY2VzWzBdICsgYmFzZSArIGJyYWNlc1sxXTtcbiAgfVxuXG4gIGlmIChyZWN1cnNlVGltZXMgPCAwKSB7XG4gICAgaWYgKGlzUmVnRXhwKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSksICdyZWdleHAnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKCdbT2JqZWN0XScsICdzcGVjaWFsJyk7XG4gICAgfVxuICB9XG5cbiAgY3R4LnNlZW4ucHVzaCh2YWx1ZSk7XG5cbiAgdmFyIG91dHB1dDtcbiAgaWYgKGFycmF5KSB7XG4gICAgb3V0cHV0ID0gZm9ybWF0QXJyYXkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywga2V5cyk7XG4gIH0gZWxzZSB7XG4gICAgb3V0cHV0ID0ga2V5cy5tYXAoZnVuY3Rpb24oa2V5KSB7XG4gICAgICByZXR1cm4gZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywga2V5LCBhcnJheSk7XG4gICAgfSk7XG4gIH1cblxuICBjdHguc2Vlbi5wb3AoKTtcblxuICByZXR1cm4gcmVkdWNlVG9TaW5nbGVTdHJpbmcob3V0cHV0LCBiYXNlLCBicmFjZXMpO1xufVxuXG5cbmZ1bmN0aW9uIGZvcm1hdFByaW1pdGl2ZShjdHgsIHZhbHVlKSB7XG4gIGlmIChpc1VuZGVmaW5lZCh2YWx1ZSkpXG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKCd1bmRlZmluZWQnLCAndW5kZWZpbmVkJyk7XG4gIGlmIChpc1N0cmluZyh2YWx1ZSkpIHtcbiAgICB2YXIgc2ltcGxlID0gJ1xcJycgKyBKU09OLnN0cmluZ2lmeSh2YWx1ZSkucmVwbGFjZSgvXlwifFwiJC9nLCAnJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC8nL2csIFwiXFxcXCdcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXFxcXCIvZywgJ1wiJykgKyAnXFwnJztcbiAgICByZXR1cm4gY3R4LnN0eWxpemUoc2ltcGxlLCAnc3RyaW5nJyk7XG4gIH1cbiAgaWYgKGlzTnVtYmVyKHZhbHVlKSlcbiAgICByZXR1cm4gY3R4LnN0eWxpemUoJycgKyB2YWx1ZSwgJ251bWJlcicpO1xuICBpZiAoaXNCb29sZWFuKHZhbHVlKSlcbiAgICByZXR1cm4gY3R4LnN0eWxpemUoJycgKyB2YWx1ZSwgJ2Jvb2xlYW4nKTtcbiAgLy8gRm9yIHNvbWUgcmVhc29uIHR5cGVvZiBudWxsIGlzIFwib2JqZWN0XCIsIHNvIHNwZWNpYWwgY2FzZSBoZXJlLlxuICBpZiAoaXNOdWxsKHZhbHVlKSlcbiAgICByZXR1cm4gY3R4LnN0eWxpemUoJ251bGwnLCAnbnVsbCcpO1xufVxuXG5cbmZ1bmN0aW9uIGZvcm1hdEVycm9yKHZhbHVlKSB7XG4gIHJldHVybiAnWycgKyBFcnJvci5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkgKyAnXSc7XG59XG5cblxuZnVuY3Rpb24gZm9ybWF0QXJyYXkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywga2V5cykge1xuICB2YXIgb3V0cHV0ID0gW107XG4gIGZvciAodmFyIGkgPSAwLCBsID0gdmFsdWUubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgaWYgKGhhc093blByb3BlcnR5KHZhbHVlLCBTdHJpbmcoaSkpKSB7XG4gICAgICBvdXRwdXQucHVzaChmb3JtYXRQcm9wZXJ0eShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLFxuICAgICAgICAgIFN0cmluZyhpKSwgdHJ1ZSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXRwdXQucHVzaCgnJyk7XG4gICAgfVxuICB9XG4gIGtleXMuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcbiAgICBpZiAoIWtleS5tYXRjaCgvXlxcZCskLykpIHtcbiAgICAgIG91dHB1dC5wdXNoKGZvcm1hdFByb3BlcnR5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsXG4gICAgICAgICAga2V5LCB0cnVlKSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIG91dHB1dDtcbn1cblxuXG5mdW5jdGlvbiBmb3JtYXRQcm9wZXJ0eShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLCBrZXksIGFycmF5KSB7XG4gIHZhciBuYW1lLCBzdHIsIGRlc2M7XG4gIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHZhbHVlLCBrZXkpIHx8IHsgdmFsdWU6IHZhbHVlW2tleV0gfTtcbiAgaWYgKGRlc2MuZ2V0KSB7XG4gICAgaWYgKGRlc2Muc2V0KSB7XG4gICAgICBzdHIgPSBjdHguc3R5bGl6ZSgnW0dldHRlci9TZXR0ZXJdJywgJ3NwZWNpYWwnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tHZXR0ZXJdJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGRlc2Muc2V0KSB7XG4gICAgICBzdHIgPSBjdHguc3R5bGl6ZSgnW1NldHRlcl0nLCAnc3BlY2lhbCcpO1xuICAgIH1cbiAgfVxuICBpZiAoIWhhc093blByb3BlcnR5KHZpc2libGVLZXlzLCBrZXkpKSB7XG4gICAgbmFtZSA9ICdbJyArIGtleSArICddJztcbiAgfVxuICBpZiAoIXN0cikge1xuICAgIGlmIChjdHguc2Vlbi5pbmRleE9mKGRlc2MudmFsdWUpIDwgMCkge1xuICAgICAgaWYgKGlzTnVsbChyZWN1cnNlVGltZXMpKSB7XG4gICAgICAgIHN0ciA9IGZvcm1hdFZhbHVlKGN0eCwgZGVzYy52YWx1ZSwgbnVsbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdHIgPSBmb3JtYXRWYWx1ZShjdHgsIGRlc2MudmFsdWUsIHJlY3Vyc2VUaW1lcyAtIDEpO1xuICAgICAgfVxuICAgICAgaWYgKHN0ci5pbmRleE9mKCdcXG4nKSA+IC0xKSB7XG4gICAgICAgIGlmIChhcnJheSkge1xuICAgICAgICAgIHN0ciA9IHN0ci5zcGxpdCgnXFxuJykubWFwKGZ1bmN0aW9uKGxpbmUpIHtcbiAgICAgICAgICAgIHJldHVybiAnICAnICsgbGluZTtcbiAgICAgICAgICB9KS5qb2luKCdcXG4nKS5zdWJzdHIoMik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3RyID0gJ1xcbicgKyBzdHIuc3BsaXQoJ1xcbicpLm1hcChmdW5jdGlvbihsaW5lKSB7XG4gICAgICAgICAgICByZXR1cm4gJyAgICcgKyBsaW5lO1xuICAgICAgICAgIH0pLmpvaW4oJ1xcbicpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbQ2lyY3VsYXJdJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gIH1cbiAgaWYgKGlzVW5kZWZpbmVkKG5hbWUpKSB7XG4gICAgaWYgKGFycmF5ICYmIGtleS5tYXRjaCgvXlxcZCskLykpIHtcbiAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuICAgIG5hbWUgPSBKU09OLnN0cmluZ2lmeSgnJyArIGtleSk7XG4gICAgaWYgKG5hbWUubWF0Y2goL15cIihbYS16QS1aX11bYS16QS1aXzAtOV0qKVwiJC8pKSB7XG4gICAgICBuYW1lID0gbmFtZS5zdWJzdHIoMSwgbmFtZS5sZW5ndGggLSAyKTtcbiAgICAgIG5hbWUgPSBjdHguc3R5bGl6ZShuYW1lLCAnbmFtZScpO1xuICAgIH0gZWxzZSB7XG4gICAgICBuYW1lID0gbmFtZS5yZXBsYWNlKC8nL2csIFwiXFxcXCdcIilcbiAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcXFxcIi9nLCAnXCInKVxuICAgICAgICAgICAgICAgICAucmVwbGFjZSgvKF5cInxcIiQpL2csIFwiJ1wiKTtcbiAgICAgIG5hbWUgPSBjdHguc3R5bGl6ZShuYW1lLCAnc3RyaW5nJyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5hbWUgKyAnOiAnICsgc3RyO1xufVxuXG5cbmZ1bmN0aW9uIHJlZHVjZVRvU2luZ2xlU3RyaW5nKG91dHB1dCwgYmFzZSwgYnJhY2VzKSB7XG4gIHZhciBudW1MaW5lc0VzdCA9IDA7XG4gIHZhciBsZW5ndGggPSBvdXRwdXQucmVkdWNlKGZ1bmN0aW9uKHByZXYsIGN1cikge1xuICAgIG51bUxpbmVzRXN0Kys7XG4gICAgaWYgKGN1ci5pbmRleE9mKCdcXG4nKSA+PSAwKSBudW1MaW5lc0VzdCsrO1xuICAgIHJldHVybiBwcmV2ICsgY3VyLnJlcGxhY2UoL1xcdTAwMWJcXFtcXGRcXGQ/bS9nLCAnJykubGVuZ3RoICsgMTtcbiAgfSwgMCk7XG5cbiAgaWYgKGxlbmd0aCA+IDYwKSB7XG4gICAgcmV0dXJuIGJyYWNlc1swXSArXG4gICAgICAgICAgIChiYXNlID09PSAnJyA/ICcnIDogYmFzZSArICdcXG4gJykgK1xuICAgICAgICAgICAnICcgK1xuICAgICAgICAgICBvdXRwdXQuam9pbignLFxcbiAgJykgK1xuICAgICAgICAgICAnICcgK1xuICAgICAgICAgICBicmFjZXNbMV07XG4gIH1cblxuICByZXR1cm4gYnJhY2VzWzBdICsgYmFzZSArICcgJyArIG91dHB1dC5qb2luKCcsICcpICsgJyAnICsgYnJhY2VzWzFdO1xufVxuXG5cbi8vIE5PVEU6IFRoZXNlIHR5cGUgY2hlY2tpbmcgZnVuY3Rpb25zIGludGVudGlvbmFsbHkgZG9uJ3QgdXNlIGBpbnN0YW5jZW9mYFxuLy8gYmVjYXVzZSBpdCBpcyBmcmFnaWxlIGFuZCBjYW4gYmUgZWFzaWx5IGZha2VkIHdpdGggYE9iamVjdC5jcmVhdGUoKWAuXG5mdW5jdGlvbiBpc0FycmF5KGFyKSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KGFyKTtcbn1cbmV4cG9ydHMuaXNBcnJheSA9IGlzQXJyYXk7XG5cbmZ1bmN0aW9uIGlzQm9vbGVhbihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdib29sZWFuJztcbn1cbmV4cG9ydHMuaXNCb29sZWFuID0gaXNCb29sZWFuO1xuXG5mdW5jdGlvbiBpc051bGwoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IG51bGw7XG59XG5leHBvcnRzLmlzTnVsbCA9IGlzTnVsbDtcblxuZnVuY3Rpb24gaXNOdWxsT3JVbmRlZmluZWQoYXJnKSB7XG4gIHJldHVybiBhcmcgPT0gbnVsbDtcbn1cbmV4cG9ydHMuaXNOdWxsT3JVbmRlZmluZWQgPSBpc051bGxPclVuZGVmaW5lZDtcblxuZnVuY3Rpb24gaXNOdW1iZXIoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnbnVtYmVyJztcbn1cbmV4cG9ydHMuaXNOdW1iZXIgPSBpc051bWJlcjtcblxuZnVuY3Rpb24gaXNTdHJpbmcoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnc3RyaW5nJztcbn1cbmV4cG9ydHMuaXNTdHJpbmcgPSBpc1N0cmluZztcblxuZnVuY3Rpb24gaXNTeW1ib2woYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnc3ltYm9sJztcbn1cbmV4cG9ydHMuaXNTeW1ib2wgPSBpc1N5bWJvbDtcblxuZnVuY3Rpb24gaXNVbmRlZmluZWQoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IHZvaWQgMDtcbn1cbmV4cG9ydHMuaXNVbmRlZmluZWQgPSBpc1VuZGVmaW5lZDtcblxuZnVuY3Rpb24gaXNSZWdFeHAocmUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0KHJlKSAmJiBvYmplY3RUb1N0cmluZyhyZSkgPT09ICdbb2JqZWN0IFJlZ0V4cF0nO1xufVxuZXhwb3J0cy5pc1JlZ0V4cCA9IGlzUmVnRXhwO1xuXG5mdW5jdGlvbiBpc09iamVjdChhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdvYmplY3QnICYmIGFyZyAhPT0gbnVsbDtcbn1cbmV4cG9ydHMuaXNPYmplY3QgPSBpc09iamVjdDtcblxuZnVuY3Rpb24gaXNEYXRlKGQpIHtcbiAgcmV0dXJuIGlzT2JqZWN0KGQpICYmIG9iamVjdFRvU3RyaW5nKGQpID09PSAnW29iamVjdCBEYXRlXSc7XG59XG5leHBvcnRzLmlzRGF0ZSA9IGlzRGF0ZTtcblxuZnVuY3Rpb24gaXNFcnJvcihlKSB7XG4gIHJldHVybiBpc09iamVjdChlKSAmJlxuICAgICAgKG9iamVjdFRvU3RyaW5nKGUpID09PSAnW29iamVjdCBFcnJvcl0nIHx8IGUgaW5zdGFuY2VvZiBFcnJvcik7XG59XG5leHBvcnRzLmlzRXJyb3IgPSBpc0Vycm9yO1xuXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ2Z1bmN0aW9uJztcbn1cbmV4cG9ydHMuaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247XG5cbmZ1bmN0aW9uIGlzUHJpbWl0aXZlKGFyZykge1xuICByZXR1cm4gYXJnID09PSBudWxsIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnYm9vbGVhbicgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdudW1iZXInIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnc3RyaW5nJyB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3N5bWJvbCcgfHwgIC8vIEVTNiBzeW1ib2xcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICd1bmRlZmluZWQnO1xufVxuZXhwb3J0cy5pc1ByaW1pdGl2ZSA9IGlzUHJpbWl0aXZlO1xuXG5leHBvcnRzLmlzQnVmZmVyID0gcmVxdWlyZSgnLi9zdXBwb3J0L2lzQnVmZmVyJyk7XG5cbmZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKG8pIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKTtcbn1cblxuXG5mdW5jdGlvbiBwYWQobikge1xuICByZXR1cm4gbiA8IDEwID8gJzAnICsgbi50b1N0cmluZygxMCkgOiBuLnRvU3RyaW5nKDEwKTtcbn1cblxuXG52YXIgbW9udGhzID0gWydKYW4nLCAnRmViJywgJ01hcicsICdBcHInLCAnTWF5JywgJ0p1bicsICdKdWwnLCAnQXVnJywgJ1NlcCcsXG4gICAgICAgICAgICAgICdPY3QnLCAnTm92JywgJ0RlYyddO1xuXG4vLyAyNiBGZWIgMTY6MTk6MzRcbmZ1bmN0aW9uIHRpbWVzdGFtcCgpIHtcbiAgdmFyIGQgPSBuZXcgRGF0ZSgpO1xuICB2YXIgdGltZSA9IFtwYWQoZC5nZXRIb3VycygpKSxcbiAgICAgICAgICAgICAgcGFkKGQuZ2V0TWludXRlcygpKSxcbiAgICAgICAgICAgICAgcGFkKGQuZ2V0U2Vjb25kcygpKV0uam9pbignOicpO1xuICByZXR1cm4gW2QuZ2V0RGF0ZSgpLCBtb250aHNbZC5nZXRNb250aCgpXSwgdGltZV0uam9pbignICcpO1xufVxuXG5cbi8vIGxvZyBpcyBqdXN0IGEgdGhpbiB3cmFwcGVyIHRvIGNvbnNvbGUubG9nIHRoYXQgcHJlcGVuZHMgYSB0aW1lc3RhbXBcbmV4cG9ydHMubG9nID0gZnVuY3Rpb24oKSB7XG4gIGNvbnNvbGUubG9nKCclcyAtICVzJywgdGltZXN0YW1wKCksIGV4cG9ydHMuZm9ybWF0LmFwcGx5KGV4cG9ydHMsIGFyZ3VtZW50cykpO1xufTtcblxuXG4vKipcbiAqIEluaGVyaXQgdGhlIHByb3RvdHlwZSBtZXRob2RzIGZyb20gb25lIGNvbnN0cnVjdG9yIGludG8gYW5vdGhlci5cbiAqXG4gKiBUaGUgRnVuY3Rpb24ucHJvdG90eXBlLmluaGVyaXRzIGZyb20gbGFuZy5qcyByZXdyaXR0ZW4gYXMgYSBzdGFuZGFsb25lXG4gKiBmdW5jdGlvbiAobm90IG9uIEZ1bmN0aW9uLnByb3RvdHlwZSkuIE5PVEU6IElmIHRoaXMgZmlsZSBpcyB0byBiZSBsb2FkZWRcbiAqIGR1cmluZyBib290c3RyYXBwaW5nIHRoaXMgZnVuY3Rpb24gbmVlZHMgdG8gYmUgcmV3cml0dGVuIHVzaW5nIHNvbWUgbmF0aXZlXG4gKiBmdW5jdGlvbnMgYXMgcHJvdG90eXBlIHNldHVwIHVzaW5nIG5vcm1hbCBKYXZhU2NyaXB0IGRvZXMgbm90IHdvcmsgYXNcbiAqIGV4cGVjdGVkIGR1cmluZyBib290c3RyYXBwaW5nIChzZWUgbWlycm9yLmpzIGluIHIxMTQ5MDMpLlxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGN0b3IgQ29uc3RydWN0b3IgZnVuY3Rpb24gd2hpY2ggbmVlZHMgdG8gaW5oZXJpdCB0aGVcbiAqICAgICBwcm90b3R5cGUuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBzdXBlckN0b3IgQ29uc3RydWN0b3IgZnVuY3Rpb24gdG8gaW5oZXJpdCBwcm90b3R5cGUgZnJvbS5cbiAqL1xuZXhwb3J0cy5pbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG5cbmV4cG9ydHMuX2V4dGVuZCA9IGZ1bmN0aW9uKG9yaWdpbiwgYWRkKSB7XG4gIC8vIERvbid0IGRvIGFueXRoaW5nIGlmIGFkZCBpc24ndCBhbiBvYmplY3RcbiAgaWYgKCFhZGQgfHwgIWlzT2JqZWN0KGFkZCkpIHJldHVybiBvcmlnaW47XG5cbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhhZGQpO1xuICB2YXIgaSA9IGtleXMubGVuZ3RoO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgb3JpZ2luW2tleXNbaV1dID0gYWRkW2tleXNbaV1dO1xuICB9XG4gIHJldHVybiBvcmlnaW47XG59O1xuXG5mdW5jdGlvbiBoYXNPd25Qcm9wZXJ0eShvYmosIHByb3ApIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApO1xufVxuXG52YXIga0N1c3RvbVByb21pc2lmaWVkU3ltYm9sID0gdHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgPyBTeW1ib2woJ3V0aWwucHJvbWlzaWZ5LmN1c3RvbScpIDogdW5kZWZpbmVkO1xuXG5leHBvcnRzLnByb21pc2lmeSA9IGZ1bmN0aW9uIHByb21pc2lmeShvcmlnaW5hbCkge1xuICBpZiAodHlwZW9mIG9yaWdpbmFsICE9PSAnZnVuY3Rpb24nKVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcIm9yaWdpbmFsXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIEZ1bmN0aW9uJyk7XG5cbiAgaWYgKGtDdXN0b21Qcm9taXNpZmllZFN5bWJvbCAmJiBvcmlnaW5hbFtrQ3VzdG9tUHJvbWlzaWZpZWRTeW1ib2xdKSB7XG4gICAgdmFyIGZuID0gb3JpZ2luYWxba0N1c3RvbVByb21pc2lmaWVkU3ltYm9sXTtcbiAgICBpZiAodHlwZW9mIGZuICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJ1dGlsLnByb21pc2lmeS5jdXN0b21cIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRnVuY3Rpb24nKTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGZuLCBrQ3VzdG9tUHJvbWlzaWZpZWRTeW1ib2wsIHtcbiAgICAgIHZhbHVlOiBmbiwgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiBmYWxzZSwgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIGZuO1xuICB9XG5cbiAgZnVuY3Rpb24gZm4oKSB7XG4gICAgdmFyIHByb21pc2VSZXNvbHZlLCBwcm9taXNlUmVqZWN0O1xuICAgIHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgcHJvbWlzZVJlc29sdmUgPSByZXNvbHZlO1xuICAgICAgcHJvbWlzZVJlamVjdCA9IHJlamVjdDtcbiAgICB9KTtcblxuICAgIHZhciBhcmdzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ3MucHVzaChhcmd1bWVudHNbaV0pO1xuICAgIH1cbiAgICBhcmdzLnB1c2goZnVuY3Rpb24gKGVyciwgdmFsdWUpIHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgcHJvbWlzZVJlamVjdChlcnIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvbWlzZVJlc29sdmUodmFsdWUpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdHJ5IHtcbiAgICAgIG9yaWdpbmFsLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcHJvbWlzZVJlamVjdChlcnIpO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9taXNlO1xuICB9XG5cbiAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGZuLCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob3JpZ2luYWwpKTtcblxuICBpZiAoa0N1c3RvbVByb21pc2lmaWVkU3ltYm9sKSBPYmplY3QuZGVmaW5lUHJvcGVydHkoZm4sIGtDdXN0b21Qcm9taXNpZmllZFN5bWJvbCwge1xuICAgIHZhbHVlOiBmbiwgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiBmYWxzZSwgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pO1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoXG4gICAgZm4sXG4gICAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhvcmlnaW5hbClcbiAgKTtcbn1cblxuZXhwb3J0cy5wcm9taXNpZnkuY3VzdG9tID0ga0N1c3RvbVByb21pc2lmaWVkU3ltYm9sXG5cbmZ1bmN0aW9uIGNhbGxiYWNraWZ5T25SZWplY3RlZChyZWFzb24sIGNiKSB7XG4gIC8vIGAhcmVhc29uYCBndWFyZCBpbnNwaXJlZCBieSBibHVlYmlyZCAoUmVmOiBodHRwczovL2dvby5nbC90NUlTNk0pLlxuICAvLyBCZWNhdXNlIGBudWxsYCBpcyBhIHNwZWNpYWwgZXJyb3IgdmFsdWUgaW4gY2FsbGJhY2tzIHdoaWNoIG1lYW5zIFwibm8gZXJyb3JcbiAgLy8gb2NjdXJyZWRcIiwgd2UgZXJyb3Itd3JhcCBzbyB0aGUgY2FsbGJhY2sgY29uc3VtZXIgY2FuIGRpc3Rpbmd1aXNoIGJldHdlZW5cbiAgLy8gXCJ0aGUgcHJvbWlzZSByZWplY3RlZCB3aXRoIG51bGxcIiBvciBcInRoZSBwcm9taXNlIGZ1bGZpbGxlZCB3aXRoIHVuZGVmaW5lZFwiLlxuICBpZiAoIXJlYXNvbikge1xuICAgIHZhciBuZXdSZWFzb24gPSBuZXcgRXJyb3IoJ1Byb21pc2Ugd2FzIHJlamVjdGVkIHdpdGggYSBmYWxzeSB2YWx1ZScpO1xuICAgIG5ld1JlYXNvbi5yZWFzb24gPSByZWFzb247XG4gICAgcmVhc29uID0gbmV3UmVhc29uO1xuICB9XG4gIHJldHVybiBjYihyZWFzb24pO1xufVxuXG5mdW5jdGlvbiBjYWxsYmFja2lmeShvcmlnaW5hbCkge1xuICBpZiAodHlwZW9mIG9yaWdpbmFsICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwib3JpZ2luYWxcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRnVuY3Rpb24nKTtcbiAgfVxuXG4gIC8vIFdlIERPIE5PVCByZXR1cm4gdGhlIHByb21pc2UgYXMgaXQgZ2l2ZXMgdGhlIHVzZXIgYSBmYWxzZSBzZW5zZSB0aGF0XG4gIC8vIHRoZSBwcm9taXNlIGlzIGFjdHVhbGx5IHNvbWVob3cgcmVsYXRlZCB0byB0aGUgY2FsbGJhY2sncyBleGVjdXRpb25cbiAgLy8gYW5kIHRoYXQgdGhlIGNhbGxiYWNrIHRocm93aW5nIHdpbGwgcmVqZWN0IHRoZSBwcm9taXNlLlxuICBmdW5jdGlvbiBjYWxsYmFja2lmaWVkKCkge1xuICAgIHZhciBhcmdzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ3MucHVzaChhcmd1bWVudHNbaV0pO1xuICAgIH1cblxuICAgIHZhciBtYXliZUNiID0gYXJncy5wb3AoKTtcbiAgICBpZiAodHlwZW9mIG1heWJlQ2IgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBsYXN0IGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBGdW5jdGlvbicpO1xuICAgIH1cbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdmFyIGNiID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gbWF5YmVDYi5hcHBseShzZWxmLCBhcmd1bWVudHMpO1xuICAgIH07XG4gICAgLy8gSW4gdHJ1ZSBub2RlIHN0eWxlIHdlIHByb2Nlc3MgdGhlIGNhbGxiYWNrIG9uIGBuZXh0VGlja2Agd2l0aCBhbGwgdGhlXG4gICAgLy8gaW1wbGljYXRpb25zIChzdGFjaywgYHVuY2F1Z2h0RXhjZXB0aW9uYCwgYGFzeW5jX2hvb2tzYClcbiAgICBvcmlnaW5hbC5hcHBseSh0aGlzLCBhcmdzKVxuICAgICAgLnRoZW4oZnVuY3Rpb24ocmV0KSB7IHByb2Nlc3MubmV4dFRpY2soY2IsIG51bGwsIHJldCkgfSxcbiAgICAgICAgICAgIGZ1bmN0aW9uKHJlaikgeyBwcm9jZXNzLm5leHRUaWNrKGNhbGxiYWNraWZ5T25SZWplY3RlZCwgcmVqLCBjYikgfSk7XG4gIH1cblxuICBPYmplY3Quc2V0UHJvdG90eXBlT2YoY2FsbGJhY2tpZmllZCwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG9yaWdpbmFsKSk7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGNhbGxiYWNraWZpZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnMob3JpZ2luYWwpKTtcbiAgcmV0dXJuIGNhbGxiYWNraWZpZWQ7XG59XG5leHBvcnRzLmNhbGxiYWNraWZ5ID0gY2FsbGJhY2tpZnk7XG4iLCIvKlxuICogU1JQIEdyb3VwIFBhcmFtZXRlcnNcbiAqIGh0dHA6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzUwNTQjYXBwZW5kaXgtQVxuICpcbiAqIFRoZSAxMDI0LSwgMTUzNi0sIGFuZCAyMDQ4LWJpdCBncm91cHMgYXJlIHRha2VuIGZyb20gc29mdHdhcmVcbiAqIGRldmVsb3BlZCBieSBUb20gV3UgYW5kIEV1Z2VuZSBKaG9uZyBmb3IgdGhlIFN0YW5mb3JkIFNSUFxuICogZGlzdHJpYnV0aW9uLCBhbmQgc3Vic2VxdWVudGx5IHByb3ZlbiB0byBiZSBwcmltZS4gIFRoZSBsYXJnZXIgcHJpbWVzXG4gKiBhcmUgdGFrZW4gZnJvbSBbTU9EUF0sIGJ1dCBnZW5lcmF0b3JzIGhhdmUgYmVlbiBjYWxjdWxhdGVkIHRoYXQgYXJlXG4gKiBwcmltaXRpdmUgcm9vdHMgb2YgTiwgdW5saWtlIHRoZSBnZW5lcmF0b3JzIGluIFtNT0RQXS5cbiAqXG4gKiBUaGUgMTAyNC1iaXQgYW5kIDE1MzYtYml0IGdyb3VwcyBNVVNUIGJlIHN1cHBvcnRlZC5cbiAqL1xuXG4vLyBzaW5jZSB0aGVzZSBhcmUgbWVhbnQgdG8gYmUgdXNlZCBpbnRlcm5hbGx5LCBhbGwgdmFsdWVzIGFyZSBudW1iZXJzLiBJZlxuLy8geW91IHdhbnQgdG8gYWRkIHBhcmFtZXRlciBzZXRzLCB5b3UnbGwgbmVlZCB0byBjb252ZXJ0IHRoZW0gdG8gYmlnbnVtcy5cblxuLyoqXG4gKiBDb252ZXJ0IGEgaGV4IHN0cmluZyB0byBhIEJpZ0ludFxuICogQHBhcmFtIHtTdHJpbmd9IHNcbiAqIEByZXR1cm4ge0JpZ0ludH1cbiAqL1xuZnVuY3Rpb24gaGV4KHMpIHtcbiAgICByZXR1cm4gQmlnSW50KCcweCcgKyBzLnJlcGxhY2UoL1xccy9nLCAnJykpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgMTAyNDoge1xuICAgIE5fbGVuZ3RoX2JpdHM6IDEwMjQsXG4gICAgTjogaGV4KCdFRUFGMEFCOSBBREIzOERENiA5QzMzRjgwQSBGQThGQzVFOCA2MDcyNjE4NyA3NUZGM0MwQiA5RUEyMzE0QycgK1xuICAgICAgICAgICAnOUMyNTY1NzYgRDY3NERGNzQgOTZFQTgxRDMgMzgzQjQ4MTMgRDY5MkM2RTAgRTBENUQ4RTIgNTBCOThCRTQnICtcbiAgICAgICAgICAgJzhFNDk1QzFEIDYwODlEQUQxIDVEQzdEN0I0IDYxNTRENkI2IENFOEVGNEFEIDY5QjE1RDQ5IDgyNTU5QjI5JyArXG4gICAgICAgICAgICc3QkNGMTg4NSBDNTI5RjU2NiA2NjBFNTdFQyA2OEVEQkMzQyAwNTcyNkNDMCAyRkQ0Q0JGNCA5NzZFQUE5QScgK1xuICAgICAgICAgICAnRkQ1MTM4RkUgODM3NjQzNUIgOUZDNjFEMkYgQzBFQjA2RTMnKSxcbiAgICBnOiBoZXgoJzAyJyksXG4gICAgaGFzaDogJ3NoYTEnXG4gIH0sXG4gIDE1MzY6IHtcbiAgICBOX2xlbmd0aF9iaXRzOiAxNTM2LFxuICAgIE46IGhleCgnOURFRjNDQUYgQjkzOTI3N0EgQjFGMTJBODYgMTdBNDdCQkIgREJBNTFERjQgOTlBQzRDODAgQkVFRUE5NjEnICtcbiAgICAgICAgICAgJzRCMTlDQzREIDVGNEY1RjU1IDZFMjdDQkRFIDUxQzZBOTRCIEU0NjA3QTI5IDE1NTg5MDNCIEEwRDBGODQzJyArXG4gICAgICAgICAgICc4MEI2NTVCQiA5QTIyRThEQyBERjAyOEE3QyBFQzY3RjBEMCA4MTM0QjFDOCBCOTc5ODkxNCA5QjYwOUUwQicgK1xuICAgICAgICAgICAnRTNCQUI2M0QgNDc1NDgzODEgREJDNUIxRkMgNzY0RTNGNEIgNTNERDlEQTEgMTU4QkZEM0UgMkI5QzhDRjUnICtcbiAgICAgICAgICAgJzZFREYwMTk1IDM5MzQ5NjI3IERCMkZENTNEIDI0QjdDNDg2IDY1NzcyRTQzIDdENkM3RjhDIEU0NDI3MzRBJyArXG4gICAgICAgICAgICdGN0NDQjdBRSA4MzdDMjY0QSBFM0E5QkVCOCA3RjhBMkZFOSBCOEI1MjkyRSA1QTAyMUZGRiA1RTkxNDc5RScgK1xuICAgICAgICAgICAnOENFN0EyOEMgMjQ0MkM2RjMgMTUxODBGOTMgNDk5QTIzNEQgQ0Y3NkUzRkUgRDEzNUY5QkInKSxcbiAgICBnOiBoZXgoJzAyJyksXG4gICAgaGFzaDogJ3NoYTEnXG4gIH0sXG4gIDIwNDg6IHtcbiAgICBOX2xlbmd0aF9iaXRzOiAyMDQ4LFxuICAgIE46IGhleCgnQUM2QkRCNDEgMzI0QTlBOUIgRjE2NkRFNUUgMTM4OTU4MkYgQUY3MkI2NjUgMTk4N0VFMDcgRkMzMTkyOTQnICtcbiAgICAgICAgICAgJzNEQjU2MDUwIEEzNzMyOUNCIEI0QTA5OUVEIDgxOTNFMDc1IDc3NjdBMTNEIEQ1MjMxMkFCIDRCMDMzMTBEJyArXG4gICAgICAgICAgICdDRDdGNDhBOSBEQTA0RkQ1MCBFODA4Mzk2OSBFREI3NjdCMCBDRjYwOTUxNyA5QTE2M0FCMyA2NjFBMDVGQicgK1xuICAgICAgICAgICAnRDVGQUFBRTggMjkxOEE5OTYgMkYwQjkzQjggNTVGOTc5OTMgRUM5NzVFRUEgQTgwRDc0MEEgREJGNEZGNzQnICtcbiAgICAgICAgICAgJzczNTlEMDQxIEQ1QzMzRUE3IDFEMjgxRTQ0IDZCMTQ3NzNCIENBOTdCNDNBIDIzRkI4MDE2IDc2QkQyMDdBJyArXG4gICAgICAgICAgICc0MzZDNjQ4MSBGMUQyQjkwNyA4NzE3NDYxQSA1QjlEMzJFNiA4OEY4Nzc0OCA1NDQ1MjNCNSAyNEIwRDU3RCcgK1xuICAgICAgICAgICAnNUVBNzdBMjcgNzVEMkVDRkEgMDMyQ0ZCREIgRjUyRkIzNzggNjE2MDI3OTAgMDRFNTdBRTYgQUY4NzRFNzMnICtcbiAgICAgICAgICAgJzAzQ0U1MzI5IDlDQ0MwNDFDIDdCQzMwOEQ4IDJBNTY5OEYzIEE4RDBDMzgyIDcxQUUzNUY4IEU5REJGQkI2JyArXG4gICAgICAgICAgICc5NEI1QzgwMyBEODlGN0FFNCAzNURFMjM2RCA1MjVGNTQ3NSA5QjY1RTM3MiBGQ0Q2OEVGMiAwRkE3MTExRicgK1xuICAgICAgICAgICAnOUU0QUZGNzMnKSxcbiAgICBnOiBoZXgoJzAyJyksXG4gICAgaGFzaDogJ3NoYTI1NidcbiAgfSxcbiAgMzA3Mjoge1xuICAgIE5fbGVuZ3RoX2JpdHM6IDMwNzIsXG4gICAgTjogaGV4KCdGRkZGRkZGRiBGRkZGRkZGRiBDOTBGREFBMiAyMTY4QzIzNCBDNEM2NjI4QiA4MERDMUNEMSAyOTAyNEUwOCcgK1xuICAgICAgICAgICAnOEE2N0NDNzQgMDIwQkJFQTYgM0IxMzlCMjIgNTE0QTA4NzkgOEUzNDA0REQgRUY5NTE5QjMgQ0QzQTQzMUInICtcbiAgICAgICAgICAgJzMwMkIwQTZEIEYyNUYxNDM3IDRGRTEzNTZEIDZENTFDMjQ1IEU0ODVCNTc2IDYyNUU3RUM2IEY0NEM0MkU5JyArXG4gICAgICAgICAgICdBNjM3RUQ2QiAwQkZGNUNCNiBGNDA2QjdFRCBFRTM4NkJGQiA1QTg5OUZBNSBBRTlGMjQxMSA3QzRCMUZFNicgK1xuICAgICAgICAgICAnNDkyODY2NTEgRUNFNDVCM0QgQzIwMDdDQjggQTE2M0JGMDUgOThEQTQ4MzYgMUM1NUQzOUEgNjkxNjNGQTgnICtcbiAgICAgICAgICAgJ0ZEMjRDRjVGIDgzNjU1RDIzIERDQTNBRDk2IDFDNjJGMzU2IDIwODU1MkJCIDlFRDUyOTA3IDcwOTY5NjZEJyArXG4gICAgICAgICAgICc2NzBDMzU0RSA0QUJDOTgwNCBGMTc0NkMwOCBDQTE4MjE3QyAzMjkwNUU0NiAyRTM2Q0UzQiBFMzlFNzcyQycgK1xuICAgICAgICAgICAnMTgwRTg2MDMgOUIyNzgzQTIgRUMwN0EyOEYgQjVDNTVERjAgNkY0QzUyQzkgREUyQkNCRjYgOTU1ODE3MTgnICtcbiAgICAgICAgICAgJzM5OTU0OTdDIEVBOTU2QUU1IDE1RDIyNjE4IDk4RkEwNTEwIDE1NzI4RTVBIDhBQUFDNDJEIEFEMzMxNzBEJyArXG4gICAgICAgICAgICcwNDUwN0EzMyBBODU1MjFBQiBERjFDQkE2NCBFQ0ZCODUwNCA1OERCRUYwQSA4QUVBNzE1NyA1RDA2MEM3RCcgK1xuICAgICAgICAgICAnQjM5NzBGODUgQTZFMUU0QzcgQUJGNUFFOEMgREIwOTMzRDcgMUU4Qzk0RTAgNEEyNTYxOUQgQ0VFM0QyMjYnICtcbiAgICAgICAgICAgJzFBRDJFRTZCIEYxMkZGQTA2IEQ5OEEwODY0IEQ4NzYwMjczIDNFQzg2QTY0IDUyMUYyQjE4IDE3N0IyMDBDJyArXG4gICAgICAgICAgICdCQkUxMTc1NyA3QTYxNUQ2QyA3NzA5ODhDMCBCQUQ5NDZFMiAwOEUyNEZBMCA3NEU1QUIzMSA0M0RCNUJGQycgK1xuICAgICAgICAgICAnRTBGRDEwOEUgNEI4MkQxMjAgQTkzQUQyQ0EgRkZGRkZGRkYgRkZGRkZGRkYnKSxcbiAgICBnOiBoZXgoJzA1JyksXG4gICAgaGFzaDogJ3NoYTI1NidcbiAgfSxcbiAgNDA5Njoge1xuICAgIE5fbGVuZ3RoX2JpdHM6IDQwOTYsXG4gICAgTjogaGV4KCdGRkZGRkZGRiBGRkZGRkZGRiBDOTBGREFBMiAyMTY4QzIzNCBDNEM2NjI4QiA4MERDMUNEMSAyOTAyNEUwOCcgK1xuICAgICAgICAgICAnOEE2N0NDNzQgMDIwQkJFQTYgM0IxMzlCMjIgNTE0QTA4NzkgOEUzNDA0REQgRUY5NTE5QjMgQ0QzQTQzMUInICtcbiAgICAgICAgICAgJzMwMkIwQTZEIEYyNUYxNDM3IDRGRTEzNTZEIDZENTFDMjQ1IEU0ODVCNTc2IDYyNUU3RUM2IEY0NEM0MkU5JyArXG4gICAgICAgICAgICdBNjM3RUQ2QiAwQkZGNUNCNiBGNDA2QjdFRCBFRTM4NkJGQiA1QTg5OUZBNSBBRTlGMjQxMSA3QzRCMUZFNicgK1xuICAgICAgICAgICAnNDkyODY2NTEgRUNFNDVCM0QgQzIwMDdDQjggQTE2M0JGMDUgOThEQTQ4MzYgMUM1NUQzOUEgNjkxNjNGQTgnICtcbiAgICAgICAgICAgJ0ZEMjRDRjVGIDgzNjU1RDIzIERDQTNBRDk2IDFDNjJGMzU2IDIwODU1MkJCIDlFRDUyOTA3IDcwOTY5NjZEJyArXG4gICAgICAgICAgICc2NzBDMzU0RSA0QUJDOTgwNCBGMTc0NkMwOCBDQTE4MjE3QyAzMjkwNUU0NiAyRTM2Q0UzQiBFMzlFNzcyQycgK1xuICAgICAgICAgICAnMTgwRTg2MDMgOUIyNzgzQTIgRUMwN0EyOEYgQjVDNTVERjAgNkY0QzUyQzkgREUyQkNCRjYgOTU1ODE3MTgnICtcbiAgICAgICAgICAgJzM5OTU0OTdDIEVBOTU2QUU1IDE1RDIyNjE4IDk4RkEwNTEwIDE1NzI4RTVBIDhBQUFDNDJEIEFEMzMxNzBEJyArXG4gICAgICAgICAgICcwNDUwN0EzMyBBODU1MjFBQiBERjFDQkE2NCBFQ0ZCODUwNCA1OERCRUYwQSA4QUVBNzE1NyA1RDA2MEM3RCcgK1xuICAgICAgICAgICAnQjM5NzBGODUgQTZFMUU0QzcgQUJGNUFFOEMgREIwOTMzRDcgMUU4Qzk0RTAgNEEyNTYxOUQgQ0VFM0QyMjYnICtcbiAgICAgICAgICAgJzFBRDJFRTZCIEYxMkZGQTA2IEQ5OEEwODY0IEQ4NzYwMjczIDNFQzg2QTY0IDUyMUYyQjE4IDE3N0IyMDBDJyArXG4gICAgICAgICAgICdCQkUxMTc1NyA3QTYxNUQ2QyA3NzA5ODhDMCBCQUQ5NDZFMiAwOEUyNEZBMCA3NEU1QUIzMSA0M0RCNUJGQycgK1xuICAgICAgICAgICAnRTBGRDEwOEUgNEI4MkQxMjAgQTkyMTA4MDEgMUE3MjNDMTIgQTc4N0U2RDcgODg3MTlBMTAgQkRCQTVCMjYnICtcbiAgICAgICAgICAgJzk5QzMyNzE4IDZBRjRFMjNDIDFBOTQ2ODM0IEI2MTUwQkRBIDI1ODNFOUNBIDJBRDQ0Q0U4IERCQkJDMkRCJyArXG4gICAgICAgICAgICcwNERFOEVGOSAyRThFRkMxNCAxRkJFQ0FBNiAyODdDNTk0NyA0RTZCQzA1RCA5OUIyOTY0RiBBMDkwQzNBMicgK1xuICAgICAgICAgICAnMjMzQkExODYgNTE1QkU3RUQgMUY2MTI5NzAgQ0VFMkQ3QUYgQjgxQkRENzYgMjE3MDQ4MUMgRDAwNjkxMjcnICtcbiAgICAgICAgICAgJ0Q1QjA1QUE5IDkzQjRFQTk4IDhEOEZEREMxIDg2RkZCN0RDIDkwQTZDMDhGIDRERjQzNUM5IDM0MDYzMTk5JyArXG4gICAgICAgICAgICdGRkZGRkZGRiBGRkZGRkZGRicpLFxuICAgIGc6IGhleCgnMDUnKSxcbiAgICBoYXNoOiAnc2hhMjU2J1xuICB9LFxuICA2MjQ0OiB7XG4gICAgTl9sZW5ndGhfYml0czogNjI0NCxcbiAgICBOOiBoZXgoJ0ZGRkZGRkZGIEZGRkZGRkZGIEM5MEZEQUEyIDIxNjhDMjM0IEM0QzY2MjhCIDgwREMxQ0QxIDI5MDI0RTA4JyArXG4gICAgICAgICAgICc4QTY3Q0M3NCAwMjBCQkVBNiAzQjEzOUIyMiA1MTRBMDg3OSA4RTM0MDRERCBFRjk1MTlCMyBDRDNBNDMxQicgK1xuICAgICAgICAgICAnMzAyQjBBNkQgRjI1RjE0MzcgNEZFMTM1NkQgNkQ1MUMyNDUgRTQ4NUI1NzYgNjI1RTdFQzYgRjQ0QzQyRTknICtcbiAgICAgICAgICAgJ0E2MzdFRDZCIDBCRkY1Q0I2IEY0MDZCN0VEIEVFMzg2QkZCIDVBODk5RkE1IEFFOUYyNDExIDdDNEIxRkU2JyArXG4gICAgICAgICAgICc0OTI4NjY1MSBFQ0U0NUIzRCBDMjAwN0NCOCBBMTYzQkYwNSA5OERBNDgzNiAxQzU1RDM5QSA2OTE2M0ZBOCcgK1xuICAgICAgICAgICAnRkQyNENGNUYgODM2NTVEMjMgRENBM0FEOTYgMUM2MkYzNTYgMjA4NTUyQkIgOUVENTI5MDcgNzA5Njk2NkQnICtcbiAgICAgICAgICAgJzY3MEMzNTRFIDRBQkM5ODA0IEYxNzQ2QzA4IENBMTgyMTdDIDMyOTA1RTQ2IDJFMzZDRTNCIEUzOUU3NzJDJyArXG4gICAgICAgICAgICcxODBFODYwMyA5QjI3ODNBMiBFQzA3QTI4RiBCNUM1NURGMCA2RjRDNTJDOSBERTJCQ0JGNiA5NTU4MTcxOCcgK1xuICAgICAgICAgICAnMzk5NTQ5N0MgRUE5NTZBRTUgMTVEMjI2MTggOThGQTA1MTAgMTU3MjhFNUEgOEFBQUM0MkQgQUQzMzE3MEQnICtcbiAgICAgICAgICAgJzA0NTA3QTMzIEE4NTUyMUFCIERGMUNCQTY0IEVDRkI4NTA0IDU4REJFRjBBIDhBRUE3MTU3IDVEMDYwQzdEJyArXG4gICAgICAgICAgICdCMzk3MEY4NSBBNkUxRTRDNyBBQkY1QUU4QyBEQjA5MzNENyAxRThDOTRFMCA0QTI1NjE5RCBDRUUzRDIyNicgK1xuICAgICAgICAgICAnMUFEMkVFNkIgRjEyRkZBMDYgRDk4QTA4NjQgRDg3NjAyNzMgM0VDODZBNjQgNTIxRjJCMTggMTc3QjIwMEMnICtcbiAgICAgICAgICAgJ0JCRTExNzU3IDdBNjE1RDZDIDc3MDk4OEMwIEJBRDk0NkUyIDA4RTI0RkEwIDc0RTVBQjMxIDQzREI1QkZDJyArXG4gICAgICAgICAgICdFMEZEMTA4RSA0QjgyRDEyMCBBOTIxMDgwMSAxQTcyM0MxMiBBNzg3RTZENyA4ODcxOUExMCBCREJBNUIyNicgK1xuICAgICAgICAgICAnOTlDMzI3MTggNkFGNEUyM0MgMUE5NDY4MzQgQjYxNTBCREEgMjU4M0U5Q0EgMkFENDRDRTggREJCQkMyREInICtcbiAgICAgICAgICAgJzA0REU4RUY5IDJFOEVGQzE0IDFGQkVDQUE2IDI4N0M1OTQ3IDRFNkJDMDVEIDk5QjI5NjRGIEEwOTBDM0EyJyArXG4gICAgICAgICAgICcyMzNCQTE4NiA1MTVCRTdFRCAxRjYxMjk3MCBDRUUyRDdBRiBCODFCREQ3NiAyMTcwNDgxQyBEMDA2OTEyNycgK1xuICAgICAgICAgICAnRDVCMDVBQTkgOTNCNEVBOTggOEQ4RkREQzEgODZGRkI3REMgOTBBNkMwOEYgNERGNDM1QzkgMzQwMjg0OTInICtcbiAgICAgICAgICAgJzM2QzNGQUI0IEQyN0M3MDI2IEMxRDREQ0IyIDYwMjY0NkRFIEM5NzUxRTc2IDNEQkEzN0JEIEY4RkY5NDA2JyArXG4gICAgICAgICAgICdBRDlFNTMwRSBFNURCMzgyRiA0MTMwMDFBRSBCMDZBNTNFRCA5MDI3RDgzMSAxNzk3MjdCMCA4NjVBODkxOCcgK1xuICAgICAgICAgICAnREEzRURCRUIgQ0Y5QjE0RUQgNDRDRTZDQkEgQ0VENEJCMUIgREI3RjE0NDcgRTZDQzI1NEIgMzMyMDUxNTEnICtcbiAgICAgICAgICAgJzJCRDdBRjQyIDZGQjhGNDAxIDM3OENEMkJGIDU5ODNDQTAxIEM2NEI5MkVDIEYwMzJFQTE1IEQxNzIxRDAzJyArXG4gICAgICAgICAgICdGNDgyRDdDRSA2RTc0RkVGNiBENTVFNzAyRiA0Njk4MEM4MiBCNUE4NDAzMSA5MDBCMUM5RSA1OUU3Qzk3RicgK1xuICAgICAgICAgICAnQkVDN0U4RjMgMjNBOTdBN0UgMzZDQzg4QkUgMEYxRDQ1QjcgRkY1ODVBQzUgNEJENDA3QjIgMkI0MTU0QUEnICtcbiAgICAgICAgICAgJ0NDOEY2RDdFIEJGNDhFMUQ4IDE0Q0M1RUQyIDBGODAzN0UwIEE3OTcxNUVFIEYyOUJFMzI4IDA2QTFENThCJyArXG4gICAgICAgICAgICdCN0M1REE3NiBGNTUwQUEzRCA4QTFGQkZGMCBFQjE5Q0NCMSBBMzEzRDU1QyBEQTU2QzlFQyAyRUYyOTYzMicgK1xuICAgICAgICAgICAnMzg3RkU4RDcgNkUzQzA0NjggMDQzRThGNjYgM0Y0ODYwRUUgMTJCRjJENUIgMEI3NDc0RDYgRTY5NEY5MUUnICtcbiAgICAgICAgICAgJzZEQ0M0MDI0IEZGRkZGRkZGIEZGRkZGRkZGJyksXG4gICAgZzogaGV4KCcwNScpLFxuICAgIGhhc2g6ICdzaGEyNTYnXG4gIH0sXG4gIDgxOTI6IHtcbiAgICBOX2xlbmd0aF9iaXRzOiA4MTkyLFxuICAgIE46IGhleCgnRkZGRkZGRkYgRkZGRkZGRkYgQzkwRkRBQTIgMjE2OEMyMzQgQzRDNjYyOEIgODBEQzFDRDEgMjkwMjRFMDgnICtcbiAgICAgICAgICAgJzhBNjdDQzc0IDAyMEJCRUE2IDNCMTM5QjIyIDUxNEEwODc5IDhFMzQwNEREIEVGOTUxOUIzIENEM0E0MzFCJyArXG4gICAgICAgICAgICczMDJCMEE2RCBGMjVGMTQzNyA0RkUxMzU2RCA2RDUxQzI0NSBFNDg1QjU3NiA2MjVFN0VDNiBGNDRDNDJFOScgK1xuICAgICAgICAgICAnQTYzN0VENkIgMEJGRjVDQjYgRjQwNkI3RUQgRUUzODZCRkIgNUE4OTlGQTUgQUU5RjI0MTEgN0M0QjFGRTYnICtcbiAgICAgICAgICAgJzQ5Mjg2NjUxIEVDRTQ1QjNEIEMyMDA3Q0I4IEExNjNCRjA1IDk4REE0ODM2IDFDNTVEMzlBIDY5MTYzRkE4JyArXG4gICAgICAgICAgICdGRDI0Q0Y1RiA4MzY1NUQyMyBEQ0EzQUQ5NiAxQzYyRjM1NiAyMDg1NTJCQiA5RUQ1MjkwNyA3MDk2OTY2RCcgK1xuICAgICAgICAgICAnNjcwQzM1NEUgNEFCQzk4MDQgRjE3NDZDMDggQ0ExODIxN0MgMzI5MDVFNDYgMkUzNkNFM0IgRTM5RTc3MkMnICtcbiAgICAgICAgICAgJzE4MEU4NjAzIDlCMjc4M0EyIEVDMDdBMjhGIEI1QzU1REYwIDZGNEM1MkM5IERFMkJDQkY2IDk1NTgxNzE4JyArXG4gICAgICAgICAgICczOTk1NDk3QyBFQTk1NkFFNSAxNUQyMjYxOCA5OEZBMDUxMCAxNTcyOEU1QSA4QUFBQzQyRCBBRDMzMTcwRCcgK1xuICAgICAgICAgICAnMDQ1MDdBMzMgQTg1NTIxQUIgREYxQ0JBNjQgRUNGQjg1MDQgNThEQkVGMEEgOEFFQTcxNTcgNUQwNjBDN0QnICtcbiAgICAgICAgICAgJ0IzOTcwRjg1IEE2RTFFNEM3IEFCRjVBRThDIERCMDkzM0Q3IDFFOEM5NEUwIDRBMjU2MTlEIENFRTNEMjI2JyArXG4gICAgICAgICAgICcxQUQyRUU2QiBGMTJGRkEwNiBEOThBMDg2NCBEODc2MDI3MyAzRUM4NkE2NCA1MjFGMkIxOCAxNzdCMjAwQycgK1xuICAgICAgICAgICAnQkJFMTE3NTcgN0E2MTVENkMgNzcwOTg4QzAgQkFEOTQ2RTIgMDhFMjRGQTAgNzRFNUFCMzEgNDNEQjVCRkMnICtcbiAgICAgICAgICAgJ0UwRkQxMDhFIDRCODJEMTIwIEE5MjEwODAxIDFBNzIzQzEyIEE3ODdFNkQ3IDg4NzE5QTEwIEJEQkE1QjI2JyArXG4gICAgICAgICAgICc5OUMzMjcxOCA2QUY0RTIzQyAxQTk0NjgzNCBCNjE1MEJEQSAyNTgzRTlDQSAyQUQ0NENFOCBEQkJCQzJEQicgK1xuICAgICAgICAgICAnMDRERThFRjkgMkU4RUZDMTQgMUZCRUNBQTYgMjg3QzU5NDcgNEU2QkMwNUQgOTlCMjk2NEYgQTA5MEMzQTInICtcbiAgICAgICAgICAgJzIzM0JBMTg2IDUxNUJFN0VEIDFGNjEyOTcwIENFRTJEN0FGIEI4MUJERDc2IDIxNzA0ODFDIEQwMDY5MTI3JyArXG4gICAgICAgICAgICdENUIwNUFBOSA5M0I0RUE5OCA4RDhGRERDMSA4NkZGQjdEQyA5MEE2QzA4RiA0REY0MzVDOSAzNDAyODQ5MicgK1xuICAgICAgICAgICAnMzZDM0ZBQjQgRDI3QzcwMjYgQzFENERDQjIgNjAyNjQ2REUgQzk3NTFFNzYgM0RCQTM3QkQgRjhGRjk0MDYnICtcbiAgICAgICAgICAgJ0FEOUU1MzBFIEU1REIzODJGIDQxMzAwMUFFIEIwNkE1M0VEIDkwMjdEODMxIDE3OTcyN0IwIDg2NUE4OTE4JyArXG4gICAgICAgICAgICdEQTNFREJFQiBDRjlCMTRFRCA0NENFNkNCQSBDRUQ0QkIxQiBEQjdGMTQ0NyBFNkNDMjU0QiAzMzIwNTE1MScgK1xuICAgICAgICAgICAnMkJEN0FGNDIgNkZCOEY0MDEgMzc4Q0QyQkYgNTk4M0NBMDEgQzY0QjkyRUMgRjAzMkVBMTUgRDE3MjFEMDMnICtcbiAgICAgICAgICAgJ0Y0ODJEN0NFIDZFNzRGRUY2IEQ1NUU3MDJGIDQ2OTgwQzgyIEI1QTg0MDMxIDkwMEIxQzlFIDU5RTdDOTdGJyArXG4gICAgICAgICAgICdCRUM3RThGMyAyM0E5N0E3RSAzNkNDODhCRSAwRjFENDVCNyBGRjU4NUFDNSA0QkQ0MDdCMiAyQjQxNTRBQScgK1xuICAgICAgICAgICAnQ0M4RjZEN0UgQkY0OEUxRDggMTRDQzVFRDIgMEY4MDM3RTAgQTc5NzE1RUUgRjI5QkUzMjggMDZBMUQ1OEInICtcbiAgICAgICAgICAgJ0I3QzVEQTc2IEY1NTBBQTNEIDhBMUZCRkYwIEVCMTlDQ0IxIEEzMTNENTVDIERBNTZDOUVDIDJFRjI5NjMyJyArXG4gICAgICAgICAgICczODdGRThENyA2RTNDMDQ2OCAwNDNFOEY2NiAzRjQ4NjBFRSAxMkJGMkQ1QiAwQjc0NzRENiBFNjk0RjkxRScgK1xuICAgICAgICAgICAnNkRCRTExNTkgNzRBMzkyNkYgMTJGRUU1RTQgMzg3NzdDQjYgQTkzMkRGOEMgRDhCRUM0RDAgNzNCOTMxQkEnICtcbiAgICAgICAgICAgJzNCQzgzMkI2IDhEOUREMzAwIDc0MUZBN0JGIDhBRkM0N0VEIDI1NzZGNjkzIDZCQTQyNDY2IDNBQUI2MzlDJyArXG4gICAgICAgICAgICc1QUU0RjU2OCAzNDIzQjQ3NCAyQkYxQzk3OCAyMzhGMTZDQiBFMzlENjUyRCBFM0ZEQjhCRSBGQzg0OEFEOScgK1xuICAgICAgICAgICAnMjIyMjJFMDQgQTQwMzdDMDcgMTNFQjU3QTggMUEyM0YwQzcgMzQ3M0ZDNjQgNkNFQTMwNkIgNEJDQkM4ODYnICtcbiAgICAgICAgICAgJzJGODM4NUREIEZBOUQ0QjdGIEEyQzA4N0U4IDc5NjgzMzAzIEVENUJERDNBIDA2MkIzQ0Y1IEIzQTI3OEE2JyArXG4gICAgICAgICAgICc2RDJBMTNGOCAzRjQ0RjgyRCBERjMxMEVFMCA3NEFCNkEzNiA0NTk3RTg5OSBBMDI1NURDMSA2NEYzMUNDNScgK1xuICAgICAgICAgICAnMDg0Njg1MUQgRjlBQjQ4MTkgNURFRDdFQTEgQjFENTEwQkQgN0VFNzRENzMgRkFGMzZCQzMgMUVDRkEyNjgnICtcbiAgICAgICAgICAgJzM1OTA0NkY0IEVCODc5RjkyIDQwMDk0MzhCIDQ4MUM2Q0Q3IDg4OUEwMDJFIEQ1RUUzODJCIEM5MTkwREE2JyArXG4gICAgICAgICAgICdGQzAyNkU0NyA5NTU4RTQ0NyA1Njc3RTlBQSA5RTMwNTBFMiA3NjU2OTRERiBDODFGNTZFOCA4MEI5NkU3MScgK1xuICAgICAgICAgICAnNjBDOTgwREQgOThFREQzREYgRkZGRkZGRkYgRkZGRkZGRkYnKSxcbiAgICBnOiBoZXgoJzEzJyksXG4gICAgaGFzaDogJ3NoYTI1NidcbiAgfVxufTtcbiIsImltcG9ydCBzcnBCaWdpbnQgZnJvbSAnc3JwLWJpZ2ludCc7XG5pbXBvcnQgYnVmZmVySnNvbiBmcm9tICdidWZmZXItanNvbic7XG5pbXBvcnQgdW5pcWlkIGZyb20gJ3VuaXFpZCc7XG5cbmV4cG9ydCBjb25zdCBSZWdpc3RlciA9IFZ1ZS5jb21wb25lbnQoJ1JlZ2lzdGVyJywge1xuICB0ZW1wbGF0ZTogYFxuICAgIDxkaXYgaWQ9cmVnaXN0ZXJBcHA+XG4gICAgICA8aDI+UmVnaXN0ZXI8L2gyPlxuICAgICAgPGRpdj57eyBuYW1lVGV4dFJlZ2lzdGVyIH19PC9kaXY+XG4gICAgICA8aW5wdXQgdi1tb2RlbD0nbmFtZScgYXV0b2NvbXBsZXRlPVwib2ZmXCIgLz5cbiAgICAgIDxkaXY+e3sgcGFzc1RleHRSZWdpc3RlciB9fTwvZGl2PlxuICAgICAgPGlucHV0IHYtbW9kZWw9J3Bhc3N3b3JkJyBhdXRvY29tcGxldGU9XCJvZmZcIiAvPlxuICAgICAgPGRpdj57eyBlbWFpbFRleHRSZWdpc3RlciAgfX08L2Rpdj5cbiAgICAgIDxpbnB1dCB2LW1vZGVsPSdlbWFpbCcgYXV0b2NvbXBsZXRlPVwib2ZmXCIgLz5cbiAgICAgIDxidXR0b24gdi1vbjpjbGljaz0naW5pdFJlZ2lzdGVyJz57eyBidXR0b25UZXh0UmVnaXN0ZXIgfX08L2J1dHRvbj5cbiAgICAgIDxoMj5Mb2cgaW48L2gyPlxuICAgICAgPGRpdj57eyBuYW1lVGV4dExvZ2luIH19PC9kaXY+XG4gICAgICA8aW5wdXQgdi1tb2RlbD0nbmFtZScgYXV0b2NvbXBsZXRlPVwib2ZmXCIgLz5cbiAgICAgIDxkaXY+e3sgcGFzc1RleHRMb2dpbiB9fTwvZGl2PlxuICAgICAgPGlucHV0IHYtbW9kZWw9J3Bhc3N3b3JkJyBhdXRvY29tcGxldGU9XCJvZmZcIiAvPlxuICAgICAgPGJ1dHRvbiB2LW9uOmNsaWNrPSdpbml0TG9naW4nPnt7IGJ1dHRvblRleHRMb2dpbiB9fTwvYnV0dG9uPlxuICAgIDwvZGl2PlxuICBgLFxuICAgZGF0YTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBuYW1lVGV4dFJlZ2lzdGVyOiAnRW50ZXIgTmFtZScsXG4gICAgICAgIHBhc3NUZXh0UmVnaXN0ZXI6ICdQYXNzd29yZCcsXG4gICAgICAgIGVtYWlsVGV4dFJlZ2lzdGVyOiAnRW1haWwnLFxuICAgICAgICBidXR0b25UZXh0UmVnaXN0ZXI6ICdSZWdpc3RlcicsXG4gICAgICAgIG5hbWVUZXh0TG9naW46ICdFbnRlciBOYW1lJyxcbiAgICAgICAgcGFzc1RleHRMb2dpbjogJ1Bhc3N3b3JkJyxcbiAgICAgICAgYnV0dG9uVGV4dExvZ2luOiAnTG9naW4nLFxuICAgICAgICBuYW1lOiAnJyxcbiAgICAgICAgcGFzc3dvcmQ6ICcnLFxuICAgICAgICBlbWFpbDogJycsXG4gICAgICAgIGM6IG51bGwsXG4gICAgICB9XG4gICAgfSxcbiAgICBtZXRob2RzIDoge1xuICAgICAgaW5pdFJlZ2lzdGVyOiBhc3luYyBmdW5jdGlvbigpIHtcbiAgICAgICAgY29uc3QgcGFyYW1zID0gc3JwQmlnaW50LnBhcmFtc1snMjA0OCddO1xuICAgICAgICBjb25zdCBzZWNyZXQxID0gYXdhaXQgc3JwQmlnaW50LmdlbktleSgpO1xuICAgICAgICBjb25zdCBzYWx0ID0gQnVmZmVyLmZyb20odW5pcWlkKCkpO1xuICAgICAgICBjb25zdCBwYXNzd29yZCA9IEJ1ZmZlci5mcm9tKHRoaXMuJGRhdGEucGFzc3dvcmQpO1xuICAgICAgICBjb25zdCBpZGVudGl0eSA9IEJ1ZmZlci5mcm9tKHRoaXMuJGRhdGEubmFtZSk7XG4gICAgICAgIGNvbnN0IHZlcmlmaWVyID0gc3JwQmlnaW50LmNvbXB1dGVWZXJpZmllcihwYXJhbXMsIHNhbHQsIGlkZW50aXR5LCBwYXNzd29yZCk7XG4gICAgICAgIHRoaXMuYyA9IG5ldyBzcnBCaWdpbnQuQ2xpZW50KHBhcmFtcywgc2FsdCwgaWRlbnRpdHksIHBhc3N3b3JkLCBzZWNyZXQxKTtcblxuICAgICAgICBjb25zdCBkYXRhID0ge1xuICAgICAgICAgIG5hbWU6IHRoaXMuJGRhdGEubmFtZSwgXG4gICAgICAgICAgcGFzc3dvcmQ6IHRoaXMuJGRhdGEucGFzc3dvcmQsIFxuICAgICAgICAgIGlkZW50aXR5LFxuICAgICAgICAgIHZlcmlmaWVyLFxuICAgICAgICAgIHNhbHQsXG4gICAgICAgICAgcmVxdWVzdE5hbWU6ICdhdXRoX3N0ZXBfMScsXG4gICAgICAgIH1cbiAgICAgICAgICBmZXRjaCgnLycsIHtcbiAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoZGF0YSlcbiAgICAgICAgICB9KTtcbiAgICAgICAgICAvLyB0aGlzLiRyb3V0ZXIucHVzaCh7IG5hbWU6ICdjaGF0JywgcGFyYW1zOiB7IGM6IGMgfSB9KTtcbiAgICAgIH0sXG4gICAgICBhc3luYyBpbml0TG9naW4oKSB7XG4gICAgICAgIGNvbnN0IGlkZW50aXR5ID0gQnVmZmVyLmZyb20odGhpcy4kZGF0YS5uYW1lKTtcbiAgICAgICAgY29uc3QgcGFyYW1zID0gc3JwQmlnaW50LnBhcmFtc1snMjA0OCddO1xuICAgICAgICBjb25zdCBkYXRhID0ge1xuICAgICAgICAgIGlkZW50aXR5LFxuICAgICAgICAgIHJlcXVlc3ROYW1lOiAnYXV0aF9zdGVwXzAnLFxuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHJlc3BvbnNlMiA9IGF3YWl0IGZldGNoKCcvJywge1xuICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgICAgfSxcbiAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShkYXRhKVxuICAgICAgICB9KTtcblxuICAgICAgICBsZXQgcmVzdWx0ID0gYXdhaXQgcmVzcG9uc2UyLnRleHQoKTtcbiAgICAgICAgY29uc3Qgc2FsdCA9IGJ1ZmZlckpzb24ucGFyc2UocmVzdWx0KTtcbiAgICAgICAgY29uc3Qgc2VjcmV0MSA9IGF3YWl0IHNycEJpZ2ludC5nZW5LZXkoKTtcbiAgICAgICAgY29uc3QgcGFzc3dvcmQgPSBCdWZmZXIuZnJvbSh0aGlzLiRkYXRhLnBhc3N3b3JkKTtcbiAgICAgICAgdGhpcy5jID0gbmV3IHNycEJpZ2ludC5DbGllbnQocGFyYW1zLCBzYWx0LCBpZGVudGl0eSwgcGFzc3dvcmQsIHNlY3JldDEpO1xuXG4gICAgICAgIHRoaXMuZ2V0QXV0aERhdGEoKTtcbiAgICAgICAgICAvLyB0aGlzLiRyb3V0ZXIucHVzaCh7IG5hbWU6ICdjaGF0JywgcGFyYW1zOiB7IGM6IGMgfSB9KTtcbiAgICAgIH0sXG4gICAgICBhc3luYyBnZXRBdXRoRGF0YSgpIHtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goJy8nLCB7XG4gICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcbiAgICAgICAgICB9LFxuICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtyZXF1ZXN0TmFtZTogJ2F1dGhfc3RlcF8yJ30pXG4gICAgICAgIH0pO1xuICAgIFxuICAgICAgICBsZXQgcmVzdWx0ID0gYXdhaXQgcmVzcG9uc2UudGV4dCgpO1xuXG4gICAgICAgIGlmKHRoaXMuYyl7XG4gICAgICAgICAgY29uc3QgYnVmZmVyID0gYnVmZmVySnNvbi5wYXJzZShyZXN1bHQpO1xuICAgICAgICAgIHRoaXMuYy5zZXRCKGJ1ZmZlci5idWYpO1xuICAgICAgICAgIGxldCBNMSA9IHRoaXMuYy5jb21wdXRlTTEoKTtcbiAgICAgICAgICBsZXQgcmVzcG9uc2UyID0gYXdhaXQgZmV0Y2goJy8nLCB7XG4gICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtyZXF1ZXN0TmFtZTogJ2F1dGhfc3RlcF8zJywgbTE6IE0xLCBzcHJBOiB0aGlzLmMuY29tcHV0ZUEoKSB9KVxuICAgICAgICAgIH0pO1xuICBcbiAgICAgICAgICBsZXQgcmVzdWx0MiA9IGF3YWl0IHJlc3BvbnNlMi50ZXh0KCk7XG4gICAgICAgICAgY29uc3QgYnVmZmVyUmVzdWx0ID0gYnVmZmVySnNvbi5wYXJzZShyZXN1bHQyKTtcbiAgICAgICAgICBsZXQgSyA9IHRoaXMuYy5jb21wdXRlSygpO1xuICBcbiAgICAgICAgICAvL9GB0YDQsNCy0L3QtdC90LjQtVxuICAgICAgICAgIGNvbnNvbGUubG9nKEspO1xuICAgICAgICAgIGNvbnNvbGUubG9nKGJ1ZmZlclJlc3VsdC5idWYpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgIH1cbiAgfSk7XG4iLCIvKiBcbihUaGUgTUlUIExpY2Vuc2UpXG5Db3B5cmlnaHQgKGMpIDIwMTQgSGFsw6FzeiDDgWTDoW0gPG1haWxAYWRhbWhhbGFzei5jb20+XG5QZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cbiovXG5cbi8vICBVbmlxdWUgSGV4YXRyaWRlY2ltYWwgSUQgR2VuZXJhdG9yXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuLy8gIERlcGVuZGVuY2llc1xuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG52YXIgcGlkID0gcHJvY2VzcyAmJiBwcm9jZXNzLnBpZCA/IHByb2Nlc3MucGlkLnRvU3RyaW5nKDM2KSA6ICcnIDtcbnZhciBhZGRyZXNzID0gJyc7XG5pZih0eXBlb2YgX193ZWJwYWNrX3JlcXVpcmVfXyAhPT0gJ2Z1bmN0aW9uJyl7XG4gICAgdmFyIG1hYyA9ICcnLCBuZXR3b3JrSW50ZXJmYWNlcyA9IHJlcXVpcmUoJ29zJykubmV0d29ya0ludGVyZmFjZXMoKTtcbiAgICBmb3IoaW50ZXJmYWNlX2tleSBpbiBuZXR3b3JrSW50ZXJmYWNlcyl7XG4gICAgICAgIGNvbnN0IG5ldHdvcmtJbnRlcmZhY2UgPSBuZXR3b3JrSW50ZXJmYWNlc1tpbnRlcmZhY2Vfa2V5XTtcbiAgICAgICAgY29uc3QgbGVuZ3RoID0gbmV0d29ya0ludGVyZmFjZS5sZW5ndGg7XG4gICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICBpZihuZXR3b3JrSW50ZXJmYWNlW2ldLm1hYyAmJiBuZXR3b3JrSW50ZXJmYWNlW2ldLm1hYyAhPSAnMDA6MDA6MDA6MDA6MDA6MDAnKXtcbiAgICAgICAgICAgICAgICBtYWMgPSBuZXR3b3JrSW50ZXJmYWNlW2ldLm1hYzsgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgYWRkcmVzcyA9IG1hYyA/IHBhcnNlSW50KG1hYy5yZXBsYWNlKC9cXDp8XFxEKy9naSwgJycpKS50b1N0cmluZygzNikgOiAnJyA7XG59IFxuXG4vLyAgRXhwb3J0c1xuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5tb2R1bGUuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbihwcmVmaXgpeyByZXR1cm4gKHByZWZpeCB8fCAnJykgKyBhZGRyZXNzICsgcGlkICsgbm93KCkudG9TdHJpbmcoMzYpOyB9XG5tb2R1bGUuZXhwb3J0cy5wcm9jZXNzID0gZnVuY3Rpb24ocHJlZml4KXsgcmV0dXJuIChwcmVmaXggfHwgJycpICsgcGlkICsgbm93KCkudG9TdHJpbmcoMzYpOyB9XG5tb2R1bGUuZXhwb3J0cy50aW1lICAgID0gZnVuY3Rpb24ocHJlZml4KXsgcmV0dXJuIChwcmVmaXggfHwgJycpICsgbm93KCkudG9TdHJpbmcoMzYpOyB9XG5cbi8vICBIZWxwZXJzXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbmZ1bmN0aW9uIG5vdygpe1xuICAgIHZhciB0aW1lID0gRGF0ZS5ub3coKTtcbiAgICB2YXIgbGFzdCA9IG5vdy5sYXN0IHx8IHRpbWU7XG4gICAgcmV0dXJuIG5vdy5sYXN0ID0gdGltZSA+IGxhc3QgPyB0aW1lIDogbGFzdCArIDE7XG59XG4iLCIndXNlIHN0cmljdCdcblxuZXhwb3J0cy5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aFxuZXhwb3J0cy50b0J5dGVBcnJheSA9IHRvQnl0ZUFycmF5XG5leHBvcnRzLmZyb21CeXRlQXJyYXkgPSBmcm9tQnl0ZUFycmF5XG5cbnZhciBsb29rdXAgPSBbXVxudmFyIHJldkxvb2t1cCA9IFtdXG52YXIgQXJyID0gdHlwZW9mIFVpbnQ4QXJyYXkgIT09ICd1bmRlZmluZWQnID8gVWludDhBcnJheSA6IEFycmF5XG5cbnZhciBjb2RlID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky8nXG5mb3IgKHZhciBpID0gMCwgbGVuID0gY29kZS5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICBsb29rdXBbaV0gPSBjb2RlW2ldXG4gIHJldkxvb2t1cFtjb2RlLmNoYXJDb2RlQXQoaSldID0gaVxufVxuXG4vLyBTdXBwb3J0IGRlY29kaW5nIFVSTC1zYWZlIGJhc2U2NCBzdHJpbmdzLCBhcyBOb2RlLmpzIGRvZXMuXG4vLyBTZWU6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Jhc2U2NCNVUkxfYXBwbGljYXRpb25zXG5yZXZMb29rdXBbJy0nLmNoYXJDb2RlQXQoMCldID0gNjJcbnJldkxvb2t1cFsnXycuY2hhckNvZGVBdCgwKV0gPSA2M1xuXG5mdW5jdGlvbiBnZXRMZW5zIChiNjQpIHtcbiAgdmFyIGxlbiA9IGI2NC5sZW5ndGhcblxuICBpZiAobGVuICUgNCA+IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgc3RyaW5nLiBMZW5ndGggbXVzdCBiZSBhIG11bHRpcGxlIG9mIDQnKVxuICB9XG5cbiAgLy8gVHJpbSBvZmYgZXh0cmEgYnl0ZXMgYWZ0ZXIgcGxhY2Vob2xkZXIgYnl0ZXMgYXJlIGZvdW5kXG4gIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2JlYXRnYW1taXQvYmFzZTY0LWpzL2lzc3Vlcy80MlxuICB2YXIgdmFsaWRMZW4gPSBiNjQuaW5kZXhPZignPScpXG4gIGlmICh2YWxpZExlbiA9PT0gLTEpIHZhbGlkTGVuID0gbGVuXG5cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IHZhbGlkTGVuID09PSBsZW5cbiAgICA/IDBcbiAgICA6IDQgLSAodmFsaWRMZW4gJSA0KVxuXG4gIHJldHVybiBbdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbl1cbn1cblxuLy8gYmFzZTY0IGlzIDQvMyArIHVwIHRvIHR3byBjaGFyYWN0ZXJzIG9mIHRoZSBvcmlnaW5hbCBkYXRhXG5mdW5jdGlvbiBieXRlTGVuZ3RoIChiNjQpIHtcbiAgdmFyIGxlbnMgPSBnZXRMZW5zKGI2NClcbiAgdmFyIHZhbGlkTGVuID0gbGVuc1swXVxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gbGVuc1sxXVxuICByZXR1cm4gKCh2YWxpZExlbiArIHBsYWNlSG9sZGVyc0xlbikgKiAzIC8gNCkgLSBwbGFjZUhvbGRlcnNMZW5cbn1cblxuZnVuY3Rpb24gX2J5dGVMZW5ndGggKGI2NCwgdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbikge1xuICByZXR1cm4gKCh2YWxpZExlbiArIHBsYWNlSG9sZGVyc0xlbikgKiAzIC8gNCkgLSBwbGFjZUhvbGRlcnNMZW5cbn1cblxuZnVuY3Rpb24gdG9CeXRlQXJyYXkgKGI2NCkge1xuICB2YXIgdG1wXG4gIHZhciBsZW5zID0gZ2V0TGVucyhiNjQpXG4gIHZhciB2YWxpZExlbiA9IGxlbnNbMF1cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IGxlbnNbMV1cblxuICB2YXIgYXJyID0gbmV3IEFycihfYnl0ZUxlbmd0aChiNjQsIHZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW4pKVxuXG4gIHZhciBjdXJCeXRlID0gMFxuXG4gIC8vIGlmIHRoZXJlIGFyZSBwbGFjZWhvbGRlcnMsIG9ubHkgZ2V0IHVwIHRvIHRoZSBsYXN0IGNvbXBsZXRlIDQgY2hhcnNcbiAgdmFyIGxlbiA9IHBsYWNlSG9sZGVyc0xlbiA+IDBcbiAgICA/IHZhbGlkTGVuIC0gNFxuICAgIDogdmFsaWRMZW5cblxuICB2YXIgaVxuICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMTgpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA8PCAxMikgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMildIDw8IDYpIHxcbiAgICAgIHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMyldXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDE2KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gOCkgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICBpZiAocGxhY2VIb2xkZXJzTGVuID09PSAyKSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDIpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA+PiA0KVxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgaWYgKHBsYWNlSG9sZGVyc0xlbiA9PT0gMSkge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAxMCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldIDw8IDQpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDIpXSA+PiAyKVxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiA4KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBhcnJcbn1cblxuZnVuY3Rpb24gdHJpcGxldFRvQmFzZTY0IChudW0pIHtcbiAgcmV0dXJuIGxvb2t1cFtudW0gPj4gMTggJiAweDNGXSArXG4gICAgbG9va3VwW251bSA+PiAxMiAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtID4+IDYgJiAweDNGXSArXG4gICAgbG9va3VwW251bSAmIDB4M0ZdXG59XG5cbmZ1bmN0aW9uIGVuY29kZUNodW5rICh1aW50OCwgc3RhcnQsIGVuZCkge1xuICB2YXIgdG1wXG4gIHZhciBvdXRwdXQgPSBbXVxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkgKz0gMykge1xuICAgIHRtcCA9XG4gICAgICAoKHVpbnQ4W2ldIDw8IDE2KSAmIDB4RkYwMDAwKSArXG4gICAgICAoKHVpbnQ4W2kgKyAxXSA8PCA4KSAmIDB4RkYwMCkgK1xuICAgICAgKHVpbnQ4W2kgKyAyXSAmIDB4RkYpXG4gICAgb3V0cHV0LnB1c2godHJpcGxldFRvQmFzZTY0KHRtcCkpXG4gIH1cbiAgcmV0dXJuIG91dHB1dC5qb2luKCcnKVxufVxuXG5mdW5jdGlvbiBmcm9tQnl0ZUFycmF5ICh1aW50OCkge1xuICB2YXIgdG1wXG4gIHZhciBsZW4gPSB1aW50OC5sZW5ndGhcbiAgdmFyIGV4dHJhQnl0ZXMgPSBsZW4gJSAzIC8vIGlmIHdlIGhhdmUgMSBieXRlIGxlZnQsIHBhZCAyIGJ5dGVzXG4gIHZhciBwYXJ0cyA9IFtdXG4gIHZhciBtYXhDaHVua0xlbmd0aCA9IDE2MzgzIC8vIG11c3QgYmUgbXVsdGlwbGUgb2YgM1xuXG4gIC8vIGdvIHRocm91Z2ggdGhlIGFycmF5IGV2ZXJ5IHRocmVlIGJ5dGVzLCB3ZSdsbCBkZWFsIHdpdGggdHJhaWxpbmcgc3R1ZmYgbGF0ZXJcbiAgZm9yICh2YXIgaSA9IDAsIGxlbjIgPSBsZW4gLSBleHRyYUJ5dGVzOyBpIDwgbGVuMjsgaSArPSBtYXhDaHVua0xlbmd0aCkge1xuICAgIHBhcnRzLnB1c2goZW5jb2RlQ2h1bmsoXG4gICAgICB1aW50OCwgaSwgKGkgKyBtYXhDaHVua0xlbmd0aCkgPiBsZW4yID8gbGVuMiA6IChpICsgbWF4Q2h1bmtMZW5ndGgpXG4gICAgKSlcbiAgfVxuXG4gIC8vIHBhZCB0aGUgZW5kIHdpdGggemVyb3MsIGJ1dCBtYWtlIHN1cmUgdG8gbm90IGZvcmdldCB0aGUgZXh0cmEgYnl0ZXNcbiAgaWYgKGV4dHJhQnl0ZXMgPT09IDEpIHtcbiAgICB0bXAgPSB1aW50OFtsZW4gLSAxXVxuICAgIHBhcnRzLnB1c2goXG4gICAgICBsb29rdXBbdG1wID4+IDJdICtcbiAgICAgIGxvb2t1cFsodG1wIDw8IDQpICYgMHgzRl0gK1xuICAgICAgJz09J1xuICAgIClcbiAgfSBlbHNlIGlmIChleHRyYUJ5dGVzID09PSAyKSB7XG4gICAgdG1wID0gKHVpbnQ4W2xlbiAtIDJdIDw8IDgpICsgdWludDhbbGVuIC0gMV1cbiAgICBwYXJ0cy5wdXNoKFxuICAgICAgbG9va3VwW3RtcCA+PiAxMF0gK1xuICAgICAgbG9va3VwWyh0bXAgPj4gNCkgJiAweDNGXSArXG4gICAgICBsb29rdXBbKHRtcCA8PCAyKSAmIDB4M0ZdICtcbiAgICAgICc9J1xuICAgIClcbiAgfVxuXG4gIHJldHVybiBwYXJ0cy5qb2luKCcnKVxufVxuIiwiZXhwb3J0cy5yZWFkID0gZnVuY3Rpb24gKGJ1ZmZlciwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG1cbiAgdmFyIGVMZW4gPSAobkJ5dGVzICogOCkgLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIG5CaXRzID0gLTdcbiAgdmFyIGkgPSBpc0xFID8gKG5CeXRlcyAtIDEpIDogMFxuICB2YXIgZCA9IGlzTEUgPyAtMSA6IDFcbiAgdmFyIHMgPSBidWZmZXJbb2Zmc2V0ICsgaV1cblxuICBpICs9IGRcblxuICBlID0gcyAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBzID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBlTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IGUgPSAoZSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBtID0gZSAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBlID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBtTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IG0gPSAobSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBpZiAoZSA9PT0gMCkge1xuICAgIGUgPSAxIC0gZUJpYXNcbiAgfSBlbHNlIGlmIChlID09PSBlTWF4KSB7XG4gICAgcmV0dXJuIG0gPyBOYU4gOiAoKHMgPyAtMSA6IDEpICogSW5maW5pdHkpXG4gIH0gZWxzZSB7XG4gICAgbSA9IG0gKyBNYXRoLnBvdygyLCBtTGVuKVxuICAgIGUgPSBlIC0gZUJpYXNcbiAgfVxuICByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIE1hdGgucG93KDIsIGUgLSBtTGVuKVxufVxuXG5leHBvcnRzLndyaXRlID0gZnVuY3Rpb24gKGJ1ZmZlciwgdmFsdWUsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtLCBjXG4gIHZhciBlTGVuID0gKG5CeXRlcyAqIDgpIC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBydCA9IChtTGVuID09PSAyMyA/IE1hdGgucG93KDIsIC0yNCkgLSBNYXRoLnBvdygyLCAtNzcpIDogMClcbiAgdmFyIGkgPSBpc0xFID8gMCA6IChuQnl0ZXMgLSAxKVxuICB2YXIgZCA9IGlzTEUgPyAxIDogLTFcbiAgdmFyIHMgPSB2YWx1ZSA8IDAgfHwgKHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDApID8gMSA6IDBcblxuICB2YWx1ZSA9IE1hdGguYWJzKHZhbHVlKVxuXG4gIGlmIChpc05hTih2YWx1ZSkgfHwgdmFsdWUgPT09IEluZmluaXR5KSB7XG4gICAgbSA9IGlzTmFOKHZhbHVlKSA/IDEgOiAwXG4gICAgZSA9IGVNYXhcbiAgfSBlbHNlIHtcbiAgICBlID0gTWF0aC5mbG9vcihNYXRoLmxvZyh2YWx1ZSkgLyBNYXRoLkxOMilcbiAgICBpZiAodmFsdWUgKiAoYyA9IE1hdGgucG93KDIsIC1lKSkgPCAxKSB7XG4gICAgICBlLS1cbiAgICAgIGMgKj0gMlxuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIHZhbHVlICs9IHJ0IC8gY1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSArPSBydCAqIE1hdGgucG93KDIsIDEgLSBlQmlhcylcbiAgICB9XG4gICAgaWYgKHZhbHVlICogYyA+PSAyKSB7XG4gICAgICBlKytcbiAgICAgIGMgLz0gMlxuICAgIH1cblxuICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbSA9IDBcbiAgICAgIGUgPSBlTWF4XG4gICAgfSBlbHNlIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgbSA9ICgodmFsdWUgKiBjKSAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSBlICsgZUJpYXNcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHZhbHVlICogTWF0aC5wb3coMiwgZUJpYXMgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gMFxuICAgIH1cbiAgfVxuXG4gIGZvciAoOyBtTGVuID49IDg7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IG0gJiAweGZmLCBpICs9IGQsIG0gLz0gMjU2LCBtTGVuIC09IDgpIHt9XG5cbiAgZSA9IChlIDw8IG1MZW4pIHwgbVxuICBlTGVuICs9IG1MZW5cbiAgZm9yICg7IGVMZW4gPiAwOyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBlICYgMHhmZiwgaSArPSBkLCBlIC89IDI1NiwgZUxlbiAtPSA4KSB7fVxuXG4gIGJ1ZmZlcltvZmZzZXQgKyBpIC0gZF0gfD0gcyAqIDEyOFxufVxuIiwidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGFycikgPT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG4iLCJjb25zdCBjcnlwdG8gPSByZXF1aXJlKCdjcnlwdG8nKTtcbmNvbnN0IGFzc2VydCA9IHJlcXVpcmUoJ2Fzc2VydCcpO1xuY29uc3QgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcblxuLyoqXG4gKiBBc3NlcnQgYSB2YWx1ZSB0byBiZSB0cnVlLCBvciB0aHJvdyBlcnJvciB3aXRoIG9wdGlvbmFsIG1lc3NhZ2VcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gdmFsXG4gKiBAcGFyYW0ge1N0cmluZ30gbXNnXG4gKi9cbmZ1bmN0aW9uIGFzc2VydF8odmFsLCBtc2cpIHtcbiAgaWYgKCF2YWwpIHRocm93IG5ldyBFcnJvcihtc2cgfHwgJ2Fzc2VydGlvbicpO1xufVxuXG4vKipcbiAqIENvbnZlcnQgYSBCdWZmZXIgdG8gYSBCaWdJbnRcbiAqIEBwYXJhbSB7QnVmZmVyfSBidWZcbiAqIEByZXR1cm4ge0JpZ0ludH1cbiAqL1xuZnVuY3Rpb24gYnVmZmVyVG9CaWdJbnQoYnVmKSB7XG4gIGFzc2VydElzQnVmZmVyKGJ1Zik7XG4gIHJldHVybiBCaWdJbnQoJzB4JyArIGJ1Zi50b1N0cmluZygnaGV4JykpO1xufVxuXG4vKipcbiAqIENhbGN1bGF0ZXMgYSAlIGIsIHRoZSBzYW5lIHdheVxuICogTW9kdWxvIGluIEphdmFTY3JpcHQ6IC0yNyAlIDcgPT4gLTZcbiAqIE1vZHVsbyBpbiBldmVyeXRoaW5nIGVsc2U6IC0yNyAlIDcgPT4gMVxuICogQHBhcmFtIHtCaWdJbnR9IGFcbiAqIEBwYXJhbSB7QmlnSW50fSBiXG4gKiBAcmV0dXJuIHtCaWdJbnR9XG4gKi9cbmZ1bmN0aW9uIG1vZChhLCBiKSB7XG4gIGxldCByZXN1bHQgPSBhICUgYjtcbiAgaWYgKHJlc3VsdCA8IDBuKSByZXN1bHQgKz0gYjtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBDYWxjdWxhdGVzIGJeZSAlIG0gZWZmaWNpZW50bHlcbiAqIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL01vZHVsYXJfZXhwb25lbnRpYXRpb24jUmlnaHQtdG8tbGVmdF9iaW5hcnlfbWV0aG9kXG4gKiBAcGFyYW0ge0JpZ0ludH0gYiBCYXNlXG4gKiBAcGFyYW0ge0JpZ0ludH0gZSBFeHBvbmVudFxuICogQHBhcmFtIHtCaWdJbnR9IG0gTW9kdWxvXG4gKiBAcmV0dXJuIHtCaWdJbnR9XG4gKi9cbmZ1bmN0aW9uIHBvd20oYiwgZSwgbSkge1xuICBpZiAobSA9PT0gMW4pIHJldHVybiAwO1xuICBsZXQgcmVzdWx0ID0gMW47XG4gIGIgPSBtb2QoYiwgbSk7XG4gIHdoaWxlIChlID4gMCkge1xuICAgIGlmIChlICUgMm4gPT09IDFuKSByZXN1bHQgPSByZXN1bHQgKiBiICUgbTtcbiAgICBlID0gZSA+PiAxbjtcbiAgICBiID0gYiAqKiAybiAlIG07XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBDb252ZXJ0IGEgQmlnSW50IHRvIGEgQnVmZmVyXG4gKiBAcGFyYW0ge0JpZ0ludH0gblxuICogQHJldHVybiB7QnVmZmVyfVxuICovXG5mdW5jdGlvbiBiaWdJbnRUb0J1ZmZlcihuKSB7XG4gIGFzc2VydElzQmlnSW50KG4pO1xuICBsZXQgaGV4ID0gbi50b1N0cmluZygxNik7XG4gIGlmIChoZXgubGVuZ3RoICUgMikgaGV4ID0gJzAnICsgaGV4O1xuICByZXR1cm4gQnVmZmVyLmZyb20oaGV4LCAnaGV4Jyk7XG59XG5cbi8qKlxuICogUGFkIGEgYnVmZmVyIHRvIGEgbGVuZ3RoXG4gKiBPcmlnaW5hbCBjb21tZW50OlxuICogSWYgYSBjb252ZXJzaW9uIGlzIGV4cGxpY2l0bHkgc3BlY2lmaWVkIHdpdGggdGhlIG9wZXJhdG9yIFBBRCgpLFxuICogdGhlIGludGVnZXIgd2lsbCBmaXJzdCBiZSBpbXBsaWNpdGx5IGNvbnZlcnRlZCwgdGhlbiB0aGUgcmVzdWx0YW50XG4gKiBieXRlLXN0cmluZyB3aWxsIGJlIGxlZnQtcGFkZGVkIHdpdGggemVyb3MgKGlmIG5lY2Vzc2FyeSkgdW50aWwgaXRzXG4gKiBsZW5ndGggZXF1YWxzIHRoZSBpbXBsaWNpdGx5LWNvbnZlcnRlZCBsZW5ndGggb2YgTi5cbiAqIEBwYXJhbSB7QnVmZmVyfSBuIEJ1ZmZlciB0byBwYWRcbiAqIEBwYXJhbSB7TnVtYmVyfSBsZW4gRGVzaXJlZCBsZW5ndGggb2YgcmVzdWx0XG4gKiBAcmV0dXJuIHtCdWZmZXJ9XG4gKi9cbmZ1bmN0aW9uIHBhZFRvKG4sIGxlbikge1xuICBhc3NlcnRJc0J1ZmZlcihuLCAnbicpO1xuICBsZXQgcGFkZGluZyA9IGxlbiAtIG4ubGVuZ3RoO1xuICBhc3NlcnRfKHBhZGRpbmcgPiAtMSwgJ05lZ2F0aXZlIHBhZGRpbmcuICBWZXJ5IHVuY29tZm9ydGFibGUuJyk7XG4gIGxldCByZXN1bHQgPSBCdWZmZXIuYWxsb2MobGVuKTtcbiAgcmVzdWx0LmZpbGwoMCwgMCwgcGFkZGluZyk7XG4gIG4uY29weShyZXN1bHQsIHBhZGRpbmcpO1xuICBhc3NlcnQuZXF1YWwocmVzdWx0Lmxlbmd0aCwgbGVuKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBQYWQgdGhlIFNSUCBOIHZhbHVlXG4gKiBAcGFyYW0ge0JpZ0ludH0gbnVtYmVyIE51bWJlciB0byBwYWRcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXMgU1JQIHBhcmFtZXRlcnNcbiAqIEByZXR1cm4ge0J1ZmZlcn1cbiAqL1xuZnVuY3Rpb24gcGFkVG9OKG51bWJlciwgcGFyYW1zKSB7XG4gIGFzc2VydElzQmlnSW50KG51bWJlcik7XG4gIHJldHVybiBwYWRUbyhiaWdJbnRUb0J1ZmZlcihudW1iZXIpLCBwYXJhbXMuTl9sZW5ndGhfYml0cyAvIDgpO1xufVxuXG4vKiBuZXZlciB1c2VkP1xuZnVuY3Rpb24gcGFkVG9IKG51bWJlciwgcGFyYW1zKSB7XG4gIGFzc2VydElzQmlnSW50KG51bWJlcik7XG4gIGxldCBoYXNobGVuX2JpdHM7XG4gIGlmIChwYXJhbXMuaGFzaCA9PT0gJ3NoYTEnKVxuICAgIHtoYXNobGVuX2JpdHMgPSAxNjA7fVxuICBlbHNlIGlmIChwYXJhbXMuaGFzaCA9PT0gJ3NoYTI1NicpXG4gICAge2hhc2hsZW5fYml0cyA9IDI1Njt9XG4gIGVsc2UgaWYgKHBhcmFtcy5oYXNoID09PSAnc2hhNTEyJylcbiAgICB7aGFzaGxlbl9iaXRzID0gNTEyO31cbiAgZWxzZVxuICAgIHt0aHJvdyBFcnJvcignY2Fubm90IGRldGVybWluZSBsZW5ndGggb2YgaGFzaCBcXCcnK3BhcmFtcy5oYXNoKydcXCcnKTt9XG5cbiAgcmV0dXJuIHBhZFRvKG51bWJlci50b0J1ZmZlcigpLCBoYXNobGVuX2JpdHMgLyA4KTtcbn1cbiovXG5cbi8qKlxuICogQXNzZXJ0IHRoZSBhcmd1bWVudCB0byBiZSBhIEJ1ZmZlclxuICogQHBhcmFtIHsqfSBhcmdcbiAqIEBwYXJhbSB7U3RyaW5nfSBhcmdOYW1lIE9yaWdpbmFsIG5hbWUgb2YgYXJndW1lbnRcbiAqL1xuZnVuY3Rpb24gYXNzZXJ0SXNCdWZmZXIoYXJnLCBhcmdOYW1lKSB7XG4gIGFyZ05hbWUgPSBhcmdOYW1lIHx8ICdhcmcnO1xuICBhc3NlcnRfKEJ1ZmZlci5pc0J1ZmZlcihhcmcpLCBhcmdOYW1lICsgJyBtdXN0IGJlIGEgYnVmZmVyJyk7XG59XG5cbi8qKlxuICogQXNzZXJ0IHRoZSBhcmd1bWVudCB0byBiZSBhIEJ1ZmZlciB3aXRoIGEgdmFsaWQgU1JQIE4gdmFsdWVcbiAqIEBwYXJhbSB7Kn0gYXJnXG4gKiBAcGFyYW0ge09iamVjdH0gcGFyYW1zIFNSUCBwYXJhbXNcbiAqIEBwYXJhbSB7U3RyaW5nfSBhcmdOYW1lIE9yaWdpbmFsIG5hbWUgb2YgYXJndW1lbnRcbiAqL1xuZnVuY3Rpb24gYXNzZXJ0SXNOQnVmZmVyKGFyZywgcGFyYW1zLCBhcmdOYW1lKSB7XG4gIGFyZ05hbWUgPSBhcmdOYW1lIHx8ICdhcmcnO1xuICBhc3NlcnRfKEJ1ZmZlci5pc0J1ZmZlcihhcmcpLCAnVHlwZSBlcnJvcjogJyArIGFyZ05hbWUgKyAnIG11c3QgYmUgYSBidWZmZXInKTtcbiAgaWYgKGFyZy5sZW5ndGggIT0gcGFyYW1zLk5fbGVuZ3RoX2JpdHMgLyA4KSB7XG4gICAgYXNzZXJ0XyhmYWxzZSwgYCR7YXJnTmFtZX0gd2FzICR7YXJnLmxlbmd0aH0sIGV4cGVjdGVkICR7cGFyYW1zLk5fbGVuZ3RoX2JpdHMgLyA4fWApO1xuICB9XG59XG5cbi8qKlxuICogQXNzZXJ0IHRoZSBhcmd1bWVudCB0byBiZSBhIEJpZ0ludFxuICogQHBhcmFtIHsqfSBhcmdcbiAqL1xuZnVuY3Rpb24gYXNzZXJ0SXNCaWdJbnQoYXJnKSB7XG4gIGFzc2VydCh0eXBlb2YgYXJnID09PSAnYmlnaW50Jyk7XG59XG5cbi8qKlxuICogY29tcHV0ZSB0aGUgaW50ZXJtZWRpYXRlIHZhbHVlIHggYXMgYSBoYXNoIG9mIHRocmVlIGJ1ZmZlcnM6XG4gKiBzYWx0LCBpZGVudGl0eSwgYW5kIHBhc3N3b3JkLiAgQW5kIGEgY29sb24uICBGT1VSIGJ1ZmZlcnMuXG4gKiAgICAgIHggPSBIKHMgfCBIKEkgfCBcIjpcIiB8IFApKVxuICogQHBhcmFtIHtPYmplY3R9IHBhcmFtcyBTUlAgcGFyYW1ldGVyc1xuICogQHBhcmFtIHtCdWZmZXJ9IHNhbHQgU2FsdFxuICogQHBhcmFtIHtCdWZmZXJ9IEkgVXNlciBpZGVudGl0eVxuICogQHBhcmFtIHtCdWZmZXJ9IFAgVXNlciBwYXNzd29yZFxuICogQHJldHVybiB7QmlnSW50fSBVc2VyIHNlY3JldFxuICovXG5mdW5jdGlvbiBnZXR4KHBhcmFtcywgc2FsdCwgSSwgUCkge1xuICBhc3NlcnRJc0J1ZmZlcihzYWx0LCAnc2FsdCAoc2FsdCknKTtcbiAgYXNzZXJ0SXNCdWZmZXIoSSwgJ2lkZW50aXR5IChJKScpO1xuICBhc3NlcnRJc0J1ZmZlcihQLCAncGFzc3dvcmQgKFApJyk7XG4gIGxldCBoYXNoSVAgPSBjcnlwdG8uY3JlYXRlSGFzaChwYXJhbXMuaGFzaClcbiAgICAudXBkYXRlKEJ1ZmZlci5jb25jYXQoW0ksIEJ1ZmZlci5mcm9tKCc6JyksIFBdKSlcbiAgICAuZGlnZXN0KCk7XG4gIGxldCBoYXNoWCA9IGNyeXB0by5jcmVhdGVIYXNoKHBhcmFtcy5oYXNoKVxuICAgIC51cGRhdGUoc2FsdClcbiAgICAudXBkYXRlKGhhc2hJUClcbiAgICAuZGlnZXN0KCk7XG4gIHJldHVybiBidWZmZXJUb0JpZ0ludChoYXNoWCk7XG59XG5cbi8qKlxuICogVGhlIHZlcmlmaWVyIGlzIGNhbGN1bGF0ZWQgYXMgZGVzY3JpYmVkIGluIFNlY3Rpb24gMyBvZiBbU1JQLVJGQ10uXG4gKiBXZSBnaXZlIHRoZSBhbGdvcml0aG0gaGVyZSBmb3IgY29udmVuaWVuY2UuXG4gKlxuICogVGhlIHZlcmlmaWVyICh2KSBpcyBjb21wdXRlZCBiYXNlZCBvbiB0aGUgc2FsdCAocyksIHVzZXIgbmFtZSAoSSksXG4gKiBwYXNzd29yZCAoUCksIGFuZCBncm91cCBwYXJhbWV0ZXJzIChOLCBnKS5cbiAqXG4gKiAgICAgICAgIHggPSBIKHMgfCBIKEkgfCBcIjpcIiB8IFApKVxuICogICAgICAgICB2ID0gZ154ICUgTlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXMgU1JQIHBhcmFtZXRlcnNcbiAqIEBwYXJhbSB7QnVmZmVyfSBzYWx0IFNhbHRcbiAqIEBwYXJhbSB7QnVmZmVyfSBJIFVzZXIgaWRlbnRpdHlcbiAqIEBwYXJhbSB7QnVmZmVyfSBQIFVzZXIgcGFzc3dvcmRcbiAqIEByZXR1cm4ge0J1ZmZlcn1cbiAqL1xuZnVuY3Rpb24gY29tcHV0ZVZlcmlmaWVyKHBhcmFtcywgc2FsdCwgSSwgUCkge1xuICBhc3NlcnRJc0J1ZmZlcihzYWx0LCAnc2FsdCAoc2FsdCknKTtcbiAgYXNzZXJ0SXNCdWZmZXIoSSwgJ2lkZW50aXR5IChJKScpO1xuICBhc3NlcnRJc0J1ZmZlcihQLCAncGFzc3dvcmQgKFApJyk7XG4gIGxldCB2TnVtID0gcG93bShwYXJhbXMuZywgZ2V0eChwYXJhbXMsIHNhbHQsIEksIFApLCBwYXJhbXMuTik7XG4gIHJldHVybiBwYWRUb04odk51bSwgcGFyYW1zKTtcbn1cblxuLyoqXG4gKiBjYWxjdWxhdGUgdGhlIFNSUC02IG11bHRpcGxpZXJcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXMgU1JQIHBhcmFtZXRlcnNcbiAqIEByZXR1cm4ge0JpZ0ludH1cbiAqL1xuZnVuY3Rpb24gZ2V0ayhwYXJhbXMpIHtcbiAgbGV0IGtCdWYgPSBjcnlwdG9cbiAgICAuY3JlYXRlSGFzaChwYXJhbXMuaGFzaClcbiAgICAudXBkYXRlKHBhZFRvTihwYXJhbXMuTiwgcGFyYW1zKSlcbiAgICAudXBkYXRlKHBhZFRvTihwYXJhbXMuZywgcGFyYW1zKSlcbiAgICAuZGlnZXN0KCk7XG4gIHJldHVybiBidWZmZXJUb0JpZ0ludChrQnVmKTtcbn1cblxubGV0IHJhbmRvbUJ5dGVzQXN5bmMgPSB1dGlsLnByb21pc2lmeShjcnlwdG8ucmFuZG9tQnl0ZXMpO1xuLyoqXG4gKiBHZW5lcmF0ZSBhIHJhbmRvbSBrZXlcbiAqIEBwYXJhbSB7TnVtYmVyfSBieXRlcyBMZW5ndGggb2Yga2V5XG4gKiBAcmV0dXJuIHtCdWZmZXJ9XG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGdlbktleShieXRlcyA9IDMyKSB7XG4gIHJldHVybiBhd2FpdCByYW5kb21CeXRlc0FzeW5jKGJ5dGVzKTtcbn1cblxuLyoqXG4gKiBUaGUgc2VydmVyIGtleSBleGNoYW5nZSBtZXNzYWdlIGFsc28gY29udGFpbnMgdGhlIHNlcnZlcidzIHB1YmxpY1xuICogdmFsdWUgKEIpLiAgVGhlIHNlcnZlciBjYWxjdWxhdGVzIHRoaXMgdmFsdWUgYXMgQiA9IGsqdiArIGdeYiAlIE4sXG4gKiB3aGVyZSBiIGlzIGEgcmFuZG9tIG51bWJlciB0aGF0IFNIT1VMRCBiZSBhdCBsZWFzdCAyNTYgYml0cyBpbiBsZW5ndGhcbiAqIGFuZCBrID0gSChOIHwgUEFEKGcpKS5cbiAqXG4gKiBOb3RlOiBhcyB0aGUgdGVzdHMgaW1wbHksIHRoZSBlbnRpcmUgZXhwcmVzc2lvbiBpcyBtb2QgTi5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcGFyYW1zIFNSUCBwYXJhbWV0ZXJzXG4gKiBAcGFyYW0ge0JpZ0ludH0gayBTUlAgbXVsdGlwbGllciAoaylcbiAqIEBwYXJhbSB7QmlnSW50fSB2IFNSUCB2ZXJpZmllclxuICogQHBhcmFtIHtCaWdJbnR9IGIgU2VydmVyIHNlY3JldCBleHBvbmVudCAoYilcbiAqIEByZXR1cm4ge0J1ZmZlcn0gU2VydmVyIHB1YmxpYyBtZXNzYWdlIChCKVxuICovXG5mdW5jdGlvbiBnZXRCKHBhcmFtcywgaywgdiwgYikge1xuICBhc3NlcnRJc0JpZ0ludCh2KTtcbiAgYXNzZXJ0SXNCaWdJbnQoayk7XG4gIGFzc2VydElzQmlnSW50KGIpO1xuICBsZXQgTiA9IHBhcmFtcy5OO1xuICBsZXQgciA9IChrICogdiArIHBvd20ocGFyYW1zLmcsIGIsIE4pKSAlIE47XG4gIHJldHVybiBwYWRUb04ociwgcGFyYW1zKTtcbn1cblxuLyoqXG4gKiBUaGUgY2xpZW50IGtleSBleGNoYW5nZSBtZXNzYWdlIGNhcnJpZXMgdGhlIGNsaWVudCdzIHB1YmxpYyB2YWx1ZVxuICogKEEpLiAgVGhlIGNsaWVudCBjYWxjdWxhdGVzIHRoaXMgdmFsdWUgYXMgQSA9IGdeYSAlIE4sIHdoZXJlIGEgaXMgYVxuICogcmFuZG9tIG51bWJlciB0aGF0IFNIT1VMRCBiZSBhdCBsZWFzdCAyNTYgYml0cyBpbiBsZW5ndGguXG4gKlxuICogTm90ZTogZm9yIHRoaXMgaW1wbGVtZW50YXRpb24sIHdlIHRha2UgdGhhdCB0byBtZWFuIDI1Ni84IGJ5dGVzLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXMgU1JQIHBhcmFtZXRlcnNcbiAqIEBwYXJhbSB7QmlnSW50fSBhTnVtIENsaWVudCBzZWNyZXQgY29tcG9uZW50IChhKVxuICogQHJldHVybiB7QmlnSW50fSBDbGllbnQgcHVibGljIGNvbXBvbmVudCAoQSlcbiAqL1xuZnVuY3Rpb24gZ2V0QShwYXJhbXMsIGFOdW0pIHtcbiAgYXNzZXJ0SXNCaWdJbnQoYU51bSk7XG4gIC8qIHdlIGhhdmVuJ3QgaW1wbGVtZW50ZWQgYml0TGVuZ3RoYVxuICBpZiAoTWF0aC5jZWlsKGFOdW0uYml0TGVuZ3RoKCkgLyA4KSA8IDI1NiAvIDgpIHtcbiAgICBjb25zb2xlLndhcm4oJ2dldEE6IGNsaWVudCBrZXkgbGVuZ3RoJywgYU51bS5iaXRMZW5ndGgoKSwgJ2lzIGxlc3MgdGhhbiB0aGUgcmVjb21tZW5kZWQgMjU2Jyk7XG4gIH1cbiAgKi9cbiAgcmV0dXJuIHBhZFRvTihwb3dtKHBhcmFtcy5nLCBhTnVtLCBwYXJhbXMuTiksIHBhcmFtcyk7XG59XG5cbi8qKlxuICogZ2V0dSgpIGhhc2hlcyB0aGUgdHdvIHB1YmxpYyBtZXNzYWdlcyB0b2dldGhlciwgdG8gb2J0YWluIGEgc2NyYW1ibGluZ1xuICogcGFyYW1ldGVyIFwidVwiIHdoaWNoIGNhbm5vdCBiZSBwcmVkaWN0ZWQgYnkgZWl0aGVyIHBhcnR5IGFoZWFkIG9mIHRpbWUuXG4gKiBUaGlzIG1ha2VzIGl0IHNhZmUgdG8gdXNlIHRoZSBtZXNzYWdlIG9yZGVyaW5nIGRlZmluZWQgaW4gdGhlIFNSUC02YVxuICogcGFwZXIsIGluIHdoaWNoIHRoZSBzZXJ2ZXIgcmV2ZWFscyB0aGVpciBcIkJcIiB2YWx1ZSBiZWZvcmUgdGhlIGNsaWVudFxuICogY29tbWl0cyB0byB0aGVpciBcIkFcIiB2YWx1ZS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcGFyYW1zIFNSUCBwYXJhbWV0ZXJzXG4gKiBAcGFyYW0ge0J1ZmZlcn0gQSBDbGllbnQgZXBoZW1lcmFsIHB1YmxpYyBrZXkgKEEpXG4gKiBAcGFyYW0ge0J1ZmZlcn0gQiBTZXJ2ZXIgZXBoZW1lcmFsIHB1YmxpYyBrZXkgKEIpXG4gKiBAcmV0dXJuIHtCaWdJbnR9IFNoYXJlZCBzY3JhbWJsaW5nIHBhcmFtZXRlciAodSlcbiAqL1xuZnVuY3Rpb24gZ2V0dShwYXJhbXMsIEEsIEIpIHtcbiAgYXNzZXJ0SXNOQnVmZmVyKEEsIHBhcmFtcywgJ0EnKTtcbiAgYXNzZXJ0SXNOQnVmZmVyKEIsIHBhcmFtcywgJ0InKTtcbiAgbGV0IHVCdWYgPSBjcnlwdG8uY3JlYXRlSGFzaChwYXJhbXMuaGFzaClcbiAgICAudXBkYXRlKEEpLnVwZGF0ZShCKVxuICAgIC5kaWdlc3QoKTtcbiAgcmV0dXJuIGJ1ZmZlclRvQmlnSW50KHVCdWYpO1xufVxuXG4vKipcbiAqIFRoZSBUTFMgcHJlbWFzdGVyIHNlY3JldCBhcyBjYWxjdWxhdGVkIGJ5IHRoZSBjbGllbnRcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXMgU1JQIHBhcmFtZXRlcnNcbiAqIEBwYXJhbSB7QnVmZmVyfSBrTnVtIFNSUCBtdWx0aXBsaWVyIChrKVxuICogQHBhcmFtIHtCdWZmZXJ9IHhOdW0gVXNlciBzZWNyZXQgKGNhbGN1bGF0ZWQgZnJvbSBJLCBQLCBhbmQgc2FsdCkgKHgpXG4gKiBAcGFyYW0ge0J1ZmZlcn0gYU51bSBDbGllbnQgZXBoZW1lcmFsIHByaXZhdGUga2V5IChhKVxuICogQHBhcmFtIHtCaWdJbnR9IEJOdW0gU2VydmVyIGVwaGVtZXJhbCBwdWJsaWMga2V5LCBvYnRhaW5lZCBmcm9tIHNlcnZlciAoQilcbiAqIEBwYXJhbSB7QmlnSW50fSB1TnVtIFNSUCBzY3JhbWJsaW5nIHBhcmFtZXRlciAodSlcbiAqIEByZXR1cm4ge0J1ZmZlcn1cbiAqL1xuZnVuY3Rpb24gY2xpZW50R2V0UyhwYXJhbXMsIGtOdW0sIHhOdW0sIGFOdW0sIEJOdW0sIHVOdW0pIHtcbiAgYXNzZXJ0SXNCaWdJbnQoa051bSk7XG4gIGFzc2VydElzQmlnSW50KHhOdW0pO1xuICBhc3NlcnRJc0JpZ0ludChhTnVtKTtcbiAgYXNzZXJ0SXNCaWdJbnQoQk51bSk7XG4gIGFzc2VydElzQmlnSW50KHVOdW0pO1xuICBsZXQgZyA9IHBhcmFtcy5nO1xuICBsZXQgTiA9IHBhcmFtcy5OO1xuICBpZiAoQk51bSA8PSAwIHx8IE4gPD0gQk51bSkge1xuICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBzZXJ2ZXItc3VwcGxpZWQgXFwnQlxcJywgbXVzdCBiZSAxLi5OLTEnKTtcbiAgfVxuICBsZXQgU051bSA9IHBvd20oQk51bSAtIGtOdW0gKiBwb3dtKGcsIHhOdW0sIE4pLCBhTnVtICsgdU51bSAqIHhOdW0sIE4pICUgTjtcbiAgcmV0dXJuIHBhZFRvTihTTnVtLCBwYXJhbXMpO1xufVxuXG4vKipcbiAqIFRoZSBUTFMgcHJlbWFzdGVyc2VjcmV0IGFzIGNhbGN1bGF0ZWQgYnkgdGhlIHNlcnZlclxuICogQHBhcmFtIHtPYmplY3R9IHBhcmFtcyBTUlAgcGFyYW1ldGVyc1xuICogQHBhcmFtIHtCaWdJbnR9IHZOdW0gVmVyaWZpZXIgKHYpXG4gKiBAcGFyYW0ge0JpZ0ludH0gQU51bSBDbGllbnQgZXBoZW1lcmFsIHB1YmxpYyBrZXkgKEEpXG4gKiBAcGFyYW0ge0JpZ0ludH0gYk51bSBTZXJ2ZXIgZXBoZW1lcmFsIHByaXZhdGUga2V5IChiKVxuICogQHBhcmFtIHtCaWdJbnR9IHVOdW0gU1JQIHNjcmFtYmxpbmcgcGFyYW1ldGVyICh1KVxuICogQHJldHVybiB7QnVmZmVyfVxuICogcGFyYW1zOlxuICogICAgICAgICBwYXJhbXMgKG9iaikgICAgIGdyb3VwIHBhcmFtZXRlcnMsIHdpdGggLk4sIC5nLCAuaGFzaFxuICogICAgICAgICB2IChiaWdudW0pICAgICAgIHZlcmlmaWVyIChzdG9yZWQgb24gc2VydmVyKVxuICogICAgICAgICBBIChiaWdudW0pICAgICAgIGVwaGVtZXJhbCBjbGllbnQgcHVibGljIGtleSAocmVhZCBmcm9tIGNsaWVudClcbiAqICAgICAgICAgYiAoYmlnbnVtKSAgICAgICBzZXJ2ZXIgZXBoZW1lcmFsIHByaXZhdGUga2V5IChnZW5lcmF0ZWQgZm9yIHNlc3Npb24pXG4gKlxuICogcmV0dXJuczogYmlnbnVtXG4gKi9cbmZ1bmN0aW9uIHNlcnZlckdldFMocGFyYW1zLCB2TnVtLCBBTnVtLCBiTnVtLCB1TnVtKSB7XG4gIGFzc2VydElzQmlnSW50KHZOdW0pO1xuICBhc3NlcnRJc0JpZ0ludChBTnVtKTtcbiAgYXNzZXJ0SXNCaWdJbnQoYk51bSk7XG4gIGFzc2VydElzQmlnSW50KHVOdW0pO1xuICBsZXQgTiA9IHBhcmFtcy5OO1xuICBpZiAoQU51bSA8PSAwbiB8fCBOIDw9IEFOdW0pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgY2xpZW50LXN1cHBsaWVkIFxcJ0FcXCcsIG11c3QgYmUgMS4uTi0xJyk7XG4gIH1cbiAgbGV0IFNOdW0gPSBwb3dtKEFOdW0gKiBwb3dtKHZOdW0sIHVOdW0sIE4pLCBiTnVtLCBOKSAlIE47XG4gIHJldHVybiBwYWRUb04oU051bSwgcGFyYW1zKTtcbn1cblxuLyoqXG4gKiBDb21wdXRlIHRoZSBzaGFyZWQgc2Vzc2lvbiBrZXkgSyBmcm9tIFNcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcGFyYW1zIFNSUCBwYXJhbWV0ZXJzXG4gKiBAcGFyYW0ge0J1ZmZlcn0gU0J1ZiBTUlAgc2Vzc2lvbiBrZXkgKFMpXG4gKiBAcmV0dXJuIHtCdWZmZXJ9IFNSUCBzdHJvbmcgc2Vzc2lvbiBrZXkgKEspXG4gKi9cbmZ1bmN0aW9uIGdldEsocGFyYW1zLCBTQnVmKSB7XG4gIGFzc2VydElzTkJ1ZmZlcihTQnVmLCBwYXJhbXMsICdTJyk7XG4gIHJldHVybiBjcnlwdG8uY3JlYXRlSGFzaChwYXJhbXMuaGFzaClcbiAgICAudXBkYXRlKFNCdWYpXG4gICAgLmRpZ2VzdCgpO1xufVxuXG4vKipcbiAqIENvbXB1dGUgdGhlIE0xIHZlcmlmaWNhdGlvbiBwYXJhbWV0ZXIgKHNlbnQgdG8gc2VydmVyKVxuICogQHBhcmFtIHtPYmplY3R9IHBhcmFtcyBTUlAgcGFyYW1ldGVyc1xuICogQHBhcmFtIHtCdWZmZXJ9IEFCdWYgQ2xpZW50IGVwaGVtZXJhbCBwdWJsaWMga2V5IChBKVxuICogQHBhcmFtIHtCdWZmZXJ9IEJCdWYgU2VydmVyIGVwaGVtZXJhbCBwdWJsaWMga2V5IChCKVxuICogQHBhcmFtIHtCdWZmZXJ9IFNCdWYgU2hhcmVkIHNlc3Npb24ga2V5IChTKVxuICogQHJldHVybiB7QnVmZmVyfVxuICovXG5mdW5jdGlvbiBnZXRNMShwYXJhbXMsIEFCdWYsIEJCdWYsIFNCdWYpIHtcbiAgYXNzZXJ0SXNOQnVmZmVyKEFCdWYsIHBhcmFtcywgJ0EnKTtcbiAgYXNzZXJ0SXNOQnVmZmVyKEJCdWYsIHBhcmFtcywgJ0InKTtcbiAgYXNzZXJ0SXNOQnVmZmVyKFNCdWYsIHBhcmFtcywgJ1MnKTtcbiAgcmV0dXJuIGNyeXB0by5jcmVhdGVIYXNoKHBhcmFtcy5oYXNoKVxuICAgIC51cGRhdGUoQUJ1ZikudXBkYXRlKEJCdWYpLnVwZGF0ZShTQnVmKVxuICAgIC5kaWdlc3QoKTtcbn1cblxuLyoqXG4gKiBDb21wdXRlIHRoZSBNMiB2ZXJpZmljYXRpb24gcGFyYW1ldGVyIChzZW50IHRvIGNsaWVudClcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXMgU1JQIHBhcmFtZXRlcnNcbiAqIEBwYXJhbSB7QnVmZmVyfSBBQnVmIENsaWVudCBlcGhlbWVyYWwgcHVibGljIGtleSAoQSlcbiAqIEBwYXJhbSB7QnVmZmVyfSBNQnVmIE0xIHZlcmlmaWNhdGlvbiBwYXJhbWV0ZXIgKE0xKVxuICogQHBhcmFtIHtCdWZmZXJ9IEtCdWYgU3Ryb25nIHNoYXJlZCBzZXNzaW9uIGtleSAoSylcbiAqIEByZXR1cm4ge0J1ZmZlcn1cbiAqL1xuZnVuY3Rpb24gZ2V0TTIocGFyYW1zLCBBQnVmLCBNQnVmLCBLQnVmKSB7XG4gIGFzc2VydElzTkJ1ZmZlcihBQnVmLCBwYXJhbXMsICdBJyk7XG4gIGFzc2VydElzQnVmZmVyKE1CdWYsICdNJyk7XG4gIGFzc2VydElzQnVmZmVyKEtCdWYsICdLJyk7XG4gIHJldHVybiBjcnlwdG8uY3JlYXRlSGFzaChwYXJhbXMuaGFzaClcbiAgICAudXBkYXRlKEFCdWYpLnVwZGF0ZShNQnVmKS51cGRhdGUoS0J1ZilcbiAgICAuZGlnZXN0KCk7XG59XG5cbi8qKlxuICogQ29uc3RhbnQtdGltZSBidWZmZXIgZXF1YWxpdHkgY2hlY2tpbmdcbiAqIEBwYXJhbSB7QnVmZmVyfSBidWYxXG4gKiBAcGFyYW0ge0J1ZmZlcn0gYnVmMlxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gZXF1YWwoYnVmMSwgYnVmMikge1xuICBsZXQgbWlzbWF0Y2ggPSBidWYxLmxlbmd0aCAtIGJ1ZjIubGVuZ3RoO1xuICBpZiAobWlzbWF0Y2gpIHJldHVybiBmYWxzZTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBidWYxLmxlbmd0aDsgaSsrKSB7XG4gICAgbWlzbWF0Y2ggfD0gYnVmMVtpXSBeIGJ1ZjJbaV07XG4gIH1cbiAgcmV0dXJuIG1pc21hdGNoID09PSAwO1xufVxuXG4vKiogUmVwcmVzZW50cyBhbiBTUlAgY2xpZW50ICovXG5jbGFzcyBDbGllbnQge1xuICAvKipcbiAgICogVGhlIGNvbnN0cnVjdG9yXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXMgU1JQIHBhcmFtZXRlcnNcbiAgICogQHBhcmFtIHtCdWZmZXJ9IHNhbHRCdWYgU2FsdCAocylcbiAgICogQHBhcmFtIHtCdWZmZXJ9IGlkZW50aXR5QnVmIFVzZXIgaWRlbnRpdHkgKEkpXG4gICAqIEBwYXJhbSB7QnVmZmVyfSBwYXNzd29yZEJ1ZiBVc2VyIHBhc3N3b3JkIChQKVxuICAgKiBAcGFyYW0ge0J1ZmZlcn0gc2VjcmV0MUJ1ZiBDbGllbnQgZXBoZW1lcmFsIHNlY3JldCBrZXkgKGEpXG4gICAqL1xuICBjb25zdHJ1Y3RvcihwYXJhbXMsIHNhbHRCdWYsIGlkZW50aXR5QnVmLCBwYXNzd29yZEJ1Ziwgc2VjcmV0MUJ1Zikge1xuICAgIGFzc2VydElzQnVmZmVyKHNhbHRCdWYsICdzYWx0IChzYWx0KScpO1xuICAgIGFzc2VydElzQnVmZmVyKGlkZW50aXR5QnVmLCAnaWRlbnRpdHkgKEkpJyk7XG4gICAgYXNzZXJ0SXNCdWZmZXIocGFzc3dvcmRCdWYsICdwYXNzd29yZCAoUCknKTtcbiAgICBhc3NlcnRJc0J1ZmZlcihzZWNyZXQxQnVmLCAnc2VjcmV0MScpO1xuICAgIHRoaXMuX3ByaXZhdGUgPSB7XG4gICAgICBwYXJhbXM6IHBhcmFtcyxcbiAgICAgIGtfbnVtOiBnZXRrKHBhcmFtcyksXG4gICAgICB4X251bTogZ2V0eChwYXJhbXMsIHNhbHRCdWYsIGlkZW50aXR5QnVmLCBwYXNzd29yZEJ1ZiksXG4gICAgICBhX251bTogYnVmZmVyVG9CaWdJbnQoc2VjcmV0MUJ1ZilcbiAgICB9O1xuICAgIHRoaXMuX3ByaXZhdGUuQV9idWYgPSBnZXRBKHBhcmFtcywgdGhpcy5fcHJpdmF0ZS5hX251bSk7XG4gIH1cbiAgLyoqXG4gICAqIENvbXB1dGUgdGhlIGNsaWVudCBlcGhlbWVyYWwgcHVibGljIGtleSAoQSlcbiAgICogQHJldHVybiB7QnVmZmVyfVxuICAgKi9cbiAgY29tcHV0ZUEoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ByaXZhdGUuQV9idWY7XG4gIH1cbiAgLyoqXG4gICAqIFNldCB0aGUgQiB2YWx1ZSBvYnRhaW5lZCBmcm9tIHRoZSBzZXJ2ZXJcbiAgICogQHBhcmFtIHtCdWZmZXJ9IEJCdWYgU2VydmVyIGVwaGVtZXJhbCBwdWJsaWMga2V5IChCKVxuICAgKi9cbiAgc2V0QihCQnVmKSB7XG4gICAgbGV0IHAgPSB0aGlzLl9wcml2YXRlO1xuICAgIGxldCBCTnVtID0gYnVmZmVyVG9CaWdJbnQoQkJ1Zik7XG4gICAgbGV0IHVOdW0gPSBnZXR1KHAucGFyYW1zLCBwLkFfYnVmLCBCQnVmKTtcbiAgICBsZXQgU0J1ZiA9IGNsaWVudEdldFMocC5wYXJhbXMsIHAua19udW0sIHAueF9udW0sIHAuYV9udW0sIEJOdW0sIHVOdW0pO1xuICAgIHAuS19idWYgPSBnZXRLKHAucGFyYW1zLCBTQnVmKTtcbiAgICBwLk0xX2J1ZiA9IGdldE0xKHAucGFyYW1zLCBwLkFfYnVmLCBCQnVmLCBTQnVmKTtcbiAgICBwLk0yX2J1ZiA9IGdldE0yKHAucGFyYW1zLCBwLkFfYnVmLCBwLk0xX2J1ZiwgcC5LX2J1Zik7XG4gICAgcC51X251bSA9IHVOdW07IC8vIG9ubHkgZm9yIHRlc3RzXG4gICAgcC5TX2J1ZiA9IFNCdWY7IC8vIG9ubHkgZm9yIHRlc3RzXG4gIH1cbiAgLyoqXG4gICAqIENvbXB1dGUgdGhlIE0xIHZlcmlmaWNhdGlvbiB2YWx1ZVxuICAgKiBAcmV0dXJuIHtCdWZmZXJ9XG4gICAqL1xuICBjb21wdXRlTTEoKSB7XG4gICAgaWYgKHRoaXMuX3ByaXZhdGUuTTFfYnVmID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignaW5jb21wbGV0ZSBwcm90b2NvbCcpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZS5NMV9idWY7XG4gIH1cbiAgLyoqXG4gICAqIFZlcmlmeSBzZXJ2ZXIgTTIgdmVyaWZpY2F0aW9uIHZhbHVlLiBUaHJvd3MgaWYgaW5jb3JyZWN0XG4gICAqIEBwYXJhbSB7QnVmZmVyfSBzZXJ2ZXJNMkJ1ZlxuICAgKi9cbiAgY2hlY2tNMihzZXJ2ZXJNMkJ1Zikge1xuICAgIGlmICghZXF1YWwodGhpcy5fcHJpdmF0ZS5NMl9idWYsIHNlcnZlck0yQnVmKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdzZXJ2ZXIgaXMgbm90IGF1dGhlbnRpYycpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQ29tcHV0ZSB0aGUgc2hhcmVkIHNlc3Npb24ga2V5IChLKVxuICAgKiBAcmV0dXJuIHtCdWZmZXJ9XG4gICAqL1xuICBjb21wdXRlSygpIHtcbiAgICBpZiAodGhpcy5fcHJpdmF0ZS5LX2J1ZiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2luY29tcGxldGUgcHJvdG9jb2wnKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3ByaXZhdGUuS19idWY7XG4gIH1cbn1cblxuLyoqIFJlcHJlc2VudHMgYSBzZXJ2ZXIgKi9cbmNsYXNzIFNlcnZlciB7XG4gIC8qKlxuICAgKiBUaGUgY29uc3RydWN0b3JcbiAgICogQHBhcmFtIHtPYmplY3R9IHBhcmFtcyBTUlAgcGFyYW1ldGVyc1xuICAgKiBAcGFyYW0ge0J1ZmZlcn0gdmVyaWZpZXJCdWYgVmVyaWZpZXIgZnJvbSBjbGllbnQgKHYpXG4gICAqIEBwYXJhbSB7QnVmZmVyfSBzZWNyZXQyQnVmIFNlcnZlciBlcGhlbWVyYWwgc2VjcmV0IGtleSAoYilcbiAgICovXG4gIGNvbnN0cnVjdG9yKHBhcmFtcywgdmVyaWZpZXJCdWYsIHNlY3JldDJCdWYpIHtcbiAgICBhc3NlcnRJc0J1ZmZlcih2ZXJpZmllckJ1ZiwgJ3ZlcmlmaWVyJyk7XG4gICAgYXNzZXJ0SXNCdWZmZXIoc2VjcmV0MkJ1ZiwgJ3NlY3JldDInKTtcbiAgICB0aGlzLl9wcml2YXRlID0geyBwYXJhbXM6IHBhcmFtcyxcbiAgICAgICAgICAgICAgICAgICAgICBrX251bTogZ2V0ayhwYXJhbXMpLFxuICAgICAgICAgICAgICAgICAgICAgIGJfbnVtOiBidWZmZXJUb0JpZ0ludChzZWNyZXQyQnVmKSxcbiAgICAgICAgICAgICAgICAgICAgICB2X251bTogYnVmZmVyVG9CaWdJbnQodmVyaWZpZXJCdWYpIH07XG4gICAgdGhpcy5fcHJpdmF0ZS5CX2J1ZiA9IGdldEIocGFyYW1zLCB0aGlzLl9wcml2YXRlLmtfbnVtLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3ByaXZhdGUudl9udW0sIHRoaXMuX3ByaXZhdGUuYl9udW0pO1xuICB9XG4gIC8qKlxuICAgKiBDb21wdXRlIHRoZSBzZXJ2ZXIgZXBoZW1lcmFsIHB1YmxpYyBrZXkgKEIpXG4gICAqIEByZXR1cm4ge0J1ZmZlcn1cbiAgICovXG4gIGNvbXB1dGVCKCkge1xuICAgIHJldHVybiB0aGlzLl9wcml2YXRlLkJfYnVmO1xuICB9XG4gIC8qKlxuICAgKiBTZXQgdGhlIEEgdmFsdWUgcmVjZWl2ZWQgZnJvbSB0aGUgY2xpZW50XG4gICAqIEBwYXJhbSB7QnVmZmVyfSBBQnVmIENsaWVudCBlcGhlbWVyYWwgcHVibGljIGtleSAoQSlcbiAgICovXG4gIHNldEEoQUJ1Zikge1xuICAgIGxldCBwID0gdGhpcy5fcHJpdmF0ZTtcbiAgICBsZXQgQU51bSA9IGJ1ZmZlclRvQmlnSW50KEFCdWYpO1xuICAgIGxldCB1TnVtID0gZ2V0dShwLnBhcmFtcywgQUJ1ZiwgcC5CX2J1Zik7XG4gICAgbGV0IFNCdWYgPSBzZXJ2ZXJHZXRTKHAucGFyYW1zLCBwLnZfbnVtLCBBTnVtLCBwLmJfbnVtLCB1TnVtKTtcbiAgICBwLktfYnVmID0gZ2V0SyhwLnBhcmFtcywgU0J1Zik7XG4gICAgcC5NMV9idWYgPSBnZXRNMShwLnBhcmFtcywgQUJ1ZiwgcC5CX2J1ZiwgU0J1Zik7XG4gICAgcC5NMl9idWYgPSBnZXRNMihwLnBhcmFtcywgQUJ1ZiwgcC5NMV9idWYsIHAuS19idWYpO1xuICAgIHAudV9udW0gPSB1TnVtOyAvLyBvbmx5IGZvciB0ZXN0c1xuICAgIHAuU19idWYgPSBTQnVmOyAvLyBvbmx5IGZvciB0ZXN0c1xuICB9XG4gIC8qKlxuICAgKiBWZXJpZnkgTTEgdmVyaWZpY2F0aW9uIHZhbHVlLiBUaHJvd3MgaWYgaW5jb3JyZWN0XG4gICAqIEBwYXJhbSB7QnVmZmVyfSBjbGllbnRNMUJ1ZlxuICAgKiBAcmV0dXJuIHtCdWZmZXJ9IFNlcnZlciBNMiB2ZXJpZmljYXRpb24gdmFsdWVcbiAgICovXG4gIGNoZWNrTTEoY2xpZW50TTFCdWYpIHtcbiAgICBpZiAodGhpcy5fcHJpdmF0ZS5NMV9idWYgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbmNvbXBsZXRlIHByb3RvY29sJyk7XG4gICAgfVxuICAgIGlmICghZXF1YWwodGhpcy5fcHJpdmF0ZS5NMV9idWYsIGNsaWVudE0xQnVmKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdjbGllbnQgZGlkIG5vdCB1c2UgdGhlIHNhbWUgcGFzc3dvcmQnKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3ByaXZhdGUuTTJfYnVmO1xuICB9XG4gIC8qKlxuICAgKiBDb21wdXRlIHRoZSBzaGFyZWQgc2Vzc2lvbiBrZXkgKEspXG4gICAqIEByZXR1cm4ge0J1ZmZlcn1cbiAgICovXG4gIGNvbXB1dGVLKCkge1xuICAgIGlmICh0aGlzLl9wcml2YXRlLktfYnVmID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignaW5jb21wbGV0ZSBwcm90b2NvbCcpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZS5LX2J1ZjtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgcGFyYW1zOiByZXF1aXJlKCcuL3BhcmFtcycpLFxuICBnZW5LZXksXG4gIGNvbXB1dGVWZXJpZmllcixcbiAgQ2xpZW50LFxuICBTZXJ2ZXIsXG4gIGJpZ0ludFRvQnVmZmVyLFxuICBidWZmZXJUb0JpZ0ludFxufTtcbiIsIid1c2Ugc3RyaWN0J1xuXG5leHBvcnRzLnJhbmRvbUJ5dGVzID0gZXhwb3J0cy5ybmcgPSBleHBvcnRzLnBzZXVkb1JhbmRvbUJ5dGVzID0gZXhwb3J0cy5wcm5nID0gcmVxdWlyZSgncmFuZG9tYnl0ZXMnKVxuZXhwb3J0cy5jcmVhdGVIYXNoID0gZXhwb3J0cy5IYXNoID0gcmVxdWlyZSgnY3JlYXRlLWhhc2gnKVxuZXhwb3J0cy5jcmVhdGVIbWFjID0gZXhwb3J0cy5IbWFjID0gcmVxdWlyZSgnY3JlYXRlLWhtYWMnKVxuXG52YXIgYWxnb3MgPSByZXF1aXJlKCdicm93c2VyaWZ5LXNpZ24vYWxnb3MnKVxudmFyIGFsZ29LZXlzID0gT2JqZWN0LmtleXMoYWxnb3MpXG52YXIgaGFzaGVzID0gWydzaGExJywgJ3NoYTIyNCcsICdzaGEyNTYnLCAnc2hhMzg0JywgJ3NoYTUxMicsICdtZDUnLCAncm1kMTYwJ10uY29uY2F0KGFsZ29LZXlzKVxuZXhwb3J0cy5nZXRIYXNoZXMgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBoYXNoZXNcbn1cblxudmFyIHAgPSByZXF1aXJlKCdwYmtkZjInKVxuZXhwb3J0cy5wYmtkZjIgPSBwLnBia2RmMlxuZXhwb3J0cy5wYmtkZjJTeW5jID0gcC5wYmtkZjJTeW5jXG5cbnZhciBhZXMgPSByZXF1aXJlKCdicm93c2VyaWZ5LWNpcGhlcicpXG5cbmV4cG9ydHMuQ2lwaGVyID0gYWVzLkNpcGhlclxuZXhwb3J0cy5jcmVhdGVDaXBoZXIgPSBhZXMuY3JlYXRlQ2lwaGVyXG5leHBvcnRzLkNpcGhlcml2ID0gYWVzLkNpcGhlcml2XG5leHBvcnRzLmNyZWF0ZUNpcGhlcml2ID0gYWVzLmNyZWF0ZUNpcGhlcml2XG5leHBvcnRzLkRlY2lwaGVyID0gYWVzLkRlY2lwaGVyXG5leHBvcnRzLmNyZWF0ZURlY2lwaGVyID0gYWVzLmNyZWF0ZURlY2lwaGVyXG5leHBvcnRzLkRlY2lwaGVyaXYgPSBhZXMuRGVjaXBoZXJpdlxuZXhwb3J0cy5jcmVhdGVEZWNpcGhlcml2ID0gYWVzLmNyZWF0ZURlY2lwaGVyaXZcbmV4cG9ydHMuZ2V0Q2lwaGVycyA9IGFlcy5nZXRDaXBoZXJzXG5leHBvcnRzLmxpc3RDaXBoZXJzID0gYWVzLmxpc3RDaXBoZXJzXG5cbnZhciBkaCA9IHJlcXVpcmUoJ2RpZmZpZS1oZWxsbWFuJylcblxuZXhwb3J0cy5EaWZmaWVIZWxsbWFuR3JvdXAgPSBkaC5EaWZmaWVIZWxsbWFuR3JvdXBcbmV4cG9ydHMuY3JlYXRlRGlmZmllSGVsbG1hbkdyb3VwID0gZGguY3JlYXRlRGlmZmllSGVsbG1hbkdyb3VwXG5leHBvcnRzLmdldERpZmZpZUhlbGxtYW4gPSBkaC5nZXREaWZmaWVIZWxsbWFuXG5leHBvcnRzLmNyZWF0ZURpZmZpZUhlbGxtYW4gPSBkaC5jcmVhdGVEaWZmaWVIZWxsbWFuXG5leHBvcnRzLkRpZmZpZUhlbGxtYW4gPSBkaC5EaWZmaWVIZWxsbWFuXG5cbnZhciBzaWduID0gcmVxdWlyZSgnYnJvd3NlcmlmeS1zaWduJylcblxuZXhwb3J0cy5jcmVhdGVTaWduID0gc2lnbi5jcmVhdGVTaWduXG5leHBvcnRzLlNpZ24gPSBzaWduLlNpZ25cbmV4cG9ydHMuY3JlYXRlVmVyaWZ5ID0gc2lnbi5jcmVhdGVWZXJpZnlcbmV4cG9ydHMuVmVyaWZ5ID0gc2lnbi5WZXJpZnlcblxuZXhwb3J0cy5jcmVhdGVFQ0RIID0gcmVxdWlyZSgnY3JlYXRlLWVjZGgnKVxuXG52YXIgcHVibGljRW5jcnlwdCA9IHJlcXVpcmUoJ3B1YmxpYy1lbmNyeXB0JylcblxuZXhwb3J0cy5wdWJsaWNFbmNyeXB0ID0gcHVibGljRW5jcnlwdC5wdWJsaWNFbmNyeXB0XG5leHBvcnRzLnByaXZhdGVFbmNyeXB0ID0gcHVibGljRW5jcnlwdC5wcml2YXRlRW5jcnlwdFxuZXhwb3J0cy5wdWJsaWNEZWNyeXB0ID0gcHVibGljRW5jcnlwdC5wdWJsaWNEZWNyeXB0XG5leHBvcnRzLnByaXZhdGVEZWNyeXB0ID0gcHVibGljRW5jcnlwdC5wcml2YXRlRGVjcnlwdFxuXG4vLyB0aGUgbGVhc3QgSSBjYW4gZG8gaXMgbWFrZSBlcnJvciBtZXNzYWdlcyBmb3IgdGhlIHJlc3Qgb2YgdGhlIG5vZGUuanMvY3J5cHRvIGFwaS5cbi8vIDtbXG4vLyAgICdjcmVhdGVDcmVkZW50aWFscydcbi8vIF0uZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuLy8gICBleHBvcnRzW25hbWVdID0gZnVuY3Rpb24gKCkge1xuLy8gICAgIHRocm93IG5ldyBFcnJvcihbXG4vLyAgICAgICAnc29ycnksICcgKyBuYW1lICsgJyBpcyBub3QgaW1wbGVtZW50ZWQgeWV0Jyxcbi8vICAgICAgICd3ZSBhY2NlcHQgcHVsbCByZXF1ZXN0cycsXG4vLyAgICAgICAnaHR0cHM6Ly9naXRodWIuY29tL2NyeXB0by1icm93c2VyaWZ5L2NyeXB0by1icm93c2VyaWZ5J1xuLy8gICAgIF0uam9pbignXFxuJykpXG4vLyAgIH1cbi8vIH0pXG5cbnZhciByZiA9IHJlcXVpcmUoJ3JhbmRvbWZpbGwnKVxuXG5leHBvcnRzLnJhbmRvbUZpbGwgPSByZi5yYW5kb21GaWxsXG5leHBvcnRzLnJhbmRvbUZpbGxTeW5jID0gcmYucmFuZG9tRmlsbFN5bmNcblxuZXhwb3J0cy5jcmVhdGVDcmVkZW50aWFscyA9IGZ1bmN0aW9uICgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKFtcbiAgICAnc29ycnksIGNyZWF0ZUNyZWRlbnRpYWxzIGlzIG5vdCBpbXBsZW1lbnRlZCB5ZXQnLFxuICAgICd3ZSBhY2NlcHQgcHVsbCByZXF1ZXN0cycsXG4gICAgJ2h0dHBzOi8vZ2l0aHViLmNvbS9jcnlwdG8tYnJvd3NlcmlmeS9jcnlwdG8tYnJvd3NlcmlmeSdcbiAgXS5qb2luKCdcXG4nKSlcbn1cblxuZXhwb3J0cy5jb25zdGFudHMgPSB7XG4gICdESF9DSEVDS19QX05PVF9TQUZFX1BSSU1FJzogMixcbiAgJ0RIX0NIRUNLX1BfTk9UX1BSSU1FJzogMSxcbiAgJ0RIX1VOQUJMRV9UT19DSEVDS19HRU5FUkFUT1InOiA0LFxuICAnREhfTk9UX1NVSVRBQkxFX0dFTkVSQVRPUic6IDgsXG4gICdOUE5fRU5BQkxFRCc6IDEsXG4gICdBTFBOX0VOQUJMRUQnOiAxLFxuICAnUlNBX1BLQ1MxX1BBRERJTkcnOiAxLFxuICAnUlNBX1NTTFYyM19QQURESU5HJzogMixcbiAgJ1JTQV9OT19QQURESU5HJzogMyxcbiAgJ1JTQV9QS0NTMV9PQUVQX1BBRERJTkcnOiA0LFxuICAnUlNBX1g5MzFfUEFERElORyc6IDUsXG4gICdSU0FfUEtDUzFfUFNTX1BBRERJTkcnOiA2LFxuICAnUE9JTlRfQ09OVkVSU0lPTl9DT01QUkVTU0VEJzogMixcbiAgJ1BPSU5UX0NPTlZFUlNJT05fVU5DT01QUkVTU0VEJzogNCxcbiAgJ1BPSU5UX0NPTlZFUlNJT05fSFlCUklEJzogNlxufVxuIiwidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGFycikgPT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlcjtcbnZhciB1dGlsID0gcmVxdWlyZSgndXRpbCcpO1xuXG5mdW5jdGlvbiBjb3B5QnVmZmVyKHNyYywgdGFyZ2V0LCBvZmZzZXQpIHtcbiAgc3JjLmNvcHkodGFyZ2V0LCBvZmZzZXQpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQnVmZmVyTGlzdCgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQnVmZmVyTGlzdCk7XG5cbiAgICB0aGlzLmhlYWQgPSBudWxsO1xuICAgIHRoaXMudGFpbCA9IG51bGw7XG4gICAgdGhpcy5sZW5ndGggPSAwO1xuICB9XG5cbiAgQnVmZmVyTGlzdC5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uIHB1c2godikge1xuICAgIHZhciBlbnRyeSA9IHsgZGF0YTogdiwgbmV4dDogbnVsbCB9O1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IDApIHRoaXMudGFpbC5uZXh0ID0gZW50cnk7ZWxzZSB0aGlzLmhlYWQgPSBlbnRyeTtcbiAgICB0aGlzLnRhaWwgPSBlbnRyeTtcbiAgICArK3RoaXMubGVuZ3RoO1xuICB9O1xuXG4gIEJ1ZmZlckxpc3QucHJvdG90eXBlLnVuc2hpZnQgPSBmdW5jdGlvbiB1bnNoaWZ0KHYpIHtcbiAgICB2YXIgZW50cnkgPSB7IGRhdGE6IHYsIG5leHQ6IHRoaXMuaGVhZCB9O1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkgdGhpcy50YWlsID0gZW50cnk7XG4gICAgdGhpcy5oZWFkID0gZW50cnk7XG4gICAgKyt0aGlzLmxlbmd0aDtcbiAgfTtcblxuICBCdWZmZXJMaXN0LnByb3RvdHlwZS5zaGlmdCA9IGZ1bmN0aW9uIHNoaWZ0KCkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICAgIHZhciByZXQgPSB0aGlzLmhlYWQuZGF0YTtcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDEpIHRoaXMuaGVhZCA9IHRoaXMudGFpbCA9IG51bGw7ZWxzZSB0aGlzLmhlYWQgPSB0aGlzLmhlYWQubmV4dDtcbiAgICAtLXRoaXMubGVuZ3RoO1xuICAgIHJldHVybiByZXQ7XG4gIH07XG5cbiAgQnVmZmVyTGlzdC5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICB0aGlzLmhlYWQgPSB0aGlzLnRhaWwgPSBudWxsO1xuICAgIHRoaXMubGVuZ3RoID0gMDtcbiAgfTtcblxuICBCdWZmZXJMaXN0LnByb3RvdHlwZS5qb2luID0gZnVuY3Rpb24gam9pbihzKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm4gJyc7XG4gICAgdmFyIHAgPSB0aGlzLmhlYWQ7XG4gICAgdmFyIHJldCA9ICcnICsgcC5kYXRhO1xuICAgIHdoaWxlIChwID0gcC5uZXh0KSB7XG4gICAgICByZXQgKz0gcyArIHAuZGF0YTtcbiAgICB9cmV0dXJuIHJldDtcbiAgfTtcblxuICBCdWZmZXJMaXN0LnByb3RvdHlwZS5jb25jYXQgPSBmdW5jdGlvbiBjb25jYXQobikge1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIEJ1ZmZlci5hbGxvYygwKTtcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDEpIHJldHVybiB0aGlzLmhlYWQuZGF0YTtcbiAgICB2YXIgcmV0ID0gQnVmZmVyLmFsbG9jVW5zYWZlKG4gPj4+IDApO1xuICAgIHZhciBwID0gdGhpcy5oZWFkO1xuICAgIHZhciBpID0gMDtcbiAgICB3aGlsZSAocCkge1xuICAgICAgY29weUJ1ZmZlcihwLmRhdGEsIHJldCwgaSk7XG4gICAgICBpICs9IHAuZGF0YS5sZW5ndGg7XG4gICAgICBwID0gcC5uZXh0O1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xuICB9O1xuXG4gIHJldHVybiBCdWZmZXJMaXN0O1xufSgpO1xuXG5pZiAodXRpbCAmJiB1dGlsLmluc3BlY3QgJiYgdXRpbC5pbnNwZWN0LmN1c3RvbSkge1xuICBtb2R1bGUuZXhwb3J0cy5wcm90b3R5cGVbdXRpbC5pbnNwZWN0LmN1c3RvbV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG9iaiA9IHV0aWwuaW5zcGVjdCh7IGxlbmd0aDogdGhpcy5sZW5ndGggfSk7XG4gICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IubmFtZSArICcgJyArIG9iajtcbiAgfTtcbn0iLCJ2YXIgc2NvcGUgPSAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBnbG9iYWwpIHx8XG4gICAgICAgICAgICAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZikgfHxcbiAgICAgICAgICAgIHdpbmRvdztcbnZhciBhcHBseSA9IEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseTtcblxuLy8gRE9NIEFQSXMsIGZvciBjb21wbGV0ZW5lc3NcblxuZXhwb3J0cy5zZXRUaW1lb3V0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgVGltZW91dChhcHBseS5jYWxsKHNldFRpbWVvdXQsIHNjb3BlLCBhcmd1bWVudHMpLCBjbGVhclRpbWVvdXQpO1xufTtcbmV4cG9ydHMuc2V0SW50ZXJ2YWwgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBUaW1lb3V0KGFwcGx5LmNhbGwoc2V0SW50ZXJ2YWwsIHNjb3BlLCBhcmd1bWVudHMpLCBjbGVhckludGVydmFsKTtcbn07XG5leHBvcnRzLmNsZWFyVGltZW91dCA9XG5leHBvcnRzLmNsZWFySW50ZXJ2YWwgPSBmdW5jdGlvbih0aW1lb3V0KSB7XG4gIGlmICh0aW1lb3V0KSB7XG4gICAgdGltZW91dC5jbG9zZSgpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBUaW1lb3V0KGlkLCBjbGVhckZuKSB7XG4gIHRoaXMuX2lkID0gaWQ7XG4gIHRoaXMuX2NsZWFyRm4gPSBjbGVhckZuO1xufVxuVGltZW91dC5wcm90b3R5cGUudW5yZWYgPSBUaW1lb3V0LnByb3RvdHlwZS5yZWYgPSBmdW5jdGlvbigpIHt9O1xuVGltZW91dC5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5fY2xlYXJGbi5jYWxsKHNjb3BlLCB0aGlzLl9pZCk7XG59O1xuXG4vLyBEb2VzIG5vdCBzdGFydCB0aGUgdGltZSwganVzdCBzZXRzIHVwIHRoZSBtZW1iZXJzIG5lZWRlZC5cbmV4cG9ydHMuZW5yb2xsID0gZnVuY3Rpb24oaXRlbSwgbXNlY3MpIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuICBpdGVtLl9pZGxlVGltZW91dCA9IG1zZWNzO1xufTtcblxuZXhwb3J0cy51bmVucm9sbCA9IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuICBpdGVtLl9pZGxlVGltZW91dCA9IC0xO1xufTtcblxuZXhwb3J0cy5fdW5yZWZBY3RpdmUgPSBleHBvcnRzLmFjdGl2ZSA9IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuXG4gIHZhciBtc2VjcyA9IGl0ZW0uX2lkbGVUaW1lb3V0O1xuICBpZiAobXNlY3MgPj0gMCkge1xuICAgIGl0ZW0uX2lkbGVUaW1lb3V0SWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uIG9uVGltZW91dCgpIHtcbiAgICAgIGlmIChpdGVtLl9vblRpbWVvdXQpXG4gICAgICAgIGl0ZW0uX29uVGltZW91dCgpO1xuICAgIH0sIG1zZWNzKTtcbiAgfVxufTtcblxuLy8gc2V0aW1tZWRpYXRlIGF0dGFjaGVzIGl0c2VsZiB0byB0aGUgZ2xvYmFsIG9iamVjdFxucmVxdWlyZShcInNldGltbWVkaWF0ZVwiKTtcbi8vIE9uIHNvbWUgZXhvdGljIGVudmlyb25tZW50cywgaXQncyBub3QgY2xlYXIgd2hpY2ggb2JqZWN0IGBzZXRpbW1lZGlhdGVgIHdhc1xuLy8gYWJsZSB0byBpbnN0YWxsIG9udG8uICBTZWFyY2ggZWFjaCBwb3NzaWJpbGl0eSBpbiB0aGUgc2FtZSBvcmRlciBhcyB0aGVcbi8vIGBzZXRpbW1lZGlhdGVgIGxpYnJhcnkuXG5leHBvcnRzLnNldEltbWVkaWF0ZSA9ICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBzZWxmLnNldEltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgJiYgZ2xvYmFsLnNldEltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMgJiYgdGhpcy5zZXRJbW1lZGlhdGUpO1xuZXhwb3J0cy5jbGVhckltbWVkaWF0ZSA9ICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBzZWxmLmNsZWFySW1tZWRpYXRlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiICYmIGdsb2JhbC5jbGVhckltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAodGhpcyAmJiB0aGlzLmNsZWFySW1tZWRpYXRlKTtcbiIsIihmdW5jdGlvbiAoZ2xvYmFsLCB1bmRlZmluZWQpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcblxuICAgIGlmIChnbG9iYWwuc2V0SW1tZWRpYXRlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgbmV4dEhhbmRsZSA9IDE7IC8vIFNwZWMgc2F5cyBncmVhdGVyIHRoYW4gemVyb1xuICAgIHZhciB0YXNrc0J5SGFuZGxlID0ge307XG4gICAgdmFyIGN1cnJlbnRseVJ1bm5pbmdBVGFzayA9IGZhbHNlO1xuICAgIHZhciBkb2MgPSBnbG9iYWwuZG9jdW1lbnQ7XG4gICAgdmFyIHJlZ2lzdGVySW1tZWRpYXRlO1xuXG4gICAgZnVuY3Rpb24gc2V0SW1tZWRpYXRlKGNhbGxiYWNrKSB7XG4gICAgICAvLyBDYWxsYmFjayBjYW4gZWl0aGVyIGJlIGEgZnVuY3Rpb24gb3IgYSBzdHJpbmdcbiAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBjYWxsYmFjayA9IG5ldyBGdW5jdGlvbihcIlwiICsgY2FsbGJhY2spO1xuICAgICAgfVxuICAgICAgLy8gQ29weSBmdW5jdGlvbiBhcmd1bWVudHNcbiAgICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaSArIDFdO1xuICAgICAgfVxuICAgICAgLy8gU3RvcmUgYW5kIHJlZ2lzdGVyIHRoZSB0YXNrXG4gICAgICB2YXIgdGFzayA9IHsgY2FsbGJhY2s6IGNhbGxiYWNrLCBhcmdzOiBhcmdzIH07XG4gICAgICB0YXNrc0J5SGFuZGxlW25leHRIYW5kbGVdID0gdGFzaztcbiAgICAgIHJlZ2lzdGVySW1tZWRpYXRlKG5leHRIYW5kbGUpO1xuICAgICAgcmV0dXJuIG5leHRIYW5kbGUrKztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjbGVhckltbWVkaWF0ZShoYW5kbGUpIHtcbiAgICAgICAgZGVsZXRlIHRhc2tzQnlIYW5kbGVbaGFuZGxlXTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBydW4odGFzaykge1xuICAgICAgICB2YXIgY2FsbGJhY2sgPSB0YXNrLmNhbGxiYWNrO1xuICAgICAgICB2YXIgYXJncyA9IHRhc2suYXJncztcbiAgICAgICAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgIGNhbGxiYWNrKGFyZ3NbMF0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgIGNhbGxiYWNrKGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgIGNhbGxiYWNrKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBjYWxsYmFjay5hcHBseSh1bmRlZmluZWQsIGFyZ3MpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBydW5JZlByZXNlbnQoaGFuZGxlKSB7XG4gICAgICAgIC8vIEZyb20gdGhlIHNwZWM6IFwiV2FpdCB1bnRpbCBhbnkgaW52b2NhdGlvbnMgb2YgdGhpcyBhbGdvcml0aG0gc3RhcnRlZCBiZWZvcmUgdGhpcyBvbmUgaGF2ZSBjb21wbGV0ZWQuXCJcbiAgICAgICAgLy8gU28gaWYgd2UncmUgY3VycmVudGx5IHJ1bm5pbmcgYSB0YXNrLCB3ZSdsbCBuZWVkIHRvIGRlbGF5IHRoaXMgaW52b2NhdGlvbi5cbiAgICAgICAgaWYgKGN1cnJlbnRseVJ1bm5pbmdBVGFzaykge1xuICAgICAgICAgICAgLy8gRGVsYXkgYnkgZG9pbmcgYSBzZXRUaW1lb3V0LiBzZXRJbW1lZGlhdGUgd2FzIHRyaWVkIGluc3RlYWQsIGJ1dCBpbiBGaXJlZm94IDcgaXQgZ2VuZXJhdGVkIGFcbiAgICAgICAgICAgIC8vIFwidG9vIG11Y2ggcmVjdXJzaW9uXCIgZXJyb3IuXG4gICAgICAgICAgICBzZXRUaW1lb3V0KHJ1bklmUHJlc2VudCwgMCwgaGFuZGxlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciB0YXNrID0gdGFza3NCeUhhbmRsZVtoYW5kbGVdO1xuICAgICAgICAgICAgaWYgKHRhc2spIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50bHlSdW5uaW5nQVRhc2sgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHJ1bih0YXNrKTtcbiAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICBjbGVhckltbWVkaWF0ZShoYW5kbGUpO1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50bHlSdW5uaW5nQVRhc2sgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsTmV4dFRpY2tJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gKCkgeyBydW5JZlByZXNlbnQoaGFuZGxlKTsgfSk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2FuVXNlUG9zdE1lc3NhZ2UoKSB7XG4gICAgICAgIC8vIFRoZSB0ZXN0IGFnYWluc3QgYGltcG9ydFNjcmlwdHNgIHByZXZlbnRzIHRoaXMgaW1wbGVtZW50YXRpb24gZnJvbSBiZWluZyBpbnN0YWxsZWQgaW5zaWRlIGEgd2ViIHdvcmtlcixcbiAgICAgICAgLy8gd2hlcmUgYGdsb2JhbC5wb3N0TWVzc2FnZWAgbWVhbnMgc29tZXRoaW5nIGNvbXBsZXRlbHkgZGlmZmVyZW50IGFuZCBjYW4ndCBiZSB1c2VkIGZvciB0aGlzIHB1cnBvc2UuXG4gICAgICAgIGlmIChnbG9iYWwucG9zdE1lc3NhZ2UgJiYgIWdsb2JhbC5pbXBvcnRTY3JpcHRzKSB7XG4gICAgICAgICAgICB2YXIgcG9zdE1lc3NhZ2VJc0FzeW5jaHJvbm91cyA9IHRydWU7XG4gICAgICAgICAgICB2YXIgb2xkT25NZXNzYWdlID0gZ2xvYmFsLm9ubWVzc2FnZTtcbiAgICAgICAgICAgIGdsb2JhbC5vbm1lc3NhZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBwb3N0TWVzc2FnZUlzQXN5bmNocm9ub3VzID0gZmFsc2U7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgZ2xvYmFsLnBvc3RNZXNzYWdlKFwiXCIsIFwiKlwiKTtcbiAgICAgICAgICAgIGdsb2JhbC5vbm1lc3NhZ2UgPSBvbGRPbk1lc3NhZ2U7XG4gICAgICAgICAgICByZXR1cm4gcG9zdE1lc3NhZ2VJc0FzeW5jaHJvbm91cztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxQb3N0TWVzc2FnZUltcGxlbWVudGF0aW9uKCkge1xuICAgICAgICAvLyBJbnN0YWxscyBhbiBldmVudCBoYW5kbGVyIG9uIGBnbG9iYWxgIGZvciB0aGUgYG1lc3NhZ2VgIGV2ZW50OiBzZWVcbiAgICAgICAgLy8gKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9ET00vd2luZG93LnBvc3RNZXNzYWdlXG4gICAgICAgIC8vICogaHR0cDovL3d3dy53aGF0d2cub3JnL3NwZWNzL3dlYi1hcHBzL2N1cnJlbnQtd29yay9tdWx0aXBhZ2UvY29tbXMuaHRtbCNjcm9zc0RvY3VtZW50TWVzc2FnZXNcblxuICAgICAgICB2YXIgbWVzc2FnZVByZWZpeCA9IFwic2V0SW1tZWRpYXRlJFwiICsgTWF0aC5yYW5kb20oKSArIFwiJFwiO1xuICAgICAgICB2YXIgb25HbG9iYWxNZXNzYWdlID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgIGlmIChldmVudC5zb3VyY2UgPT09IGdsb2JhbCAmJlxuICAgICAgICAgICAgICAgIHR5cGVvZiBldmVudC5kYXRhID09PSBcInN0cmluZ1wiICYmXG4gICAgICAgICAgICAgICAgZXZlbnQuZGF0YS5pbmRleE9mKG1lc3NhZ2VQcmVmaXgpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcnVuSWZQcmVzZW50KCtldmVudC5kYXRhLnNsaWNlKG1lc3NhZ2VQcmVmaXgubGVuZ3RoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKSB7XG4gICAgICAgICAgICBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIiwgb25HbG9iYWxNZXNzYWdlLCBmYWxzZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBnbG9iYWwuYXR0YWNoRXZlbnQoXCJvbm1lc3NhZ2VcIiwgb25HbG9iYWxNZXNzYWdlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBnbG9iYWwucG9zdE1lc3NhZ2UobWVzc2FnZVByZWZpeCArIGhhbmRsZSwgXCIqXCIpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxNZXNzYWdlQ2hhbm5lbEltcGxlbWVudGF0aW9uKCkge1xuICAgICAgICB2YXIgY2hhbm5lbCA9IG5ldyBNZXNzYWdlQ2hhbm5lbCgpO1xuICAgICAgICBjaGFubmVsLnBvcnQxLm9ubWVzc2FnZSA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICB2YXIgaGFuZGxlID0gZXZlbnQuZGF0YTtcbiAgICAgICAgICAgIHJ1bklmUHJlc2VudChoYW5kbGUpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBjaGFubmVsLnBvcnQyLnBvc3RNZXNzYWdlKGhhbmRsZSk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbFJlYWR5U3RhdGVDaGFuZ2VJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgdmFyIGh0bWwgPSBkb2MuZG9jdW1lbnRFbGVtZW50O1xuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgLy8gQ3JlYXRlIGEgPHNjcmlwdD4gZWxlbWVudDsgaXRzIHJlYWR5c3RhdGVjaGFuZ2UgZXZlbnQgd2lsbCBiZSBmaXJlZCBhc3luY2hyb25vdXNseSBvbmNlIGl0IGlzIGluc2VydGVkXG4gICAgICAgICAgICAvLyBpbnRvIHRoZSBkb2N1bWVudC4gRG8gc28sIHRodXMgcXVldWluZyB1cCB0aGUgdGFzay4gUmVtZW1iZXIgdG8gY2xlYW4gdXAgb25jZSBpdCdzIGJlZW4gY2FsbGVkLlxuICAgICAgICAgICAgdmFyIHNjcmlwdCA9IGRvYy5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO1xuICAgICAgICAgICAgc2NyaXB0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBydW5JZlByZXNlbnQoaGFuZGxlKTtcbiAgICAgICAgICAgICAgICBzY3JpcHQub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbDtcbiAgICAgICAgICAgICAgICBodG1sLnJlbW92ZUNoaWxkKHNjcmlwdCk7XG4gICAgICAgICAgICAgICAgc2NyaXB0ID0gbnVsbDtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBodG1sLmFwcGVuZENoaWxkKHNjcmlwdCk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbFNldFRpbWVvdXRJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQocnVuSWZQcmVzZW50LCAwLCBoYW5kbGUpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8vIElmIHN1cHBvcnRlZCwgd2Ugc2hvdWxkIGF0dGFjaCB0byB0aGUgcHJvdG90eXBlIG9mIGdsb2JhbCwgc2luY2UgdGhhdCBpcyB3aGVyZSBzZXRUaW1lb3V0IGV0IGFsLiBsaXZlLlxuICAgIHZhciBhdHRhY2hUbyA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiAmJiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoZ2xvYmFsKTtcbiAgICBhdHRhY2hUbyA9IGF0dGFjaFRvICYmIGF0dGFjaFRvLnNldFRpbWVvdXQgPyBhdHRhY2hUbyA6IGdsb2JhbDtcblxuICAgIC8vIERvbid0IGdldCBmb29sZWQgYnkgZS5nLiBicm93c2VyaWZ5IGVudmlyb25tZW50cy5cbiAgICBpZiAoe30udG9TdHJpbmcuY2FsbChnbG9iYWwucHJvY2VzcykgPT09IFwiW29iamVjdCBwcm9jZXNzXVwiKSB7XG4gICAgICAgIC8vIEZvciBOb2RlLmpzIGJlZm9yZSAwLjlcbiAgICAgICAgaW5zdGFsbE5leHRUaWNrSW1wbGVtZW50YXRpb24oKTtcblxuICAgIH0gZWxzZSBpZiAoY2FuVXNlUG9zdE1lc3NhZ2UoKSkge1xuICAgICAgICAvLyBGb3Igbm9uLUlFMTAgbW9kZXJuIGJyb3dzZXJzXG4gICAgICAgIGluc3RhbGxQb3N0TWVzc2FnZUltcGxlbWVudGF0aW9uKCk7XG5cbiAgICB9IGVsc2UgaWYgKGdsb2JhbC5NZXNzYWdlQ2hhbm5lbCkge1xuICAgICAgICAvLyBGb3Igd2ViIHdvcmtlcnMsIHdoZXJlIHN1cHBvcnRlZFxuICAgICAgICBpbnN0YWxsTWVzc2FnZUNoYW5uZWxJbXBsZW1lbnRhdGlvbigpO1xuXG4gICAgfSBlbHNlIGlmIChkb2MgJiYgXCJvbnJlYWR5c3RhdGVjaGFuZ2VcIiBpbiBkb2MuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKSkge1xuICAgICAgICAvLyBGb3IgSUUgNuKAkzhcbiAgICAgICAgaW5zdGFsbFJlYWR5U3RhdGVDaGFuZ2VJbXBsZW1lbnRhdGlvbigpO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gRm9yIG9sZGVyIGJyb3dzZXJzXG4gICAgICAgIGluc3RhbGxTZXRUaW1lb3V0SW1wbGVtZW50YXRpb24oKTtcbiAgICB9XG5cbiAgICBhdHRhY2hUby5zZXRJbW1lZGlhdGUgPSBzZXRJbW1lZGlhdGU7XG4gICAgYXR0YWNoVG8uY2xlYXJJbW1lZGlhdGUgPSBjbGVhckltbWVkaWF0ZTtcbn0odHlwZW9mIHNlbGYgPT09IFwidW5kZWZpbmVkXCIgPyB0eXBlb2YgZ2xvYmFsID09PSBcInVuZGVmaW5lZFwiID8gdGhpcyA6IGdsb2JhbCA6IHNlbGYpKTtcbiIsIlxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRlcHJlY2F0ZTtcblxuLyoqXG4gKiBNYXJrIHRoYXQgYSBtZXRob2Qgc2hvdWxkIG5vdCBiZSB1c2VkLlxuICogUmV0dXJucyBhIG1vZGlmaWVkIGZ1bmN0aW9uIHdoaWNoIHdhcm5zIG9uY2UgYnkgZGVmYXVsdC5cbiAqXG4gKiBJZiBgbG9jYWxTdG9yYWdlLm5vRGVwcmVjYXRpb24gPSB0cnVlYCBpcyBzZXQsIHRoZW4gaXQgaXMgYSBuby1vcC5cbiAqXG4gKiBJZiBgbG9jYWxTdG9yYWdlLnRocm93RGVwcmVjYXRpb24gPSB0cnVlYCBpcyBzZXQsIHRoZW4gZGVwcmVjYXRlZCBmdW5jdGlvbnNcbiAqIHdpbGwgdGhyb3cgYW4gRXJyb3Igd2hlbiBpbnZva2VkLlxuICpcbiAqIElmIGBsb2NhbFN0b3JhZ2UudHJhY2VEZXByZWNhdGlvbiA9IHRydWVgIGlzIHNldCwgdGhlbiBkZXByZWNhdGVkIGZ1bmN0aW9uc1xuICogd2lsbCBpbnZva2UgYGNvbnNvbGUudHJhY2UoKWAgaW5zdGVhZCBvZiBgY29uc29sZS5lcnJvcigpYC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiAtIHRoZSBmdW5jdGlvbiB0byBkZXByZWNhdGVcbiAqIEBwYXJhbSB7U3RyaW5nfSBtc2cgLSB0aGUgc3RyaW5nIHRvIHByaW50IHRvIHRoZSBjb25zb2xlIHdoZW4gYGZuYCBpcyBpbnZva2VkXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IGEgbmV3IFwiZGVwcmVjYXRlZFwiIHZlcnNpb24gb2YgYGZuYFxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBkZXByZWNhdGUgKGZuLCBtc2cpIHtcbiAgaWYgKGNvbmZpZygnbm9EZXByZWNhdGlvbicpKSB7XG4gICAgcmV0dXJuIGZuO1xuICB9XG5cbiAgdmFyIHdhcm5lZCA9IGZhbHNlO1xuICBmdW5jdGlvbiBkZXByZWNhdGVkKCkge1xuICAgIGlmICghd2FybmVkKSB7XG4gICAgICBpZiAoY29uZmlnKCd0aHJvd0RlcHJlY2F0aW9uJykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gICAgICB9IGVsc2UgaWYgKGNvbmZpZygndHJhY2VEZXByZWNhdGlvbicpKSB7XG4gICAgICAgIGNvbnNvbGUudHJhY2UobXNnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUud2Fybihtc2cpO1xuICAgICAgfVxuICAgICAgd2FybmVkID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICByZXR1cm4gZGVwcmVjYXRlZDtcbn1cblxuLyoqXG4gKiBDaGVja3MgYGxvY2FsU3RvcmFnZWAgZm9yIGJvb2xlYW4gdmFsdWVzIGZvciB0aGUgZ2l2ZW4gYG5hbWVgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGNvbmZpZyAobmFtZSkge1xuICAvLyBhY2Nlc3NpbmcgZ2xvYmFsLmxvY2FsU3RvcmFnZSBjYW4gdHJpZ2dlciBhIERPTUV4Y2VwdGlvbiBpbiBzYW5kYm94ZWQgaWZyYW1lc1xuICB0cnkge1xuICAgIGlmICghZ2xvYmFsLmxvY2FsU3RvcmFnZSkgcmV0dXJuIGZhbHNlO1xuICB9IGNhdGNoIChfKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciB2YWwgPSBnbG9iYWwubG9jYWxTdG9yYWdlW25hbWVdO1xuICBpZiAobnVsbCA9PSB2YWwpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIFN0cmluZyh2YWwpLnRvTG93ZXJDYXNlKCkgPT09ICd0cnVlJztcbn1cbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4vLyBhIHBhc3N0aHJvdWdoIHN0cmVhbS5cbi8vIGJhc2ljYWxseSBqdXN0IHRoZSBtb3N0IG1pbmltYWwgc29ydCBvZiBUcmFuc2Zvcm0gc3RyZWFtLlxuLy8gRXZlcnkgd3JpdHRlbiBjaHVuayBnZXRzIG91dHB1dCBhcy1pcy5cblxuJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFBhc3NUaHJvdWdoO1xuXG52YXIgVHJhbnNmb3JtID0gcmVxdWlyZSgnLi9fc3RyZWFtX3RyYW5zZm9ybScpO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIHV0aWwgPSByZXF1aXJlKCdjb3JlLXV0aWwtaXMnKTtcbnV0aWwuaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbnV0aWwuaW5oZXJpdHMoUGFzc1Rocm91Z2gsIFRyYW5zZm9ybSk7XG5cbmZ1bmN0aW9uIFBhc3NUaHJvdWdoKG9wdGlvbnMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFBhc3NUaHJvdWdoKSkgcmV0dXJuIG5ldyBQYXNzVGhyb3VnaChvcHRpb25zKTtcblxuICBUcmFuc2Zvcm0uY2FsbCh0aGlzLCBvcHRpb25zKTtcbn1cblxuUGFzc1Rocm91Z2gucHJvdG90eXBlLl90cmFuc2Zvcm0gPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYikge1xuICBjYihudWxsLCBjaHVuayk7XG59OyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvX3N0cmVhbV93cml0YWJsZS5qcycpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX2R1cGxleC5qcycpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL3JlYWRhYmxlJykuVHJhbnNmb3JtXG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vcmVhZGFibGUnKS5QYXNzVGhyb3VnaFxuIiwiLypcbiAqIEEgSmF2YVNjcmlwdCBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgU2VjdXJlIEhhc2ggQWxnb3JpdGhtLCBTSEEtMCwgYXMgZGVmaW5lZFxuICogaW4gRklQUyBQVUIgMTgwLTFcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgZGVyaXZlZCBmcm9tIHNoYTEuanMgb2YgdGhlIHNhbWUgcmVwb3NpdG9yeS5cbiAqIFRoZSBkaWZmZXJlbmNlIGJldHdlZW4gU0hBLTAgYW5kIFNIQS0xIGlzIGp1c3QgYSBiaXR3aXNlIHJvdGF0ZSBsZWZ0XG4gKiBvcGVyYXRpb24gd2FzIGFkZGVkLlxuICovXG5cbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBIYXNoID0gcmVxdWlyZSgnLi9oYXNoJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxuXG52YXIgSyA9IFtcbiAgMHg1YTgyNzk5OSwgMHg2ZWQ5ZWJhMSwgMHg4ZjFiYmNkYyB8IDAsIDB4Y2E2MmMxZDYgfCAwXG5dXG5cbnZhciBXID0gbmV3IEFycmF5KDgwKVxuXG5mdW5jdGlvbiBTaGEgKCkge1xuICB0aGlzLmluaXQoKVxuICB0aGlzLl93ID0gV1xuXG4gIEhhc2guY2FsbCh0aGlzLCA2NCwgNTYpXG59XG5cbmluaGVyaXRzKFNoYSwgSGFzaClcblxuU2hhLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLl9hID0gMHg2NzQ1MjMwMVxuICB0aGlzLl9iID0gMHhlZmNkYWI4OVxuICB0aGlzLl9jID0gMHg5OGJhZGNmZVxuICB0aGlzLl9kID0gMHgxMDMyNTQ3NlxuICB0aGlzLl9lID0gMHhjM2QyZTFmMFxuXG4gIHJldHVybiB0aGlzXG59XG5cbmZ1bmN0aW9uIHJvdGw1IChudW0pIHtcbiAgcmV0dXJuIChudW0gPDwgNSkgfCAobnVtID4+PiAyNylcbn1cblxuZnVuY3Rpb24gcm90bDMwIChudW0pIHtcbiAgcmV0dXJuIChudW0gPDwgMzApIHwgKG51bSA+Pj4gMilcbn1cblxuZnVuY3Rpb24gZnQgKHMsIGIsIGMsIGQpIHtcbiAgaWYgKHMgPT09IDApIHJldHVybiAoYiAmIGMpIHwgKCh+YikgJiBkKVxuICBpZiAocyA9PT0gMikgcmV0dXJuIChiICYgYykgfCAoYiAmIGQpIHwgKGMgJiBkKVxuICByZXR1cm4gYiBeIGMgXiBkXG59XG5cblNoYS5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIChNKSB7XG4gIHZhciBXID0gdGhpcy5fd1xuXG4gIHZhciBhID0gdGhpcy5fYSB8IDBcbiAgdmFyIGIgPSB0aGlzLl9iIHwgMFxuICB2YXIgYyA9IHRoaXMuX2MgfCAwXG4gIHZhciBkID0gdGhpcy5fZCB8IDBcbiAgdmFyIGUgPSB0aGlzLl9lIHwgMFxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgMTY7ICsraSkgV1tpXSA9IE0ucmVhZEludDMyQkUoaSAqIDQpXG4gIGZvciAoOyBpIDwgODA7ICsraSkgV1tpXSA9IFdbaSAtIDNdIF4gV1tpIC0gOF0gXiBXW2kgLSAxNF0gXiBXW2kgLSAxNl1cblxuICBmb3IgKHZhciBqID0gMDsgaiA8IDgwOyArK2opIHtcbiAgICB2YXIgcyA9IH5+KGogLyAyMClcbiAgICB2YXIgdCA9IChyb3RsNShhKSArIGZ0KHMsIGIsIGMsIGQpICsgZSArIFdbal0gKyBLW3NdKSB8IDBcblxuICAgIGUgPSBkXG4gICAgZCA9IGNcbiAgICBjID0gcm90bDMwKGIpXG4gICAgYiA9IGFcbiAgICBhID0gdFxuICB9XG5cbiAgdGhpcy5fYSA9IChhICsgdGhpcy5fYSkgfCAwXG4gIHRoaXMuX2IgPSAoYiArIHRoaXMuX2IpIHwgMFxuICB0aGlzLl9jID0gKGMgKyB0aGlzLl9jKSB8IDBcbiAgdGhpcy5fZCA9IChkICsgdGhpcy5fZCkgfCAwXG4gIHRoaXMuX2UgPSAoZSArIHRoaXMuX2UpIHwgMFxufVxuXG5TaGEucHJvdG90eXBlLl9oYXNoID0gZnVuY3Rpb24gKCkge1xuICB2YXIgSCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgyMClcblxuICBILndyaXRlSW50MzJCRSh0aGlzLl9hIHwgMCwgMClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fYiB8IDAsIDQpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2MgfCAwLCA4KVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9kIHwgMCwgMTIpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2UgfCAwLCAxNilcblxuICByZXR1cm4gSFxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFNoYVxuIiwiLypcbiAqIEEgSmF2YVNjcmlwdCBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgU2VjdXJlIEhhc2ggQWxnb3JpdGhtLCBTSEEtMSwgYXMgZGVmaW5lZFxuICogaW4gRklQUyBQVUIgMTgwLTFcbiAqIFZlcnNpb24gMi4xYSBDb3B5cmlnaHQgUGF1bCBKb2huc3RvbiAyMDAwIC0gMjAwMi5cbiAqIE90aGVyIGNvbnRyaWJ1dG9yczogR3JlZyBIb2x0LCBBbmRyZXcgS2VwZXJ0LCBZZG5hciwgTG9zdGluZXRcbiAqIERpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCU0QgTGljZW5zZVxuICogU2VlIGh0dHA6Ly9wYWpob21lLm9yZy51ay9jcnlwdC9tZDUgZm9yIGRldGFpbHMuXG4gKi9cblxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIEhhc2ggPSByZXF1aXJlKCcuL2hhc2gnKVxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG5cbnZhciBLID0gW1xuICAweDVhODI3OTk5LCAweDZlZDllYmExLCAweDhmMWJiY2RjIHwgMCwgMHhjYTYyYzFkNiB8IDBcbl1cblxudmFyIFcgPSBuZXcgQXJyYXkoODApXG5cbmZ1bmN0aW9uIFNoYTEgKCkge1xuICB0aGlzLmluaXQoKVxuICB0aGlzLl93ID0gV1xuXG4gIEhhc2guY2FsbCh0aGlzLCA2NCwgNTYpXG59XG5cbmluaGVyaXRzKFNoYTEsIEhhc2gpXG5cblNoYTEucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuX2EgPSAweDY3NDUyMzAxXG4gIHRoaXMuX2IgPSAweGVmY2RhYjg5XG4gIHRoaXMuX2MgPSAweDk4YmFkY2ZlXG4gIHRoaXMuX2QgPSAweDEwMzI1NDc2XG4gIHRoaXMuX2UgPSAweGMzZDJlMWYwXG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuZnVuY3Rpb24gcm90bDEgKG51bSkge1xuICByZXR1cm4gKG51bSA8PCAxKSB8IChudW0gPj4+IDMxKVxufVxuXG5mdW5jdGlvbiByb3RsNSAobnVtKSB7XG4gIHJldHVybiAobnVtIDw8IDUpIHwgKG51bSA+Pj4gMjcpXG59XG5cbmZ1bmN0aW9uIHJvdGwzMCAobnVtKSB7XG4gIHJldHVybiAobnVtIDw8IDMwKSB8IChudW0gPj4+IDIpXG59XG5cbmZ1bmN0aW9uIGZ0IChzLCBiLCBjLCBkKSB7XG4gIGlmIChzID09PSAwKSByZXR1cm4gKGIgJiBjKSB8ICgofmIpICYgZClcbiAgaWYgKHMgPT09IDIpIHJldHVybiAoYiAmIGMpIHwgKGIgJiBkKSB8IChjICYgZClcbiAgcmV0dXJuIGIgXiBjIF4gZFxufVxuXG5TaGExLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKE0pIHtcbiAgdmFyIFcgPSB0aGlzLl93XG5cbiAgdmFyIGEgPSB0aGlzLl9hIHwgMFxuICB2YXIgYiA9IHRoaXMuX2IgfCAwXG4gIHZhciBjID0gdGhpcy5fYyB8IDBcbiAgdmFyIGQgPSB0aGlzLl9kIHwgMFxuICB2YXIgZSA9IHRoaXMuX2UgfCAwXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCAxNjsgKytpKSBXW2ldID0gTS5yZWFkSW50MzJCRShpICogNClcbiAgZm9yICg7IGkgPCA4MDsgKytpKSBXW2ldID0gcm90bDEoV1tpIC0gM10gXiBXW2kgLSA4XSBeIFdbaSAtIDE0XSBeIFdbaSAtIDE2XSlcblxuICBmb3IgKHZhciBqID0gMDsgaiA8IDgwOyArK2opIHtcbiAgICB2YXIgcyA9IH5+KGogLyAyMClcbiAgICB2YXIgdCA9IChyb3RsNShhKSArIGZ0KHMsIGIsIGMsIGQpICsgZSArIFdbal0gKyBLW3NdKSB8IDBcblxuICAgIGUgPSBkXG4gICAgZCA9IGNcbiAgICBjID0gcm90bDMwKGIpXG4gICAgYiA9IGFcbiAgICBhID0gdFxuICB9XG5cbiAgdGhpcy5fYSA9IChhICsgdGhpcy5fYSkgfCAwXG4gIHRoaXMuX2IgPSAoYiArIHRoaXMuX2IpIHwgMFxuICB0aGlzLl9jID0gKGMgKyB0aGlzLl9jKSB8IDBcbiAgdGhpcy5fZCA9IChkICsgdGhpcy5fZCkgfCAwXG4gIHRoaXMuX2UgPSAoZSArIHRoaXMuX2UpIHwgMFxufVxuXG5TaGExLnByb3RvdHlwZS5faGFzaCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIEggPSBCdWZmZXIuYWxsb2NVbnNhZmUoMjApXG5cbiAgSC53cml0ZUludDMyQkUodGhpcy5fYSB8IDAsIDApXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2IgfCAwLCA0KVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9jIHwgMCwgOClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fZCB8IDAsIDEyKVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9lIHwgMCwgMTYpXG5cbiAgcmV0dXJuIEhcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTaGExXG4iLCIvKipcbiAqIEEgSmF2YVNjcmlwdCBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgU2VjdXJlIEhhc2ggQWxnb3JpdGhtLCBTSEEtMjU2LCBhcyBkZWZpbmVkXG4gKiBpbiBGSVBTIDE4MC0yXG4gKiBWZXJzaW9uIDIuMi1iZXRhIENvcHlyaWdodCBBbmdlbCBNYXJpbiwgUGF1bCBKb2huc3RvbiAyMDAwIC0gMjAwOS5cbiAqIE90aGVyIGNvbnRyaWJ1dG9yczogR3JlZyBIb2x0LCBBbmRyZXcgS2VwZXJ0LCBZZG5hciwgTG9zdGluZXRcbiAqXG4gKi9cblxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIFNoYTI1NiA9IHJlcXVpcmUoJy4vc2hhMjU2JylcbnZhciBIYXNoID0gcmVxdWlyZSgnLi9oYXNoJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxuXG52YXIgVyA9IG5ldyBBcnJheSg2NClcblxuZnVuY3Rpb24gU2hhMjI0ICgpIHtcbiAgdGhpcy5pbml0KClcblxuICB0aGlzLl93ID0gVyAvLyBuZXcgQXJyYXkoNjQpXG5cbiAgSGFzaC5jYWxsKHRoaXMsIDY0LCA1Nilcbn1cblxuaW5oZXJpdHMoU2hhMjI0LCBTaGEyNTYpXG5cblNoYTIyNC5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5fYSA9IDB4YzEwNTllZDhcbiAgdGhpcy5fYiA9IDB4MzY3Y2Q1MDdcbiAgdGhpcy5fYyA9IDB4MzA3MGRkMTdcbiAgdGhpcy5fZCA9IDB4ZjcwZTU5MzlcbiAgdGhpcy5fZSA9IDB4ZmZjMDBiMzFcbiAgdGhpcy5fZiA9IDB4Njg1ODE1MTFcbiAgdGhpcy5fZyA9IDB4NjRmOThmYTdcbiAgdGhpcy5faCA9IDB4YmVmYTRmYTRcblxuICByZXR1cm4gdGhpc1xufVxuXG5TaGEyMjQucHJvdG90eXBlLl9oYXNoID0gZnVuY3Rpb24gKCkge1xuICB2YXIgSCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgyOClcblxuICBILndyaXRlSW50MzJCRSh0aGlzLl9hLCAwKVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9iLCA0KVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9jLCA4KVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9kLCAxMilcbiAgSC53cml0ZUludDMyQkUodGhpcy5fZSwgMTYpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2YsIDIwKVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9nLCAyNClcblxuICByZXR1cm4gSFxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFNoYTIyNFxuIiwidmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIFNIQTUxMiA9IHJlcXVpcmUoJy4vc2hhNTEyJylcbnZhciBIYXNoID0gcmVxdWlyZSgnLi9oYXNoJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxuXG52YXIgVyA9IG5ldyBBcnJheSgxNjApXG5cbmZ1bmN0aW9uIFNoYTM4NCAoKSB7XG4gIHRoaXMuaW5pdCgpXG4gIHRoaXMuX3cgPSBXXG5cbiAgSGFzaC5jYWxsKHRoaXMsIDEyOCwgMTEyKVxufVxuXG5pbmhlcml0cyhTaGEzODQsIFNIQTUxMilcblxuU2hhMzg0LnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLl9haCA9IDB4Y2JiYjlkNWRcbiAgdGhpcy5fYmggPSAweDYyOWEyOTJhXG4gIHRoaXMuX2NoID0gMHg5MTU5MDE1YVxuICB0aGlzLl9kaCA9IDB4MTUyZmVjZDhcbiAgdGhpcy5fZWggPSAweDY3MzMyNjY3XG4gIHRoaXMuX2ZoID0gMHg4ZWI0NGE4N1xuICB0aGlzLl9naCA9IDB4ZGIwYzJlMGRcbiAgdGhpcy5faGggPSAweDQ3YjU0ODFkXG5cbiAgdGhpcy5fYWwgPSAweGMxMDU5ZWQ4XG4gIHRoaXMuX2JsID0gMHgzNjdjZDUwN1xuICB0aGlzLl9jbCA9IDB4MzA3MGRkMTdcbiAgdGhpcy5fZGwgPSAweGY3MGU1OTM5XG4gIHRoaXMuX2VsID0gMHhmZmMwMGIzMVxuICB0aGlzLl9mbCA9IDB4Njg1ODE1MTFcbiAgdGhpcy5fZ2wgPSAweDY0Zjk4ZmE3XG4gIHRoaXMuX2hsID0gMHhiZWZhNGZhNFxuXG4gIHJldHVybiB0aGlzXG59XG5cblNoYTM4NC5wcm90b3R5cGUuX2hhc2ggPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBIID0gQnVmZmVyLmFsbG9jVW5zYWZlKDQ4KVxuXG4gIGZ1bmN0aW9uIHdyaXRlSW50NjRCRSAoaCwgbCwgb2Zmc2V0KSB7XG4gICAgSC53cml0ZUludDMyQkUoaCwgb2Zmc2V0KVxuICAgIEgud3JpdGVJbnQzMkJFKGwsIG9mZnNldCArIDQpXG4gIH1cblxuICB3cml0ZUludDY0QkUodGhpcy5fYWgsIHRoaXMuX2FsLCAwKVxuICB3cml0ZUludDY0QkUodGhpcy5fYmgsIHRoaXMuX2JsLCA4KVxuICB3cml0ZUludDY0QkUodGhpcy5fY2gsIHRoaXMuX2NsLCAxNilcbiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2RoLCB0aGlzLl9kbCwgMjQpXG4gIHdyaXRlSW50NjRCRSh0aGlzLl9laCwgdGhpcy5fZWwsIDMyKVxuICB3cml0ZUludDY0QkUodGhpcy5fZmgsIHRoaXMuX2ZsLCA0MClcblxuICByZXR1cm4gSFxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFNoYTM4NFxuIiwiJ3VzZSBzdHJpY3QnXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcblxudmFyIEJhc2UgPSByZXF1aXJlKCdjaXBoZXItYmFzZScpXG5cbnZhciBaRVJPUyA9IEJ1ZmZlci5hbGxvYygxMjgpXG52YXIgYmxvY2tzaXplID0gNjRcblxuZnVuY3Rpb24gSG1hYyAoYWxnLCBrZXkpIHtcbiAgQmFzZS5jYWxsKHRoaXMsICdkaWdlc3QnKVxuICBpZiAodHlwZW9mIGtleSA9PT0gJ3N0cmluZycpIHtcbiAgICBrZXkgPSBCdWZmZXIuZnJvbShrZXkpXG4gIH1cblxuICB0aGlzLl9hbGcgPSBhbGdcbiAgdGhpcy5fa2V5ID0ga2V5XG5cbiAgaWYgKGtleS5sZW5ndGggPiBibG9ja3NpemUpIHtcbiAgICBrZXkgPSBhbGcoa2V5KVxuICB9IGVsc2UgaWYgKGtleS5sZW5ndGggPCBibG9ja3NpemUpIHtcbiAgICBrZXkgPSBCdWZmZXIuY29uY2F0KFtrZXksIFpFUk9TXSwgYmxvY2tzaXplKVxuICB9XG5cbiAgdmFyIGlwYWQgPSB0aGlzLl9pcGFkID0gQnVmZmVyLmFsbG9jVW5zYWZlKGJsb2Nrc2l6ZSlcbiAgdmFyIG9wYWQgPSB0aGlzLl9vcGFkID0gQnVmZmVyLmFsbG9jVW5zYWZlKGJsb2Nrc2l6ZSlcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGJsb2Nrc2l6ZTsgaSsrKSB7XG4gICAgaXBhZFtpXSA9IGtleVtpXSBeIDB4MzZcbiAgICBvcGFkW2ldID0ga2V5W2ldIF4gMHg1Q1xuICB9XG5cbiAgdGhpcy5faGFzaCA9IFtpcGFkXVxufVxuXG5pbmhlcml0cyhIbWFjLCBCYXNlKVxuXG5IbWFjLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdGhpcy5faGFzaC5wdXNoKGRhdGEpXG59XG5cbkhtYWMucHJvdG90eXBlLl9maW5hbCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGggPSB0aGlzLl9hbGcoQnVmZmVyLmNvbmNhdCh0aGlzLl9oYXNoKSlcbiAgcmV0dXJuIHRoaXMuX2FsZyhCdWZmZXIuY29uY2F0KFt0aGlzLl9vcGFkLCBoXSkpXG59XG5tb2R1bGUuZXhwb3J0cyA9IEhtYWNcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9icm93c2VyL2FsZ29yaXRobXMuanNvbicpXG4iLCJ2YXIgY2hlY2tQYXJhbWV0ZXJzID0gcmVxdWlyZSgnLi9wcmVjb25kaXRpb24nKVxudmFyIGRlZmF1bHRFbmNvZGluZyA9IHJlcXVpcmUoJy4vZGVmYXVsdC1lbmNvZGluZycpXG52YXIgc3luYyA9IHJlcXVpcmUoJy4vc3luYycpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcblxudmFyIFpFUk9fQlVGXG52YXIgc3VidGxlID0gZ2xvYmFsLmNyeXB0byAmJiBnbG9iYWwuY3J5cHRvLnN1YnRsZVxudmFyIHRvQnJvd3NlciA9IHtcbiAgJ3NoYSc6ICdTSEEtMScsXG4gICdzaGEtMSc6ICdTSEEtMScsXG4gICdzaGExJzogJ1NIQS0xJyxcbiAgJ3NoYTI1Nic6ICdTSEEtMjU2JyxcbiAgJ3NoYS0yNTYnOiAnU0hBLTI1NicsXG4gICdzaGEzODQnOiAnU0hBLTM4NCcsXG4gICdzaGEtMzg0JzogJ1NIQS0zODQnLFxuICAnc2hhLTUxMic6ICdTSEEtNTEyJyxcbiAgJ3NoYTUxMic6ICdTSEEtNTEyJ1xufVxudmFyIGNoZWNrcyA9IFtdXG5mdW5jdGlvbiBjaGVja05hdGl2ZSAoYWxnbykge1xuICBpZiAoZ2xvYmFsLnByb2Nlc3MgJiYgIWdsb2JhbC5wcm9jZXNzLmJyb3dzZXIpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGZhbHNlKVxuICB9XG4gIGlmICghc3VidGxlIHx8ICFzdWJ0bGUuaW1wb3J0S2V5IHx8ICFzdWJ0bGUuZGVyaXZlQml0cykge1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoZmFsc2UpXG4gIH1cbiAgaWYgKGNoZWNrc1thbGdvXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGNoZWNrc1thbGdvXVxuICB9XG4gIFpFUk9fQlVGID0gWkVST19CVUYgfHwgQnVmZmVyLmFsbG9jKDgpXG4gIHZhciBwcm9tID0gYnJvd3NlclBia2RmMihaRVJPX0JVRiwgWkVST19CVUYsIDEwLCAxMjgsIGFsZ28pXG4gICAgLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9KS5jYXRjaChmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9KVxuICBjaGVja3NbYWxnb10gPSBwcm9tXG4gIHJldHVybiBwcm9tXG59XG5cbmZ1bmN0aW9uIGJyb3dzZXJQYmtkZjIgKHBhc3N3b3JkLCBzYWx0LCBpdGVyYXRpb25zLCBsZW5ndGgsIGFsZ28pIHtcbiAgcmV0dXJuIHN1YnRsZS5pbXBvcnRLZXkoXG4gICAgJ3JhdycsIHBhc3N3b3JkLCB7bmFtZTogJ1BCS0RGMid9LCBmYWxzZSwgWydkZXJpdmVCaXRzJ11cbiAgKS50aGVuKGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gc3VidGxlLmRlcml2ZUJpdHMoe1xuICAgICAgbmFtZTogJ1BCS0RGMicsXG4gICAgICBzYWx0OiBzYWx0LFxuICAgICAgaXRlcmF0aW9uczogaXRlcmF0aW9ucyxcbiAgICAgIGhhc2g6IHtcbiAgICAgICAgbmFtZTogYWxnb1xuICAgICAgfVxuICAgIH0sIGtleSwgbGVuZ3RoIDw8IDMpXG4gIH0pLnRoZW4oZnVuY3Rpb24gKHJlcykge1xuICAgIHJldHVybiBCdWZmZXIuZnJvbShyZXMpXG4gIH0pXG59XG5cbmZ1bmN0aW9uIHJlc29sdmVQcm9taXNlIChwcm9taXNlLCBjYWxsYmFjaykge1xuICBwcm9taXNlLnRoZW4oZnVuY3Rpb24gKG91dCkge1xuICAgIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgY2FsbGJhY2sobnVsbCwgb3V0KVxuICAgIH0pXG4gIH0sIGZ1bmN0aW9uIChlKSB7XG4gICAgcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgICBjYWxsYmFjayhlKVxuICAgIH0pXG4gIH0pXG59XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChwYXNzd29yZCwgc2FsdCwgaXRlcmF0aW9ucywga2V5bGVuLCBkaWdlc3QsIGNhbGxiYWNrKSB7XG4gIGlmICh0eXBlb2YgZGlnZXN0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2FsbGJhY2sgPSBkaWdlc3RcbiAgICBkaWdlc3QgPSB1bmRlZmluZWRcbiAgfVxuXG4gIGRpZ2VzdCA9IGRpZ2VzdCB8fCAnc2hhMSdcbiAgdmFyIGFsZ28gPSB0b0Jyb3dzZXJbZGlnZXN0LnRvTG93ZXJDYXNlKCldXG5cbiAgaWYgKCFhbGdvIHx8IHR5cGVvZiBnbG9iYWwuUHJvbWlzZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBvdXRcbiAgICAgIHRyeSB7XG4gICAgICAgIG91dCA9IHN5bmMocGFzc3dvcmQsIHNhbHQsIGl0ZXJhdGlvbnMsIGtleWxlbiwgZGlnZXN0KVxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gY2FsbGJhY2soZSlcbiAgICAgIH1cbiAgICAgIGNhbGxiYWNrKG51bGwsIG91dClcbiAgICB9KVxuICB9XG5cbiAgY2hlY2tQYXJhbWV0ZXJzKHBhc3N3b3JkLCBzYWx0LCBpdGVyYXRpb25zLCBrZXlsZW4pXG4gIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09ICdmdW5jdGlvbicpIHRocm93IG5ldyBFcnJvcignTm8gY2FsbGJhY2sgcHJvdmlkZWQgdG8gcGJrZGYyJylcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIocGFzc3dvcmQpKSBwYXNzd29yZCA9IEJ1ZmZlci5mcm9tKHBhc3N3b3JkLCBkZWZhdWx0RW5jb2RpbmcpXG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHNhbHQpKSBzYWx0ID0gQnVmZmVyLmZyb20oc2FsdCwgZGVmYXVsdEVuY29kaW5nKVxuXG4gIHJlc29sdmVQcm9taXNlKGNoZWNrTmF0aXZlKGFsZ28pLnRoZW4oZnVuY3Rpb24gKHJlc3ApIHtcbiAgICBpZiAocmVzcCkgcmV0dXJuIGJyb3dzZXJQYmtkZjIocGFzc3dvcmQsIHNhbHQsIGl0ZXJhdGlvbnMsIGtleWxlbiwgYWxnbylcblxuICAgIHJldHVybiBzeW5jKHBhc3N3b3JkLCBzYWx0LCBpdGVyYXRpb25zLCBrZXlsZW4sIGRpZ2VzdClcbiAgfSksIGNhbGxiYWNrKVxufVxuIiwidmFyIERFUyA9IHJlcXVpcmUoJ2Jyb3dzZXJpZnktZGVzJylcbnZhciBhZXMgPSByZXF1aXJlKCdicm93c2VyaWZ5LWFlcy9icm93c2VyJylcbnZhciBhZXNNb2RlcyA9IHJlcXVpcmUoJ2Jyb3dzZXJpZnktYWVzL21vZGVzJylcbnZhciBkZXNNb2RlcyA9IHJlcXVpcmUoJ2Jyb3dzZXJpZnktZGVzL21vZGVzJylcbnZhciBlYnRrID0gcmVxdWlyZSgnZXZwX2J5dGVzdG9rZXknKVxuXG5mdW5jdGlvbiBjcmVhdGVDaXBoZXIgKHN1aXRlLCBwYXNzd29yZCkge1xuICBzdWl0ZSA9IHN1aXRlLnRvTG93ZXJDYXNlKClcblxuICB2YXIga2V5TGVuLCBpdkxlblxuICBpZiAoYWVzTW9kZXNbc3VpdGVdKSB7XG4gICAga2V5TGVuID0gYWVzTW9kZXNbc3VpdGVdLmtleVxuICAgIGl2TGVuID0gYWVzTW9kZXNbc3VpdGVdLml2XG4gIH0gZWxzZSBpZiAoZGVzTW9kZXNbc3VpdGVdKSB7XG4gICAga2V5TGVuID0gZGVzTW9kZXNbc3VpdGVdLmtleSAqIDhcbiAgICBpdkxlbiA9IGRlc01vZGVzW3N1aXRlXS5pdlxuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgc3VpdGUgdHlwZScpXG4gIH1cblxuICB2YXIga2V5cyA9IGVidGsocGFzc3dvcmQsIGZhbHNlLCBrZXlMZW4sIGl2TGVuKVxuICByZXR1cm4gY3JlYXRlQ2lwaGVyaXYoc3VpdGUsIGtleXMua2V5LCBrZXlzLml2KVxufVxuXG5mdW5jdGlvbiBjcmVhdGVEZWNpcGhlciAoc3VpdGUsIHBhc3N3b3JkKSB7XG4gIHN1aXRlID0gc3VpdGUudG9Mb3dlckNhc2UoKVxuXG4gIHZhciBrZXlMZW4sIGl2TGVuXG4gIGlmIChhZXNNb2Rlc1tzdWl0ZV0pIHtcbiAgICBrZXlMZW4gPSBhZXNNb2Rlc1tzdWl0ZV0ua2V5XG4gICAgaXZMZW4gPSBhZXNNb2Rlc1tzdWl0ZV0uaXZcbiAgfSBlbHNlIGlmIChkZXNNb2Rlc1tzdWl0ZV0pIHtcbiAgICBrZXlMZW4gPSBkZXNNb2Rlc1tzdWl0ZV0ua2V5ICogOFxuICAgIGl2TGVuID0gZGVzTW9kZXNbc3VpdGVdLml2XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBzdWl0ZSB0eXBlJylcbiAgfVxuXG4gIHZhciBrZXlzID0gZWJ0ayhwYXNzd29yZCwgZmFsc2UsIGtleUxlbiwgaXZMZW4pXG4gIHJldHVybiBjcmVhdGVEZWNpcGhlcml2KHN1aXRlLCBrZXlzLmtleSwga2V5cy5pdilcbn1cblxuZnVuY3Rpb24gY3JlYXRlQ2lwaGVyaXYgKHN1aXRlLCBrZXksIGl2KSB7XG4gIHN1aXRlID0gc3VpdGUudG9Mb3dlckNhc2UoKVxuICBpZiAoYWVzTW9kZXNbc3VpdGVdKSByZXR1cm4gYWVzLmNyZWF0ZUNpcGhlcml2KHN1aXRlLCBrZXksIGl2KVxuICBpZiAoZGVzTW9kZXNbc3VpdGVdKSByZXR1cm4gbmV3IERFUyh7IGtleToga2V5LCBpdjogaXYsIG1vZGU6IHN1aXRlIH0pXG5cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBzdWl0ZSB0eXBlJylcbn1cblxuZnVuY3Rpb24gY3JlYXRlRGVjaXBoZXJpdiAoc3VpdGUsIGtleSwgaXYpIHtcbiAgc3VpdGUgPSBzdWl0ZS50b0xvd2VyQ2FzZSgpXG4gIGlmIChhZXNNb2Rlc1tzdWl0ZV0pIHJldHVybiBhZXMuY3JlYXRlRGVjaXBoZXJpdihzdWl0ZSwga2V5LCBpdilcbiAgaWYgKGRlc01vZGVzW3N1aXRlXSkgcmV0dXJuIG5ldyBERVMoeyBrZXk6IGtleSwgaXY6IGl2LCBtb2RlOiBzdWl0ZSwgZGVjcnlwdDogdHJ1ZSB9KVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgc3VpdGUgdHlwZScpXG59XG5cbmZ1bmN0aW9uIGdldENpcGhlcnMgKCkge1xuICByZXR1cm4gT2JqZWN0LmtleXMoZGVzTW9kZXMpLmNvbmNhdChhZXMuZ2V0Q2lwaGVycygpKVxufVxuXG5leHBvcnRzLmNyZWF0ZUNpcGhlciA9IGV4cG9ydHMuQ2lwaGVyID0gY3JlYXRlQ2lwaGVyXG5leHBvcnRzLmNyZWF0ZUNpcGhlcml2ID0gZXhwb3J0cy5DaXBoZXJpdiA9IGNyZWF0ZUNpcGhlcml2XG5leHBvcnRzLmNyZWF0ZURlY2lwaGVyID0gZXhwb3J0cy5EZWNpcGhlciA9IGNyZWF0ZURlY2lwaGVyXG5leHBvcnRzLmNyZWF0ZURlY2lwaGVyaXYgPSBleHBvcnRzLkRlY2lwaGVyaXYgPSBjcmVhdGVEZWNpcGhlcml2XG5leHBvcnRzLmxpc3RDaXBoZXJzID0gZXhwb3J0cy5nZXRDaXBoZXJzID0gZ2V0Q2lwaGVyc1xuIiwidmFyIENpcGhlckJhc2UgPSByZXF1aXJlKCdjaXBoZXItYmFzZScpXG52YXIgZGVzID0gcmVxdWlyZSgnZGVzLmpzJylcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxuXG52YXIgbW9kZXMgPSB7XG4gICdkZXMtZWRlMy1jYmMnOiBkZXMuQ0JDLmluc3RhbnRpYXRlKGRlcy5FREUpLFxuICAnZGVzLWVkZTMnOiBkZXMuRURFLFxuICAnZGVzLWVkZS1jYmMnOiBkZXMuQ0JDLmluc3RhbnRpYXRlKGRlcy5FREUpLFxuICAnZGVzLWVkZSc6IGRlcy5FREUsXG4gICdkZXMtY2JjJzogZGVzLkNCQy5pbnN0YW50aWF0ZShkZXMuREVTKSxcbiAgJ2Rlcy1lY2InOiBkZXMuREVTXG59XG5tb2Rlcy5kZXMgPSBtb2Rlc1snZGVzLWNiYyddXG5tb2Rlcy5kZXMzID0gbW9kZXNbJ2Rlcy1lZGUzLWNiYyddXG5tb2R1bGUuZXhwb3J0cyA9IERFU1xuaW5oZXJpdHMoREVTLCBDaXBoZXJCYXNlKVxuZnVuY3Rpb24gREVTIChvcHRzKSB7XG4gIENpcGhlckJhc2UuY2FsbCh0aGlzKVxuICB2YXIgbW9kZU5hbWUgPSBvcHRzLm1vZGUudG9Mb3dlckNhc2UoKVxuICB2YXIgbW9kZSA9IG1vZGVzW21vZGVOYW1lXVxuICB2YXIgdHlwZVxuICBpZiAob3B0cy5kZWNyeXB0KSB7XG4gICAgdHlwZSA9ICdkZWNyeXB0J1xuICB9IGVsc2Uge1xuICAgIHR5cGUgPSAnZW5jcnlwdCdcbiAgfVxuICB2YXIga2V5ID0gb3B0cy5rZXlcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoa2V5KSkge1xuICAgIGtleSA9IEJ1ZmZlci5mcm9tKGtleSlcbiAgfVxuICBpZiAobW9kZU5hbWUgPT09ICdkZXMtZWRlJyB8fCBtb2RlTmFtZSA9PT0gJ2Rlcy1lZGUtY2JjJykge1xuICAgIGtleSA9IEJ1ZmZlci5jb25jYXQoW2tleSwga2V5LnNsaWNlKDAsIDgpXSlcbiAgfVxuICB2YXIgaXYgPSBvcHRzLml2XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGl2KSkge1xuICAgIGl2ID0gQnVmZmVyLmZyb20oaXYpXG4gIH1cbiAgdGhpcy5fZGVzID0gbW9kZS5jcmVhdGUoe1xuICAgIGtleToga2V5LFxuICAgIGl2OiBpdixcbiAgICB0eXBlOiB0eXBlXG4gIH0pXG59XG5ERVMucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoZGF0YSkge1xuICByZXR1cm4gQnVmZmVyLmZyb20odGhpcy5fZGVzLnVwZGF0ZShkYXRhKSlcbn1cbkRFUy5wcm90b3R5cGUuX2ZpbmFsID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gQnVmZmVyLmZyb20odGhpcy5fZGVzLmZpbmFsKCkpXG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMucmVhZFVJbnQzMkJFID0gZnVuY3Rpb24gcmVhZFVJbnQzMkJFKGJ5dGVzLCBvZmYpIHtcbiAgdmFyIHJlcyA9ICAoYnl0ZXNbMCArIG9mZl0gPDwgMjQpIHxcbiAgICAgICAgICAgICAoYnl0ZXNbMSArIG9mZl0gPDwgMTYpIHxcbiAgICAgICAgICAgICAoYnl0ZXNbMiArIG9mZl0gPDwgOCkgfFxuICAgICAgICAgICAgIGJ5dGVzWzMgKyBvZmZdO1xuICByZXR1cm4gcmVzID4+PiAwO1xufTtcblxuZXhwb3J0cy53cml0ZVVJbnQzMkJFID0gZnVuY3Rpb24gd3JpdGVVSW50MzJCRShieXRlcywgdmFsdWUsIG9mZikge1xuICBieXRlc1swICsgb2ZmXSA9IHZhbHVlID4+PiAyNDtcbiAgYnl0ZXNbMSArIG9mZl0gPSAodmFsdWUgPj4+IDE2KSAmIDB4ZmY7XG4gIGJ5dGVzWzIgKyBvZmZdID0gKHZhbHVlID4+PiA4KSAmIDB4ZmY7XG4gIGJ5dGVzWzMgKyBvZmZdID0gdmFsdWUgJiAweGZmO1xufTtcblxuZXhwb3J0cy5pcCA9IGZ1bmN0aW9uIGlwKGluTCwgaW5SLCBvdXQsIG9mZikge1xuICB2YXIgb3V0TCA9IDA7XG4gIHZhciBvdXRSID0gMDtcblxuICBmb3IgKHZhciBpID0gNjsgaSA+PSAwOyBpIC09IDIpIHtcbiAgICBmb3IgKHZhciBqID0gMDsgaiA8PSAyNDsgaiArPSA4KSB7XG4gICAgICBvdXRMIDw8PSAxO1xuICAgICAgb3V0TCB8PSAoaW5SID4+PiAoaiArIGkpKSAmIDE7XG4gICAgfVxuICAgIGZvciAodmFyIGogPSAwOyBqIDw9IDI0OyBqICs9IDgpIHtcbiAgICAgIG91dEwgPDw9IDE7XG4gICAgICBvdXRMIHw9IChpbkwgPj4+IChqICsgaSkpICYgMTtcbiAgICB9XG4gIH1cblxuICBmb3IgKHZhciBpID0gNjsgaSA+PSAwOyBpIC09IDIpIHtcbiAgICBmb3IgKHZhciBqID0gMTsgaiA8PSAyNTsgaiArPSA4KSB7XG4gICAgICBvdXRSIDw8PSAxO1xuICAgICAgb3V0UiB8PSAoaW5SID4+PiAoaiArIGkpKSAmIDE7XG4gICAgfVxuICAgIGZvciAodmFyIGogPSAxOyBqIDw9IDI1OyBqICs9IDgpIHtcbiAgICAgIG91dFIgPDw9IDE7XG4gICAgICBvdXRSIHw9IChpbkwgPj4+IChqICsgaSkpICYgMTtcbiAgICB9XG4gIH1cblxuICBvdXRbb2ZmICsgMF0gPSBvdXRMID4+PiAwO1xuICBvdXRbb2ZmICsgMV0gPSBvdXRSID4+PiAwO1xufTtcblxuZXhwb3J0cy5yaXAgPSBmdW5jdGlvbiByaXAoaW5MLCBpblIsIG91dCwgb2ZmKSB7XG4gIHZhciBvdXRMID0gMDtcbiAgdmFyIG91dFIgPSAwO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgNDsgaSsrKSB7XG4gICAgZm9yICh2YXIgaiA9IDI0OyBqID49IDA7IGogLT0gOCkge1xuICAgICAgb3V0TCA8PD0gMTtcbiAgICAgIG91dEwgfD0gKGluUiA+Pj4gKGogKyBpKSkgJiAxO1xuICAgICAgb3V0TCA8PD0gMTtcbiAgICAgIG91dEwgfD0gKGluTCA+Pj4gKGogKyBpKSkgJiAxO1xuICAgIH1cbiAgfVxuICBmb3IgKHZhciBpID0gNDsgaSA8IDg7IGkrKykge1xuICAgIGZvciAodmFyIGogPSAyNDsgaiA+PSAwOyBqIC09IDgpIHtcbiAgICAgIG91dFIgPDw9IDE7XG4gICAgICBvdXRSIHw9IChpblIgPj4+IChqICsgaSkpICYgMTtcbiAgICAgIG91dFIgPDw9IDE7XG4gICAgICBvdXRSIHw9IChpbkwgPj4+IChqICsgaSkpICYgMTtcbiAgICB9XG4gIH1cblxuICBvdXRbb2ZmICsgMF0gPSBvdXRMID4+PiAwO1xuICBvdXRbb2ZmICsgMV0gPSBvdXRSID4+PiAwO1xufTtcblxuZXhwb3J0cy5wYzEgPSBmdW5jdGlvbiBwYzEoaW5MLCBpblIsIG91dCwgb2ZmKSB7XG4gIHZhciBvdXRMID0gMDtcbiAgdmFyIG91dFIgPSAwO1xuXG4gIC8vIDcsIDE1LCAyMywgMzEsIDM5LCA0NywgNTUsIDYzXG4gIC8vIDYsIDE0LCAyMiwgMzAsIDM5LCA0NywgNTUsIDYzXG4gIC8vIDUsIDEzLCAyMSwgMjksIDM5LCA0NywgNTUsIDYzXG4gIC8vIDQsIDEyLCAyMCwgMjhcbiAgZm9yICh2YXIgaSA9IDc7IGkgPj0gNTsgaS0tKSB7XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPD0gMjQ7IGogKz0gOCkge1xuICAgICAgb3V0TCA8PD0gMTtcbiAgICAgIG91dEwgfD0gKGluUiA+PiAoaiArIGkpKSAmIDE7XG4gICAgfVxuICAgIGZvciAodmFyIGogPSAwOyBqIDw9IDI0OyBqICs9IDgpIHtcbiAgICAgIG91dEwgPDw9IDE7XG4gICAgICBvdXRMIHw9IChpbkwgPj4gKGogKyBpKSkgJiAxO1xuICAgIH1cbiAgfVxuICBmb3IgKHZhciBqID0gMDsgaiA8PSAyNDsgaiArPSA4KSB7XG4gICAgb3V0TCA8PD0gMTtcbiAgICBvdXRMIHw9IChpblIgPj4gKGogKyBpKSkgJiAxO1xuICB9XG5cbiAgLy8gMSwgOSwgMTcsIDI1LCAzMywgNDEsIDQ5LCA1N1xuICAvLyAyLCAxMCwgMTgsIDI2LCAzNCwgNDIsIDUwLCA1OFxuICAvLyAzLCAxMSwgMTksIDI3LCAzNSwgNDMsIDUxLCA1OVxuICAvLyAzNiwgNDQsIDUyLCA2MFxuICBmb3IgKHZhciBpID0gMTsgaSA8PSAzOyBpKyspIHtcbiAgICBmb3IgKHZhciBqID0gMDsgaiA8PSAyNDsgaiArPSA4KSB7XG4gICAgICBvdXRSIDw8PSAxO1xuICAgICAgb3V0UiB8PSAoaW5SID4+IChqICsgaSkpICYgMTtcbiAgICB9XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPD0gMjQ7IGogKz0gOCkge1xuICAgICAgb3V0UiA8PD0gMTtcbiAgICAgIG91dFIgfD0gKGluTCA+PiAoaiArIGkpKSAmIDE7XG4gICAgfVxuICB9XG4gIGZvciAodmFyIGogPSAwOyBqIDw9IDI0OyBqICs9IDgpIHtcbiAgICBvdXRSIDw8PSAxO1xuICAgIG91dFIgfD0gKGluTCA+PiAoaiArIGkpKSAmIDE7XG4gIH1cblxuICBvdXRbb2ZmICsgMF0gPSBvdXRMID4+PiAwO1xuICBvdXRbb2ZmICsgMV0gPSBvdXRSID4+PiAwO1xufTtcblxuZXhwb3J0cy5yMjhzaGwgPSBmdW5jdGlvbiByMjhzaGwobnVtLCBzaGlmdCkge1xuICByZXR1cm4gKChudW0gPDwgc2hpZnQpICYgMHhmZmZmZmZmKSB8IChudW0gPj4+ICgyOCAtIHNoaWZ0KSk7XG59O1xuXG52YXIgcGMydGFibGUgPSBbXG4gIC8vIGluTCA9PiBvdXRMXG4gIDE0LCAxMSwgMTcsIDQsIDI3LCAyMywgMjUsIDAsXG4gIDEzLCAyMiwgNywgMTgsIDUsIDksIDE2LCAyNCxcbiAgMiwgMjAsIDEyLCAyMSwgMSwgOCwgMTUsIDI2LFxuXG4gIC8vIGluUiA9PiBvdXRSXG4gIDE1LCA0LCAyNSwgMTksIDksIDEsIDI2LCAxNixcbiAgNSwgMTEsIDIzLCA4LCAxMiwgNywgMTcsIDAsXG4gIDIyLCAzLCAxMCwgMTQsIDYsIDIwLCAyNywgMjRcbl07XG5cbmV4cG9ydHMucGMyID0gZnVuY3Rpb24gcGMyKGluTCwgaW5SLCBvdXQsIG9mZikge1xuICB2YXIgb3V0TCA9IDA7XG4gIHZhciBvdXRSID0gMDtcblxuICB2YXIgbGVuID0gcGMydGFibGUubGVuZ3RoID4+PiAxO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgb3V0TCA8PD0gMTtcbiAgICBvdXRMIHw9IChpbkwgPj4+IHBjMnRhYmxlW2ldKSAmIDB4MTtcbiAgfVxuICBmb3IgKHZhciBpID0gbGVuOyBpIDwgcGMydGFibGUubGVuZ3RoOyBpKyspIHtcbiAgICBvdXRSIDw8PSAxO1xuICAgIG91dFIgfD0gKGluUiA+Pj4gcGMydGFibGVbaV0pICYgMHgxO1xuICB9XG5cbiAgb3V0W29mZiArIDBdID0gb3V0TCA+Pj4gMDtcbiAgb3V0W29mZiArIDFdID0gb3V0UiA+Pj4gMDtcbn07XG5cbmV4cG9ydHMuZXhwYW5kID0gZnVuY3Rpb24gZXhwYW5kKHIsIG91dCwgb2ZmKSB7XG4gIHZhciBvdXRMID0gMDtcbiAgdmFyIG91dFIgPSAwO1xuXG4gIG91dEwgPSAoKHIgJiAxKSA8PCA1KSB8IChyID4+PiAyNyk7XG4gIGZvciAodmFyIGkgPSAyMzsgaSA+PSAxNTsgaSAtPSA0KSB7XG4gICAgb3V0TCA8PD0gNjtcbiAgICBvdXRMIHw9IChyID4+PiBpKSAmIDB4M2Y7XG4gIH1cbiAgZm9yICh2YXIgaSA9IDExOyBpID49IDM7IGkgLT0gNCkge1xuICAgIG91dFIgfD0gKHIgPj4+IGkpICYgMHgzZjtcbiAgICBvdXRSIDw8PSA2O1xuICB9XG4gIG91dFIgfD0gKChyICYgMHgxZikgPDwgMSkgfCAociA+Pj4gMzEpO1xuXG4gIG91dFtvZmYgKyAwXSA9IG91dEwgPj4+IDA7XG4gIG91dFtvZmYgKyAxXSA9IG91dFIgPj4+IDA7XG59O1xuXG52YXIgc1RhYmxlID0gW1xuICAxNCwgMCwgNCwgMTUsIDEzLCA3LCAxLCA0LCAyLCAxNCwgMTUsIDIsIDExLCAxMywgOCwgMSxcbiAgMywgMTAsIDEwLCA2LCA2LCAxMiwgMTIsIDExLCA1LCA5LCA5LCA1LCAwLCAzLCA3LCA4LFxuICA0LCAxNSwgMSwgMTIsIDE0LCA4LCA4LCAyLCAxMywgNCwgNiwgOSwgMiwgMSwgMTEsIDcsXG4gIDE1LCA1LCAxMiwgMTEsIDksIDMsIDcsIDE0LCAzLCAxMCwgMTAsIDAsIDUsIDYsIDAsIDEzLFxuXG4gIDE1LCAzLCAxLCAxMywgOCwgNCwgMTQsIDcsIDYsIDE1LCAxMSwgMiwgMywgOCwgNCwgMTQsXG4gIDksIDEyLCA3LCAwLCAyLCAxLCAxMywgMTAsIDEyLCA2LCAwLCA5LCA1LCAxMSwgMTAsIDUsXG4gIDAsIDEzLCAxNCwgOCwgNywgMTAsIDExLCAxLCAxMCwgMywgNCwgMTUsIDEzLCA0LCAxLCAyLFxuICA1LCAxMSwgOCwgNiwgMTIsIDcsIDYsIDEyLCA5LCAwLCAzLCA1LCAyLCAxNCwgMTUsIDksXG5cbiAgMTAsIDEzLCAwLCA3LCA5LCAwLCAxNCwgOSwgNiwgMywgMywgNCwgMTUsIDYsIDUsIDEwLFxuICAxLCAyLCAxMywgOCwgMTIsIDUsIDcsIDE0LCAxMSwgMTIsIDQsIDExLCAyLCAxNSwgOCwgMSxcbiAgMTMsIDEsIDYsIDEwLCA0LCAxMywgOSwgMCwgOCwgNiwgMTUsIDksIDMsIDgsIDAsIDcsXG4gIDExLCA0LCAxLCAxNSwgMiwgMTQsIDEyLCAzLCA1LCAxMSwgMTAsIDUsIDE0LCAyLCA3LCAxMixcblxuICA3LCAxMywgMTMsIDgsIDE0LCAxMSwgMywgNSwgMCwgNiwgNiwgMTUsIDksIDAsIDEwLCAzLFxuICAxLCA0LCAyLCA3LCA4LCAyLCA1LCAxMiwgMTEsIDEsIDEyLCAxMCwgNCwgMTQsIDE1LCA5LFxuICAxMCwgMywgNiwgMTUsIDksIDAsIDAsIDYsIDEyLCAxMCwgMTEsIDEsIDcsIDEzLCAxMywgOCxcbiAgMTUsIDksIDEsIDQsIDMsIDUsIDE0LCAxMSwgNSwgMTIsIDIsIDcsIDgsIDIsIDQsIDE0LFxuXG4gIDIsIDE0LCAxMiwgMTEsIDQsIDIsIDEsIDEyLCA3LCA0LCAxMCwgNywgMTEsIDEzLCA2LCAxLFxuICA4LCA1LCA1LCAwLCAzLCAxNSwgMTUsIDEwLCAxMywgMywgMCwgOSwgMTQsIDgsIDksIDYsXG4gIDQsIDExLCAyLCA4LCAxLCAxMiwgMTEsIDcsIDEwLCAxLCAxMywgMTQsIDcsIDIsIDgsIDEzLFxuICAxNSwgNiwgOSwgMTUsIDEyLCAwLCA1LCA5LCA2LCAxMCwgMywgNCwgMCwgNSwgMTQsIDMsXG5cbiAgMTIsIDEwLCAxLCAxNSwgMTAsIDQsIDE1LCAyLCA5LCA3LCAyLCAxMiwgNiwgOSwgOCwgNSxcbiAgMCwgNiwgMTMsIDEsIDMsIDEzLCA0LCAxNCwgMTQsIDAsIDcsIDExLCA1LCAzLCAxMSwgOCxcbiAgOSwgNCwgMTQsIDMsIDE1LCAyLCA1LCAxMiwgMiwgOSwgOCwgNSwgMTIsIDE1LCAzLCAxMCxcbiAgNywgMTEsIDAsIDE0LCA0LCAxLCAxMCwgNywgMSwgNiwgMTMsIDAsIDExLCA4LCA2LCAxMyxcblxuICA0LCAxMywgMTEsIDAsIDIsIDExLCAxNCwgNywgMTUsIDQsIDAsIDksIDgsIDEsIDEzLCAxMCxcbiAgMywgMTQsIDEyLCAzLCA5LCA1LCA3LCAxMiwgNSwgMiwgMTAsIDE1LCA2LCA4LCAxLCA2LFxuICAxLCA2LCA0LCAxMSwgMTEsIDEzLCAxMywgOCwgMTIsIDEsIDMsIDQsIDcsIDEwLCAxNCwgNyxcbiAgMTAsIDksIDE1LCA1LCA2LCAwLCA4LCAxNSwgMCwgMTQsIDUsIDIsIDksIDMsIDIsIDEyLFxuXG4gIDEzLCAxLCAyLCAxNSwgOCwgMTMsIDQsIDgsIDYsIDEwLCAxNSwgMywgMTEsIDcsIDEsIDQsXG4gIDEwLCAxMiwgOSwgNSwgMywgNiwgMTQsIDExLCA1LCAwLCAwLCAxNCwgMTIsIDksIDcsIDIsXG4gIDcsIDIsIDExLCAxLCA0LCAxNCwgMSwgNywgOSwgNCwgMTIsIDEwLCAxNCwgOCwgMiwgMTMsXG4gIDAsIDE1LCA2LCAxMiwgMTAsIDksIDEzLCAwLCAxNSwgMywgMywgNSwgNSwgNiwgOCwgMTFcbl07XG5cbmV4cG9ydHMuc3Vic3RpdHV0ZSA9IGZ1bmN0aW9uIHN1YnN0aXR1dGUoaW5MLCBpblIpIHtcbiAgdmFyIG91dCA9IDA7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgNDsgaSsrKSB7XG4gICAgdmFyIGIgPSAoaW5MID4+PiAoMTggLSBpICogNikpICYgMHgzZjtcbiAgICB2YXIgc2IgPSBzVGFibGVbaSAqIDB4NDAgKyBiXTtcblxuICAgIG91dCA8PD0gNDtcbiAgICBvdXQgfD0gc2I7XG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCA0OyBpKyspIHtcbiAgICB2YXIgYiA9IChpblIgPj4+ICgxOCAtIGkgKiA2KSkgJiAweDNmO1xuICAgIHZhciBzYiA9IHNUYWJsZVs0ICogMHg0MCArIGkgKiAweDQwICsgYl07XG5cbiAgICBvdXQgPDw9IDQ7XG4gICAgb3V0IHw9IHNiO1xuICB9XG4gIHJldHVybiBvdXQgPj4+IDA7XG59O1xuXG52YXIgcGVybXV0ZVRhYmxlID0gW1xuICAxNiwgMjUsIDEyLCAxMSwgMywgMjAsIDQsIDE1LCAzMSwgMTcsIDksIDYsIDI3LCAxNCwgMSwgMjIsXG4gIDMwLCAyNCwgOCwgMTgsIDAsIDUsIDI5LCAyMywgMTMsIDE5LCAyLCAyNiwgMTAsIDIxLCAyOCwgN1xuXTtcblxuZXhwb3J0cy5wZXJtdXRlID0gZnVuY3Rpb24gcGVybXV0ZShudW0pIHtcbiAgdmFyIG91dCA9IDA7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcGVybXV0ZVRhYmxlLmxlbmd0aDsgaSsrKSB7XG4gICAgb3V0IDw8PSAxO1xuICAgIG91dCB8PSAobnVtID4+PiBwZXJtdXRlVGFibGVbaV0pICYgMHgxO1xuICB9XG4gIHJldHVybiBvdXQgPj4+IDA7XG59O1xuXG5leHBvcnRzLnBhZFNwbGl0ID0gZnVuY3Rpb24gcGFkU3BsaXQobnVtLCBzaXplLCBncm91cCkge1xuICB2YXIgc3RyID0gbnVtLnRvU3RyaW5nKDIpO1xuICB3aGlsZSAoc3RyLmxlbmd0aCA8IHNpemUpXG4gICAgc3RyID0gJzAnICsgc3RyO1xuXG4gIHZhciBvdXQgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaXplOyBpICs9IGdyb3VwKVxuICAgIG91dC5wdXNoKHN0ci5zbGljZShpLCBpICsgZ3JvdXApKTtcbiAgcmV0dXJuIG91dC5qb2luKCcgJyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYXNzZXJ0ID0gcmVxdWlyZSgnbWluaW1hbGlzdGljLWFzc2VydCcpO1xuXG5mdW5jdGlvbiBDaXBoZXIob3B0aW9ucykge1xuICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuXG4gIHRoaXMudHlwZSA9IHRoaXMub3B0aW9ucy50eXBlO1xuICB0aGlzLmJsb2NrU2l6ZSA9IDg7XG4gIHRoaXMuX2luaXQoKTtcblxuICB0aGlzLmJ1ZmZlciA9IG5ldyBBcnJheSh0aGlzLmJsb2NrU2l6ZSk7XG4gIHRoaXMuYnVmZmVyT2ZmID0gMDtcbn1cbm1vZHVsZS5leHBvcnRzID0gQ2lwaGVyO1xuXG5DaXBoZXIucHJvdG90eXBlLl9pbml0ID0gZnVuY3Rpb24gX2luaXQoKSB7XG4gIC8vIE1pZ2h0IGJlIG92ZXJyaWRlZFxufTtcblxuQ2lwaGVyLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUoZGF0YSkge1xuICBpZiAoZGF0YS5sZW5ndGggPT09IDApXG4gICAgcmV0dXJuIFtdO1xuXG4gIGlmICh0aGlzLnR5cGUgPT09ICdkZWNyeXB0JylcbiAgICByZXR1cm4gdGhpcy5fdXBkYXRlRGVjcnlwdChkYXRhKTtcbiAgZWxzZVxuICAgIHJldHVybiB0aGlzLl91cGRhdGVFbmNyeXB0KGRhdGEpO1xufTtcblxuQ2lwaGVyLnByb3RvdHlwZS5fYnVmZmVyID0gZnVuY3Rpb24gX2J1ZmZlcihkYXRhLCBvZmYpIHtcbiAgLy8gQXBwZW5kIGRhdGEgdG8gYnVmZmVyXG4gIHZhciBtaW4gPSBNYXRoLm1pbih0aGlzLmJ1ZmZlci5sZW5ndGggLSB0aGlzLmJ1ZmZlck9mZiwgZGF0YS5sZW5ndGggLSBvZmYpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IG1pbjsgaSsrKVxuICAgIHRoaXMuYnVmZmVyW3RoaXMuYnVmZmVyT2ZmICsgaV0gPSBkYXRhW29mZiArIGldO1xuICB0aGlzLmJ1ZmZlck9mZiArPSBtaW47XG5cbiAgLy8gU2hpZnQgbmV4dFxuICByZXR1cm4gbWluO1xufTtcblxuQ2lwaGVyLnByb3RvdHlwZS5fZmx1c2hCdWZmZXIgPSBmdW5jdGlvbiBfZmx1c2hCdWZmZXIob3V0LCBvZmYpIHtcbiAgdGhpcy5fdXBkYXRlKHRoaXMuYnVmZmVyLCAwLCBvdXQsIG9mZik7XG4gIHRoaXMuYnVmZmVyT2ZmID0gMDtcbiAgcmV0dXJuIHRoaXMuYmxvY2tTaXplO1xufTtcblxuQ2lwaGVyLnByb3RvdHlwZS5fdXBkYXRlRW5jcnlwdCA9IGZ1bmN0aW9uIF91cGRhdGVFbmNyeXB0KGRhdGEpIHtcbiAgdmFyIGlucHV0T2ZmID0gMDtcbiAgdmFyIG91dHB1dE9mZiA9IDA7XG5cbiAgdmFyIGNvdW50ID0gKCh0aGlzLmJ1ZmZlck9mZiArIGRhdGEubGVuZ3RoKSAvIHRoaXMuYmxvY2tTaXplKSB8IDA7XG4gIHZhciBvdXQgPSBuZXcgQXJyYXkoY291bnQgKiB0aGlzLmJsb2NrU2l6ZSk7XG5cbiAgaWYgKHRoaXMuYnVmZmVyT2ZmICE9PSAwKSB7XG4gICAgaW5wdXRPZmYgKz0gdGhpcy5fYnVmZmVyKGRhdGEsIGlucHV0T2ZmKTtcblxuICAgIGlmICh0aGlzLmJ1ZmZlck9mZiA9PT0gdGhpcy5idWZmZXIubGVuZ3RoKVxuICAgICAgb3V0cHV0T2ZmICs9IHRoaXMuX2ZsdXNoQnVmZmVyKG91dCwgb3V0cHV0T2ZmKTtcbiAgfVxuXG4gIC8vIFdyaXRlIGJsb2Nrc1xuICB2YXIgbWF4ID0gZGF0YS5sZW5ndGggLSAoKGRhdGEubGVuZ3RoIC0gaW5wdXRPZmYpICUgdGhpcy5ibG9ja1NpemUpO1xuICBmb3IgKDsgaW5wdXRPZmYgPCBtYXg7IGlucHV0T2ZmICs9IHRoaXMuYmxvY2tTaXplKSB7XG4gICAgdGhpcy5fdXBkYXRlKGRhdGEsIGlucHV0T2ZmLCBvdXQsIG91dHB1dE9mZik7XG4gICAgb3V0cHV0T2ZmICs9IHRoaXMuYmxvY2tTaXplO1xuICB9XG5cbiAgLy8gUXVldWUgcmVzdFxuICBmb3IgKDsgaW5wdXRPZmYgPCBkYXRhLmxlbmd0aDsgaW5wdXRPZmYrKywgdGhpcy5idWZmZXJPZmYrKylcbiAgICB0aGlzLmJ1ZmZlclt0aGlzLmJ1ZmZlck9mZl0gPSBkYXRhW2lucHV0T2ZmXTtcblxuICByZXR1cm4gb3V0O1xufTtcblxuQ2lwaGVyLnByb3RvdHlwZS5fdXBkYXRlRGVjcnlwdCA9IGZ1bmN0aW9uIF91cGRhdGVEZWNyeXB0KGRhdGEpIHtcbiAgdmFyIGlucHV0T2ZmID0gMDtcbiAgdmFyIG91dHB1dE9mZiA9IDA7XG5cbiAgdmFyIGNvdW50ID0gTWF0aC5jZWlsKCh0aGlzLmJ1ZmZlck9mZiArIGRhdGEubGVuZ3RoKSAvIHRoaXMuYmxvY2tTaXplKSAtIDE7XG4gIHZhciBvdXQgPSBuZXcgQXJyYXkoY291bnQgKiB0aGlzLmJsb2NrU2l6ZSk7XG5cbiAgLy8gVE9ETyhpbmR1dG55KTogb3B0aW1pemUgaXQsIHRoaXMgaXMgZmFyIGZyb20gb3B0aW1hbFxuICBmb3IgKDsgY291bnQgPiAwOyBjb3VudC0tKSB7XG4gICAgaW5wdXRPZmYgKz0gdGhpcy5fYnVmZmVyKGRhdGEsIGlucHV0T2ZmKTtcbiAgICBvdXRwdXRPZmYgKz0gdGhpcy5fZmx1c2hCdWZmZXIob3V0LCBvdXRwdXRPZmYpO1xuICB9XG5cbiAgLy8gQnVmZmVyIHJlc3Qgb2YgdGhlIGlucHV0XG4gIGlucHV0T2ZmICs9IHRoaXMuX2J1ZmZlcihkYXRhLCBpbnB1dE9mZik7XG5cbiAgcmV0dXJuIG91dDtcbn07XG5cbkNpcGhlci5wcm90b3R5cGUuZmluYWwgPSBmdW5jdGlvbiBmaW5hbChidWZmZXIpIHtcbiAgdmFyIGZpcnN0O1xuICBpZiAoYnVmZmVyKVxuICAgIGZpcnN0ID0gdGhpcy51cGRhdGUoYnVmZmVyKTtcblxuICB2YXIgbGFzdDtcbiAgaWYgKHRoaXMudHlwZSA9PT0gJ2VuY3J5cHQnKVxuICAgIGxhc3QgPSB0aGlzLl9maW5hbEVuY3J5cHQoKTtcbiAgZWxzZVxuICAgIGxhc3QgPSB0aGlzLl9maW5hbERlY3J5cHQoKTtcblxuICBpZiAoZmlyc3QpXG4gICAgcmV0dXJuIGZpcnN0LmNvbmNhdChsYXN0KTtcbiAgZWxzZVxuICAgIHJldHVybiBsYXN0O1xufTtcblxuQ2lwaGVyLnByb3RvdHlwZS5fcGFkID0gZnVuY3Rpb24gX3BhZChidWZmZXIsIG9mZikge1xuICBpZiAob2ZmID09PSAwKVxuICAgIHJldHVybiBmYWxzZTtcblxuICB3aGlsZSAob2ZmIDwgYnVmZmVyLmxlbmd0aClcbiAgICBidWZmZXJbb2ZmKytdID0gMDtcblxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbkNpcGhlci5wcm90b3R5cGUuX2ZpbmFsRW5jcnlwdCA9IGZ1bmN0aW9uIF9maW5hbEVuY3J5cHQoKSB7XG4gIGlmICghdGhpcy5fcGFkKHRoaXMuYnVmZmVyLCB0aGlzLmJ1ZmZlck9mZikpXG4gICAgcmV0dXJuIFtdO1xuXG4gIHZhciBvdXQgPSBuZXcgQXJyYXkodGhpcy5ibG9ja1NpemUpO1xuICB0aGlzLl91cGRhdGUodGhpcy5idWZmZXIsIDAsIG91dCwgMCk7XG4gIHJldHVybiBvdXQ7XG59O1xuXG5DaXBoZXIucHJvdG90eXBlLl91bnBhZCA9IGZ1bmN0aW9uIF91bnBhZChidWZmZXIpIHtcbiAgcmV0dXJuIGJ1ZmZlcjtcbn07XG5cbkNpcGhlci5wcm90b3R5cGUuX2ZpbmFsRGVjcnlwdCA9IGZ1bmN0aW9uIF9maW5hbERlY3J5cHQoKSB7XG4gIGFzc2VydC5lcXVhbCh0aGlzLmJ1ZmZlck9mZiwgdGhpcy5ibG9ja1NpemUsICdOb3QgZW5vdWdoIGRhdGEgdG8gZGVjcnlwdCcpO1xuICB2YXIgb3V0ID0gbmV3IEFycmF5KHRoaXMuYmxvY2tTaXplKTtcbiAgdGhpcy5fZmx1c2hCdWZmZXIob3V0LCAwKTtcblxuICByZXR1cm4gdGhpcy5fdW5wYWQob3V0KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBhc3NlcnQgPSByZXF1aXJlKCdtaW5pbWFsaXN0aWMtYXNzZXJ0Jyk7XG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuXG52YXIgZGVzID0gcmVxdWlyZSgnLi4vZGVzJyk7XG52YXIgdXRpbHMgPSBkZXMudXRpbHM7XG52YXIgQ2lwaGVyID0gZGVzLkNpcGhlcjtcblxuZnVuY3Rpb24gREVTU3RhdGUoKSB7XG4gIHRoaXMudG1wID0gbmV3IEFycmF5KDIpO1xuICB0aGlzLmtleXMgPSBudWxsO1xufVxuXG5mdW5jdGlvbiBERVMob3B0aW9ucykge1xuICBDaXBoZXIuY2FsbCh0aGlzLCBvcHRpb25zKTtcblxuICB2YXIgc3RhdGUgPSBuZXcgREVTU3RhdGUoKTtcbiAgdGhpcy5fZGVzU3RhdGUgPSBzdGF0ZTtcblxuICB0aGlzLmRlcml2ZUtleXMoc3RhdGUsIG9wdGlvbnMua2V5KTtcbn1cbmluaGVyaXRzKERFUywgQ2lwaGVyKTtcbm1vZHVsZS5leHBvcnRzID0gREVTO1xuXG5ERVMuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKG9wdGlvbnMpIHtcbiAgcmV0dXJuIG5ldyBERVMob3B0aW9ucyk7XG59O1xuXG52YXIgc2hpZnRUYWJsZSA9IFtcbiAgMSwgMSwgMiwgMiwgMiwgMiwgMiwgMixcbiAgMSwgMiwgMiwgMiwgMiwgMiwgMiwgMVxuXTtcblxuREVTLnByb3RvdHlwZS5kZXJpdmVLZXlzID0gZnVuY3Rpb24gZGVyaXZlS2V5cyhzdGF0ZSwga2V5KSB7XG4gIHN0YXRlLmtleXMgPSBuZXcgQXJyYXkoMTYgKiAyKTtcblxuICBhc3NlcnQuZXF1YWwoa2V5Lmxlbmd0aCwgdGhpcy5ibG9ja1NpemUsICdJbnZhbGlkIGtleSBsZW5ndGgnKTtcblxuICB2YXIga0wgPSB1dGlscy5yZWFkVUludDMyQkUoa2V5LCAwKTtcbiAgdmFyIGtSID0gdXRpbHMucmVhZFVJbnQzMkJFKGtleSwgNCk7XG5cbiAgdXRpbHMucGMxKGtMLCBrUiwgc3RhdGUudG1wLCAwKTtcbiAga0wgPSBzdGF0ZS50bXBbMF07XG4gIGtSID0gc3RhdGUudG1wWzFdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0YXRlLmtleXMubGVuZ3RoOyBpICs9IDIpIHtcbiAgICB2YXIgc2hpZnQgPSBzaGlmdFRhYmxlW2kgPj4+IDFdO1xuICAgIGtMID0gdXRpbHMucjI4c2hsKGtMLCBzaGlmdCk7XG4gICAga1IgPSB1dGlscy5yMjhzaGwoa1IsIHNoaWZ0KTtcbiAgICB1dGlscy5wYzIoa0wsIGtSLCBzdGF0ZS5rZXlzLCBpKTtcbiAgfVxufTtcblxuREVTLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gX3VwZGF0ZShpbnAsIGluT2ZmLCBvdXQsIG91dE9mZikge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9kZXNTdGF0ZTtcblxuICB2YXIgbCA9IHV0aWxzLnJlYWRVSW50MzJCRShpbnAsIGluT2ZmKTtcbiAgdmFyIHIgPSB1dGlscy5yZWFkVUludDMyQkUoaW5wLCBpbk9mZiArIDQpO1xuXG4gIC8vIEluaXRpYWwgUGVybXV0YXRpb25cbiAgdXRpbHMuaXAobCwgciwgc3RhdGUudG1wLCAwKTtcbiAgbCA9IHN0YXRlLnRtcFswXTtcbiAgciA9IHN0YXRlLnRtcFsxXTtcblxuICBpZiAodGhpcy50eXBlID09PSAnZW5jcnlwdCcpXG4gICAgdGhpcy5fZW5jcnlwdChzdGF0ZSwgbCwgciwgc3RhdGUudG1wLCAwKTtcbiAgZWxzZVxuICAgIHRoaXMuX2RlY3J5cHQoc3RhdGUsIGwsIHIsIHN0YXRlLnRtcCwgMCk7XG5cbiAgbCA9IHN0YXRlLnRtcFswXTtcbiAgciA9IHN0YXRlLnRtcFsxXTtcblxuICB1dGlscy53cml0ZVVJbnQzMkJFKG91dCwgbCwgb3V0T2ZmKTtcbiAgdXRpbHMud3JpdGVVSW50MzJCRShvdXQsIHIsIG91dE9mZiArIDQpO1xufTtcblxuREVTLnByb3RvdHlwZS5fcGFkID0gZnVuY3Rpb24gX3BhZChidWZmZXIsIG9mZikge1xuICB2YXIgdmFsdWUgPSBidWZmZXIubGVuZ3RoIC0gb2ZmO1xuICBmb3IgKHZhciBpID0gb2ZmOyBpIDwgYnVmZmVyLmxlbmd0aDsgaSsrKVxuICAgIGJ1ZmZlcltpXSA9IHZhbHVlO1xuXG4gIHJldHVybiB0cnVlO1xufTtcblxuREVTLnByb3RvdHlwZS5fdW5wYWQgPSBmdW5jdGlvbiBfdW5wYWQoYnVmZmVyKSB7XG4gIHZhciBwYWQgPSBidWZmZXJbYnVmZmVyLmxlbmd0aCAtIDFdO1xuICBmb3IgKHZhciBpID0gYnVmZmVyLmxlbmd0aCAtIHBhZDsgaSA8IGJ1ZmZlci5sZW5ndGg7IGkrKylcbiAgICBhc3NlcnQuZXF1YWwoYnVmZmVyW2ldLCBwYWQpO1xuXG4gIHJldHVybiBidWZmZXIuc2xpY2UoMCwgYnVmZmVyLmxlbmd0aCAtIHBhZCk7XG59O1xuXG5ERVMucHJvdG90eXBlLl9lbmNyeXB0ID0gZnVuY3Rpb24gX2VuY3J5cHQoc3RhdGUsIGxTdGFydCwgclN0YXJ0LCBvdXQsIG9mZikge1xuICB2YXIgbCA9IGxTdGFydDtcbiAgdmFyIHIgPSByU3RhcnQ7XG5cbiAgLy8gQXBwbHkgZigpIHgxNiB0aW1lc1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0YXRlLmtleXMubGVuZ3RoOyBpICs9IDIpIHtcbiAgICB2YXIga2V5TCA9IHN0YXRlLmtleXNbaV07XG4gICAgdmFyIGtleVIgPSBzdGF0ZS5rZXlzW2kgKyAxXTtcblxuICAgIC8vIGYociwgaylcbiAgICB1dGlscy5leHBhbmQociwgc3RhdGUudG1wLCAwKTtcblxuICAgIGtleUwgXj0gc3RhdGUudG1wWzBdO1xuICAgIGtleVIgXj0gc3RhdGUudG1wWzFdO1xuICAgIHZhciBzID0gdXRpbHMuc3Vic3RpdHV0ZShrZXlMLCBrZXlSKTtcbiAgICB2YXIgZiA9IHV0aWxzLnBlcm11dGUocyk7XG5cbiAgICB2YXIgdCA9IHI7XG4gICAgciA9IChsIF4gZikgPj4+IDA7XG4gICAgbCA9IHQ7XG4gIH1cblxuICAvLyBSZXZlcnNlIEluaXRpYWwgUGVybXV0YXRpb25cbiAgdXRpbHMucmlwKHIsIGwsIG91dCwgb2ZmKTtcbn07XG5cbkRFUy5wcm90b3R5cGUuX2RlY3J5cHQgPSBmdW5jdGlvbiBfZGVjcnlwdChzdGF0ZSwgbFN0YXJ0LCByU3RhcnQsIG91dCwgb2ZmKSB7XG4gIHZhciBsID0gclN0YXJ0O1xuICB2YXIgciA9IGxTdGFydDtcblxuICAvLyBBcHBseSBmKCkgeDE2IHRpbWVzXG4gIGZvciAodmFyIGkgPSBzdGF0ZS5rZXlzLmxlbmd0aCAtIDI7IGkgPj0gMDsgaSAtPSAyKSB7XG4gICAgdmFyIGtleUwgPSBzdGF0ZS5rZXlzW2ldO1xuICAgIHZhciBrZXlSID0gc3RhdGUua2V5c1tpICsgMV07XG5cbiAgICAvLyBmKHIsIGspXG4gICAgdXRpbHMuZXhwYW5kKGwsIHN0YXRlLnRtcCwgMCk7XG5cbiAgICBrZXlMIF49IHN0YXRlLnRtcFswXTtcbiAgICBrZXlSIF49IHN0YXRlLnRtcFsxXTtcbiAgICB2YXIgcyA9IHV0aWxzLnN1YnN0aXR1dGUoa2V5TCwga2V5Uik7XG4gICAgdmFyIGYgPSB1dGlscy5wZXJtdXRlKHMpO1xuXG4gICAgdmFyIHQgPSBsO1xuICAgIGwgPSAociBeIGYpID4+PiAwO1xuICAgIHIgPSB0O1xuICB9XG5cbiAgLy8gUmV2ZXJzZSBJbml0aWFsIFBlcm11dGF0aW9uXG4gIHV0aWxzLnJpcChsLCByLCBvdXQsIG9mZik7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYXNzZXJ0ID0gcmVxdWlyZSgnbWluaW1hbGlzdGljLWFzc2VydCcpO1xudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcblxudmFyIHByb3RvID0ge307XG5cbmZ1bmN0aW9uIENCQ1N0YXRlKGl2KSB7XG4gIGFzc2VydC5lcXVhbChpdi5sZW5ndGgsIDgsICdJbnZhbGlkIElWIGxlbmd0aCcpO1xuXG4gIHRoaXMuaXYgPSBuZXcgQXJyYXkoOCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5pdi5sZW5ndGg7IGkrKylcbiAgICB0aGlzLml2W2ldID0gaXZbaV07XG59XG5cbmZ1bmN0aW9uIGluc3RhbnRpYXRlKEJhc2UpIHtcbiAgZnVuY3Rpb24gQ0JDKG9wdGlvbnMpIHtcbiAgICBCYXNlLmNhbGwodGhpcywgb3B0aW9ucyk7XG4gICAgdGhpcy5fY2JjSW5pdCgpO1xuICB9XG4gIGluaGVyaXRzKENCQywgQmFzZSk7XG5cbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhwcm90byk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgIENCQy5wcm90b3R5cGVba2V5XSA9IHByb3RvW2tleV07XG4gIH1cblxuICBDQkMuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gbmV3IENCQyhvcHRpb25zKTtcbiAgfTtcblxuICByZXR1cm4gQ0JDO1xufVxuXG5leHBvcnRzLmluc3RhbnRpYXRlID0gaW5zdGFudGlhdGU7XG5cbnByb3RvLl9jYmNJbml0ID0gZnVuY3Rpb24gX2NiY0luaXQoKSB7XG4gIHZhciBzdGF0ZSA9IG5ldyBDQkNTdGF0ZSh0aGlzLm9wdGlvbnMuaXYpO1xuICB0aGlzLl9jYmNTdGF0ZSA9IHN0YXRlO1xufTtcblxucHJvdG8uX3VwZGF0ZSA9IGZ1bmN0aW9uIF91cGRhdGUoaW5wLCBpbk9mZiwgb3V0LCBvdXRPZmYpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fY2JjU3RhdGU7XG4gIHZhciBzdXBlclByb3RvID0gdGhpcy5jb25zdHJ1Y3Rvci5zdXBlcl8ucHJvdG90eXBlO1xuXG4gIHZhciBpdiA9IHN0YXRlLml2O1xuICBpZiAodGhpcy50eXBlID09PSAnZW5jcnlwdCcpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuYmxvY2tTaXplOyBpKyspXG4gICAgICBpdltpXSBePSBpbnBbaW5PZmYgKyBpXTtcblxuICAgIHN1cGVyUHJvdG8uX3VwZGF0ZS5jYWxsKHRoaXMsIGl2LCAwLCBvdXQsIG91dE9mZik7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuYmxvY2tTaXplOyBpKyspXG4gICAgICBpdltpXSA9IG91dFtvdXRPZmYgKyBpXTtcbiAgfSBlbHNlIHtcbiAgICBzdXBlclByb3RvLl91cGRhdGUuY2FsbCh0aGlzLCBpbnAsIGluT2ZmLCBvdXQsIG91dE9mZik7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuYmxvY2tTaXplOyBpKyspXG4gICAgICBvdXRbb3V0T2ZmICsgaV0gXj0gaXZbaV07XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuYmxvY2tTaXplOyBpKyspXG4gICAgICBpdltpXSA9IGlucFtpbk9mZiArIGldO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYXNzZXJ0ID0gcmVxdWlyZSgnbWluaW1hbGlzdGljLWFzc2VydCcpO1xudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcblxudmFyIGRlcyA9IHJlcXVpcmUoJy4uL2RlcycpO1xudmFyIENpcGhlciA9IGRlcy5DaXBoZXI7XG52YXIgREVTID0gZGVzLkRFUztcblxuZnVuY3Rpb24gRURFU3RhdGUodHlwZSwga2V5KSB7XG4gIGFzc2VydC5lcXVhbChrZXkubGVuZ3RoLCAyNCwgJ0ludmFsaWQga2V5IGxlbmd0aCcpO1xuXG4gIHZhciBrMSA9IGtleS5zbGljZSgwLCA4KTtcbiAgdmFyIGsyID0ga2V5LnNsaWNlKDgsIDE2KTtcbiAgdmFyIGszID0ga2V5LnNsaWNlKDE2LCAyNCk7XG5cbiAgaWYgKHR5cGUgPT09ICdlbmNyeXB0Jykge1xuICAgIHRoaXMuY2lwaGVycyA9IFtcbiAgICAgIERFUy5jcmVhdGUoeyB0eXBlOiAnZW5jcnlwdCcsIGtleTogazEgfSksXG4gICAgICBERVMuY3JlYXRlKHsgdHlwZTogJ2RlY3J5cHQnLCBrZXk6IGsyIH0pLFxuICAgICAgREVTLmNyZWF0ZSh7IHR5cGU6ICdlbmNyeXB0Jywga2V5OiBrMyB9KVxuICAgIF07XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5jaXBoZXJzID0gW1xuICAgICAgREVTLmNyZWF0ZSh7IHR5cGU6ICdkZWNyeXB0Jywga2V5OiBrMyB9KSxcbiAgICAgIERFUy5jcmVhdGUoeyB0eXBlOiAnZW5jcnlwdCcsIGtleTogazIgfSksXG4gICAgICBERVMuY3JlYXRlKHsgdHlwZTogJ2RlY3J5cHQnLCBrZXk6IGsxIH0pXG4gICAgXTtcbiAgfVxufVxuXG5mdW5jdGlvbiBFREUob3B0aW9ucykge1xuICBDaXBoZXIuY2FsbCh0aGlzLCBvcHRpb25zKTtcblxuICB2YXIgc3RhdGUgPSBuZXcgRURFU3RhdGUodGhpcy50eXBlLCB0aGlzLm9wdGlvbnMua2V5KTtcbiAgdGhpcy5fZWRlU3RhdGUgPSBzdGF0ZTtcbn1cbmluaGVyaXRzKEVERSwgQ2lwaGVyKTtcblxubW9kdWxlLmV4cG9ydHMgPSBFREU7XG5cbkVERS5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUob3B0aW9ucykge1xuICByZXR1cm4gbmV3IEVERShvcHRpb25zKTtcbn07XG5cbkVERS5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIF91cGRhdGUoaW5wLCBpbk9mZiwgb3V0LCBvdXRPZmYpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fZWRlU3RhdGU7XG5cbiAgc3RhdGUuY2lwaGVyc1swXS5fdXBkYXRlKGlucCwgaW5PZmYsIG91dCwgb3V0T2ZmKTtcbiAgc3RhdGUuY2lwaGVyc1sxXS5fdXBkYXRlKG91dCwgb3V0T2ZmLCBvdXQsIG91dE9mZik7XG4gIHN0YXRlLmNpcGhlcnNbMl0uX3VwZGF0ZShvdXQsIG91dE9mZiwgb3V0LCBvdXRPZmYpO1xufTtcblxuRURFLnByb3RvdHlwZS5fcGFkID0gREVTLnByb3RvdHlwZS5fcGFkO1xuRURFLnByb3RvdHlwZS5fdW5wYWQgPSBERVMucHJvdG90eXBlLl91bnBhZDtcbiIsInZhciBNT0RFUyA9IHJlcXVpcmUoJy4vbW9kZXMnKVxudmFyIEF1dGhDaXBoZXIgPSByZXF1aXJlKCcuL2F1dGhDaXBoZXInKVxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG52YXIgU3RyZWFtQ2lwaGVyID0gcmVxdWlyZSgnLi9zdHJlYW1DaXBoZXInKVxudmFyIFRyYW5zZm9ybSA9IHJlcXVpcmUoJ2NpcGhlci1iYXNlJylcbnZhciBhZXMgPSByZXF1aXJlKCcuL2FlcycpXG52YXIgZWJ0ayA9IHJlcXVpcmUoJ2V2cF9ieXRlc3Rva2V5JylcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcblxuZnVuY3Rpb24gQ2lwaGVyIChtb2RlLCBrZXksIGl2KSB7XG4gIFRyYW5zZm9ybS5jYWxsKHRoaXMpXG5cbiAgdGhpcy5fY2FjaGUgPSBuZXcgU3BsaXR0ZXIoKVxuICB0aGlzLl9jaXBoZXIgPSBuZXcgYWVzLkFFUyhrZXkpXG4gIHRoaXMuX3ByZXYgPSBCdWZmZXIuZnJvbShpdilcbiAgdGhpcy5fbW9kZSA9IG1vZGVcbiAgdGhpcy5fYXV0b3BhZGRpbmcgPSB0cnVlXG59XG5cbmluaGVyaXRzKENpcGhlciwgVHJhbnNmb3JtKVxuXG5DaXBoZXIucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoZGF0YSkge1xuICB0aGlzLl9jYWNoZS5hZGQoZGF0YSlcbiAgdmFyIGNodW5rXG4gIHZhciB0aGluZ1xuICB2YXIgb3V0ID0gW11cblxuICB3aGlsZSAoKGNodW5rID0gdGhpcy5fY2FjaGUuZ2V0KCkpKSB7XG4gICAgdGhpbmcgPSB0aGlzLl9tb2RlLmVuY3J5cHQodGhpcywgY2h1bmspXG4gICAgb3V0LnB1c2godGhpbmcpXG4gIH1cblxuICByZXR1cm4gQnVmZmVyLmNvbmNhdChvdXQpXG59XG5cbnZhciBQQURESU5HID0gQnVmZmVyLmFsbG9jKDE2LCAweDEwKVxuXG5DaXBoZXIucHJvdG90eXBlLl9maW5hbCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGNodW5rID0gdGhpcy5fY2FjaGUuZmx1c2goKVxuICBpZiAodGhpcy5fYXV0b3BhZGRpbmcpIHtcbiAgICBjaHVuayA9IHRoaXMuX21vZGUuZW5jcnlwdCh0aGlzLCBjaHVuaylcbiAgICB0aGlzLl9jaXBoZXIuc2NydWIoKVxuICAgIHJldHVybiBjaHVua1xuICB9XG5cbiAgaWYgKCFjaHVuay5lcXVhbHMoUEFERElORykpIHtcbiAgICB0aGlzLl9jaXBoZXIuc2NydWIoKVxuICAgIHRocm93IG5ldyBFcnJvcignZGF0YSBub3QgbXVsdGlwbGUgb2YgYmxvY2sgbGVuZ3RoJylcbiAgfVxufVxuXG5DaXBoZXIucHJvdG90eXBlLnNldEF1dG9QYWRkaW5nID0gZnVuY3Rpb24gKHNldFRvKSB7XG4gIHRoaXMuX2F1dG9wYWRkaW5nID0gISFzZXRUb1xuICByZXR1cm4gdGhpc1xufVxuXG5mdW5jdGlvbiBTcGxpdHRlciAoKSB7XG4gIHRoaXMuY2FjaGUgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMClcbn1cblxuU3BsaXR0ZXIucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHRoaXMuY2FjaGUgPSBCdWZmZXIuY29uY2F0KFt0aGlzLmNhY2hlLCBkYXRhXSlcbn1cblxuU3BsaXR0ZXIucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHRoaXMuY2FjaGUubGVuZ3RoID4gMTUpIHtcbiAgICB2YXIgb3V0ID0gdGhpcy5jYWNoZS5zbGljZSgwLCAxNilcbiAgICB0aGlzLmNhY2hlID0gdGhpcy5jYWNoZS5zbGljZSgxNilcbiAgICByZXR1cm4gb3V0XG4gIH1cbiAgcmV0dXJuIG51bGxcbn1cblxuU3BsaXR0ZXIucHJvdG90eXBlLmZsdXNoID0gZnVuY3Rpb24gKCkge1xuICB2YXIgbGVuID0gMTYgLSB0aGlzLmNhY2hlLmxlbmd0aFxuICB2YXIgcGFkQnVmZiA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShsZW4pXG5cbiAgdmFyIGkgPSAtMVxuICB3aGlsZSAoKytpIDwgbGVuKSB7XG4gICAgcGFkQnVmZi53cml0ZVVJbnQ4KGxlbiwgaSlcbiAgfVxuXG4gIHJldHVybiBCdWZmZXIuY29uY2F0KFt0aGlzLmNhY2hlLCBwYWRCdWZmXSlcbn1cblxuZnVuY3Rpb24gY3JlYXRlQ2lwaGVyaXYgKHN1aXRlLCBwYXNzd29yZCwgaXYpIHtcbiAgdmFyIGNvbmZpZyA9IE1PREVTW3N1aXRlLnRvTG93ZXJDYXNlKCldXG4gIGlmICghY29uZmlnKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIHN1aXRlIHR5cGUnKVxuXG4gIGlmICh0eXBlb2YgcGFzc3dvcmQgPT09ICdzdHJpbmcnKSBwYXNzd29yZCA9IEJ1ZmZlci5mcm9tKHBhc3N3b3JkKVxuICBpZiAocGFzc3dvcmQubGVuZ3RoICE9PSBjb25maWcua2V5IC8gOCkgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBrZXkgbGVuZ3RoICcgKyBwYXNzd29yZC5sZW5ndGgpXG5cbiAgaWYgKHR5cGVvZiBpdiA9PT0gJ3N0cmluZycpIGl2ID0gQnVmZmVyLmZyb20oaXYpXG4gIGlmIChjb25maWcubW9kZSAhPT0gJ0dDTScgJiYgaXYubGVuZ3RoICE9PSBjb25maWcuaXYpIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgaXYgbGVuZ3RoICcgKyBpdi5sZW5ndGgpXG5cbiAgaWYgKGNvbmZpZy50eXBlID09PSAnc3RyZWFtJykge1xuICAgIHJldHVybiBuZXcgU3RyZWFtQ2lwaGVyKGNvbmZpZy5tb2R1bGUsIHBhc3N3b3JkLCBpdilcbiAgfSBlbHNlIGlmIChjb25maWcudHlwZSA9PT0gJ2F1dGgnKSB7XG4gICAgcmV0dXJuIG5ldyBBdXRoQ2lwaGVyKGNvbmZpZy5tb2R1bGUsIHBhc3N3b3JkLCBpdilcbiAgfVxuXG4gIHJldHVybiBuZXcgQ2lwaGVyKGNvbmZpZy5tb2R1bGUsIHBhc3N3b3JkLCBpdilcbn1cblxuZnVuY3Rpb24gY3JlYXRlQ2lwaGVyIChzdWl0ZSwgcGFzc3dvcmQpIHtcbiAgdmFyIGNvbmZpZyA9IE1PREVTW3N1aXRlLnRvTG93ZXJDYXNlKCldXG4gIGlmICghY29uZmlnKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIHN1aXRlIHR5cGUnKVxuXG4gIHZhciBrZXlzID0gZWJ0ayhwYXNzd29yZCwgZmFsc2UsIGNvbmZpZy5rZXksIGNvbmZpZy5pdilcbiAgcmV0dXJuIGNyZWF0ZUNpcGhlcml2KHN1aXRlLCBrZXlzLmtleSwga2V5cy5pdilcbn1cblxuZXhwb3J0cy5jcmVhdGVDaXBoZXJpdiA9IGNyZWF0ZUNpcGhlcml2XG5leHBvcnRzLmNyZWF0ZUNpcGhlciA9IGNyZWF0ZUNpcGhlclxuIiwiZXhwb3J0cy5lbmNyeXB0ID0gZnVuY3Rpb24gKHNlbGYsIGJsb2NrKSB7XG4gIHJldHVybiBzZWxmLl9jaXBoZXIuZW5jcnlwdEJsb2NrKGJsb2NrKVxufVxuXG5leHBvcnRzLmRlY3J5cHQgPSBmdW5jdGlvbiAoc2VsZiwgYmxvY2spIHtcbiAgcmV0dXJuIHNlbGYuX2NpcGhlci5kZWNyeXB0QmxvY2soYmxvY2spXG59XG4iLCJ2YXIgeG9yID0gcmVxdWlyZSgnYnVmZmVyLXhvcicpXG5cbmV4cG9ydHMuZW5jcnlwdCA9IGZ1bmN0aW9uIChzZWxmLCBibG9jaykge1xuICB2YXIgZGF0YSA9IHhvcihibG9jaywgc2VsZi5fcHJldilcblxuICBzZWxmLl9wcmV2ID0gc2VsZi5fY2lwaGVyLmVuY3J5cHRCbG9jayhkYXRhKVxuICByZXR1cm4gc2VsZi5fcHJldlxufVxuXG5leHBvcnRzLmRlY3J5cHQgPSBmdW5jdGlvbiAoc2VsZiwgYmxvY2spIHtcbiAgdmFyIHBhZCA9IHNlbGYuX3ByZXZcblxuICBzZWxmLl9wcmV2ID0gYmxvY2tcbiAgdmFyIG91dCA9IHNlbGYuX2NpcGhlci5kZWNyeXB0QmxvY2soYmxvY2spXG5cbiAgcmV0dXJuIHhvcihvdXQsIHBhZClcbn1cbiIsInZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxudmFyIHhvciA9IHJlcXVpcmUoJ2J1ZmZlci14b3InKVxuXG5mdW5jdGlvbiBlbmNyeXB0U3RhcnQgKHNlbGYsIGRhdGEsIGRlY3J5cHQpIHtcbiAgdmFyIGxlbiA9IGRhdGEubGVuZ3RoXG4gIHZhciBvdXQgPSB4b3IoZGF0YSwgc2VsZi5fY2FjaGUpXG4gIHNlbGYuX2NhY2hlID0gc2VsZi5fY2FjaGUuc2xpY2UobGVuKVxuICBzZWxmLl9wcmV2ID0gQnVmZmVyLmNvbmNhdChbc2VsZi5fcHJldiwgZGVjcnlwdCA/IGRhdGEgOiBvdXRdKVxuICByZXR1cm4gb3V0XG59XG5cbmV4cG9ydHMuZW5jcnlwdCA9IGZ1bmN0aW9uIChzZWxmLCBkYXRhLCBkZWNyeXB0KSB7XG4gIHZhciBvdXQgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMClcbiAgdmFyIGxlblxuXG4gIHdoaWxlIChkYXRhLmxlbmd0aCkge1xuICAgIGlmIChzZWxmLl9jYWNoZS5sZW5ndGggPT09IDApIHtcbiAgICAgIHNlbGYuX2NhY2hlID0gc2VsZi5fY2lwaGVyLmVuY3J5cHRCbG9jayhzZWxmLl9wcmV2KVxuICAgICAgc2VsZi5fcHJldiA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgwKVxuICAgIH1cblxuICAgIGlmIChzZWxmLl9jYWNoZS5sZW5ndGggPD0gZGF0YS5sZW5ndGgpIHtcbiAgICAgIGxlbiA9IHNlbGYuX2NhY2hlLmxlbmd0aFxuICAgICAgb3V0ID0gQnVmZmVyLmNvbmNhdChbb3V0LCBlbmNyeXB0U3RhcnQoc2VsZiwgZGF0YS5zbGljZSgwLCBsZW4pLCBkZWNyeXB0KV0pXG4gICAgICBkYXRhID0gZGF0YS5zbGljZShsZW4pXG4gICAgfSBlbHNlIHtcbiAgICAgIG91dCA9IEJ1ZmZlci5jb25jYXQoW291dCwgZW5jcnlwdFN0YXJ0KHNlbGYsIGRhdGEsIGRlY3J5cHQpXSlcbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG91dFxufVxuIiwidmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG5cbmZ1bmN0aW9uIGVuY3J5cHRCeXRlIChzZWxmLCBieXRlUGFyYW0sIGRlY3J5cHQpIHtcbiAgdmFyIHBhZCA9IHNlbGYuX2NpcGhlci5lbmNyeXB0QmxvY2soc2VsZi5fcHJldilcbiAgdmFyIG91dCA9IHBhZFswXSBeIGJ5dGVQYXJhbVxuXG4gIHNlbGYuX3ByZXYgPSBCdWZmZXIuY29uY2F0KFtcbiAgICBzZWxmLl9wcmV2LnNsaWNlKDEpLFxuICAgIEJ1ZmZlci5mcm9tKFtkZWNyeXB0ID8gYnl0ZVBhcmFtIDogb3V0XSlcbiAgXSlcblxuICByZXR1cm4gb3V0XG59XG5cbmV4cG9ydHMuZW5jcnlwdCA9IGZ1bmN0aW9uIChzZWxmLCBjaHVuaywgZGVjcnlwdCkge1xuICB2YXIgbGVuID0gY2h1bmsubGVuZ3RoXG4gIHZhciBvdXQgPSBCdWZmZXIuYWxsb2NVbnNhZmUobGVuKVxuICB2YXIgaSA9IC0xXG5cbiAgd2hpbGUgKCsraSA8IGxlbikge1xuICAgIG91dFtpXSA9IGVuY3J5cHRCeXRlKHNlbGYsIGNodW5rW2ldLCBkZWNyeXB0KVxuICB9XG5cbiAgcmV0dXJuIG91dFxufVxuIiwidmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG5cbmZ1bmN0aW9uIGVuY3J5cHRCeXRlIChzZWxmLCBieXRlUGFyYW0sIGRlY3J5cHQpIHtcbiAgdmFyIHBhZFxuICB2YXIgaSA9IC0xXG4gIHZhciBsZW4gPSA4XG4gIHZhciBvdXQgPSAwXG4gIHZhciBiaXQsIHZhbHVlXG4gIHdoaWxlICgrK2kgPCBsZW4pIHtcbiAgICBwYWQgPSBzZWxmLl9jaXBoZXIuZW5jcnlwdEJsb2NrKHNlbGYuX3ByZXYpXG4gICAgYml0ID0gKGJ5dGVQYXJhbSAmICgxIDw8ICg3IC0gaSkpKSA/IDB4ODAgOiAwXG4gICAgdmFsdWUgPSBwYWRbMF0gXiBiaXRcbiAgICBvdXQgKz0gKCh2YWx1ZSAmIDB4ODApID4+IChpICUgOCkpXG4gICAgc2VsZi5fcHJldiA9IHNoaWZ0SW4oc2VsZi5fcHJldiwgZGVjcnlwdCA/IGJpdCA6IHZhbHVlKVxuICB9XG4gIHJldHVybiBvdXRcbn1cblxuZnVuY3Rpb24gc2hpZnRJbiAoYnVmZmVyLCB2YWx1ZSkge1xuICB2YXIgbGVuID0gYnVmZmVyLmxlbmd0aFxuICB2YXIgaSA9IC0xXG4gIHZhciBvdXQgPSBCdWZmZXIuYWxsb2NVbnNhZmUoYnVmZmVyLmxlbmd0aClcbiAgYnVmZmVyID0gQnVmZmVyLmNvbmNhdChbYnVmZmVyLCBCdWZmZXIuZnJvbShbdmFsdWVdKV0pXG5cbiAgd2hpbGUgKCsraSA8IGxlbikge1xuICAgIG91dFtpXSA9IGJ1ZmZlcltpXSA8PCAxIHwgYnVmZmVyW2kgKyAxXSA+PiAoNylcbiAgfVxuXG4gIHJldHVybiBvdXRcbn1cblxuZXhwb3J0cy5lbmNyeXB0ID0gZnVuY3Rpb24gKHNlbGYsIGNodW5rLCBkZWNyeXB0KSB7XG4gIHZhciBsZW4gPSBjaHVuay5sZW5ndGhcbiAgdmFyIG91dCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShsZW4pXG4gIHZhciBpID0gLTFcblxuICB3aGlsZSAoKytpIDwgbGVuKSB7XG4gICAgb3V0W2ldID0gZW5jcnlwdEJ5dGUoc2VsZiwgY2h1bmtbaV0sIGRlY3J5cHQpXG4gIH1cblxuICByZXR1cm4gb3V0XG59XG4iLCJ2YXIgeG9yID0gcmVxdWlyZSgnYnVmZmVyLXhvcicpXG5cbmZ1bmN0aW9uIGdldEJsb2NrIChzZWxmKSB7XG4gIHNlbGYuX3ByZXYgPSBzZWxmLl9jaXBoZXIuZW5jcnlwdEJsb2NrKHNlbGYuX3ByZXYpXG4gIHJldHVybiBzZWxmLl9wcmV2XG59XG5cbmV4cG9ydHMuZW5jcnlwdCA9IGZ1bmN0aW9uIChzZWxmLCBjaHVuaykge1xuICB3aGlsZSAoc2VsZi5fY2FjaGUubGVuZ3RoIDwgY2h1bmsubGVuZ3RoKSB7XG4gICAgc2VsZi5fY2FjaGUgPSBCdWZmZXIuY29uY2F0KFtzZWxmLl9jYWNoZSwgZ2V0QmxvY2soc2VsZildKVxuICB9XG5cbiAgdmFyIHBhZCA9IHNlbGYuX2NhY2hlLnNsaWNlKDAsIGNodW5rLmxlbmd0aClcbiAgc2VsZi5fY2FjaGUgPSBzZWxmLl9jYWNoZS5zbGljZShjaHVuay5sZW5ndGgpXG4gIHJldHVybiB4b3IoY2h1bmssIHBhZClcbn1cbiIsInZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxudmFyIFpFUk9FUyA9IEJ1ZmZlci5hbGxvYygxNiwgMClcblxuZnVuY3Rpb24gdG9BcnJheSAoYnVmKSB7XG4gIHJldHVybiBbXG4gICAgYnVmLnJlYWRVSW50MzJCRSgwKSxcbiAgICBidWYucmVhZFVJbnQzMkJFKDQpLFxuICAgIGJ1Zi5yZWFkVUludDMyQkUoOCksXG4gICAgYnVmLnJlYWRVSW50MzJCRSgxMilcbiAgXVxufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXkgKG91dCkge1xuICB2YXIgYnVmID0gQnVmZmVyLmFsbG9jVW5zYWZlKDE2KVxuICBidWYud3JpdGVVSW50MzJCRShvdXRbMF0gPj4+IDAsIDApXG4gIGJ1Zi53cml0ZVVJbnQzMkJFKG91dFsxXSA+Pj4gMCwgNClcbiAgYnVmLndyaXRlVUludDMyQkUob3V0WzJdID4+PiAwLCA4KVxuICBidWYud3JpdGVVSW50MzJCRShvdXRbM10gPj4+IDAsIDEyKVxuICByZXR1cm4gYnVmXG59XG5cbmZ1bmN0aW9uIEdIQVNIIChrZXkpIHtcbiAgdGhpcy5oID0ga2V5XG4gIHRoaXMuc3RhdGUgPSBCdWZmZXIuYWxsb2MoMTYsIDApXG4gIHRoaXMuY2FjaGUgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMClcbn1cblxuLy8gZnJvbSBodHRwOi8vYml0d2lzZXNoaWZ0bGVmdC5naXRodWIuaW8vc2pjbC9kb2Mvc3ltYm9scy9zcmMvY29yZV9nY20uanMuaHRtbFxuLy8gYnkgSnVobyBWw6Row6QtSGVydHR1YVxuR0hBU0gucHJvdG90eXBlLmdoYXNoID0gZnVuY3Rpb24gKGJsb2NrKSB7XG4gIHZhciBpID0gLTFcbiAgd2hpbGUgKCsraSA8IGJsb2NrLmxlbmd0aCkge1xuICAgIHRoaXMuc3RhdGVbaV0gXj0gYmxvY2tbaV1cbiAgfVxuICB0aGlzLl9tdWx0aXBseSgpXG59XG5cbkdIQVNILnByb3RvdHlwZS5fbXVsdGlwbHkgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBWaSA9IHRvQXJyYXkodGhpcy5oKVxuICB2YXIgWmkgPSBbMCwgMCwgMCwgMF1cbiAgdmFyIGosIHhpLCBsc2JWaVxuICB2YXIgaSA9IC0xXG4gIHdoaWxlICgrK2kgPCAxMjgpIHtcbiAgICB4aSA9ICh0aGlzLnN0YXRlW35+KGkgLyA4KV0gJiAoMSA8PCAoNyAtIChpICUgOCkpKSkgIT09IDBcbiAgICBpZiAoeGkpIHtcbiAgICAgIC8vIFpfaSsxID0gWl9pIF4gVl9pXG4gICAgICBaaVswXSBePSBWaVswXVxuICAgICAgWmlbMV0gXj0gVmlbMV1cbiAgICAgIFppWzJdIF49IFZpWzJdXG4gICAgICBaaVszXSBePSBWaVszXVxuICAgIH1cblxuICAgIC8vIFN0b3JlIHRoZSB2YWx1ZSBvZiBMU0IoVl9pKVxuICAgIGxzYlZpID0gKFZpWzNdICYgMSkgIT09IDBcblxuICAgIC8vIFZfaSsxID0gVl9pID4+IDFcbiAgICBmb3IgKGogPSAzOyBqID4gMDsgai0tKSB7XG4gICAgICBWaVtqXSA9IChWaVtqXSA+Pj4gMSkgfCAoKFZpW2ogLSAxXSAmIDEpIDw8IDMxKVxuICAgIH1cbiAgICBWaVswXSA9IFZpWzBdID4+PiAxXG5cbiAgICAvLyBJZiBMU0IoVl9pKSBpcyAxLCBWX2krMSA9IChWX2kgPj4gMSkgXiBSXG4gICAgaWYgKGxzYlZpKSB7XG4gICAgICBWaVswXSA9IFZpWzBdIF4gKDB4ZTEgPDwgMjQpXG4gICAgfVxuICB9XG4gIHRoaXMuc3RhdGUgPSBmcm9tQXJyYXkoWmkpXG59XG5cbkdIQVNILnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoYnVmKSB7XG4gIHRoaXMuY2FjaGUgPSBCdWZmZXIuY29uY2F0KFt0aGlzLmNhY2hlLCBidWZdKVxuICB2YXIgY2h1bmtcbiAgd2hpbGUgKHRoaXMuY2FjaGUubGVuZ3RoID49IDE2KSB7XG4gICAgY2h1bmsgPSB0aGlzLmNhY2hlLnNsaWNlKDAsIDE2KVxuICAgIHRoaXMuY2FjaGUgPSB0aGlzLmNhY2hlLnNsaWNlKDE2KVxuICAgIHRoaXMuZ2hhc2goY2h1bmspXG4gIH1cbn1cblxuR0hBU0gucHJvdG90eXBlLmZpbmFsID0gZnVuY3Rpb24gKGFibCwgYmwpIHtcbiAgaWYgKHRoaXMuY2FjaGUubGVuZ3RoKSB7XG4gICAgdGhpcy5naGFzaChCdWZmZXIuY29uY2F0KFt0aGlzLmNhY2hlLCBaRVJPRVNdLCAxNikpXG4gIH1cblxuICB0aGlzLmdoYXNoKGZyb21BcnJheShbMCwgYWJsLCAwLCBibF0pKVxuICByZXR1cm4gdGhpcy5zdGF0ZVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEdIQVNIXG4iLCJ2YXIgQXV0aENpcGhlciA9IHJlcXVpcmUoJy4vYXV0aENpcGhlcicpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcbnZhciBNT0RFUyA9IHJlcXVpcmUoJy4vbW9kZXMnKVxudmFyIFN0cmVhbUNpcGhlciA9IHJlcXVpcmUoJy4vc3RyZWFtQ2lwaGVyJylcbnZhciBUcmFuc2Zvcm0gPSByZXF1aXJlKCdjaXBoZXItYmFzZScpXG52YXIgYWVzID0gcmVxdWlyZSgnLi9hZXMnKVxudmFyIGVidGsgPSByZXF1aXJlKCdldnBfYnl0ZXN0b2tleScpXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG5cbmZ1bmN0aW9uIERlY2lwaGVyIChtb2RlLCBrZXksIGl2KSB7XG4gIFRyYW5zZm9ybS5jYWxsKHRoaXMpXG5cbiAgdGhpcy5fY2FjaGUgPSBuZXcgU3BsaXR0ZXIoKVxuICB0aGlzLl9sYXN0ID0gdm9pZCAwXG4gIHRoaXMuX2NpcGhlciA9IG5ldyBhZXMuQUVTKGtleSlcbiAgdGhpcy5fcHJldiA9IEJ1ZmZlci5mcm9tKGl2KVxuICB0aGlzLl9tb2RlID0gbW9kZVxuICB0aGlzLl9hdXRvcGFkZGluZyA9IHRydWVcbn1cblxuaW5oZXJpdHMoRGVjaXBoZXIsIFRyYW5zZm9ybSlcblxuRGVjaXBoZXIucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoZGF0YSkge1xuICB0aGlzLl9jYWNoZS5hZGQoZGF0YSlcbiAgdmFyIGNodW5rXG4gIHZhciB0aGluZ1xuICB2YXIgb3V0ID0gW11cbiAgd2hpbGUgKChjaHVuayA9IHRoaXMuX2NhY2hlLmdldCh0aGlzLl9hdXRvcGFkZGluZykpKSB7XG4gICAgdGhpbmcgPSB0aGlzLl9tb2RlLmRlY3J5cHQodGhpcywgY2h1bmspXG4gICAgb3V0LnB1c2godGhpbmcpXG4gIH1cbiAgcmV0dXJuIEJ1ZmZlci5jb25jYXQob3V0KVxufVxuXG5EZWNpcGhlci5wcm90b3R5cGUuX2ZpbmFsID0gZnVuY3Rpb24gKCkge1xuICB2YXIgY2h1bmsgPSB0aGlzLl9jYWNoZS5mbHVzaCgpXG4gIGlmICh0aGlzLl9hdXRvcGFkZGluZykge1xuICAgIHJldHVybiB1bnBhZCh0aGlzLl9tb2RlLmRlY3J5cHQodGhpcywgY2h1bmspKVxuICB9IGVsc2UgaWYgKGNodW5rKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdkYXRhIG5vdCBtdWx0aXBsZSBvZiBibG9jayBsZW5ndGgnKVxuICB9XG59XG5cbkRlY2lwaGVyLnByb3RvdHlwZS5zZXRBdXRvUGFkZGluZyA9IGZ1bmN0aW9uIChzZXRUbykge1xuICB0aGlzLl9hdXRvcGFkZGluZyA9ICEhc2V0VG9cbiAgcmV0dXJuIHRoaXNcbn1cblxuZnVuY3Rpb24gU3BsaXR0ZXIgKCkge1xuICB0aGlzLmNhY2hlID0gQnVmZmVyLmFsbG9jVW5zYWZlKDApXG59XG5cblNwbGl0dGVyLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAoZGF0YSkge1xuICB0aGlzLmNhY2hlID0gQnVmZmVyLmNvbmNhdChbdGhpcy5jYWNoZSwgZGF0YV0pXG59XG5cblNwbGl0dGVyLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoYXV0b1BhZGRpbmcpIHtcbiAgdmFyIG91dFxuICBpZiAoYXV0b1BhZGRpbmcpIHtcbiAgICBpZiAodGhpcy5jYWNoZS5sZW5ndGggPiAxNikge1xuICAgICAgb3V0ID0gdGhpcy5jYWNoZS5zbGljZSgwLCAxNilcbiAgICAgIHRoaXMuY2FjaGUgPSB0aGlzLmNhY2hlLnNsaWNlKDE2KVxuICAgICAgcmV0dXJuIG91dFxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAodGhpcy5jYWNoZS5sZW5ndGggPj0gMTYpIHtcbiAgICAgIG91dCA9IHRoaXMuY2FjaGUuc2xpY2UoMCwgMTYpXG4gICAgICB0aGlzLmNhY2hlID0gdGhpcy5jYWNoZS5zbGljZSgxNilcbiAgICAgIHJldHVybiBvdXRcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbnVsbFxufVxuXG5TcGxpdHRlci5wcm90b3R5cGUuZmx1c2ggPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLmNhY2hlLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2FjaGVcbn1cblxuZnVuY3Rpb24gdW5wYWQgKGxhc3QpIHtcbiAgdmFyIHBhZGRlZCA9IGxhc3RbMTVdXG4gIGlmIChwYWRkZWQgPCAxIHx8IHBhZGRlZCA+IDE2KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCd1bmFibGUgdG8gZGVjcnlwdCBkYXRhJylcbiAgfVxuICB2YXIgaSA9IC0xXG4gIHdoaWxlICgrK2kgPCBwYWRkZWQpIHtcbiAgICBpZiAobGFzdFsoaSArICgxNiAtIHBhZGRlZCkpXSAhPT0gcGFkZGVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3VuYWJsZSB0byBkZWNyeXB0IGRhdGEnKVxuICAgIH1cbiAgfVxuICBpZiAocGFkZGVkID09PSAxNikgcmV0dXJuXG5cbiAgcmV0dXJuIGxhc3Quc2xpY2UoMCwgMTYgLSBwYWRkZWQpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZURlY2lwaGVyaXYgKHN1aXRlLCBwYXNzd29yZCwgaXYpIHtcbiAgdmFyIGNvbmZpZyA9IE1PREVTW3N1aXRlLnRvTG93ZXJDYXNlKCldXG4gIGlmICghY29uZmlnKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIHN1aXRlIHR5cGUnKVxuXG4gIGlmICh0eXBlb2YgaXYgPT09ICdzdHJpbmcnKSBpdiA9IEJ1ZmZlci5mcm9tKGl2KVxuICBpZiAoY29uZmlnLm1vZGUgIT09ICdHQ00nICYmIGl2Lmxlbmd0aCAhPT0gY29uZmlnLml2KSB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIGl2IGxlbmd0aCAnICsgaXYubGVuZ3RoKVxuXG4gIGlmICh0eXBlb2YgcGFzc3dvcmQgPT09ICdzdHJpbmcnKSBwYXNzd29yZCA9IEJ1ZmZlci5mcm9tKHBhc3N3b3JkKVxuICBpZiAocGFzc3dvcmQubGVuZ3RoICE9PSBjb25maWcua2V5IC8gOCkgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBrZXkgbGVuZ3RoICcgKyBwYXNzd29yZC5sZW5ndGgpXG5cbiAgaWYgKGNvbmZpZy50eXBlID09PSAnc3RyZWFtJykge1xuICAgIHJldHVybiBuZXcgU3RyZWFtQ2lwaGVyKGNvbmZpZy5tb2R1bGUsIHBhc3N3b3JkLCBpdiwgdHJ1ZSlcbiAgfSBlbHNlIGlmIChjb25maWcudHlwZSA9PT0gJ2F1dGgnKSB7XG4gICAgcmV0dXJuIG5ldyBBdXRoQ2lwaGVyKGNvbmZpZy5tb2R1bGUsIHBhc3N3b3JkLCBpdiwgdHJ1ZSlcbiAgfVxuXG4gIHJldHVybiBuZXcgRGVjaXBoZXIoY29uZmlnLm1vZHVsZSwgcGFzc3dvcmQsIGl2KVxufVxuXG5mdW5jdGlvbiBjcmVhdGVEZWNpcGhlciAoc3VpdGUsIHBhc3N3b3JkKSB7XG4gIHZhciBjb25maWcgPSBNT0RFU1tzdWl0ZS50b0xvd2VyQ2FzZSgpXVxuICBpZiAoIWNvbmZpZykgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBzdWl0ZSB0eXBlJylcblxuICB2YXIga2V5cyA9IGVidGsocGFzc3dvcmQsIGZhbHNlLCBjb25maWcua2V5LCBjb25maWcuaXYpXG4gIHJldHVybiBjcmVhdGVEZWNpcGhlcml2KHN1aXRlLCBrZXlzLmtleSwga2V5cy5pdilcbn1cblxuZXhwb3J0cy5jcmVhdGVEZWNpcGhlciA9IGNyZWF0ZURlY2lwaGVyXG5leHBvcnRzLmNyZWF0ZURlY2lwaGVyaXYgPSBjcmVhdGVEZWNpcGhlcml2XG4iLCJleHBvcnRzWydkZXMtZWNiJ10gPSB7XG4gIGtleTogOCxcbiAgaXY6IDBcbn1cbmV4cG9ydHNbJ2Rlcy1jYmMnXSA9IGV4cG9ydHMuZGVzID0ge1xuICBrZXk6IDgsXG4gIGl2OiA4XG59XG5leHBvcnRzWydkZXMtZWRlMy1jYmMnXSA9IGV4cG9ydHMuZGVzMyA9IHtcbiAga2V5OiAyNCxcbiAgaXY6IDhcbn1cbmV4cG9ydHNbJ2Rlcy1lZGUzJ10gPSB7XG4gIGtleTogMjQsXG4gIGl2OiAwXG59XG5leHBvcnRzWydkZXMtZWRlLWNiYyddID0ge1xuICBrZXk6IDE2LFxuICBpdjogOFxufVxuZXhwb3J0c1snZGVzLWVkZSddID0ge1xuICBrZXk6IDE2LFxuICBpdjogMFxufVxuIiwidmFyIGdlbmVyYXRlUHJpbWUgPSByZXF1aXJlKCcuL2xpYi9nZW5lcmF0ZVByaW1lJylcbnZhciBwcmltZXMgPSByZXF1aXJlKCcuL2xpYi9wcmltZXMuanNvbicpXG5cbnZhciBESCA9IHJlcXVpcmUoJy4vbGliL2RoJylcblxuZnVuY3Rpb24gZ2V0RGlmZmllSGVsbG1hbiAobW9kKSB7XG4gIHZhciBwcmltZSA9IG5ldyBCdWZmZXIocHJpbWVzW21vZF0ucHJpbWUsICdoZXgnKVxuICB2YXIgZ2VuID0gbmV3IEJ1ZmZlcihwcmltZXNbbW9kXS5nZW4sICdoZXgnKVxuXG4gIHJldHVybiBuZXcgREgocHJpbWUsIGdlbilcbn1cblxudmFyIEVOQ09ESU5HUyA9IHtcbiAgJ2JpbmFyeSc6IHRydWUsICdoZXgnOiB0cnVlLCAnYmFzZTY0JzogdHJ1ZVxufVxuXG5mdW5jdGlvbiBjcmVhdGVEaWZmaWVIZWxsbWFuIChwcmltZSwgZW5jLCBnZW5lcmF0b3IsIGdlbmMpIHtcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihlbmMpIHx8IEVOQ09ESU5HU1tlbmNdID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gY3JlYXRlRGlmZmllSGVsbG1hbihwcmltZSwgJ2JpbmFyeScsIGVuYywgZ2VuZXJhdG9yKVxuICB9XG5cbiAgZW5jID0gZW5jIHx8ICdiaW5hcnknXG4gIGdlbmMgPSBnZW5jIHx8ICdiaW5hcnknXG4gIGdlbmVyYXRvciA9IGdlbmVyYXRvciB8fCBuZXcgQnVmZmVyKFsyXSlcblxuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihnZW5lcmF0b3IpKSB7XG4gICAgZ2VuZXJhdG9yID0gbmV3IEJ1ZmZlcihnZW5lcmF0b3IsIGdlbmMpXG4gIH1cblxuICBpZiAodHlwZW9mIHByaW1lID09PSAnbnVtYmVyJykge1xuICAgIHJldHVybiBuZXcgREgoZ2VuZXJhdGVQcmltZShwcmltZSwgZ2VuZXJhdG9yKSwgZ2VuZXJhdG9yLCB0cnVlKVxuICB9XG5cbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIocHJpbWUpKSB7XG4gICAgcHJpbWUgPSBuZXcgQnVmZmVyKHByaW1lLCBlbmMpXG4gIH1cblxuICByZXR1cm4gbmV3IERIKHByaW1lLCBnZW5lcmF0b3IsIHRydWUpXG59XG5cbmV4cG9ydHMuRGlmZmllSGVsbG1hbkdyb3VwID0gZXhwb3J0cy5jcmVhdGVEaWZmaWVIZWxsbWFuR3JvdXAgPSBleHBvcnRzLmdldERpZmZpZUhlbGxtYW4gPSBnZXREaWZmaWVIZWxsbWFuXG5leHBvcnRzLmNyZWF0ZURpZmZpZUhlbGxtYW4gPSBleHBvcnRzLkRpZmZpZUhlbGxtYW4gPSBjcmVhdGVEaWZmaWVIZWxsbWFuXG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuXHRpZiAoIW1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcblx0XHRtb2R1bGUuZGVwcmVjYXRlID0gZnVuY3Rpb24oKSB7fTtcblx0XHRtb2R1bGUucGF0aHMgPSBbXTtcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcblx0XHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XG5cdH1cblx0cmV0dXJuIG1vZHVsZTtcbn07XG4iLCJ2YXIgQk4gPSByZXF1aXJlKCdibi5qcycpO1xudmFyIE1pbGxlclJhYmluID0gcmVxdWlyZSgnbWlsbGVyLXJhYmluJyk7XG52YXIgbWlsbGVyUmFiaW4gPSBuZXcgTWlsbGVyUmFiaW4oKTtcbnZhciBUV0VOVFlGT1VSID0gbmV3IEJOKDI0KTtcbnZhciBFTEVWRU4gPSBuZXcgQk4oMTEpO1xudmFyIFRFTiA9IG5ldyBCTigxMCk7XG52YXIgVEhSRUUgPSBuZXcgQk4oMyk7XG52YXIgU0VWRU4gPSBuZXcgQk4oNyk7XG52YXIgcHJpbWVzID0gcmVxdWlyZSgnLi9nZW5lcmF0ZVByaW1lJyk7XG52YXIgcmFuZG9tQnl0ZXMgPSByZXF1aXJlKCdyYW5kb21ieXRlcycpO1xubW9kdWxlLmV4cG9ydHMgPSBESDtcblxuZnVuY3Rpb24gc2V0UHVibGljS2V5KHB1YiwgZW5jKSB7XG4gIGVuYyA9IGVuYyB8fCAndXRmOCc7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHB1YikpIHtcbiAgICBwdWIgPSBuZXcgQnVmZmVyKHB1YiwgZW5jKTtcbiAgfVxuICB0aGlzLl9wdWIgPSBuZXcgQk4ocHViKTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIHNldFByaXZhdGVLZXkocHJpdiwgZW5jKSB7XG4gIGVuYyA9IGVuYyB8fCAndXRmOCc7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHByaXYpKSB7XG4gICAgcHJpdiA9IG5ldyBCdWZmZXIocHJpdiwgZW5jKTtcbiAgfVxuICB0aGlzLl9wcml2ID0gbmV3IEJOKHByaXYpO1xuICByZXR1cm4gdGhpcztcbn1cblxudmFyIHByaW1lQ2FjaGUgPSB7fTtcbmZ1bmN0aW9uIGNoZWNrUHJpbWUocHJpbWUsIGdlbmVyYXRvcikge1xuICB2YXIgZ2VuID0gZ2VuZXJhdG9yLnRvU3RyaW5nKCdoZXgnKTtcbiAgdmFyIGhleCA9IFtnZW4sIHByaW1lLnRvU3RyaW5nKDE2KV0uam9pbignXycpO1xuICBpZiAoaGV4IGluIHByaW1lQ2FjaGUpIHtcbiAgICByZXR1cm4gcHJpbWVDYWNoZVtoZXhdO1xuICB9XG4gIHZhciBlcnJvciA9IDA7XG5cbiAgaWYgKHByaW1lLmlzRXZlbigpIHx8XG4gICAgIXByaW1lcy5zaW1wbGVTaWV2ZSB8fFxuICAgICFwcmltZXMuZmVybWF0VGVzdChwcmltZSkgfHxcbiAgICAhbWlsbGVyUmFiaW4udGVzdChwcmltZSkpIHtcbiAgICAvL25vdCBhIHByaW1lIHNvICsxXG4gICAgZXJyb3IgKz0gMTtcblxuICAgIGlmIChnZW4gPT09ICcwMicgfHwgZ2VuID09PSAnMDUnKSB7XG4gICAgICAvLyB3ZSdkIGJlIGFibGUgdG8gY2hlY2sgdGhlIGdlbmVyYXRvclxuICAgICAgLy8gaXQgd291bGQgZmFpbCBzbyArOFxuICAgICAgZXJyb3IgKz0gODtcbiAgICB9IGVsc2Uge1xuICAgICAgLy93ZSB3b3VsZG4ndCBiZSBhYmxlIHRvIHRlc3QgdGhlIGdlbmVyYXRvclxuICAgICAgLy8gc28gKzRcbiAgICAgIGVycm9yICs9IDQ7XG4gICAgfVxuICAgIHByaW1lQ2FjaGVbaGV4XSA9IGVycm9yO1xuICAgIHJldHVybiBlcnJvcjtcbiAgfVxuICBpZiAoIW1pbGxlclJhYmluLnRlc3QocHJpbWUuc2hybigxKSkpIHtcbiAgICAvL25vdCBhIHNhZmUgcHJpbWVcbiAgICBlcnJvciArPSAyO1xuICB9XG4gIHZhciByZW07XG4gIHN3aXRjaCAoZ2VuKSB7XG4gICAgY2FzZSAnMDInOlxuICAgICAgaWYgKHByaW1lLm1vZChUV0VOVFlGT1VSKS5jbXAoRUxFVkVOKSkge1xuICAgICAgICAvLyB1bnN1aWRhYmxlIGdlbmVyYXRvclxuICAgICAgICBlcnJvciArPSA4O1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnMDUnOlxuICAgICAgcmVtID0gcHJpbWUubW9kKFRFTik7XG4gICAgICBpZiAocmVtLmNtcChUSFJFRSkgJiYgcmVtLmNtcChTRVZFTikpIHtcbiAgICAgICAgLy8gcHJpbWUgbW9kIDEwIG5lZWRzIHRvIGVxdWFsIDMgb3IgN1xuICAgICAgICBlcnJvciArPSA4O1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIGVycm9yICs9IDQ7XG4gIH1cbiAgcHJpbWVDYWNoZVtoZXhdID0gZXJyb3I7XG4gIHJldHVybiBlcnJvcjtcbn1cblxuZnVuY3Rpb24gREgocHJpbWUsIGdlbmVyYXRvciwgbWFsbGVhYmxlKSB7XG4gIHRoaXMuc2V0R2VuZXJhdG9yKGdlbmVyYXRvcik7XG4gIHRoaXMuX19wcmltZSA9IG5ldyBCTihwcmltZSk7XG4gIHRoaXMuX3ByaW1lID0gQk4ubW9udCh0aGlzLl9fcHJpbWUpO1xuICB0aGlzLl9wcmltZUxlbiA9IHByaW1lLmxlbmd0aDtcbiAgdGhpcy5fcHViID0gdW5kZWZpbmVkO1xuICB0aGlzLl9wcml2ID0gdW5kZWZpbmVkO1xuICB0aGlzLl9wcmltZUNvZGUgPSB1bmRlZmluZWQ7XG4gIGlmIChtYWxsZWFibGUpIHtcbiAgICB0aGlzLnNldFB1YmxpY0tleSA9IHNldFB1YmxpY0tleTtcbiAgICB0aGlzLnNldFByaXZhdGVLZXkgPSBzZXRQcml2YXRlS2V5O1xuICB9IGVsc2Uge1xuICAgIHRoaXMuX3ByaW1lQ29kZSA9IDg7XG4gIH1cbn1cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShESC5wcm90b3R5cGUsICd2ZXJpZnlFcnJvcicsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHR5cGVvZiB0aGlzLl9wcmltZUNvZGUgIT09ICdudW1iZXInKSB7XG4gICAgICB0aGlzLl9wcmltZUNvZGUgPSBjaGVja1ByaW1lKHRoaXMuX19wcmltZSwgdGhpcy5fX2dlbik7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9wcmltZUNvZGU7XG4gIH1cbn0pO1xuREgucHJvdG90eXBlLmdlbmVyYXRlS2V5cyA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKCF0aGlzLl9wcml2KSB7XG4gICAgdGhpcy5fcHJpdiA9IG5ldyBCTihyYW5kb21CeXRlcyh0aGlzLl9wcmltZUxlbikpO1xuICB9XG4gIHRoaXMuX3B1YiA9IHRoaXMuX2dlbi50b1JlZCh0aGlzLl9wcmltZSkucmVkUG93KHRoaXMuX3ByaXYpLmZyb21SZWQoKTtcbiAgcmV0dXJuIHRoaXMuZ2V0UHVibGljS2V5KCk7XG59O1xuXG5ESC5wcm90b3R5cGUuY29tcHV0ZVNlY3JldCA9IGZ1bmN0aW9uIChvdGhlcikge1xuICBvdGhlciA9IG5ldyBCTihvdGhlcik7XG4gIG90aGVyID0gb3RoZXIudG9SZWQodGhpcy5fcHJpbWUpO1xuICB2YXIgc2VjcmV0ID0gb3RoZXIucmVkUG93KHRoaXMuX3ByaXYpLmZyb21SZWQoKTtcbiAgdmFyIG91dCA9IG5ldyBCdWZmZXIoc2VjcmV0LnRvQXJyYXkoKSk7XG4gIHZhciBwcmltZSA9IHRoaXMuZ2V0UHJpbWUoKTtcbiAgaWYgKG91dC5sZW5ndGggPCBwcmltZS5sZW5ndGgpIHtcbiAgICB2YXIgZnJvbnQgPSBuZXcgQnVmZmVyKHByaW1lLmxlbmd0aCAtIG91dC5sZW5ndGgpO1xuICAgIGZyb250LmZpbGwoMCk7XG4gICAgb3V0ID0gQnVmZmVyLmNvbmNhdChbZnJvbnQsIG91dF0pO1xuICB9XG4gIHJldHVybiBvdXQ7XG59O1xuXG5ESC5wcm90b3R5cGUuZ2V0UHVibGljS2V5ID0gZnVuY3Rpb24gZ2V0UHVibGljS2V5KGVuYykge1xuICByZXR1cm4gZm9ybWF0UmV0dXJuVmFsdWUodGhpcy5fcHViLCBlbmMpO1xufTtcblxuREgucHJvdG90eXBlLmdldFByaXZhdGVLZXkgPSBmdW5jdGlvbiBnZXRQcml2YXRlS2V5KGVuYykge1xuICByZXR1cm4gZm9ybWF0UmV0dXJuVmFsdWUodGhpcy5fcHJpdiwgZW5jKTtcbn07XG5cbkRILnByb3RvdHlwZS5nZXRQcmltZSA9IGZ1bmN0aW9uIChlbmMpIHtcbiAgcmV0dXJuIGZvcm1hdFJldHVyblZhbHVlKHRoaXMuX19wcmltZSwgZW5jKTtcbn07XG5cbkRILnByb3RvdHlwZS5nZXRHZW5lcmF0b3IgPSBmdW5jdGlvbiAoZW5jKSB7XG4gIHJldHVybiBmb3JtYXRSZXR1cm5WYWx1ZSh0aGlzLl9nZW4sIGVuYyk7XG59O1xuXG5ESC5wcm90b3R5cGUuc2V0R2VuZXJhdG9yID0gZnVuY3Rpb24gKGdlbiwgZW5jKSB7XG4gIGVuYyA9IGVuYyB8fCAndXRmOCc7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGdlbikpIHtcbiAgICBnZW4gPSBuZXcgQnVmZmVyKGdlbiwgZW5jKTtcbiAgfVxuICB0aGlzLl9fZ2VuID0gZ2VuO1xuICB0aGlzLl9nZW4gPSBuZXcgQk4oZ2VuKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5mdW5jdGlvbiBmb3JtYXRSZXR1cm5WYWx1ZShibiwgZW5jKSB7XG4gIHZhciBidWYgPSBuZXcgQnVmZmVyKGJuLnRvQXJyYXkoKSk7XG4gIGlmICghZW5jKSB7XG4gICAgcmV0dXJuIGJ1ZjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYnVmLnRvU3RyaW5nKGVuYyk7XG4gIH1cbn1cbiIsInZhciBjcmVhdGVIYXNoID0gcmVxdWlyZSgnY3JlYXRlLWhhc2gnKVxudmFyIHN0cmVhbSA9IHJlcXVpcmUoJ3N0cmVhbScpXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgc2lnbiA9IHJlcXVpcmUoJy4vc2lnbicpXG52YXIgdmVyaWZ5ID0gcmVxdWlyZSgnLi92ZXJpZnknKVxuXG52YXIgYWxnb3JpdGhtcyA9IHJlcXVpcmUoJy4vYWxnb3JpdGhtcy5qc29uJylcbk9iamVjdC5rZXlzKGFsZ29yaXRobXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBhbGdvcml0aG1zW2tleV0uaWQgPSBuZXcgQnVmZmVyKGFsZ29yaXRobXNba2V5XS5pZCwgJ2hleCcpXG4gIGFsZ29yaXRobXNba2V5LnRvTG93ZXJDYXNlKCldID0gYWxnb3JpdGhtc1trZXldXG59KVxuXG5mdW5jdGlvbiBTaWduIChhbGdvcml0aG0pIHtcbiAgc3RyZWFtLldyaXRhYmxlLmNhbGwodGhpcylcblxuICB2YXIgZGF0YSA9IGFsZ29yaXRobXNbYWxnb3JpdGhtXVxuICBpZiAoIWRhdGEpIHRocm93IG5ldyBFcnJvcignVW5rbm93biBtZXNzYWdlIGRpZ2VzdCcpXG5cbiAgdGhpcy5faGFzaFR5cGUgPSBkYXRhLmhhc2hcbiAgdGhpcy5faGFzaCA9IGNyZWF0ZUhhc2goZGF0YS5oYXNoKVxuICB0aGlzLl90YWcgPSBkYXRhLmlkXG4gIHRoaXMuX3NpZ25UeXBlID0gZGF0YS5zaWduXG59XG5pbmhlcml0cyhTaWduLCBzdHJlYW0uV3JpdGFibGUpXG5cblNpZ24ucHJvdG90eXBlLl93cml0ZSA9IGZ1bmN0aW9uIF93cml0ZSAoZGF0YSwgXywgZG9uZSkge1xuICB0aGlzLl9oYXNoLnVwZGF0ZShkYXRhKVxuICBkb25lKClcbn1cblxuU2lnbi5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlIChkYXRhLCBlbmMpIHtcbiAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykgZGF0YSA9IG5ldyBCdWZmZXIoZGF0YSwgZW5jKVxuXG4gIHRoaXMuX2hhc2gudXBkYXRlKGRhdGEpXG4gIHJldHVybiB0aGlzXG59XG5cblNpZ24ucHJvdG90eXBlLnNpZ24gPSBmdW5jdGlvbiBzaWduTWV0aG9kIChrZXksIGVuYykge1xuICB0aGlzLmVuZCgpXG4gIHZhciBoYXNoID0gdGhpcy5faGFzaC5kaWdlc3QoKVxuICB2YXIgc2lnID0gc2lnbihoYXNoLCBrZXksIHRoaXMuX2hhc2hUeXBlLCB0aGlzLl9zaWduVHlwZSwgdGhpcy5fdGFnKVxuXG4gIHJldHVybiBlbmMgPyBzaWcudG9TdHJpbmcoZW5jKSA6IHNpZ1xufVxuXG5mdW5jdGlvbiBWZXJpZnkgKGFsZ29yaXRobSkge1xuICBzdHJlYW0uV3JpdGFibGUuY2FsbCh0aGlzKVxuXG4gIHZhciBkYXRhID0gYWxnb3JpdGhtc1thbGdvcml0aG1dXG4gIGlmICghZGF0YSkgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIG1lc3NhZ2UgZGlnZXN0JylcblxuICB0aGlzLl9oYXNoID0gY3JlYXRlSGFzaChkYXRhLmhhc2gpXG4gIHRoaXMuX3RhZyA9IGRhdGEuaWRcbiAgdGhpcy5fc2lnblR5cGUgPSBkYXRhLnNpZ25cbn1cbmluaGVyaXRzKFZlcmlmeSwgc3RyZWFtLldyaXRhYmxlKVxuXG5WZXJpZnkucHJvdG90eXBlLl93cml0ZSA9IGZ1bmN0aW9uIF93cml0ZSAoZGF0YSwgXywgZG9uZSkge1xuICB0aGlzLl9oYXNoLnVwZGF0ZShkYXRhKVxuICBkb25lKClcbn1cblxuVmVyaWZ5LnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUgKGRhdGEsIGVuYykge1xuICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSBkYXRhID0gbmV3IEJ1ZmZlcihkYXRhLCBlbmMpXG5cbiAgdGhpcy5faGFzaC51cGRhdGUoZGF0YSlcbiAgcmV0dXJuIHRoaXNcbn1cblxuVmVyaWZ5LnByb3RvdHlwZS52ZXJpZnkgPSBmdW5jdGlvbiB2ZXJpZnlNZXRob2QgKGtleSwgc2lnLCBlbmMpIHtcbiAgaWYgKHR5cGVvZiBzaWcgPT09ICdzdHJpbmcnKSBzaWcgPSBuZXcgQnVmZmVyKHNpZywgZW5jKVxuXG4gIHRoaXMuZW5kKClcbiAgdmFyIGhhc2ggPSB0aGlzLl9oYXNoLmRpZ2VzdCgpXG4gIHJldHVybiB2ZXJpZnkoc2lnLCBoYXNoLCBrZXksIHRoaXMuX3NpZ25UeXBlLCB0aGlzLl90YWcpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVNpZ24gKGFsZ29yaXRobSkge1xuICByZXR1cm4gbmV3IFNpZ24oYWxnb3JpdGhtKVxufVxuXG5mdW5jdGlvbiBjcmVhdGVWZXJpZnkgKGFsZ29yaXRobSkge1xuICByZXR1cm4gbmV3IFZlcmlmeShhbGdvcml0aG0pXG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBTaWduOiBjcmVhdGVTaWduLFxuICBWZXJpZnk6IGNyZWF0ZVZlcmlmeSxcbiAgY3JlYXRlU2lnbjogY3JlYXRlU2lnbixcbiAgY3JlYXRlVmVyaWZ5OiBjcmVhdGVWZXJpZnlcbn1cbiIsIi8vIG11Y2ggb2YgdGhpcyBiYXNlZCBvbiBodHRwczovL2dpdGh1Yi5jb20vaW5kdXRueS9zZWxmLXNpZ25lZC9ibG9iL2doLXBhZ2VzL2xpYi9yc2EuanNcbnZhciBjcmVhdGVIbWFjID0gcmVxdWlyZSgnY3JlYXRlLWhtYWMnKVxudmFyIGNydCA9IHJlcXVpcmUoJ2Jyb3dzZXJpZnktcnNhJylcbnZhciBFQyA9IHJlcXVpcmUoJ2VsbGlwdGljJykuZWNcbnZhciBCTiA9IHJlcXVpcmUoJ2JuLmpzJylcbnZhciBwYXJzZUtleXMgPSByZXF1aXJlKCdwYXJzZS1hc24xJylcbnZhciBjdXJ2ZXMgPSByZXF1aXJlKCcuL2N1cnZlcy5qc29uJylcblxuZnVuY3Rpb24gc2lnbiAoaGFzaCwga2V5LCBoYXNoVHlwZSwgc2lnblR5cGUsIHRhZykge1xuICB2YXIgcHJpdiA9IHBhcnNlS2V5cyhrZXkpXG4gIGlmIChwcml2LmN1cnZlKSB7XG4gICAgLy8gcnNhIGtleXMgY2FuIGJlIGludGVycHJldGVkIGFzIGVjZHNhIG9uZXMgaW4gb3BlbnNzbFxuICAgIGlmIChzaWduVHlwZSAhPT0gJ2VjZHNhJyAmJiBzaWduVHlwZSAhPT0gJ2VjZHNhL3JzYScpIHRocm93IG5ldyBFcnJvcignd3JvbmcgcHJpdmF0ZSBrZXkgdHlwZScpXG4gICAgcmV0dXJuIGVjU2lnbihoYXNoLCBwcml2KVxuICB9IGVsc2UgaWYgKHByaXYudHlwZSA9PT0gJ2RzYScpIHtcbiAgICBpZiAoc2lnblR5cGUgIT09ICdkc2EnKSB0aHJvdyBuZXcgRXJyb3IoJ3dyb25nIHByaXZhdGUga2V5IHR5cGUnKVxuICAgIHJldHVybiBkc2FTaWduKGhhc2gsIHByaXYsIGhhc2hUeXBlKVxuICB9IGVsc2Uge1xuICAgIGlmIChzaWduVHlwZSAhPT0gJ3JzYScgJiYgc2lnblR5cGUgIT09ICdlY2RzYS9yc2EnKSB0aHJvdyBuZXcgRXJyb3IoJ3dyb25nIHByaXZhdGUga2V5IHR5cGUnKVxuICB9XG4gIGhhc2ggPSBCdWZmZXIuY29uY2F0KFt0YWcsIGhhc2hdKVxuICB2YXIgbGVuID0gcHJpdi5tb2R1bHVzLmJ5dGVMZW5ndGgoKVxuICB2YXIgcGFkID0gWyAwLCAxIF1cbiAgd2hpbGUgKGhhc2gubGVuZ3RoICsgcGFkLmxlbmd0aCArIDEgPCBsZW4pIHBhZC5wdXNoKDB4ZmYpXG4gIHBhZC5wdXNoKDB4MDApXG4gIHZhciBpID0gLTFcbiAgd2hpbGUgKCsraSA8IGhhc2gubGVuZ3RoKSBwYWQucHVzaChoYXNoW2ldKVxuXG4gIHZhciBvdXQgPSBjcnQocGFkLCBwcml2KVxuICByZXR1cm4gb3V0XG59XG5cbmZ1bmN0aW9uIGVjU2lnbiAoaGFzaCwgcHJpdikge1xuICB2YXIgY3VydmVJZCA9IGN1cnZlc1twcml2LmN1cnZlLmpvaW4oJy4nKV1cbiAgaWYgKCFjdXJ2ZUlkKSB0aHJvdyBuZXcgRXJyb3IoJ3Vua25vd24gY3VydmUgJyArIHByaXYuY3VydmUuam9pbignLicpKVxuXG4gIHZhciBjdXJ2ZSA9IG5ldyBFQyhjdXJ2ZUlkKVxuICB2YXIga2V5ID0gY3VydmUua2V5RnJvbVByaXZhdGUocHJpdi5wcml2YXRlS2V5KVxuICB2YXIgb3V0ID0ga2V5LnNpZ24oaGFzaClcblxuICByZXR1cm4gbmV3IEJ1ZmZlcihvdXQudG9ERVIoKSlcbn1cblxuZnVuY3Rpb24gZHNhU2lnbiAoaGFzaCwgcHJpdiwgYWxnbykge1xuICB2YXIgeCA9IHByaXYucGFyYW1zLnByaXZfa2V5XG4gIHZhciBwID0gcHJpdi5wYXJhbXMucFxuICB2YXIgcSA9IHByaXYucGFyYW1zLnFcbiAgdmFyIGcgPSBwcml2LnBhcmFtcy5nXG4gIHZhciByID0gbmV3IEJOKDApXG4gIHZhciBrXG4gIHZhciBIID0gYml0czJpbnQoaGFzaCwgcSkubW9kKHEpXG4gIHZhciBzID0gZmFsc2VcbiAgdmFyIGt2ID0gZ2V0S2V5KHgsIHEsIGhhc2gsIGFsZ28pXG4gIHdoaWxlIChzID09PSBmYWxzZSkge1xuICAgIGsgPSBtYWtlS2V5KHEsIGt2LCBhbGdvKVxuICAgIHIgPSBtYWtlUihnLCBrLCBwLCBxKVxuICAgIHMgPSBrLmludm0ocSkuaW11bChILmFkZCh4Lm11bChyKSkpLm1vZChxKVxuICAgIGlmIChzLmNtcG4oMCkgPT09IDApIHtcbiAgICAgIHMgPSBmYWxzZVxuICAgICAgciA9IG5ldyBCTigwKVxuICAgIH1cbiAgfVxuICByZXR1cm4gdG9ERVIociwgcylcbn1cblxuZnVuY3Rpb24gdG9ERVIgKHIsIHMpIHtcbiAgciA9IHIudG9BcnJheSgpXG4gIHMgPSBzLnRvQXJyYXkoKVxuXG4gIC8vIFBhZCB2YWx1ZXNcbiAgaWYgKHJbMF0gJiAweDgwKSByID0gWyAwIF0uY29uY2F0KHIpXG4gIGlmIChzWzBdICYgMHg4MCkgcyA9IFsgMCBdLmNvbmNhdChzKVxuXG4gIHZhciB0b3RhbCA9IHIubGVuZ3RoICsgcy5sZW5ndGggKyA0XG4gIHZhciByZXMgPSBbIDB4MzAsIHRvdGFsLCAweDAyLCByLmxlbmd0aCBdXG4gIHJlcyA9IHJlcy5jb25jYXQociwgWyAweDAyLCBzLmxlbmd0aCBdLCBzKVxuICByZXR1cm4gbmV3IEJ1ZmZlcihyZXMpXG59XG5cbmZ1bmN0aW9uIGdldEtleSAoeCwgcSwgaGFzaCwgYWxnbykge1xuICB4ID0gbmV3IEJ1ZmZlcih4LnRvQXJyYXkoKSlcbiAgaWYgKHgubGVuZ3RoIDwgcS5ieXRlTGVuZ3RoKCkpIHtcbiAgICB2YXIgemVyb3MgPSBuZXcgQnVmZmVyKHEuYnl0ZUxlbmd0aCgpIC0geC5sZW5ndGgpXG4gICAgemVyb3MuZmlsbCgwKVxuICAgIHggPSBCdWZmZXIuY29uY2F0KFsgemVyb3MsIHggXSlcbiAgfVxuICB2YXIgaGxlbiA9IGhhc2gubGVuZ3RoXG4gIHZhciBoYml0cyA9IGJpdHMyb2N0ZXRzKGhhc2gsIHEpXG4gIHZhciB2ID0gbmV3IEJ1ZmZlcihobGVuKVxuICB2LmZpbGwoMSlcbiAgdmFyIGsgPSBuZXcgQnVmZmVyKGhsZW4pXG4gIGsuZmlsbCgwKVxuICBrID0gY3JlYXRlSG1hYyhhbGdvLCBrKS51cGRhdGUodikudXBkYXRlKG5ldyBCdWZmZXIoWyAwIF0pKS51cGRhdGUoeCkudXBkYXRlKGhiaXRzKS5kaWdlc3QoKVxuICB2ID0gY3JlYXRlSG1hYyhhbGdvLCBrKS51cGRhdGUodikuZGlnZXN0KClcbiAgayA9IGNyZWF0ZUhtYWMoYWxnbywgaykudXBkYXRlKHYpLnVwZGF0ZShuZXcgQnVmZmVyKFsgMSBdKSkudXBkYXRlKHgpLnVwZGF0ZShoYml0cykuZGlnZXN0KClcbiAgdiA9IGNyZWF0ZUhtYWMoYWxnbywgaykudXBkYXRlKHYpLmRpZ2VzdCgpXG4gIHJldHVybiB7IGs6IGssIHY6IHYgfVxufVxuXG5mdW5jdGlvbiBiaXRzMmludCAob2JpdHMsIHEpIHtcbiAgdmFyIGJpdHMgPSBuZXcgQk4ob2JpdHMpXG4gIHZhciBzaGlmdCA9IChvYml0cy5sZW5ndGggPDwgMykgLSBxLmJpdExlbmd0aCgpXG4gIGlmIChzaGlmdCA+IDApIGJpdHMuaXNocm4oc2hpZnQpXG4gIHJldHVybiBiaXRzXG59XG5cbmZ1bmN0aW9uIGJpdHMyb2N0ZXRzIChiaXRzLCBxKSB7XG4gIGJpdHMgPSBiaXRzMmludChiaXRzLCBxKVxuICBiaXRzID0gYml0cy5tb2QocSlcbiAgdmFyIG91dCA9IG5ldyBCdWZmZXIoYml0cy50b0FycmF5KCkpXG4gIGlmIChvdXQubGVuZ3RoIDwgcS5ieXRlTGVuZ3RoKCkpIHtcbiAgICB2YXIgemVyb3MgPSBuZXcgQnVmZmVyKHEuYnl0ZUxlbmd0aCgpIC0gb3V0Lmxlbmd0aClcbiAgICB6ZXJvcy5maWxsKDApXG4gICAgb3V0ID0gQnVmZmVyLmNvbmNhdChbIHplcm9zLCBvdXQgXSlcbiAgfVxuICByZXR1cm4gb3V0XG59XG5cbmZ1bmN0aW9uIG1ha2VLZXkgKHEsIGt2LCBhbGdvKSB7XG4gIHZhciB0XG4gIHZhciBrXG5cbiAgZG8ge1xuICAgIHQgPSBuZXcgQnVmZmVyKDApXG5cbiAgICB3aGlsZSAodC5sZW5ndGggKiA4IDwgcS5iaXRMZW5ndGgoKSkge1xuICAgICAga3YudiA9IGNyZWF0ZUhtYWMoYWxnbywga3YuaykudXBkYXRlKGt2LnYpLmRpZ2VzdCgpXG4gICAgICB0ID0gQnVmZmVyLmNvbmNhdChbIHQsIGt2LnYgXSlcbiAgICB9XG5cbiAgICBrID0gYml0czJpbnQodCwgcSlcbiAgICBrdi5rID0gY3JlYXRlSG1hYyhhbGdvLCBrdi5rKS51cGRhdGUoa3YudikudXBkYXRlKG5ldyBCdWZmZXIoWyAwIF0pKS5kaWdlc3QoKVxuICAgIGt2LnYgPSBjcmVhdGVIbWFjKGFsZ28sIGt2LmspLnVwZGF0ZShrdi52KS5kaWdlc3QoKVxuICB9IHdoaWxlIChrLmNtcChxKSAhPT0gLTEpXG5cbiAgcmV0dXJuIGtcbn1cblxuZnVuY3Rpb24gbWFrZVIgKGcsIGssIHAsIHEpIHtcbiAgcmV0dXJuIGcudG9SZWQoQk4ubW9udChwKSkucmVkUG93KGspLmZyb21SZWQoKS5tb2QocSlcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaWduXG5tb2R1bGUuZXhwb3J0cy5nZXRLZXkgPSBnZXRLZXlcbm1vZHVsZS5leHBvcnRzLm1ha2VLZXkgPSBtYWtlS2V5XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG52YXIgQk4gPSByZXF1aXJlKCdibi5qcycpO1xudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcbnZhciBCYXNlID0gcmVxdWlyZSgnLi9iYXNlJyk7XG5cbnZhciBhc3NlcnQgPSB1dGlscy5hc3NlcnQ7XG5cbmZ1bmN0aW9uIFNob3J0Q3VydmUoY29uZikge1xuICBCYXNlLmNhbGwodGhpcywgJ3Nob3J0JywgY29uZik7XG5cbiAgdGhpcy5hID0gbmV3IEJOKGNvbmYuYSwgMTYpLnRvUmVkKHRoaXMucmVkKTtcbiAgdGhpcy5iID0gbmV3IEJOKGNvbmYuYiwgMTYpLnRvUmVkKHRoaXMucmVkKTtcbiAgdGhpcy50aW52ID0gdGhpcy50d28ucmVkSW52bSgpO1xuXG4gIHRoaXMuemVyb0EgPSB0aGlzLmEuZnJvbVJlZCgpLmNtcG4oMCkgPT09IDA7XG4gIHRoaXMudGhyZWVBID0gdGhpcy5hLmZyb21SZWQoKS5zdWIodGhpcy5wKS5jbXBuKC0zKSA9PT0gMDtcblxuICAvLyBJZiB0aGUgY3VydmUgaXMgZW5kb21vcnBoaWMsIHByZWNhbGN1bGF0ZSBiZXRhIGFuZCBsYW1iZGFcbiAgdGhpcy5lbmRvID0gdGhpcy5fZ2V0RW5kb21vcnBoaXNtKGNvbmYpO1xuICB0aGlzLl9lbmRvV25hZlQxID0gbmV3IEFycmF5KDQpO1xuICB0aGlzLl9lbmRvV25hZlQyID0gbmV3IEFycmF5KDQpO1xufVxuaW5oZXJpdHMoU2hvcnRDdXJ2ZSwgQmFzZSk7XG5tb2R1bGUuZXhwb3J0cyA9IFNob3J0Q3VydmU7XG5cblNob3J0Q3VydmUucHJvdG90eXBlLl9nZXRFbmRvbW9ycGhpc20gPSBmdW5jdGlvbiBfZ2V0RW5kb21vcnBoaXNtKGNvbmYpIHtcbiAgLy8gTm8gZWZmaWNpZW50IGVuZG9tb3JwaGlzbVxuICBpZiAoIXRoaXMuemVyb0EgfHwgIXRoaXMuZyB8fCAhdGhpcy5uIHx8IHRoaXMucC5tb2RuKDMpICE9PSAxKVxuICAgIHJldHVybjtcblxuICAvLyBDb21wdXRlIGJldGEgYW5kIGxhbWJkYSwgdGhhdCBsYW1iZGEgKiBQID0gKGJldGEgKiBQeDsgUHkpXG4gIHZhciBiZXRhO1xuICB2YXIgbGFtYmRhO1xuICBpZiAoY29uZi5iZXRhKSB7XG4gICAgYmV0YSA9IG5ldyBCTihjb25mLmJldGEsIDE2KS50b1JlZCh0aGlzLnJlZCk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGJldGFzID0gdGhpcy5fZ2V0RW5kb1Jvb3RzKHRoaXMucCk7XG4gICAgLy8gQ2hvb3NlIHRoZSBzbWFsbGVzdCBiZXRhXG4gICAgYmV0YSA9IGJldGFzWzBdLmNtcChiZXRhc1sxXSkgPCAwID8gYmV0YXNbMF0gOiBiZXRhc1sxXTtcbiAgICBiZXRhID0gYmV0YS50b1JlZCh0aGlzLnJlZCk7XG4gIH1cbiAgaWYgKGNvbmYubGFtYmRhKSB7XG4gICAgbGFtYmRhID0gbmV3IEJOKGNvbmYubGFtYmRhLCAxNik7XG4gIH0gZWxzZSB7XG4gICAgLy8gQ2hvb3NlIHRoZSBsYW1iZGEgdGhhdCBpcyBtYXRjaGluZyBzZWxlY3RlZCBiZXRhXG4gICAgdmFyIGxhbWJkYXMgPSB0aGlzLl9nZXRFbmRvUm9vdHModGhpcy5uKTtcbiAgICBpZiAodGhpcy5nLm11bChsYW1iZGFzWzBdKS54LmNtcCh0aGlzLmcueC5yZWRNdWwoYmV0YSkpID09PSAwKSB7XG4gICAgICBsYW1iZGEgPSBsYW1iZGFzWzBdO1xuICAgIH0gZWxzZSB7XG4gICAgICBsYW1iZGEgPSBsYW1iZGFzWzFdO1xuICAgICAgYXNzZXJ0KHRoaXMuZy5tdWwobGFtYmRhKS54LmNtcCh0aGlzLmcueC5yZWRNdWwoYmV0YSkpID09PSAwKTtcbiAgICB9XG4gIH1cblxuICAvLyBHZXQgYmFzaXMgdmVjdG9ycywgdXNlZCBmb3IgYmFsYW5jZWQgbGVuZ3RoLXR3byByZXByZXNlbnRhdGlvblxuICB2YXIgYmFzaXM7XG4gIGlmIChjb25mLmJhc2lzKSB7XG4gICAgYmFzaXMgPSBjb25mLmJhc2lzLm1hcChmdW5jdGlvbih2ZWMpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGE6IG5ldyBCTih2ZWMuYSwgMTYpLFxuICAgICAgICBiOiBuZXcgQk4odmVjLmIsIDE2KVxuICAgICAgfTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBiYXNpcyA9IHRoaXMuX2dldEVuZG9CYXNpcyhsYW1iZGEpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBiZXRhOiBiZXRhLFxuICAgIGxhbWJkYTogbGFtYmRhLFxuICAgIGJhc2lzOiBiYXNpc1xuICB9O1xufTtcblxuU2hvcnRDdXJ2ZS5wcm90b3R5cGUuX2dldEVuZG9Sb290cyA9IGZ1bmN0aW9uIF9nZXRFbmRvUm9vdHMobnVtKSB7XG4gIC8vIEZpbmQgcm9vdHMgb2YgZm9yIHheMiArIHggKyAxIGluIEZcbiAgLy8gUm9vdCA9ICgtMSArLSBTcXJ0KC0zKSkgLyAyXG4gIC8vXG4gIHZhciByZWQgPSBudW0gPT09IHRoaXMucCA/IHRoaXMucmVkIDogQk4ubW9udChudW0pO1xuICB2YXIgdGludiA9IG5ldyBCTigyKS50b1JlZChyZWQpLnJlZEludm0oKTtcbiAgdmFyIG50aW52ID0gdGludi5yZWROZWcoKTtcblxuICB2YXIgcyA9IG5ldyBCTigzKS50b1JlZChyZWQpLnJlZE5lZygpLnJlZFNxcnQoKS5yZWRNdWwodGludik7XG5cbiAgdmFyIGwxID0gbnRpbnYucmVkQWRkKHMpLmZyb21SZWQoKTtcbiAgdmFyIGwyID0gbnRpbnYucmVkU3ViKHMpLmZyb21SZWQoKTtcbiAgcmV0dXJuIFsgbDEsIGwyIF07XG59O1xuXG5TaG9ydEN1cnZlLnByb3RvdHlwZS5fZ2V0RW5kb0Jhc2lzID0gZnVuY3Rpb24gX2dldEVuZG9CYXNpcyhsYW1iZGEpIHtcbiAgLy8gYXByeFNxcnQgPj0gc3FydCh0aGlzLm4pXG4gIHZhciBhcHJ4U3FydCA9IHRoaXMubi51c2hybihNYXRoLmZsb29yKHRoaXMubi5iaXRMZW5ndGgoKSAvIDIpKTtcblxuICAvLyAzLjc0XG4gIC8vIFJ1biBFR0NELCB1bnRpbCByKEwgKyAxKSA8IGFwcnhTcXJ0XG4gIHZhciB1ID0gbGFtYmRhO1xuICB2YXIgdiA9IHRoaXMubi5jbG9uZSgpO1xuICB2YXIgeDEgPSBuZXcgQk4oMSk7XG4gIHZhciB5MSA9IG5ldyBCTigwKTtcbiAgdmFyIHgyID0gbmV3IEJOKDApO1xuICB2YXIgeTIgPSBuZXcgQk4oMSk7XG5cbiAgLy8gTk9URTogYWxsIHZlY3RvcnMgYXJlIHJvb3RzIG9mOiBhICsgYiAqIGxhbWJkYSA9IDAgKG1vZCBuKVxuICB2YXIgYTA7XG4gIHZhciBiMDtcbiAgLy8gRmlyc3QgdmVjdG9yXG4gIHZhciBhMTtcbiAgdmFyIGIxO1xuICAvLyBTZWNvbmQgdmVjdG9yXG4gIHZhciBhMjtcbiAgdmFyIGIyO1xuXG4gIHZhciBwcmV2UjtcbiAgdmFyIGkgPSAwO1xuICB2YXIgcjtcbiAgdmFyIHg7XG4gIHdoaWxlICh1LmNtcG4oMCkgIT09IDApIHtcbiAgICB2YXIgcSA9IHYuZGl2KHUpO1xuICAgIHIgPSB2LnN1YihxLm11bCh1KSk7XG4gICAgeCA9IHgyLnN1YihxLm11bCh4MSkpO1xuICAgIHZhciB5ID0geTIuc3ViKHEubXVsKHkxKSk7XG5cbiAgICBpZiAoIWExICYmIHIuY21wKGFwcnhTcXJ0KSA8IDApIHtcbiAgICAgIGEwID0gcHJldlIubmVnKCk7XG4gICAgICBiMCA9IHgxO1xuICAgICAgYTEgPSByLm5lZygpO1xuICAgICAgYjEgPSB4O1xuICAgIH0gZWxzZSBpZiAoYTEgJiYgKytpID09PSAyKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgcHJldlIgPSByO1xuXG4gICAgdiA9IHU7XG4gICAgdSA9IHI7XG4gICAgeDIgPSB4MTtcbiAgICB4MSA9IHg7XG4gICAgeTIgPSB5MTtcbiAgICB5MSA9IHk7XG4gIH1cbiAgYTIgPSByLm5lZygpO1xuICBiMiA9IHg7XG5cbiAgdmFyIGxlbjEgPSBhMS5zcXIoKS5hZGQoYjEuc3FyKCkpO1xuICB2YXIgbGVuMiA9IGEyLnNxcigpLmFkZChiMi5zcXIoKSk7XG4gIGlmIChsZW4yLmNtcChsZW4xKSA+PSAwKSB7XG4gICAgYTIgPSBhMDtcbiAgICBiMiA9IGIwO1xuICB9XG5cbiAgLy8gTm9ybWFsaXplIHNpZ25zXG4gIGlmIChhMS5uZWdhdGl2ZSkge1xuICAgIGExID0gYTEubmVnKCk7XG4gICAgYjEgPSBiMS5uZWcoKTtcbiAgfVxuICBpZiAoYTIubmVnYXRpdmUpIHtcbiAgICBhMiA9IGEyLm5lZygpO1xuICAgIGIyID0gYjIubmVnKCk7XG4gIH1cblxuICByZXR1cm4gW1xuICAgIHsgYTogYTEsIGI6IGIxIH0sXG4gICAgeyBhOiBhMiwgYjogYjIgfVxuICBdO1xufTtcblxuU2hvcnRDdXJ2ZS5wcm90b3R5cGUuX2VuZG9TcGxpdCA9IGZ1bmN0aW9uIF9lbmRvU3BsaXQoaykge1xuICB2YXIgYmFzaXMgPSB0aGlzLmVuZG8uYmFzaXM7XG4gIHZhciB2MSA9IGJhc2lzWzBdO1xuICB2YXIgdjIgPSBiYXNpc1sxXTtcblxuICB2YXIgYzEgPSB2Mi5iLm11bChrKS5kaXZSb3VuZCh0aGlzLm4pO1xuICB2YXIgYzIgPSB2MS5iLm5lZygpLm11bChrKS5kaXZSb3VuZCh0aGlzLm4pO1xuXG4gIHZhciBwMSA9IGMxLm11bCh2MS5hKTtcbiAgdmFyIHAyID0gYzIubXVsKHYyLmEpO1xuICB2YXIgcTEgPSBjMS5tdWwodjEuYik7XG4gIHZhciBxMiA9IGMyLm11bCh2Mi5iKTtcblxuICAvLyBDYWxjdWxhdGUgYW5zd2VyXG4gIHZhciBrMSA9IGsuc3ViKHAxKS5zdWIocDIpO1xuICB2YXIgazIgPSBxMS5hZGQocTIpLm5lZygpO1xuICByZXR1cm4geyBrMTogazEsIGsyOiBrMiB9O1xufTtcblxuU2hvcnRDdXJ2ZS5wcm90b3R5cGUucG9pbnRGcm9tWCA9IGZ1bmN0aW9uIHBvaW50RnJvbVgoeCwgb2RkKSB7XG4gIHggPSBuZXcgQk4oeCwgMTYpO1xuICBpZiAoIXgucmVkKVxuICAgIHggPSB4LnRvUmVkKHRoaXMucmVkKTtcblxuICB2YXIgeTIgPSB4LnJlZFNxcigpLnJlZE11bCh4KS5yZWRJQWRkKHgucmVkTXVsKHRoaXMuYSkpLnJlZElBZGQodGhpcy5iKTtcbiAgdmFyIHkgPSB5Mi5yZWRTcXJ0KCk7XG4gIGlmICh5LnJlZFNxcigpLnJlZFN1Yih5MikuY21wKHRoaXMuemVybykgIT09IDApXG4gICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIHBvaW50Jyk7XG5cbiAgLy8gWFhYIElzIHRoZXJlIGFueSB3YXkgdG8gdGVsbCBpZiB0aGUgbnVtYmVyIGlzIG9kZCB3aXRob3V0IGNvbnZlcnRpbmcgaXRcbiAgLy8gdG8gbm9uLXJlZCBmb3JtP1xuICB2YXIgaXNPZGQgPSB5LmZyb21SZWQoKS5pc09kZCgpO1xuICBpZiAob2RkICYmICFpc09kZCB8fCAhb2RkICYmIGlzT2RkKVxuICAgIHkgPSB5LnJlZE5lZygpO1xuXG4gIHJldHVybiB0aGlzLnBvaW50KHgsIHkpO1xufTtcblxuU2hvcnRDdXJ2ZS5wcm90b3R5cGUudmFsaWRhdGUgPSBmdW5jdGlvbiB2YWxpZGF0ZShwb2ludCkge1xuICBpZiAocG9pbnQuaW5mKVxuICAgIHJldHVybiB0cnVlO1xuXG4gIHZhciB4ID0gcG9pbnQueDtcbiAgdmFyIHkgPSBwb2ludC55O1xuXG4gIHZhciBheCA9IHRoaXMuYS5yZWRNdWwoeCk7XG4gIHZhciByaHMgPSB4LnJlZFNxcigpLnJlZE11bCh4KS5yZWRJQWRkKGF4KS5yZWRJQWRkKHRoaXMuYik7XG4gIHJldHVybiB5LnJlZFNxcigpLnJlZElTdWIocmhzKS5jbXBuKDApID09PSAwO1xufTtcblxuU2hvcnRDdXJ2ZS5wcm90b3R5cGUuX2VuZG9XbmFmTXVsQWRkID1cbiAgICBmdW5jdGlvbiBfZW5kb1duYWZNdWxBZGQocG9pbnRzLCBjb2VmZnMsIGphY29iaWFuUmVzdWx0KSB7XG4gIHZhciBucG9pbnRzID0gdGhpcy5fZW5kb1duYWZUMTtcbiAgdmFyIG5jb2VmZnMgPSB0aGlzLl9lbmRvV25hZlQyO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHBvaW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzcGxpdCA9IHRoaXMuX2VuZG9TcGxpdChjb2VmZnNbaV0pO1xuICAgIHZhciBwID0gcG9pbnRzW2ldO1xuICAgIHZhciBiZXRhID0gcC5fZ2V0QmV0YSgpO1xuXG4gICAgaWYgKHNwbGl0LmsxLm5lZ2F0aXZlKSB7XG4gICAgICBzcGxpdC5rMS5pbmVnKCk7XG4gICAgICBwID0gcC5uZWcodHJ1ZSk7XG4gICAgfVxuICAgIGlmIChzcGxpdC5rMi5uZWdhdGl2ZSkge1xuICAgICAgc3BsaXQuazIuaW5lZygpO1xuICAgICAgYmV0YSA9IGJldGEubmVnKHRydWUpO1xuICAgIH1cblxuICAgIG5wb2ludHNbaSAqIDJdID0gcDtcbiAgICBucG9pbnRzW2kgKiAyICsgMV0gPSBiZXRhO1xuICAgIG5jb2VmZnNbaSAqIDJdID0gc3BsaXQuazE7XG4gICAgbmNvZWZmc1tpICogMiArIDFdID0gc3BsaXQuazI7XG4gIH1cbiAgdmFyIHJlcyA9IHRoaXMuX3duYWZNdWxBZGQoMSwgbnBvaW50cywgbmNvZWZmcywgaSAqIDIsIGphY29iaWFuUmVzdWx0KTtcblxuICAvLyBDbGVhbi11cCByZWZlcmVuY2VzIHRvIHBvaW50cyBhbmQgY29lZmZpY2llbnRzXG4gIGZvciAodmFyIGogPSAwOyBqIDwgaSAqIDI7IGorKykge1xuICAgIG5wb2ludHNbal0gPSBudWxsO1xuICAgIG5jb2VmZnNbal0gPSBudWxsO1xuICB9XG4gIHJldHVybiByZXM7XG59O1xuXG5mdW5jdGlvbiBQb2ludChjdXJ2ZSwgeCwgeSwgaXNSZWQpIHtcbiAgQmFzZS5CYXNlUG9pbnQuY2FsbCh0aGlzLCBjdXJ2ZSwgJ2FmZmluZScpO1xuICBpZiAoeCA9PT0gbnVsbCAmJiB5ID09PSBudWxsKSB7XG4gICAgdGhpcy54ID0gbnVsbDtcbiAgICB0aGlzLnkgPSBudWxsO1xuICAgIHRoaXMuaW5mID0gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnggPSBuZXcgQk4oeCwgMTYpO1xuICAgIHRoaXMueSA9IG5ldyBCTih5LCAxNik7XG4gICAgLy8gRm9yY2UgcmVkZ29tZXJ5IHJlcHJlc2VudGF0aW9uIHdoZW4gbG9hZGluZyBmcm9tIEpTT05cbiAgICBpZiAoaXNSZWQpIHtcbiAgICAgIHRoaXMueC5mb3JjZVJlZCh0aGlzLmN1cnZlLnJlZCk7XG4gICAgICB0aGlzLnkuZm9yY2VSZWQodGhpcy5jdXJ2ZS5yZWQpO1xuICAgIH1cbiAgICBpZiAoIXRoaXMueC5yZWQpXG4gICAgICB0aGlzLnggPSB0aGlzLngudG9SZWQodGhpcy5jdXJ2ZS5yZWQpO1xuICAgIGlmICghdGhpcy55LnJlZClcbiAgICAgIHRoaXMueSA9IHRoaXMueS50b1JlZCh0aGlzLmN1cnZlLnJlZCk7XG4gICAgdGhpcy5pbmYgPSBmYWxzZTtcbiAgfVxufVxuaW5oZXJpdHMoUG9pbnQsIEJhc2UuQmFzZVBvaW50KTtcblxuU2hvcnRDdXJ2ZS5wcm90b3R5cGUucG9pbnQgPSBmdW5jdGlvbiBwb2ludCh4LCB5LCBpc1JlZCkge1xuICByZXR1cm4gbmV3IFBvaW50KHRoaXMsIHgsIHksIGlzUmVkKTtcbn07XG5cblNob3J0Q3VydmUucHJvdG90eXBlLnBvaW50RnJvbUpTT04gPSBmdW5jdGlvbiBwb2ludEZyb21KU09OKG9iaiwgcmVkKSB7XG4gIHJldHVybiBQb2ludC5mcm9tSlNPTih0aGlzLCBvYmosIHJlZCk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuX2dldEJldGEgPSBmdW5jdGlvbiBfZ2V0QmV0YSgpIHtcbiAgaWYgKCF0aGlzLmN1cnZlLmVuZG8pXG4gICAgcmV0dXJuO1xuXG4gIHZhciBwcmUgPSB0aGlzLnByZWNvbXB1dGVkO1xuICBpZiAocHJlICYmIHByZS5iZXRhKVxuICAgIHJldHVybiBwcmUuYmV0YTtcblxuICB2YXIgYmV0YSA9IHRoaXMuY3VydmUucG9pbnQodGhpcy54LnJlZE11bCh0aGlzLmN1cnZlLmVuZG8uYmV0YSksIHRoaXMueSk7XG4gIGlmIChwcmUpIHtcbiAgICB2YXIgY3VydmUgPSB0aGlzLmN1cnZlO1xuICAgIHZhciBlbmRvTXVsID0gZnVuY3Rpb24ocCkge1xuICAgICAgcmV0dXJuIGN1cnZlLnBvaW50KHAueC5yZWRNdWwoY3VydmUuZW5kby5iZXRhKSwgcC55KTtcbiAgICB9O1xuICAgIHByZS5iZXRhID0gYmV0YTtcbiAgICBiZXRhLnByZWNvbXB1dGVkID0ge1xuICAgICAgYmV0YTogbnVsbCxcbiAgICAgIG5hZjogcHJlLm5hZiAmJiB7XG4gICAgICAgIHduZDogcHJlLm5hZi53bmQsXG4gICAgICAgIHBvaW50czogcHJlLm5hZi5wb2ludHMubWFwKGVuZG9NdWwpXG4gICAgICB9LFxuICAgICAgZG91YmxlczogcHJlLmRvdWJsZXMgJiYge1xuICAgICAgICBzdGVwOiBwcmUuZG91Ymxlcy5zdGVwLFxuICAgICAgICBwb2ludHM6IHByZS5kb3VibGVzLnBvaW50cy5tYXAoZW5kb011bClcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIHJldHVybiBiZXRhO1xufTtcblxuUG9pbnQucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgaWYgKCF0aGlzLnByZWNvbXB1dGVkKVxuICAgIHJldHVybiBbIHRoaXMueCwgdGhpcy55IF07XG5cbiAgcmV0dXJuIFsgdGhpcy54LCB0aGlzLnksIHRoaXMucHJlY29tcHV0ZWQgJiYge1xuICAgIGRvdWJsZXM6IHRoaXMucHJlY29tcHV0ZWQuZG91YmxlcyAmJiB7XG4gICAgICBzdGVwOiB0aGlzLnByZWNvbXB1dGVkLmRvdWJsZXMuc3RlcCxcbiAgICAgIHBvaW50czogdGhpcy5wcmVjb21wdXRlZC5kb3VibGVzLnBvaW50cy5zbGljZSgxKVxuICAgIH0sXG4gICAgbmFmOiB0aGlzLnByZWNvbXB1dGVkLm5hZiAmJiB7XG4gICAgICB3bmQ6IHRoaXMucHJlY29tcHV0ZWQubmFmLnduZCxcbiAgICAgIHBvaW50czogdGhpcy5wcmVjb21wdXRlZC5uYWYucG9pbnRzLnNsaWNlKDEpXG4gICAgfVxuICB9IF07XG59O1xuXG5Qb2ludC5mcm9tSlNPTiA9IGZ1bmN0aW9uIGZyb21KU09OKGN1cnZlLCBvYmosIHJlZCkge1xuICBpZiAodHlwZW9mIG9iaiA9PT0gJ3N0cmluZycpXG4gICAgb2JqID0gSlNPTi5wYXJzZShvYmopO1xuICB2YXIgcmVzID0gY3VydmUucG9pbnQob2JqWzBdLCBvYmpbMV0sIHJlZCk7XG4gIGlmICghb2JqWzJdKVxuICAgIHJldHVybiByZXM7XG5cbiAgZnVuY3Rpb24gb2JqMnBvaW50KG9iaikge1xuICAgIHJldHVybiBjdXJ2ZS5wb2ludChvYmpbMF0sIG9ialsxXSwgcmVkKTtcbiAgfVxuXG4gIHZhciBwcmUgPSBvYmpbMl07XG4gIHJlcy5wcmVjb21wdXRlZCA9IHtcbiAgICBiZXRhOiBudWxsLFxuICAgIGRvdWJsZXM6IHByZS5kb3VibGVzICYmIHtcbiAgICAgIHN0ZXA6IHByZS5kb3VibGVzLnN0ZXAsXG4gICAgICBwb2ludHM6IFsgcmVzIF0uY29uY2F0KHByZS5kb3VibGVzLnBvaW50cy5tYXAob2JqMnBvaW50KSlcbiAgICB9LFxuICAgIG5hZjogcHJlLm5hZiAmJiB7XG4gICAgICB3bmQ6IHByZS5uYWYud25kLFxuICAgICAgcG9pbnRzOiBbIHJlcyBdLmNvbmNhdChwcmUubmFmLnBvaW50cy5tYXAob2JqMnBvaW50KSlcbiAgICB9XG4gIH07XG4gIHJldHVybiByZXM7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuaW5zcGVjdCA9IGZ1bmN0aW9uIGluc3BlY3QoKSB7XG4gIGlmICh0aGlzLmlzSW5maW5pdHkoKSlcbiAgICByZXR1cm4gJzxFQyBQb2ludCBJbmZpbml0eT4nO1xuICByZXR1cm4gJzxFQyBQb2ludCB4OiAnICsgdGhpcy54LmZyb21SZWQoKS50b1N0cmluZygxNiwgMikgK1xuICAgICAgJyB5OiAnICsgdGhpcy55LmZyb21SZWQoKS50b1N0cmluZygxNiwgMikgKyAnPic7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuaXNJbmZpbml0eSA9IGZ1bmN0aW9uIGlzSW5maW5pdHkoKSB7XG4gIHJldHVybiB0aGlzLmluZjtcbn07XG5cblBvaW50LnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQocCkge1xuICAvLyBPICsgUCA9IFBcbiAgaWYgKHRoaXMuaW5mKVxuICAgIHJldHVybiBwO1xuXG4gIC8vIFAgKyBPID0gUFxuICBpZiAocC5pbmYpXG4gICAgcmV0dXJuIHRoaXM7XG5cbiAgLy8gUCArIFAgPSAyUFxuICBpZiAodGhpcy5lcShwKSlcbiAgICByZXR1cm4gdGhpcy5kYmwoKTtcblxuICAvLyBQICsgKC1QKSA9IE9cbiAgaWYgKHRoaXMubmVnKCkuZXEocCkpXG4gICAgcmV0dXJuIHRoaXMuY3VydmUucG9pbnQobnVsbCwgbnVsbCk7XG5cbiAgLy8gUCArIFEgPSBPXG4gIGlmICh0aGlzLnguY21wKHAueCkgPT09IDApXG4gICAgcmV0dXJuIHRoaXMuY3VydmUucG9pbnQobnVsbCwgbnVsbCk7XG5cbiAgdmFyIGMgPSB0aGlzLnkucmVkU3ViKHAueSk7XG4gIGlmIChjLmNtcG4oMCkgIT09IDApXG4gICAgYyA9IGMucmVkTXVsKHRoaXMueC5yZWRTdWIocC54KS5yZWRJbnZtKCkpO1xuICB2YXIgbnggPSBjLnJlZFNxcigpLnJlZElTdWIodGhpcy54KS5yZWRJU3ViKHAueCk7XG4gIHZhciBueSA9IGMucmVkTXVsKHRoaXMueC5yZWRTdWIobngpKS5yZWRJU3ViKHRoaXMueSk7XG4gIHJldHVybiB0aGlzLmN1cnZlLnBvaW50KG54LCBueSk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuZGJsID0gZnVuY3Rpb24gZGJsKCkge1xuICBpZiAodGhpcy5pbmYpXG4gICAgcmV0dXJuIHRoaXM7XG5cbiAgLy8gMlAgPSBPXG4gIHZhciB5czEgPSB0aGlzLnkucmVkQWRkKHRoaXMueSk7XG4gIGlmICh5czEuY21wbigwKSA9PT0gMClcbiAgICByZXR1cm4gdGhpcy5jdXJ2ZS5wb2ludChudWxsLCBudWxsKTtcblxuICB2YXIgYSA9IHRoaXMuY3VydmUuYTtcblxuICB2YXIgeDIgPSB0aGlzLngucmVkU3FyKCk7XG4gIHZhciBkeWludiA9IHlzMS5yZWRJbnZtKCk7XG4gIHZhciBjID0geDIucmVkQWRkKHgyKS5yZWRJQWRkKHgyKS5yZWRJQWRkKGEpLnJlZE11bChkeWludik7XG5cbiAgdmFyIG54ID0gYy5yZWRTcXIoKS5yZWRJU3ViKHRoaXMueC5yZWRBZGQodGhpcy54KSk7XG4gIHZhciBueSA9IGMucmVkTXVsKHRoaXMueC5yZWRTdWIobngpKS5yZWRJU3ViKHRoaXMueSk7XG4gIHJldHVybiB0aGlzLmN1cnZlLnBvaW50KG54LCBueSk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuZ2V0WCA9IGZ1bmN0aW9uIGdldFgoKSB7XG4gIHJldHVybiB0aGlzLnguZnJvbVJlZCgpO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmdldFkgPSBmdW5jdGlvbiBnZXRZKCkge1xuICByZXR1cm4gdGhpcy55LmZyb21SZWQoKTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5tdWwgPSBmdW5jdGlvbiBtdWwoaykge1xuICBrID0gbmV3IEJOKGssIDE2KTtcbiAgaWYgKHRoaXMuaXNJbmZpbml0eSgpKVxuICAgIHJldHVybiB0aGlzO1xuICBlbHNlIGlmICh0aGlzLl9oYXNEb3VibGVzKGspKVxuICAgIHJldHVybiB0aGlzLmN1cnZlLl9maXhlZE5hZk11bCh0aGlzLCBrKTtcbiAgZWxzZSBpZiAodGhpcy5jdXJ2ZS5lbmRvKVxuICAgIHJldHVybiB0aGlzLmN1cnZlLl9lbmRvV25hZk11bEFkZChbIHRoaXMgXSwgWyBrIF0pO1xuICBlbHNlXG4gICAgcmV0dXJuIHRoaXMuY3VydmUuX3duYWZNdWwodGhpcywgayk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUubXVsQWRkID0gZnVuY3Rpb24gbXVsQWRkKGsxLCBwMiwgazIpIHtcbiAgdmFyIHBvaW50cyA9IFsgdGhpcywgcDIgXTtcbiAgdmFyIGNvZWZmcyA9IFsgazEsIGsyIF07XG4gIGlmICh0aGlzLmN1cnZlLmVuZG8pXG4gICAgcmV0dXJuIHRoaXMuY3VydmUuX2VuZG9XbmFmTXVsQWRkKHBvaW50cywgY29lZmZzKTtcbiAgZWxzZVxuICAgIHJldHVybiB0aGlzLmN1cnZlLl93bmFmTXVsQWRkKDEsIHBvaW50cywgY29lZmZzLCAyKTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5qbXVsQWRkID0gZnVuY3Rpb24gam11bEFkZChrMSwgcDIsIGsyKSB7XG4gIHZhciBwb2ludHMgPSBbIHRoaXMsIHAyIF07XG4gIHZhciBjb2VmZnMgPSBbIGsxLCBrMiBdO1xuICBpZiAodGhpcy5jdXJ2ZS5lbmRvKVxuICAgIHJldHVybiB0aGlzLmN1cnZlLl9lbmRvV25hZk11bEFkZChwb2ludHMsIGNvZWZmcywgdHJ1ZSk7XG4gIGVsc2VcbiAgICByZXR1cm4gdGhpcy5jdXJ2ZS5fd25hZk11bEFkZCgxLCBwb2ludHMsIGNvZWZmcywgMiwgdHJ1ZSk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuZXEgPSBmdW5jdGlvbiBlcShwKSB7XG4gIHJldHVybiB0aGlzID09PSBwIHx8XG4gICAgICAgICB0aGlzLmluZiA9PT0gcC5pbmYgJiZcbiAgICAgICAgICAgICAodGhpcy5pbmYgfHwgdGhpcy54LmNtcChwLngpID09PSAwICYmIHRoaXMueS5jbXAocC55KSA9PT0gMCk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUubmVnID0gZnVuY3Rpb24gbmVnKF9wcmVjb21wdXRlKSB7XG4gIGlmICh0aGlzLmluZilcbiAgICByZXR1cm4gdGhpcztcblxuICB2YXIgcmVzID0gdGhpcy5jdXJ2ZS5wb2ludCh0aGlzLngsIHRoaXMueS5yZWROZWcoKSk7XG4gIGlmIChfcHJlY29tcHV0ZSAmJiB0aGlzLnByZWNvbXB1dGVkKSB7XG4gICAgdmFyIHByZSA9IHRoaXMucHJlY29tcHV0ZWQ7XG4gICAgdmFyIG5lZ2F0ZSA9IGZ1bmN0aW9uKHApIHtcbiAgICAgIHJldHVybiBwLm5lZygpO1xuICAgIH07XG4gICAgcmVzLnByZWNvbXB1dGVkID0ge1xuICAgICAgbmFmOiBwcmUubmFmICYmIHtcbiAgICAgICAgd25kOiBwcmUubmFmLnduZCxcbiAgICAgICAgcG9pbnRzOiBwcmUubmFmLnBvaW50cy5tYXAobmVnYXRlKVxuICAgICAgfSxcbiAgICAgIGRvdWJsZXM6IHByZS5kb3VibGVzICYmIHtcbiAgICAgICAgc3RlcDogcHJlLmRvdWJsZXMuc3RlcCxcbiAgICAgICAgcG9pbnRzOiBwcmUuZG91Ymxlcy5wb2ludHMubWFwKG5lZ2F0ZSlcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIHJldHVybiByZXM7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUudG9KID0gZnVuY3Rpb24gdG9KKCkge1xuICBpZiAodGhpcy5pbmYpXG4gICAgcmV0dXJuIHRoaXMuY3VydmUuanBvaW50KG51bGwsIG51bGwsIG51bGwpO1xuXG4gIHZhciByZXMgPSB0aGlzLmN1cnZlLmpwb2ludCh0aGlzLngsIHRoaXMueSwgdGhpcy5jdXJ2ZS5vbmUpO1xuICByZXR1cm4gcmVzO1xufTtcblxuZnVuY3Rpb24gSlBvaW50KGN1cnZlLCB4LCB5LCB6KSB7XG4gIEJhc2UuQmFzZVBvaW50LmNhbGwodGhpcywgY3VydmUsICdqYWNvYmlhbicpO1xuICBpZiAoeCA9PT0gbnVsbCAmJiB5ID09PSBudWxsICYmIHogPT09IG51bGwpIHtcbiAgICB0aGlzLnggPSB0aGlzLmN1cnZlLm9uZTtcbiAgICB0aGlzLnkgPSB0aGlzLmN1cnZlLm9uZTtcbiAgICB0aGlzLnogPSBuZXcgQk4oMCk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy54ID0gbmV3IEJOKHgsIDE2KTtcbiAgICB0aGlzLnkgPSBuZXcgQk4oeSwgMTYpO1xuICAgIHRoaXMueiA9IG5ldyBCTih6LCAxNik7XG4gIH1cbiAgaWYgKCF0aGlzLngucmVkKVxuICAgIHRoaXMueCA9IHRoaXMueC50b1JlZCh0aGlzLmN1cnZlLnJlZCk7XG4gIGlmICghdGhpcy55LnJlZClcbiAgICB0aGlzLnkgPSB0aGlzLnkudG9SZWQodGhpcy5jdXJ2ZS5yZWQpO1xuICBpZiAoIXRoaXMuei5yZWQpXG4gICAgdGhpcy56ID0gdGhpcy56LnRvUmVkKHRoaXMuY3VydmUucmVkKTtcblxuICB0aGlzLnpPbmUgPSB0aGlzLnogPT09IHRoaXMuY3VydmUub25lO1xufVxuaW5oZXJpdHMoSlBvaW50LCBCYXNlLkJhc2VQb2ludCk7XG5cblNob3J0Q3VydmUucHJvdG90eXBlLmpwb2ludCA9IGZ1bmN0aW9uIGpwb2ludCh4LCB5LCB6KSB7XG4gIHJldHVybiBuZXcgSlBvaW50KHRoaXMsIHgsIHksIHopO1xufTtcblxuSlBvaW50LnByb3RvdHlwZS50b1AgPSBmdW5jdGlvbiB0b1AoKSB7XG4gIGlmICh0aGlzLmlzSW5maW5pdHkoKSlcbiAgICByZXR1cm4gdGhpcy5jdXJ2ZS5wb2ludChudWxsLCBudWxsKTtcblxuICB2YXIgemludiA9IHRoaXMuei5yZWRJbnZtKCk7XG4gIHZhciB6aW52MiA9IHppbnYucmVkU3FyKCk7XG4gIHZhciBheCA9IHRoaXMueC5yZWRNdWwoemludjIpO1xuICB2YXIgYXkgPSB0aGlzLnkucmVkTXVsKHppbnYyKS5yZWRNdWwoemludik7XG5cbiAgcmV0dXJuIHRoaXMuY3VydmUucG9pbnQoYXgsIGF5KTtcbn07XG5cbkpQb2ludC5wcm90b3R5cGUubmVnID0gZnVuY3Rpb24gbmVnKCkge1xuICByZXR1cm4gdGhpcy5jdXJ2ZS5qcG9pbnQodGhpcy54LCB0aGlzLnkucmVkTmVnKCksIHRoaXMueik7XG59O1xuXG5KUG9pbnQucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIGFkZChwKSB7XG4gIC8vIE8gKyBQID0gUFxuICBpZiAodGhpcy5pc0luZmluaXR5KCkpXG4gICAgcmV0dXJuIHA7XG5cbiAgLy8gUCArIE8gPSBQXG4gIGlmIChwLmlzSW5maW5pdHkoKSlcbiAgICByZXR1cm4gdGhpcztcblxuICAvLyAxMk0gKyA0UyArIDdBXG4gIHZhciBwejIgPSBwLnoucmVkU3FyKCk7XG4gIHZhciB6MiA9IHRoaXMuei5yZWRTcXIoKTtcbiAgdmFyIHUxID0gdGhpcy54LnJlZE11bChwejIpO1xuICB2YXIgdTIgPSBwLngucmVkTXVsKHoyKTtcbiAgdmFyIHMxID0gdGhpcy55LnJlZE11bChwejIucmVkTXVsKHAueikpO1xuICB2YXIgczIgPSBwLnkucmVkTXVsKHoyLnJlZE11bCh0aGlzLnopKTtcblxuICB2YXIgaCA9IHUxLnJlZFN1Yih1Mik7XG4gIHZhciByID0gczEucmVkU3ViKHMyKTtcbiAgaWYgKGguY21wbigwKSA9PT0gMCkge1xuICAgIGlmIChyLmNtcG4oMCkgIT09IDApXG4gICAgICByZXR1cm4gdGhpcy5jdXJ2ZS5qcG9pbnQobnVsbCwgbnVsbCwgbnVsbCk7XG4gICAgZWxzZVxuICAgICAgcmV0dXJuIHRoaXMuZGJsKCk7XG4gIH1cblxuICB2YXIgaDIgPSBoLnJlZFNxcigpO1xuICB2YXIgaDMgPSBoMi5yZWRNdWwoaCk7XG4gIHZhciB2ID0gdTEucmVkTXVsKGgyKTtcblxuICB2YXIgbnggPSByLnJlZFNxcigpLnJlZElBZGQoaDMpLnJlZElTdWIodikucmVkSVN1Yih2KTtcbiAgdmFyIG55ID0gci5yZWRNdWwodi5yZWRJU3ViKG54KSkucmVkSVN1YihzMS5yZWRNdWwoaDMpKTtcbiAgdmFyIG56ID0gdGhpcy56LnJlZE11bChwLnopLnJlZE11bChoKTtcblxuICByZXR1cm4gdGhpcy5jdXJ2ZS5qcG9pbnQobngsIG55LCBueik7XG59O1xuXG5KUG9pbnQucHJvdG90eXBlLm1peGVkQWRkID0gZnVuY3Rpb24gbWl4ZWRBZGQocCkge1xuICAvLyBPICsgUCA9IFBcbiAgaWYgKHRoaXMuaXNJbmZpbml0eSgpKVxuICAgIHJldHVybiBwLnRvSigpO1xuXG4gIC8vIFAgKyBPID0gUFxuICBpZiAocC5pc0luZmluaXR5KCkpXG4gICAgcmV0dXJuIHRoaXM7XG5cbiAgLy8gOE0gKyAzUyArIDdBXG4gIHZhciB6MiA9IHRoaXMuei5yZWRTcXIoKTtcbiAgdmFyIHUxID0gdGhpcy54O1xuICB2YXIgdTIgPSBwLngucmVkTXVsKHoyKTtcbiAgdmFyIHMxID0gdGhpcy55O1xuICB2YXIgczIgPSBwLnkucmVkTXVsKHoyKS5yZWRNdWwodGhpcy56KTtcblxuICB2YXIgaCA9IHUxLnJlZFN1Yih1Mik7XG4gIHZhciByID0gczEucmVkU3ViKHMyKTtcbiAgaWYgKGguY21wbigwKSA9PT0gMCkge1xuICAgIGlmIChyLmNtcG4oMCkgIT09IDApXG4gICAgICByZXR1cm4gdGhpcy5jdXJ2ZS5qcG9pbnQobnVsbCwgbnVsbCwgbnVsbCk7XG4gICAgZWxzZVxuICAgICAgcmV0dXJuIHRoaXMuZGJsKCk7XG4gIH1cblxuICB2YXIgaDIgPSBoLnJlZFNxcigpO1xuICB2YXIgaDMgPSBoMi5yZWRNdWwoaCk7XG4gIHZhciB2ID0gdTEucmVkTXVsKGgyKTtcblxuICB2YXIgbnggPSByLnJlZFNxcigpLnJlZElBZGQoaDMpLnJlZElTdWIodikucmVkSVN1Yih2KTtcbiAgdmFyIG55ID0gci5yZWRNdWwodi5yZWRJU3ViKG54KSkucmVkSVN1YihzMS5yZWRNdWwoaDMpKTtcbiAgdmFyIG56ID0gdGhpcy56LnJlZE11bChoKTtcblxuICByZXR1cm4gdGhpcy5jdXJ2ZS5qcG9pbnQobngsIG55LCBueik7XG59O1xuXG5KUG9pbnQucHJvdG90eXBlLmRibHAgPSBmdW5jdGlvbiBkYmxwKHBvdykge1xuICBpZiAocG93ID09PSAwKVxuICAgIHJldHVybiB0aGlzO1xuICBpZiAodGhpcy5pc0luZmluaXR5KCkpXG4gICAgcmV0dXJuIHRoaXM7XG4gIGlmICghcG93KVxuICAgIHJldHVybiB0aGlzLmRibCgpO1xuXG4gIGlmICh0aGlzLmN1cnZlLnplcm9BIHx8IHRoaXMuY3VydmUudGhyZWVBKSB7XG4gICAgdmFyIHIgPSB0aGlzO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcG93OyBpKyspXG4gICAgICByID0gci5kYmwoKTtcbiAgICByZXR1cm4gcjtcbiAgfVxuXG4gIC8vIDFNICsgMlMgKyAxQSArIE4gKiAoNFMgKyA1TSArIDhBKVxuICAvLyBOID0gMSA9PiA2TSArIDZTICsgOUFcbiAgdmFyIGEgPSB0aGlzLmN1cnZlLmE7XG4gIHZhciB0aW52ID0gdGhpcy5jdXJ2ZS50aW52O1xuXG4gIHZhciBqeCA9IHRoaXMueDtcbiAgdmFyIGp5ID0gdGhpcy55O1xuICB2YXIganogPSB0aGlzLno7XG4gIHZhciBqejQgPSBqei5yZWRTcXIoKS5yZWRTcXIoKTtcblxuICAvLyBSZXVzZSByZXN1bHRzXG4gIHZhciBqeWQgPSBqeS5yZWRBZGQoankpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHBvdzsgaSsrKSB7XG4gICAgdmFyIGp4MiA9IGp4LnJlZFNxcigpO1xuICAgIHZhciBqeWQyID0ganlkLnJlZFNxcigpO1xuICAgIHZhciBqeWQ0ID0ganlkMi5yZWRTcXIoKTtcbiAgICB2YXIgYyA9IGp4Mi5yZWRBZGQoangyKS5yZWRJQWRkKGp4MikucmVkSUFkZChhLnJlZE11bChqejQpKTtcblxuICAgIHZhciB0MSA9IGp4LnJlZE11bChqeWQyKTtcbiAgICB2YXIgbnggPSBjLnJlZFNxcigpLnJlZElTdWIodDEucmVkQWRkKHQxKSk7XG4gICAgdmFyIHQyID0gdDEucmVkSVN1YihueCk7XG4gICAgdmFyIGRueSA9IGMucmVkTXVsKHQyKTtcbiAgICBkbnkgPSBkbnkucmVkSUFkZChkbnkpLnJlZElTdWIoanlkNCk7XG4gICAgdmFyIG56ID0ganlkLnJlZE11bChqeik7XG4gICAgaWYgKGkgKyAxIDwgcG93KVxuICAgICAgano0ID0gano0LnJlZE11bChqeWQ0KTtcblxuICAgIGp4ID0gbng7XG4gICAganogPSBuejtcbiAgICBqeWQgPSBkbnk7XG4gIH1cblxuICByZXR1cm4gdGhpcy5jdXJ2ZS5qcG9pbnQoangsIGp5ZC5yZWRNdWwodGludiksIGp6KTtcbn07XG5cbkpQb2ludC5wcm90b3R5cGUuZGJsID0gZnVuY3Rpb24gZGJsKCkge1xuICBpZiAodGhpcy5pc0luZmluaXR5KCkpXG4gICAgcmV0dXJuIHRoaXM7XG5cbiAgaWYgKHRoaXMuY3VydmUuemVyb0EpXG4gICAgcmV0dXJuIHRoaXMuX3plcm9EYmwoKTtcbiAgZWxzZSBpZiAodGhpcy5jdXJ2ZS50aHJlZUEpXG4gICAgcmV0dXJuIHRoaXMuX3RocmVlRGJsKCk7XG4gIGVsc2VcbiAgICByZXR1cm4gdGhpcy5fZGJsKCk7XG59O1xuXG5KUG9pbnQucHJvdG90eXBlLl96ZXJvRGJsID0gZnVuY3Rpb24gX3plcm9EYmwoKSB7XG4gIHZhciBueDtcbiAgdmFyIG55O1xuICB2YXIgbno7XG4gIC8vIFogPSAxXG4gIGlmICh0aGlzLnpPbmUpIHtcbiAgICAvLyBoeXBlcmVsbGlwdGljLm9yZy9FRkQvZzFwL2F1dG8tc2hvcnR3LWphY29iaWFuLTAuaHRtbFxuICAgIC8vICAgICAjZG91YmxpbmctbWRibC0yMDA3LWJsXG4gICAgLy8gMU0gKyA1UyArIDE0QVxuXG4gICAgLy8gWFggPSBYMV4yXG4gICAgdmFyIHh4ID0gdGhpcy54LnJlZFNxcigpO1xuICAgIC8vIFlZID0gWTFeMlxuICAgIHZhciB5eSA9IHRoaXMueS5yZWRTcXIoKTtcbiAgICAvLyBZWVlZID0gWVleMlxuICAgIHZhciB5eXl5ID0geXkucmVkU3FyKCk7XG4gICAgLy8gUyA9IDIgKiAoKFgxICsgWVkpXjIgLSBYWCAtIFlZWVkpXG4gICAgdmFyIHMgPSB0aGlzLngucmVkQWRkKHl5KS5yZWRTcXIoKS5yZWRJU3ViKHh4KS5yZWRJU3ViKHl5eXkpO1xuICAgIHMgPSBzLnJlZElBZGQocyk7XG4gICAgLy8gTSA9IDMgKiBYWCArIGE7IGEgPSAwXG4gICAgdmFyIG0gPSB4eC5yZWRBZGQoeHgpLnJlZElBZGQoeHgpO1xuICAgIC8vIFQgPSBNIF4gMiAtIDIqU1xuICAgIHZhciB0ID0gbS5yZWRTcXIoKS5yZWRJU3ViKHMpLnJlZElTdWIocyk7XG5cbiAgICAvLyA4ICogWVlZWVxuICAgIHZhciB5eXl5OCA9IHl5eXkucmVkSUFkZCh5eXl5KTtcbiAgICB5eXl5OCA9IHl5eXk4LnJlZElBZGQoeXl5eTgpO1xuICAgIHl5eXk4ID0geXl5eTgucmVkSUFkZCh5eXl5OCk7XG5cbiAgICAvLyBYMyA9IFRcbiAgICBueCA9IHQ7XG4gICAgLy8gWTMgPSBNICogKFMgLSBUKSAtIDggKiBZWVlZXG4gICAgbnkgPSBtLnJlZE11bChzLnJlZElTdWIodCkpLnJlZElTdWIoeXl5eTgpO1xuICAgIC8vIFozID0gMipZMVxuICAgIG56ID0gdGhpcy55LnJlZEFkZCh0aGlzLnkpO1xuICB9IGVsc2Uge1xuICAgIC8vIGh5cGVyZWxsaXB0aWMub3JnL0VGRC9nMXAvYXV0by1zaG9ydHctamFjb2JpYW4tMC5odG1sXG4gICAgLy8gICAgICNkb3VibGluZy1kYmwtMjAwOS1sXG4gICAgLy8gMk0gKyA1UyArIDEzQVxuXG4gICAgLy8gQSA9IFgxXjJcbiAgICB2YXIgYSA9IHRoaXMueC5yZWRTcXIoKTtcbiAgICAvLyBCID0gWTFeMlxuICAgIHZhciBiID0gdGhpcy55LnJlZFNxcigpO1xuICAgIC8vIEMgPSBCXjJcbiAgICB2YXIgYyA9IGIucmVkU3FyKCk7XG4gICAgLy8gRCA9IDIgKiAoKFgxICsgQileMiAtIEEgLSBDKVxuICAgIHZhciBkID0gdGhpcy54LnJlZEFkZChiKS5yZWRTcXIoKS5yZWRJU3ViKGEpLnJlZElTdWIoYyk7XG4gICAgZCA9IGQucmVkSUFkZChkKTtcbiAgICAvLyBFID0gMyAqIEFcbiAgICB2YXIgZSA9IGEucmVkQWRkKGEpLnJlZElBZGQoYSk7XG4gICAgLy8gRiA9IEVeMlxuICAgIHZhciBmID0gZS5yZWRTcXIoKTtcblxuICAgIC8vIDggKiBDXG4gICAgdmFyIGM4ID0gYy5yZWRJQWRkKGMpO1xuICAgIGM4ID0gYzgucmVkSUFkZChjOCk7XG4gICAgYzggPSBjOC5yZWRJQWRkKGM4KTtcblxuICAgIC8vIFgzID0gRiAtIDIgKiBEXG4gICAgbnggPSBmLnJlZElTdWIoZCkucmVkSVN1YihkKTtcbiAgICAvLyBZMyA9IEUgKiAoRCAtIFgzKSAtIDggKiBDXG4gICAgbnkgPSBlLnJlZE11bChkLnJlZElTdWIobngpKS5yZWRJU3ViKGM4KTtcbiAgICAvLyBaMyA9IDIgKiBZMSAqIFoxXG4gICAgbnogPSB0aGlzLnkucmVkTXVsKHRoaXMueik7XG4gICAgbnogPSBuei5yZWRJQWRkKG56KTtcbiAgfVxuXG4gIHJldHVybiB0aGlzLmN1cnZlLmpwb2ludChueCwgbnksIG56KTtcbn07XG5cbkpQb2ludC5wcm90b3R5cGUuX3RocmVlRGJsID0gZnVuY3Rpb24gX3RocmVlRGJsKCkge1xuICB2YXIgbng7XG4gIHZhciBueTtcbiAgdmFyIG56O1xuICAvLyBaID0gMVxuICBpZiAodGhpcy56T25lKSB7XG4gICAgLy8gaHlwZXJlbGxpcHRpYy5vcmcvRUZEL2cxcC9hdXRvLXNob3J0dy1qYWNvYmlhbi0zLmh0bWxcbiAgICAvLyAgICAgI2RvdWJsaW5nLW1kYmwtMjAwNy1ibFxuICAgIC8vIDFNICsgNVMgKyAxNUFcblxuICAgIC8vIFhYID0gWDFeMlxuICAgIHZhciB4eCA9IHRoaXMueC5yZWRTcXIoKTtcbiAgICAvLyBZWSA9IFkxXjJcbiAgICB2YXIgeXkgPSB0aGlzLnkucmVkU3FyKCk7XG4gICAgLy8gWVlZWSA9IFlZXjJcbiAgICB2YXIgeXl5eSA9IHl5LnJlZFNxcigpO1xuICAgIC8vIFMgPSAyICogKChYMSArIFlZKV4yIC0gWFggLSBZWVlZKVxuICAgIHZhciBzID0gdGhpcy54LnJlZEFkZCh5eSkucmVkU3FyKCkucmVkSVN1Yih4eCkucmVkSVN1Yih5eXl5KTtcbiAgICBzID0gcy5yZWRJQWRkKHMpO1xuICAgIC8vIE0gPSAzICogWFggKyBhXG4gICAgdmFyIG0gPSB4eC5yZWRBZGQoeHgpLnJlZElBZGQoeHgpLnJlZElBZGQodGhpcy5jdXJ2ZS5hKTtcbiAgICAvLyBUID0gTV4yIC0gMiAqIFNcbiAgICB2YXIgdCA9IG0ucmVkU3FyKCkucmVkSVN1YihzKS5yZWRJU3ViKHMpO1xuICAgIC8vIFgzID0gVFxuICAgIG54ID0gdDtcbiAgICAvLyBZMyA9IE0gKiAoUyAtIFQpIC0gOCAqIFlZWVlcbiAgICB2YXIgeXl5eTggPSB5eXl5LnJlZElBZGQoeXl5eSk7XG4gICAgeXl5eTggPSB5eXl5OC5yZWRJQWRkKHl5eXk4KTtcbiAgICB5eXl5OCA9IHl5eXk4LnJlZElBZGQoeXl5eTgpO1xuICAgIG55ID0gbS5yZWRNdWwocy5yZWRJU3ViKHQpKS5yZWRJU3ViKHl5eXk4KTtcbiAgICAvLyBaMyA9IDIgKiBZMVxuICAgIG56ID0gdGhpcy55LnJlZEFkZCh0aGlzLnkpO1xuICB9IGVsc2Uge1xuICAgIC8vIGh5cGVyZWxsaXB0aWMub3JnL0VGRC9nMXAvYXV0by1zaG9ydHctamFjb2JpYW4tMy5odG1sI2RvdWJsaW5nLWRibC0yMDAxLWJcbiAgICAvLyAzTSArIDVTXG5cbiAgICAvLyBkZWx0YSA9IFoxXjJcbiAgICB2YXIgZGVsdGEgPSB0aGlzLnoucmVkU3FyKCk7XG4gICAgLy8gZ2FtbWEgPSBZMV4yXG4gICAgdmFyIGdhbW1hID0gdGhpcy55LnJlZFNxcigpO1xuICAgIC8vIGJldGEgPSBYMSAqIGdhbW1hXG4gICAgdmFyIGJldGEgPSB0aGlzLngucmVkTXVsKGdhbW1hKTtcbiAgICAvLyBhbHBoYSA9IDMgKiAoWDEgLSBkZWx0YSkgKiAoWDEgKyBkZWx0YSlcbiAgICB2YXIgYWxwaGEgPSB0aGlzLngucmVkU3ViKGRlbHRhKS5yZWRNdWwodGhpcy54LnJlZEFkZChkZWx0YSkpO1xuICAgIGFscGhhID0gYWxwaGEucmVkQWRkKGFscGhhKS5yZWRJQWRkKGFscGhhKTtcbiAgICAvLyBYMyA9IGFscGhhXjIgLSA4ICogYmV0YVxuICAgIHZhciBiZXRhNCA9IGJldGEucmVkSUFkZChiZXRhKTtcbiAgICBiZXRhNCA9IGJldGE0LnJlZElBZGQoYmV0YTQpO1xuICAgIHZhciBiZXRhOCA9IGJldGE0LnJlZEFkZChiZXRhNCk7XG4gICAgbnggPSBhbHBoYS5yZWRTcXIoKS5yZWRJU3ViKGJldGE4KTtcbiAgICAvLyBaMyA9IChZMSArIFoxKV4yIC0gZ2FtbWEgLSBkZWx0YVxuICAgIG56ID0gdGhpcy55LnJlZEFkZCh0aGlzLnopLnJlZFNxcigpLnJlZElTdWIoZ2FtbWEpLnJlZElTdWIoZGVsdGEpO1xuICAgIC8vIFkzID0gYWxwaGEgKiAoNCAqIGJldGEgLSBYMykgLSA4ICogZ2FtbWFeMlxuICAgIHZhciBnZ2FtbWE4ID0gZ2FtbWEucmVkU3FyKCk7XG4gICAgZ2dhbW1hOCA9IGdnYW1tYTgucmVkSUFkZChnZ2FtbWE4KTtcbiAgICBnZ2FtbWE4ID0gZ2dhbW1hOC5yZWRJQWRkKGdnYW1tYTgpO1xuICAgIGdnYW1tYTggPSBnZ2FtbWE4LnJlZElBZGQoZ2dhbW1hOCk7XG4gICAgbnkgPSBhbHBoYS5yZWRNdWwoYmV0YTQucmVkSVN1YihueCkpLnJlZElTdWIoZ2dhbW1hOCk7XG4gIH1cblxuICByZXR1cm4gdGhpcy5jdXJ2ZS5qcG9pbnQobngsIG55LCBueik7XG59O1xuXG5KUG9pbnQucHJvdG90eXBlLl9kYmwgPSBmdW5jdGlvbiBfZGJsKCkge1xuICB2YXIgYSA9IHRoaXMuY3VydmUuYTtcblxuICAvLyA0TSArIDZTICsgMTBBXG4gIHZhciBqeCA9IHRoaXMueDtcbiAgdmFyIGp5ID0gdGhpcy55O1xuICB2YXIganogPSB0aGlzLno7XG4gIHZhciBqejQgPSBqei5yZWRTcXIoKS5yZWRTcXIoKTtcblxuICB2YXIgangyID0gangucmVkU3FyKCk7XG4gIHZhciBqeTIgPSBqeS5yZWRTcXIoKTtcblxuICB2YXIgYyA9IGp4Mi5yZWRBZGQoangyKS5yZWRJQWRkKGp4MikucmVkSUFkZChhLnJlZE11bChqejQpKTtcblxuICB2YXIganhkNCA9IGp4LnJlZEFkZChqeCk7XG4gIGp4ZDQgPSBqeGQ0LnJlZElBZGQoanhkNCk7XG4gIHZhciB0MSA9IGp4ZDQucmVkTXVsKGp5Mik7XG4gIHZhciBueCA9IGMucmVkU3FyKCkucmVkSVN1Yih0MS5yZWRBZGQodDEpKTtcbiAgdmFyIHQyID0gdDEucmVkSVN1YihueCk7XG5cbiAgdmFyIGp5ZDggPSBqeTIucmVkU3FyKCk7XG4gIGp5ZDggPSBqeWQ4LnJlZElBZGQoanlkOCk7XG4gIGp5ZDggPSBqeWQ4LnJlZElBZGQoanlkOCk7XG4gIGp5ZDggPSBqeWQ4LnJlZElBZGQoanlkOCk7XG4gIHZhciBueSA9IGMucmVkTXVsKHQyKS5yZWRJU3ViKGp5ZDgpO1xuICB2YXIgbnogPSBqeS5yZWRBZGQoankpLnJlZE11bChqeik7XG5cbiAgcmV0dXJuIHRoaXMuY3VydmUuanBvaW50KG54LCBueSwgbnopO1xufTtcblxuSlBvaW50LnByb3RvdHlwZS50cnBsID0gZnVuY3Rpb24gdHJwbCgpIHtcbiAgaWYgKCF0aGlzLmN1cnZlLnplcm9BKVxuICAgIHJldHVybiB0aGlzLmRibCgpLmFkZCh0aGlzKTtcblxuICAvLyBoeXBlcmVsbGlwdGljLm9yZy9FRkQvZzFwL2F1dG8tc2hvcnR3LWphY29iaWFuLTAuaHRtbCN0cmlwbGluZy10cGwtMjAwNy1ibFxuICAvLyA1TSArIDEwUyArIC4uLlxuXG4gIC8vIFhYID0gWDFeMlxuICB2YXIgeHggPSB0aGlzLngucmVkU3FyKCk7XG4gIC8vIFlZID0gWTFeMlxuICB2YXIgeXkgPSB0aGlzLnkucmVkU3FyKCk7XG4gIC8vIFpaID0gWjFeMlxuICB2YXIgenogPSB0aGlzLnoucmVkU3FyKCk7XG4gIC8vIFlZWVkgPSBZWV4yXG4gIHZhciB5eXl5ID0geXkucmVkU3FyKCk7XG4gIC8vIE0gPSAzICogWFggKyBhICogWloyOyBhID0gMFxuICB2YXIgbSA9IHh4LnJlZEFkZCh4eCkucmVkSUFkZCh4eCk7XG4gIC8vIE1NID0gTV4yXG4gIHZhciBtbSA9IG0ucmVkU3FyKCk7XG4gIC8vIEUgPSA2ICogKChYMSArIFlZKV4yIC0gWFggLSBZWVlZKSAtIE1NXG4gIHZhciBlID0gdGhpcy54LnJlZEFkZCh5eSkucmVkU3FyKCkucmVkSVN1Yih4eCkucmVkSVN1Yih5eXl5KTtcbiAgZSA9IGUucmVkSUFkZChlKTtcbiAgZSA9IGUucmVkQWRkKGUpLnJlZElBZGQoZSk7XG4gIGUgPSBlLnJlZElTdWIobW0pO1xuICAvLyBFRSA9IEVeMlxuICB2YXIgZWUgPSBlLnJlZFNxcigpO1xuICAvLyBUID0gMTYqWVlZWVxuICB2YXIgdCA9IHl5eXkucmVkSUFkZCh5eXl5KTtcbiAgdCA9IHQucmVkSUFkZCh0KTtcbiAgdCA9IHQucmVkSUFkZCh0KTtcbiAgdCA9IHQucmVkSUFkZCh0KTtcbiAgLy8gVSA9IChNICsgRSleMiAtIE1NIC0gRUUgLSBUXG4gIHZhciB1ID0gbS5yZWRJQWRkKGUpLnJlZFNxcigpLnJlZElTdWIobW0pLnJlZElTdWIoZWUpLnJlZElTdWIodCk7XG4gIC8vIFgzID0gNCAqIChYMSAqIEVFIC0gNCAqIFlZICogVSlcbiAgdmFyIHl5dTQgPSB5eS5yZWRNdWwodSk7XG4gIHl5dTQgPSB5eXU0LnJlZElBZGQoeXl1NCk7XG4gIHl5dTQgPSB5eXU0LnJlZElBZGQoeXl1NCk7XG4gIHZhciBueCA9IHRoaXMueC5yZWRNdWwoZWUpLnJlZElTdWIoeXl1NCk7XG4gIG54ID0gbngucmVkSUFkZChueCk7XG4gIG54ID0gbngucmVkSUFkZChueCk7XG4gIC8vIFkzID0gOCAqIFkxICogKFUgKiAoVCAtIFUpIC0gRSAqIEVFKVxuICB2YXIgbnkgPSB0aGlzLnkucmVkTXVsKHUucmVkTXVsKHQucmVkSVN1Yih1KSkucmVkSVN1YihlLnJlZE11bChlZSkpKTtcbiAgbnkgPSBueS5yZWRJQWRkKG55KTtcbiAgbnkgPSBueS5yZWRJQWRkKG55KTtcbiAgbnkgPSBueS5yZWRJQWRkKG55KTtcbiAgLy8gWjMgPSAoWjEgKyBFKV4yIC0gWlogLSBFRVxuICB2YXIgbnogPSB0aGlzLnoucmVkQWRkKGUpLnJlZFNxcigpLnJlZElTdWIoenopLnJlZElTdWIoZWUpO1xuXG4gIHJldHVybiB0aGlzLmN1cnZlLmpwb2ludChueCwgbnksIG56KTtcbn07XG5cbkpQb2ludC5wcm90b3R5cGUubXVsID0gZnVuY3Rpb24gbXVsKGssIGtiYXNlKSB7XG4gIGsgPSBuZXcgQk4oaywga2Jhc2UpO1xuXG4gIHJldHVybiB0aGlzLmN1cnZlLl93bmFmTXVsKHRoaXMsIGspO1xufTtcblxuSlBvaW50LnByb3RvdHlwZS5lcSA9IGZ1bmN0aW9uIGVxKHApIHtcbiAgaWYgKHAudHlwZSA9PT0gJ2FmZmluZScpXG4gICAgcmV0dXJuIHRoaXMuZXEocC50b0ooKSk7XG5cbiAgaWYgKHRoaXMgPT09IHApXG4gICAgcmV0dXJuIHRydWU7XG5cbiAgLy8geDEgKiB6Ml4yID09IHgyICogejFeMlxuICB2YXIgejIgPSB0aGlzLnoucmVkU3FyKCk7XG4gIHZhciBwejIgPSBwLnoucmVkU3FyKCk7XG4gIGlmICh0aGlzLngucmVkTXVsKHB6MikucmVkSVN1YihwLngucmVkTXVsKHoyKSkuY21wbigwKSAhPT0gMClcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgLy8geTEgKiB6Ml4zID09IHkyICogejFeM1xuICB2YXIgejMgPSB6Mi5yZWRNdWwodGhpcy56KTtcbiAgdmFyIHB6MyA9IHB6Mi5yZWRNdWwocC56KTtcbiAgcmV0dXJuIHRoaXMueS5yZWRNdWwocHozKS5yZWRJU3ViKHAueS5yZWRNdWwoejMpKS5jbXBuKDApID09PSAwO1xufTtcblxuSlBvaW50LnByb3RvdHlwZS5lcVhUb1AgPSBmdW5jdGlvbiBlcVhUb1AoeCkge1xuICB2YXIgenMgPSB0aGlzLnoucmVkU3FyKCk7XG4gIHZhciByeCA9IHgudG9SZWQodGhpcy5jdXJ2ZS5yZWQpLnJlZE11bCh6cyk7XG4gIGlmICh0aGlzLnguY21wKHJ4KSA9PT0gMClcbiAgICByZXR1cm4gdHJ1ZTtcblxuICB2YXIgeGMgPSB4LmNsb25lKCk7XG4gIHZhciB0ID0gdGhpcy5jdXJ2ZS5yZWROLnJlZE11bCh6cyk7XG4gIGZvciAoOzspIHtcbiAgICB4Yy5pYWRkKHRoaXMuY3VydmUubik7XG4gICAgaWYgKHhjLmNtcCh0aGlzLmN1cnZlLnApID49IDApXG4gICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICByeC5yZWRJQWRkKHQpO1xuICAgIGlmICh0aGlzLnguY21wKHJ4KSA9PT0gMClcbiAgICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuXG5KUG9pbnQucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbiBpbnNwZWN0KCkge1xuICBpZiAodGhpcy5pc0luZmluaXR5KCkpXG4gICAgcmV0dXJuICc8RUMgSlBvaW50IEluZmluaXR5Pic7XG4gIHJldHVybiAnPEVDIEpQb2ludCB4OiAnICsgdGhpcy54LnRvU3RyaW5nKDE2LCAyKSArXG4gICAgICAnIHk6ICcgKyB0aGlzLnkudG9TdHJpbmcoMTYsIDIpICtcbiAgICAgICcgejogJyArIHRoaXMuei50b1N0cmluZygxNiwgMikgKyAnPic7XG59O1xuXG5KUG9pbnQucHJvdG90eXBlLmlzSW5maW5pdHkgPSBmdW5jdGlvbiBpc0luZmluaXR5KCkge1xuICAvLyBYWFggVGhpcyBjb2RlIGFzc3VtZXMgdGhhdCB6ZXJvIGlzIGFsd2F5cyB6ZXJvIGluIHJlZFxuICByZXR1cm4gdGhpcy56LmNtcG4oMCkgPT09IDA7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQk4gPSByZXF1aXJlKCdibi5qcycpO1xudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcbnZhciBCYXNlID0gcmVxdWlyZSgnLi9iYXNlJyk7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbmZ1bmN0aW9uIE1vbnRDdXJ2ZShjb25mKSB7XG4gIEJhc2UuY2FsbCh0aGlzLCAnbW9udCcsIGNvbmYpO1xuXG4gIHRoaXMuYSA9IG5ldyBCTihjb25mLmEsIDE2KS50b1JlZCh0aGlzLnJlZCk7XG4gIHRoaXMuYiA9IG5ldyBCTihjb25mLmIsIDE2KS50b1JlZCh0aGlzLnJlZCk7XG4gIHRoaXMuaTQgPSBuZXcgQk4oNCkudG9SZWQodGhpcy5yZWQpLnJlZEludm0oKTtcbiAgdGhpcy50d28gPSBuZXcgQk4oMikudG9SZWQodGhpcy5yZWQpO1xuICB0aGlzLmEyNCA9IHRoaXMuaTQucmVkTXVsKHRoaXMuYS5yZWRBZGQodGhpcy50d28pKTtcbn1cbmluaGVyaXRzKE1vbnRDdXJ2ZSwgQmFzZSk7XG5tb2R1bGUuZXhwb3J0cyA9IE1vbnRDdXJ2ZTtcblxuTW9udEN1cnZlLnByb3RvdHlwZS52YWxpZGF0ZSA9IGZ1bmN0aW9uIHZhbGlkYXRlKHBvaW50KSB7XG4gIHZhciB4ID0gcG9pbnQubm9ybWFsaXplKCkueDtcbiAgdmFyIHgyID0geC5yZWRTcXIoKTtcbiAgdmFyIHJocyA9IHgyLnJlZE11bCh4KS5yZWRBZGQoeDIucmVkTXVsKHRoaXMuYSkpLnJlZEFkZCh4KTtcbiAgdmFyIHkgPSByaHMucmVkU3FydCgpO1xuXG4gIHJldHVybiB5LnJlZFNxcigpLmNtcChyaHMpID09PSAwO1xufTtcblxuZnVuY3Rpb24gUG9pbnQoY3VydmUsIHgsIHopIHtcbiAgQmFzZS5CYXNlUG9pbnQuY2FsbCh0aGlzLCBjdXJ2ZSwgJ3Byb2plY3RpdmUnKTtcbiAgaWYgKHggPT09IG51bGwgJiYgeiA9PT0gbnVsbCkge1xuICAgIHRoaXMueCA9IHRoaXMuY3VydmUub25lO1xuICAgIHRoaXMueiA9IHRoaXMuY3VydmUuemVybztcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnggPSBuZXcgQk4oeCwgMTYpO1xuICAgIHRoaXMueiA9IG5ldyBCTih6LCAxNik7XG4gICAgaWYgKCF0aGlzLngucmVkKVxuICAgICAgdGhpcy54ID0gdGhpcy54LnRvUmVkKHRoaXMuY3VydmUucmVkKTtcbiAgICBpZiAoIXRoaXMuei5yZWQpXG4gICAgICB0aGlzLnogPSB0aGlzLnoudG9SZWQodGhpcy5jdXJ2ZS5yZWQpO1xuICB9XG59XG5pbmhlcml0cyhQb2ludCwgQmFzZS5CYXNlUG9pbnQpO1xuXG5Nb250Q3VydmUucHJvdG90eXBlLmRlY29kZVBvaW50ID0gZnVuY3Rpb24gZGVjb2RlUG9pbnQoYnl0ZXMsIGVuYykge1xuICByZXR1cm4gdGhpcy5wb2ludCh1dGlscy50b0FycmF5KGJ5dGVzLCBlbmMpLCAxKTtcbn07XG5cbk1vbnRDdXJ2ZS5wcm90b3R5cGUucG9pbnQgPSBmdW5jdGlvbiBwb2ludCh4LCB6KSB7XG4gIHJldHVybiBuZXcgUG9pbnQodGhpcywgeCwgeik7XG59O1xuXG5Nb250Q3VydmUucHJvdG90eXBlLnBvaW50RnJvbUpTT04gPSBmdW5jdGlvbiBwb2ludEZyb21KU09OKG9iaikge1xuICByZXR1cm4gUG9pbnQuZnJvbUpTT04odGhpcywgb2JqKTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5wcmVjb21wdXRlID0gZnVuY3Rpb24gcHJlY29tcHV0ZSgpIHtcbiAgLy8gTm8tb3Bcbn07XG5cblBvaW50LnByb3RvdHlwZS5fZW5jb2RlID0gZnVuY3Rpb24gX2VuY29kZSgpIHtcbiAgcmV0dXJuIHRoaXMuZ2V0WCgpLnRvQXJyYXkoJ2JlJywgdGhpcy5jdXJ2ZS5wLmJ5dGVMZW5ndGgoKSk7XG59O1xuXG5Qb2ludC5mcm9tSlNPTiA9IGZ1bmN0aW9uIGZyb21KU09OKGN1cnZlLCBvYmopIHtcbiAgcmV0dXJuIG5ldyBQb2ludChjdXJ2ZSwgb2JqWzBdLCBvYmpbMV0gfHwgY3VydmUub25lKTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gaW5zcGVjdCgpIHtcbiAgaWYgKHRoaXMuaXNJbmZpbml0eSgpKVxuICAgIHJldHVybiAnPEVDIFBvaW50IEluZmluaXR5Pic7XG4gIHJldHVybiAnPEVDIFBvaW50IHg6ICcgKyB0aGlzLnguZnJvbVJlZCgpLnRvU3RyaW5nKDE2LCAyKSArXG4gICAgICAnIHo6ICcgKyB0aGlzLnouZnJvbVJlZCgpLnRvU3RyaW5nKDE2LCAyKSArICc+Jztcbn07XG5cblBvaW50LnByb3RvdHlwZS5pc0luZmluaXR5ID0gZnVuY3Rpb24gaXNJbmZpbml0eSgpIHtcbiAgLy8gWFhYIFRoaXMgY29kZSBhc3N1bWVzIHRoYXQgemVybyBpcyBhbHdheXMgemVybyBpbiByZWRcbiAgcmV0dXJuIHRoaXMuei5jbXBuKDApID09PSAwO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmRibCA9IGZ1bmN0aW9uIGRibCgpIHtcbiAgLy8gaHR0cDovL2h5cGVyZWxsaXB0aWMub3JnL0VGRC9nMXAvYXV0by1tb250Z29tLXh6Lmh0bWwjZG91YmxpbmctZGJsLTE5ODctbS0zXG4gIC8vIDJNICsgMlMgKyA0QVxuXG4gIC8vIEEgPSBYMSArIFoxXG4gIHZhciBhID0gdGhpcy54LnJlZEFkZCh0aGlzLnopO1xuICAvLyBBQSA9IEFeMlxuICB2YXIgYWEgPSBhLnJlZFNxcigpO1xuICAvLyBCID0gWDEgLSBaMVxuICB2YXIgYiA9IHRoaXMueC5yZWRTdWIodGhpcy56KTtcbiAgLy8gQkIgPSBCXjJcbiAgdmFyIGJiID0gYi5yZWRTcXIoKTtcbiAgLy8gQyA9IEFBIC0gQkJcbiAgdmFyIGMgPSBhYS5yZWRTdWIoYmIpO1xuICAvLyBYMyA9IEFBICogQkJcbiAgdmFyIG54ID0gYWEucmVkTXVsKGJiKTtcbiAgLy8gWjMgPSBDICogKEJCICsgQTI0ICogQylcbiAgdmFyIG56ID0gYy5yZWRNdWwoYmIucmVkQWRkKHRoaXMuY3VydmUuYTI0LnJlZE11bChjKSkpO1xuICByZXR1cm4gdGhpcy5jdXJ2ZS5wb2ludChueCwgbnopO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIGFkZCgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdOb3Qgc3VwcG9ydGVkIG9uIE1vbnRnb21lcnkgY3VydmUnKTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5kaWZmQWRkID0gZnVuY3Rpb24gZGlmZkFkZChwLCBkaWZmKSB7XG4gIC8vIGh0dHA6Ly9oeXBlcmVsbGlwdGljLm9yZy9FRkQvZzFwL2F1dG8tbW9udGdvbS14ei5odG1sI2RpZmZhZGQtZGFkZC0xOTg3LW0tM1xuICAvLyA0TSArIDJTICsgNkFcblxuICAvLyBBID0gWDIgKyBaMlxuICB2YXIgYSA9IHRoaXMueC5yZWRBZGQodGhpcy56KTtcbiAgLy8gQiA9IFgyIC0gWjJcbiAgdmFyIGIgPSB0aGlzLngucmVkU3ViKHRoaXMueik7XG4gIC8vIEMgPSBYMyArIFozXG4gIHZhciBjID0gcC54LnJlZEFkZChwLnopO1xuICAvLyBEID0gWDMgLSBaM1xuICB2YXIgZCA9IHAueC5yZWRTdWIocC56KTtcbiAgLy8gREEgPSBEICogQVxuICB2YXIgZGEgPSBkLnJlZE11bChhKTtcbiAgLy8gQ0IgPSBDICogQlxuICB2YXIgY2IgPSBjLnJlZE11bChiKTtcbiAgLy8gWDUgPSBaMSAqIChEQSArIENCKV4yXG4gIHZhciBueCA9IGRpZmYuei5yZWRNdWwoZGEucmVkQWRkKGNiKS5yZWRTcXIoKSk7XG4gIC8vIFo1ID0gWDEgKiAoREEgLSBDQileMlxuICB2YXIgbnogPSBkaWZmLngucmVkTXVsKGRhLnJlZElTdWIoY2IpLnJlZFNxcigpKTtcbiAgcmV0dXJuIHRoaXMuY3VydmUucG9pbnQobngsIG56KTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5tdWwgPSBmdW5jdGlvbiBtdWwoaykge1xuICB2YXIgdCA9IGsuY2xvbmUoKTtcbiAgdmFyIGEgPSB0aGlzOyAvLyAoTiAvIDIpICogUSArIFFcbiAgdmFyIGIgPSB0aGlzLmN1cnZlLnBvaW50KG51bGwsIG51bGwpOyAvLyAoTiAvIDIpICogUVxuICB2YXIgYyA9IHRoaXM7IC8vIFFcblxuICBmb3IgKHZhciBiaXRzID0gW107IHQuY21wbigwKSAhPT0gMDsgdC5pdXNocm4oMSkpXG4gICAgYml0cy5wdXNoKHQuYW5kbG4oMSkpO1xuXG4gIGZvciAodmFyIGkgPSBiaXRzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgaWYgKGJpdHNbaV0gPT09IDApIHtcbiAgICAgIC8vIE4gKiBRICsgUSA9ICgoTiAvIDIpICogUSArIFEpKSArIChOIC8gMikgKiBRXG4gICAgICBhID0gYS5kaWZmQWRkKGIsIGMpO1xuICAgICAgLy8gTiAqIFEgPSAyICogKChOIC8gMikgKiBRICsgUSkpXG4gICAgICBiID0gYi5kYmwoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gTiAqIFEgPSAoKE4gLyAyKSAqIFEgKyBRKSArICgoTiAvIDIpICogUSlcbiAgICAgIGIgPSBhLmRpZmZBZGQoYiwgYyk7XG4gICAgICAvLyBOICogUSArIFEgPSAyICogKChOIC8gMikgKiBRICsgUSlcbiAgICAgIGEgPSBhLmRibCgpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYjtcbn07XG5cblBvaW50LnByb3RvdHlwZS5tdWxBZGQgPSBmdW5jdGlvbiBtdWxBZGQoKSB7XG4gIHRocm93IG5ldyBFcnJvcignTm90IHN1cHBvcnRlZCBvbiBNb250Z29tZXJ5IGN1cnZlJyk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuanVtbEFkZCA9IGZ1bmN0aW9uIGp1bWxBZGQoKSB7XG4gIHRocm93IG5ldyBFcnJvcignTm90IHN1cHBvcnRlZCBvbiBNb250Z29tZXJ5IGN1cnZlJyk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuZXEgPSBmdW5jdGlvbiBlcShvdGhlcikge1xuICByZXR1cm4gdGhpcy5nZXRYKCkuY21wKG90aGVyLmdldFgoKSkgPT09IDA7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUubm9ybWFsaXplID0gZnVuY3Rpb24gbm9ybWFsaXplKCkge1xuICB0aGlzLnggPSB0aGlzLngucmVkTXVsKHRoaXMuei5yZWRJbnZtKCkpO1xuICB0aGlzLnogPSB0aGlzLmN1cnZlLm9uZTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuZ2V0WCA9IGZ1bmN0aW9uIGdldFgoKSB7XG4gIC8vIE5vcm1hbGl6ZSBjb29yZGluYXRlc1xuICB0aGlzLm5vcm1hbGl6ZSgpO1xuXG4gIHJldHVybiB0aGlzLnguZnJvbVJlZCgpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcbnZhciBCTiA9IHJlcXVpcmUoJ2JuLmpzJyk7XG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xudmFyIEJhc2UgPSByZXF1aXJlKCcuL2Jhc2UnKTtcblxudmFyIGFzc2VydCA9IHV0aWxzLmFzc2VydDtcblxuZnVuY3Rpb24gRWR3YXJkc0N1cnZlKGNvbmYpIHtcbiAgLy8gTk9URTogSW1wb3J0YW50IGFzIHdlIGFyZSBjcmVhdGluZyBwb2ludCBpbiBCYXNlLmNhbGwoKVxuICB0aGlzLnR3aXN0ZWQgPSAoY29uZi5hIHwgMCkgIT09IDE7XG4gIHRoaXMubU9uZUEgPSB0aGlzLnR3aXN0ZWQgJiYgKGNvbmYuYSB8IDApID09PSAtMTtcbiAgdGhpcy5leHRlbmRlZCA9IHRoaXMubU9uZUE7XG5cbiAgQmFzZS5jYWxsKHRoaXMsICdlZHdhcmRzJywgY29uZik7XG5cbiAgdGhpcy5hID0gbmV3IEJOKGNvbmYuYSwgMTYpLnVtb2QodGhpcy5yZWQubSk7XG4gIHRoaXMuYSA9IHRoaXMuYS50b1JlZCh0aGlzLnJlZCk7XG4gIHRoaXMuYyA9IG5ldyBCTihjb25mLmMsIDE2KS50b1JlZCh0aGlzLnJlZCk7XG4gIHRoaXMuYzIgPSB0aGlzLmMucmVkU3FyKCk7XG4gIHRoaXMuZCA9IG5ldyBCTihjb25mLmQsIDE2KS50b1JlZCh0aGlzLnJlZCk7XG4gIHRoaXMuZGQgPSB0aGlzLmQucmVkQWRkKHRoaXMuZCk7XG5cbiAgYXNzZXJ0KCF0aGlzLnR3aXN0ZWQgfHwgdGhpcy5jLmZyb21SZWQoKS5jbXBuKDEpID09PSAwKTtcbiAgdGhpcy5vbmVDID0gKGNvbmYuYyB8IDApID09PSAxO1xufVxuaW5oZXJpdHMoRWR3YXJkc0N1cnZlLCBCYXNlKTtcbm1vZHVsZS5leHBvcnRzID0gRWR3YXJkc0N1cnZlO1xuXG5FZHdhcmRzQ3VydmUucHJvdG90eXBlLl9tdWxBID0gZnVuY3Rpb24gX211bEEobnVtKSB7XG4gIGlmICh0aGlzLm1PbmVBKVxuICAgIHJldHVybiBudW0ucmVkTmVnKCk7XG4gIGVsc2VcbiAgICByZXR1cm4gdGhpcy5hLnJlZE11bChudW0pO1xufTtcblxuRWR3YXJkc0N1cnZlLnByb3RvdHlwZS5fbXVsQyA9IGZ1bmN0aW9uIF9tdWxDKG51bSkge1xuICBpZiAodGhpcy5vbmVDKVxuICAgIHJldHVybiBudW07XG4gIGVsc2VcbiAgICByZXR1cm4gdGhpcy5jLnJlZE11bChudW0pO1xufTtcblxuLy8gSnVzdCBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIFNob3J0IGN1cnZlXG5FZHdhcmRzQ3VydmUucHJvdG90eXBlLmpwb2ludCA9IGZ1bmN0aW9uIGpwb2ludCh4LCB5LCB6LCB0KSB7XG4gIHJldHVybiB0aGlzLnBvaW50KHgsIHksIHosIHQpO1xufTtcblxuRWR3YXJkc0N1cnZlLnByb3RvdHlwZS5wb2ludEZyb21YID0gZnVuY3Rpb24gcG9pbnRGcm9tWCh4LCBvZGQpIHtcbiAgeCA9IG5ldyBCTih4LCAxNik7XG4gIGlmICgheC5yZWQpXG4gICAgeCA9IHgudG9SZWQodGhpcy5yZWQpO1xuXG4gIHZhciB4MiA9IHgucmVkU3FyKCk7XG4gIHZhciByaHMgPSB0aGlzLmMyLnJlZFN1Yih0aGlzLmEucmVkTXVsKHgyKSk7XG4gIHZhciBsaHMgPSB0aGlzLm9uZS5yZWRTdWIodGhpcy5jMi5yZWRNdWwodGhpcy5kKS5yZWRNdWwoeDIpKTtcblxuICB2YXIgeTIgPSByaHMucmVkTXVsKGxocy5yZWRJbnZtKCkpO1xuICB2YXIgeSA9IHkyLnJlZFNxcnQoKTtcbiAgaWYgKHkucmVkU3FyKCkucmVkU3ViKHkyKS5jbXAodGhpcy56ZXJvKSAhPT0gMClcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgcG9pbnQnKTtcblxuICB2YXIgaXNPZGQgPSB5LmZyb21SZWQoKS5pc09kZCgpO1xuICBpZiAob2RkICYmICFpc09kZCB8fCAhb2RkICYmIGlzT2RkKVxuICAgIHkgPSB5LnJlZE5lZygpO1xuXG4gIHJldHVybiB0aGlzLnBvaW50KHgsIHkpO1xufTtcblxuRWR3YXJkc0N1cnZlLnByb3RvdHlwZS5wb2ludEZyb21ZID0gZnVuY3Rpb24gcG9pbnRGcm9tWSh5LCBvZGQpIHtcbiAgeSA9IG5ldyBCTih5LCAxNik7XG4gIGlmICgheS5yZWQpXG4gICAgeSA9IHkudG9SZWQodGhpcy5yZWQpO1xuXG4gIC8vIHheMiA9ICh5XjIgLSBjXjIpIC8gKGNeMiBkIHleMiAtIGEpXG4gIHZhciB5MiA9IHkucmVkU3FyKCk7XG4gIHZhciBsaHMgPSB5Mi5yZWRTdWIodGhpcy5jMik7XG4gIHZhciByaHMgPSB5Mi5yZWRNdWwodGhpcy5kKS5yZWRNdWwodGhpcy5jMikucmVkU3ViKHRoaXMuYSk7XG4gIHZhciB4MiA9IGxocy5yZWRNdWwocmhzLnJlZEludm0oKSk7XG5cbiAgaWYgKHgyLmNtcCh0aGlzLnplcm8pID09PSAwKSB7XG4gICAgaWYgKG9kZClcbiAgICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBwb2ludCcpO1xuICAgIGVsc2VcbiAgICAgIHJldHVybiB0aGlzLnBvaW50KHRoaXMuemVybywgeSk7XG4gIH1cblxuICB2YXIgeCA9IHgyLnJlZFNxcnQoKTtcbiAgaWYgKHgucmVkU3FyKCkucmVkU3ViKHgyKS5jbXAodGhpcy56ZXJvKSAhPT0gMClcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgcG9pbnQnKTtcblxuICBpZiAoeC5mcm9tUmVkKCkuaXNPZGQoKSAhPT0gb2RkKVxuICAgIHggPSB4LnJlZE5lZygpO1xuXG4gIHJldHVybiB0aGlzLnBvaW50KHgsIHkpO1xufTtcblxuRWR3YXJkc0N1cnZlLnByb3RvdHlwZS52YWxpZGF0ZSA9IGZ1bmN0aW9uIHZhbGlkYXRlKHBvaW50KSB7XG4gIGlmIChwb2ludC5pc0luZmluaXR5KCkpXG4gICAgcmV0dXJuIHRydWU7XG5cbiAgLy8gQ3VydmU6IEEgKiBYXjIgKyBZXjIgPSBDXjIgKiAoMSArIEQgKiBYXjIgKiBZXjIpXG4gIHBvaW50Lm5vcm1hbGl6ZSgpO1xuXG4gIHZhciB4MiA9IHBvaW50LngucmVkU3FyKCk7XG4gIHZhciB5MiA9IHBvaW50LnkucmVkU3FyKCk7XG4gIHZhciBsaHMgPSB4Mi5yZWRNdWwodGhpcy5hKS5yZWRBZGQoeTIpO1xuICB2YXIgcmhzID0gdGhpcy5jMi5yZWRNdWwodGhpcy5vbmUucmVkQWRkKHRoaXMuZC5yZWRNdWwoeDIpLnJlZE11bCh5MikpKTtcblxuICByZXR1cm4gbGhzLmNtcChyaHMpID09PSAwO1xufTtcblxuZnVuY3Rpb24gUG9pbnQoY3VydmUsIHgsIHksIHosIHQpIHtcbiAgQmFzZS5CYXNlUG9pbnQuY2FsbCh0aGlzLCBjdXJ2ZSwgJ3Byb2plY3RpdmUnKTtcbiAgaWYgKHggPT09IG51bGwgJiYgeSA9PT0gbnVsbCAmJiB6ID09PSBudWxsKSB7XG4gICAgdGhpcy54ID0gdGhpcy5jdXJ2ZS56ZXJvO1xuICAgIHRoaXMueSA9IHRoaXMuY3VydmUub25lO1xuICAgIHRoaXMueiA9IHRoaXMuY3VydmUub25lO1xuICAgIHRoaXMudCA9IHRoaXMuY3VydmUuemVybztcbiAgICB0aGlzLnpPbmUgPSB0cnVlO1xuICB9IGVsc2Uge1xuICAgIHRoaXMueCA9IG5ldyBCTih4LCAxNik7XG4gICAgdGhpcy55ID0gbmV3IEJOKHksIDE2KTtcbiAgICB0aGlzLnogPSB6ID8gbmV3IEJOKHosIDE2KSA6IHRoaXMuY3VydmUub25lO1xuICAgIHRoaXMudCA9IHQgJiYgbmV3IEJOKHQsIDE2KTtcbiAgICBpZiAoIXRoaXMueC5yZWQpXG4gICAgICB0aGlzLnggPSB0aGlzLngudG9SZWQodGhpcy5jdXJ2ZS5yZWQpO1xuICAgIGlmICghdGhpcy55LnJlZClcbiAgICAgIHRoaXMueSA9IHRoaXMueS50b1JlZCh0aGlzLmN1cnZlLnJlZCk7XG4gICAgaWYgKCF0aGlzLnoucmVkKVxuICAgICAgdGhpcy56ID0gdGhpcy56LnRvUmVkKHRoaXMuY3VydmUucmVkKTtcbiAgICBpZiAodGhpcy50ICYmICF0aGlzLnQucmVkKVxuICAgICAgdGhpcy50ID0gdGhpcy50LnRvUmVkKHRoaXMuY3VydmUucmVkKTtcbiAgICB0aGlzLnpPbmUgPSB0aGlzLnogPT09IHRoaXMuY3VydmUub25lO1xuXG4gICAgLy8gVXNlIGV4dGVuZGVkIGNvb3JkaW5hdGVzXG4gICAgaWYgKHRoaXMuY3VydmUuZXh0ZW5kZWQgJiYgIXRoaXMudCkge1xuICAgICAgdGhpcy50ID0gdGhpcy54LnJlZE11bCh0aGlzLnkpO1xuICAgICAgaWYgKCF0aGlzLnpPbmUpXG4gICAgICAgIHRoaXMudCA9IHRoaXMudC5yZWRNdWwodGhpcy56LnJlZEludm0oKSk7XG4gICAgfVxuICB9XG59XG5pbmhlcml0cyhQb2ludCwgQmFzZS5CYXNlUG9pbnQpO1xuXG5FZHdhcmRzQ3VydmUucHJvdG90eXBlLnBvaW50RnJvbUpTT04gPSBmdW5jdGlvbiBwb2ludEZyb21KU09OKG9iaikge1xuICByZXR1cm4gUG9pbnQuZnJvbUpTT04odGhpcywgb2JqKTtcbn07XG5cbkVkd2FyZHNDdXJ2ZS5wcm90b3R5cGUucG9pbnQgPSBmdW5jdGlvbiBwb2ludCh4LCB5LCB6LCB0KSB7XG4gIHJldHVybiBuZXcgUG9pbnQodGhpcywgeCwgeSwgeiwgdCk7XG59O1xuXG5Qb2ludC5mcm9tSlNPTiA9IGZ1bmN0aW9uIGZyb21KU09OKGN1cnZlLCBvYmopIHtcbiAgcmV0dXJuIG5ldyBQb2ludChjdXJ2ZSwgb2JqWzBdLCBvYmpbMV0sIG9ialsyXSk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuaW5zcGVjdCA9IGZ1bmN0aW9uIGluc3BlY3QoKSB7XG4gIGlmICh0aGlzLmlzSW5maW5pdHkoKSlcbiAgICByZXR1cm4gJzxFQyBQb2ludCBJbmZpbml0eT4nO1xuICByZXR1cm4gJzxFQyBQb2ludCB4OiAnICsgdGhpcy54LmZyb21SZWQoKS50b1N0cmluZygxNiwgMikgK1xuICAgICAgJyB5OiAnICsgdGhpcy55LmZyb21SZWQoKS50b1N0cmluZygxNiwgMikgK1xuICAgICAgJyB6OiAnICsgdGhpcy56LmZyb21SZWQoKS50b1N0cmluZygxNiwgMikgKyAnPic7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuaXNJbmZpbml0eSA9IGZ1bmN0aW9uIGlzSW5maW5pdHkoKSB7XG4gIC8vIFhYWCBUaGlzIGNvZGUgYXNzdW1lcyB0aGF0IHplcm8gaXMgYWx3YXlzIHplcm8gaW4gcmVkXG4gIHJldHVybiB0aGlzLnguY21wbigwKSA9PT0gMCAmJlxuICAgICh0aGlzLnkuY21wKHRoaXMueikgPT09IDAgfHxcbiAgICAodGhpcy56T25lICYmIHRoaXMueS5jbXAodGhpcy5jdXJ2ZS5jKSA9PT0gMCkpO1xufTtcblxuUG9pbnQucHJvdG90eXBlLl9leHREYmwgPSBmdW5jdGlvbiBfZXh0RGJsKCkge1xuICAvLyBoeXBlcmVsbGlwdGljLm9yZy9FRkQvZzFwL2F1dG8tdHdpc3RlZC1leHRlbmRlZC0xLmh0bWxcbiAgLy8gICAgICNkb3VibGluZy1kYmwtMjAwOC1od2NkXG4gIC8vIDRNICsgNFNcblxuICAvLyBBID0gWDFeMlxuICB2YXIgYSA9IHRoaXMueC5yZWRTcXIoKTtcbiAgLy8gQiA9IFkxXjJcbiAgdmFyIGIgPSB0aGlzLnkucmVkU3FyKCk7XG4gIC8vIEMgPSAyICogWjFeMlxuICB2YXIgYyA9IHRoaXMuei5yZWRTcXIoKTtcbiAgYyA9IGMucmVkSUFkZChjKTtcbiAgLy8gRCA9IGEgKiBBXG4gIHZhciBkID0gdGhpcy5jdXJ2ZS5fbXVsQShhKTtcbiAgLy8gRSA9IChYMSArIFkxKV4yIC0gQSAtIEJcbiAgdmFyIGUgPSB0aGlzLngucmVkQWRkKHRoaXMueSkucmVkU3FyKCkucmVkSVN1YihhKS5yZWRJU3ViKGIpO1xuICAvLyBHID0gRCArIEJcbiAgdmFyIGcgPSBkLnJlZEFkZChiKTtcbiAgLy8gRiA9IEcgLSBDXG4gIHZhciBmID0gZy5yZWRTdWIoYyk7XG4gIC8vIEggPSBEIC0gQlxuICB2YXIgaCA9IGQucmVkU3ViKGIpO1xuICAvLyBYMyA9IEUgKiBGXG4gIHZhciBueCA9IGUucmVkTXVsKGYpO1xuICAvLyBZMyA9IEcgKiBIXG4gIHZhciBueSA9IGcucmVkTXVsKGgpO1xuICAvLyBUMyA9IEUgKiBIXG4gIHZhciBudCA9IGUucmVkTXVsKGgpO1xuICAvLyBaMyA9IEYgKiBHXG4gIHZhciBueiA9IGYucmVkTXVsKGcpO1xuICByZXR1cm4gdGhpcy5jdXJ2ZS5wb2ludChueCwgbnksIG56LCBudCk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuX3Byb2pEYmwgPSBmdW5jdGlvbiBfcHJvakRibCgpIHtcbiAgLy8gaHlwZXJlbGxpcHRpYy5vcmcvRUZEL2cxcC9hdXRvLXR3aXN0ZWQtcHJvamVjdGl2ZS5odG1sXG4gIC8vICAgICAjZG91YmxpbmctZGJsLTIwMDgtYmJqbHBcbiAgLy8gICAgICNkb3VibGluZy1kYmwtMjAwNy1ibFxuICAvLyBhbmQgb3RoZXJzXG4gIC8vIEdlbmVyYWxseSAzTSArIDRTIG9yIDJNICsgNFNcblxuICAvLyBCID0gKFgxICsgWTEpXjJcbiAgdmFyIGIgPSB0aGlzLngucmVkQWRkKHRoaXMueSkucmVkU3FyKCk7XG4gIC8vIEMgPSBYMV4yXG4gIHZhciBjID0gdGhpcy54LnJlZFNxcigpO1xuICAvLyBEID0gWTFeMlxuICB2YXIgZCA9IHRoaXMueS5yZWRTcXIoKTtcblxuICB2YXIgbng7XG4gIHZhciBueTtcbiAgdmFyIG56O1xuICBpZiAodGhpcy5jdXJ2ZS50d2lzdGVkKSB7XG4gICAgLy8gRSA9IGEgKiBDXG4gICAgdmFyIGUgPSB0aGlzLmN1cnZlLl9tdWxBKGMpO1xuICAgIC8vIEYgPSBFICsgRFxuICAgIHZhciBmID0gZS5yZWRBZGQoZCk7XG4gICAgaWYgKHRoaXMuek9uZSkge1xuICAgICAgLy8gWDMgPSAoQiAtIEMgLSBEKSAqIChGIC0gMilcbiAgICAgIG54ID0gYi5yZWRTdWIoYykucmVkU3ViKGQpLnJlZE11bChmLnJlZFN1Yih0aGlzLmN1cnZlLnR3bykpO1xuICAgICAgLy8gWTMgPSBGICogKEUgLSBEKVxuICAgICAgbnkgPSBmLnJlZE11bChlLnJlZFN1YihkKSk7XG4gICAgICAvLyBaMyA9IEZeMiAtIDIgKiBGXG4gICAgICBueiA9IGYucmVkU3FyKCkucmVkU3ViKGYpLnJlZFN1YihmKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gSCA9IFoxXjJcbiAgICAgIHZhciBoID0gdGhpcy56LnJlZFNxcigpO1xuICAgICAgLy8gSiA9IEYgLSAyICogSFxuICAgICAgdmFyIGogPSBmLnJlZFN1YihoKS5yZWRJU3ViKGgpO1xuICAgICAgLy8gWDMgPSAoQi1DLUQpKkpcbiAgICAgIG54ID0gYi5yZWRTdWIoYykucmVkSVN1YihkKS5yZWRNdWwoaik7XG4gICAgICAvLyBZMyA9IEYgKiAoRSAtIEQpXG4gICAgICBueSA9IGYucmVkTXVsKGUucmVkU3ViKGQpKTtcbiAgICAgIC8vIFozID0gRiAqIEpcbiAgICAgIG56ID0gZi5yZWRNdWwoaik7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIEUgPSBDICsgRFxuICAgIHZhciBlID0gYy5yZWRBZGQoZCk7XG4gICAgLy8gSCA9IChjICogWjEpXjJcbiAgICB2YXIgaCA9IHRoaXMuY3VydmUuX211bEModGhpcy56KS5yZWRTcXIoKTtcbiAgICAvLyBKID0gRSAtIDIgKiBIXG4gICAgdmFyIGogPSBlLnJlZFN1YihoKS5yZWRTdWIoaCk7XG4gICAgLy8gWDMgPSBjICogKEIgLSBFKSAqIEpcbiAgICBueCA9IHRoaXMuY3VydmUuX211bEMoYi5yZWRJU3ViKGUpKS5yZWRNdWwoaik7XG4gICAgLy8gWTMgPSBjICogRSAqIChDIC0gRClcbiAgICBueSA9IHRoaXMuY3VydmUuX211bEMoZSkucmVkTXVsKGMucmVkSVN1YihkKSk7XG4gICAgLy8gWjMgPSBFICogSlxuICAgIG56ID0gZS5yZWRNdWwoaik7XG4gIH1cbiAgcmV0dXJuIHRoaXMuY3VydmUucG9pbnQobngsIG55LCBueik7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuZGJsID0gZnVuY3Rpb24gZGJsKCkge1xuICBpZiAodGhpcy5pc0luZmluaXR5KCkpXG4gICAgcmV0dXJuIHRoaXM7XG5cbiAgLy8gRG91YmxlIGluIGV4dGVuZGVkIGNvb3JkaW5hdGVzXG4gIGlmICh0aGlzLmN1cnZlLmV4dGVuZGVkKVxuICAgIHJldHVybiB0aGlzLl9leHREYmwoKTtcbiAgZWxzZVxuICAgIHJldHVybiB0aGlzLl9wcm9qRGJsKCk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuX2V4dEFkZCA9IGZ1bmN0aW9uIF9leHRBZGQocCkge1xuICAvLyBoeXBlcmVsbGlwdGljLm9yZy9FRkQvZzFwL2F1dG8tdHdpc3RlZC1leHRlbmRlZC0xLmh0bWxcbiAgLy8gICAgICNhZGRpdGlvbi1hZGQtMjAwOC1od2NkLTNcbiAgLy8gOE1cblxuICAvLyBBID0gKFkxIC0gWDEpICogKFkyIC0gWDIpXG4gIHZhciBhID0gdGhpcy55LnJlZFN1Yih0aGlzLngpLnJlZE11bChwLnkucmVkU3ViKHAueCkpO1xuICAvLyBCID0gKFkxICsgWDEpICogKFkyICsgWDIpXG4gIHZhciBiID0gdGhpcy55LnJlZEFkZCh0aGlzLngpLnJlZE11bChwLnkucmVkQWRkKHAueCkpO1xuICAvLyBDID0gVDEgKiBrICogVDJcbiAgdmFyIGMgPSB0aGlzLnQucmVkTXVsKHRoaXMuY3VydmUuZGQpLnJlZE11bChwLnQpO1xuICAvLyBEID0gWjEgKiAyICogWjJcbiAgdmFyIGQgPSB0aGlzLnoucmVkTXVsKHAuei5yZWRBZGQocC56KSk7XG4gIC8vIEUgPSBCIC0gQVxuICB2YXIgZSA9IGIucmVkU3ViKGEpO1xuICAvLyBGID0gRCAtIENcbiAgdmFyIGYgPSBkLnJlZFN1YihjKTtcbiAgLy8gRyA9IEQgKyBDXG4gIHZhciBnID0gZC5yZWRBZGQoYyk7XG4gIC8vIEggPSBCICsgQVxuICB2YXIgaCA9IGIucmVkQWRkKGEpO1xuICAvLyBYMyA9IEUgKiBGXG4gIHZhciBueCA9IGUucmVkTXVsKGYpO1xuICAvLyBZMyA9IEcgKiBIXG4gIHZhciBueSA9IGcucmVkTXVsKGgpO1xuICAvLyBUMyA9IEUgKiBIXG4gIHZhciBudCA9IGUucmVkTXVsKGgpO1xuICAvLyBaMyA9IEYgKiBHXG4gIHZhciBueiA9IGYucmVkTXVsKGcpO1xuICByZXR1cm4gdGhpcy5jdXJ2ZS5wb2ludChueCwgbnksIG56LCBudCk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuX3Byb2pBZGQgPSBmdW5jdGlvbiBfcHJvakFkZChwKSB7XG4gIC8vIGh5cGVyZWxsaXB0aWMub3JnL0VGRC9nMXAvYXV0by10d2lzdGVkLXByb2plY3RpdmUuaHRtbFxuICAvLyAgICAgI2FkZGl0aW9uLWFkZC0yMDA4LWJiamxwXG4gIC8vICAgICAjYWRkaXRpb24tYWRkLTIwMDctYmxcbiAgLy8gMTBNICsgMVNcblxuICAvLyBBID0gWjEgKiBaMlxuICB2YXIgYSA9IHRoaXMuei5yZWRNdWwocC56KTtcbiAgLy8gQiA9IEFeMlxuICB2YXIgYiA9IGEucmVkU3FyKCk7XG4gIC8vIEMgPSBYMSAqIFgyXG4gIHZhciBjID0gdGhpcy54LnJlZE11bChwLngpO1xuICAvLyBEID0gWTEgKiBZMlxuICB2YXIgZCA9IHRoaXMueS5yZWRNdWwocC55KTtcbiAgLy8gRSA9IGQgKiBDICogRFxuICB2YXIgZSA9IHRoaXMuY3VydmUuZC5yZWRNdWwoYykucmVkTXVsKGQpO1xuICAvLyBGID0gQiAtIEVcbiAgdmFyIGYgPSBiLnJlZFN1YihlKTtcbiAgLy8gRyA9IEIgKyBFXG4gIHZhciBnID0gYi5yZWRBZGQoZSk7XG4gIC8vIFgzID0gQSAqIEYgKiAoKFgxICsgWTEpICogKFgyICsgWTIpIC0gQyAtIEQpXG4gIHZhciB0bXAgPSB0aGlzLngucmVkQWRkKHRoaXMueSkucmVkTXVsKHAueC5yZWRBZGQocC55KSkucmVkSVN1YihjKS5yZWRJU3ViKGQpO1xuICB2YXIgbnggPSBhLnJlZE11bChmKS5yZWRNdWwodG1wKTtcbiAgdmFyIG55O1xuICB2YXIgbno7XG4gIGlmICh0aGlzLmN1cnZlLnR3aXN0ZWQpIHtcbiAgICAvLyBZMyA9IEEgKiBHICogKEQgLSBhICogQylcbiAgICBueSA9IGEucmVkTXVsKGcpLnJlZE11bChkLnJlZFN1Yih0aGlzLmN1cnZlLl9tdWxBKGMpKSk7XG4gICAgLy8gWjMgPSBGICogR1xuICAgIG56ID0gZi5yZWRNdWwoZyk7XG4gIH0gZWxzZSB7XG4gICAgLy8gWTMgPSBBICogRyAqIChEIC0gQylcbiAgICBueSA9IGEucmVkTXVsKGcpLnJlZE11bChkLnJlZFN1YihjKSk7XG4gICAgLy8gWjMgPSBjICogRiAqIEdcbiAgICBueiA9IHRoaXMuY3VydmUuX211bEMoZikucmVkTXVsKGcpO1xuICB9XG4gIHJldHVybiB0aGlzLmN1cnZlLnBvaW50KG54LCBueSwgbnopO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIGFkZChwKSB7XG4gIGlmICh0aGlzLmlzSW5maW5pdHkoKSlcbiAgICByZXR1cm4gcDtcbiAgaWYgKHAuaXNJbmZpbml0eSgpKVxuICAgIHJldHVybiB0aGlzO1xuXG4gIGlmICh0aGlzLmN1cnZlLmV4dGVuZGVkKVxuICAgIHJldHVybiB0aGlzLl9leHRBZGQocCk7XG4gIGVsc2VcbiAgICByZXR1cm4gdGhpcy5fcHJvakFkZChwKTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5tdWwgPSBmdW5jdGlvbiBtdWwoaykge1xuICBpZiAodGhpcy5faGFzRG91YmxlcyhrKSlcbiAgICByZXR1cm4gdGhpcy5jdXJ2ZS5fZml4ZWROYWZNdWwodGhpcywgayk7XG4gIGVsc2VcbiAgICByZXR1cm4gdGhpcy5jdXJ2ZS5fd25hZk11bCh0aGlzLCBrKTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5tdWxBZGQgPSBmdW5jdGlvbiBtdWxBZGQoazEsIHAsIGsyKSB7XG4gIHJldHVybiB0aGlzLmN1cnZlLl93bmFmTXVsQWRkKDEsIFsgdGhpcywgcCBdLCBbIGsxLCBrMiBdLCAyLCBmYWxzZSk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuam11bEFkZCA9IGZ1bmN0aW9uIGptdWxBZGQoazEsIHAsIGsyKSB7XG4gIHJldHVybiB0aGlzLmN1cnZlLl93bmFmTXVsQWRkKDEsIFsgdGhpcywgcCBdLCBbIGsxLCBrMiBdLCAyLCB0cnVlKTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5ub3JtYWxpemUgPSBmdW5jdGlvbiBub3JtYWxpemUoKSB7XG4gIGlmICh0aGlzLnpPbmUpXG4gICAgcmV0dXJuIHRoaXM7XG5cbiAgLy8gTm9ybWFsaXplIGNvb3JkaW5hdGVzXG4gIHZhciB6aSA9IHRoaXMuei5yZWRJbnZtKCk7XG4gIHRoaXMueCA9IHRoaXMueC5yZWRNdWwoemkpO1xuICB0aGlzLnkgPSB0aGlzLnkucmVkTXVsKHppKTtcbiAgaWYgKHRoaXMudClcbiAgICB0aGlzLnQgPSB0aGlzLnQucmVkTXVsKHppKTtcbiAgdGhpcy56ID0gdGhpcy5jdXJ2ZS5vbmU7XG4gIHRoaXMuek9uZSA9IHRydWU7XG4gIHJldHVybiB0aGlzO1xufTtcblxuUG9pbnQucHJvdG90eXBlLm5lZyA9IGZ1bmN0aW9uIG5lZygpIHtcbiAgcmV0dXJuIHRoaXMuY3VydmUucG9pbnQodGhpcy54LnJlZE5lZygpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMueixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50ICYmIHRoaXMudC5yZWROZWcoKSk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuZ2V0WCA9IGZ1bmN0aW9uIGdldFgoKSB7XG4gIHRoaXMubm9ybWFsaXplKCk7XG4gIHJldHVybiB0aGlzLnguZnJvbVJlZCgpO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmdldFkgPSBmdW5jdGlvbiBnZXRZKCkge1xuICB0aGlzLm5vcm1hbGl6ZSgpO1xuICByZXR1cm4gdGhpcy55LmZyb21SZWQoKTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5lcSA9IGZ1bmN0aW9uIGVxKG90aGVyKSB7XG4gIHJldHVybiB0aGlzID09PSBvdGhlciB8fFxuICAgICAgICAgdGhpcy5nZXRYKCkuY21wKG90aGVyLmdldFgoKSkgPT09IDAgJiZcbiAgICAgICAgIHRoaXMuZ2V0WSgpLmNtcChvdGhlci5nZXRZKCkpID09PSAwO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmVxWFRvUCA9IGZ1bmN0aW9uIGVxWFRvUCh4KSB7XG4gIHZhciByeCA9IHgudG9SZWQodGhpcy5jdXJ2ZS5yZWQpLnJlZE11bCh0aGlzLnopO1xuICBpZiAodGhpcy54LmNtcChyeCkgPT09IDApXG4gICAgcmV0dXJuIHRydWU7XG5cbiAgdmFyIHhjID0geC5jbG9uZSgpO1xuICB2YXIgdCA9IHRoaXMuY3VydmUucmVkTi5yZWRNdWwodGhpcy56KTtcbiAgZm9yICg7Oykge1xuICAgIHhjLmlhZGQodGhpcy5jdXJ2ZS5uKTtcbiAgICBpZiAoeGMuY21wKHRoaXMuY3VydmUucCkgPj0gMClcbiAgICAgIHJldHVybiBmYWxzZTtcblxuICAgIHJ4LnJlZElBZGQodCk7XG4gICAgaWYgKHRoaXMueC5jbXAocngpID09PSAwKVxuICAgICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG5cbi8vIENvbXBhdGliaWxpdHkgd2l0aCBCYXNlQ3VydmVcblBvaW50LnByb3RvdHlwZS50b1AgPSBQb2ludC5wcm90b3R5cGUubm9ybWFsaXplO1xuUG9pbnQucHJvdG90eXBlLm1peGVkQWRkID0gUG9pbnQucHJvdG90eXBlLmFkZDtcbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5zaGExID0gcmVxdWlyZSgnLi9zaGEvMScpO1xuZXhwb3J0cy5zaGEyMjQgPSByZXF1aXJlKCcuL3NoYS8yMjQnKTtcbmV4cG9ydHMuc2hhMjU2ID0gcmVxdWlyZSgnLi9zaGEvMjU2Jyk7XG5leHBvcnRzLnNoYTM4NCA9IHJlcXVpcmUoJy4vc2hhLzM4NCcpO1xuZXhwb3J0cy5zaGE1MTIgPSByZXF1aXJlKCcuL3NoYS81MTInKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcbnZhciBjb21tb24gPSByZXF1aXJlKCcuLi9jb21tb24nKTtcbnZhciBzaGFDb21tb24gPSByZXF1aXJlKCcuL2NvbW1vbicpO1xuXG52YXIgcm90bDMyID0gdXRpbHMucm90bDMyO1xudmFyIHN1bTMyID0gdXRpbHMuc3VtMzI7XG52YXIgc3VtMzJfNSA9IHV0aWxzLnN1bTMyXzU7XG52YXIgZnRfMSA9IHNoYUNvbW1vbi5mdF8xO1xudmFyIEJsb2NrSGFzaCA9IGNvbW1vbi5CbG9ja0hhc2g7XG5cbnZhciBzaGExX0sgPSBbXG4gIDB4NUE4Mjc5OTksIDB4NkVEOUVCQTEsXG4gIDB4OEYxQkJDREMsIDB4Q0E2MkMxRDZcbl07XG5cbmZ1bmN0aW9uIFNIQTEoKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBTSEExKSlcbiAgICByZXR1cm4gbmV3IFNIQTEoKTtcblxuICBCbG9ja0hhc2guY2FsbCh0aGlzKTtcbiAgdGhpcy5oID0gW1xuICAgIDB4Njc0NTIzMDEsIDB4ZWZjZGFiODksIDB4OThiYWRjZmUsXG4gICAgMHgxMDMyNTQ3NiwgMHhjM2QyZTFmMCBdO1xuICB0aGlzLlcgPSBuZXcgQXJyYXkoODApO1xufVxuXG51dGlscy5pbmhlcml0cyhTSEExLCBCbG9ja0hhc2gpO1xubW9kdWxlLmV4cG9ydHMgPSBTSEExO1xuXG5TSEExLmJsb2NrU2l6ZSA9IDUxMjtcblNIQTEub3V0U2l6ZSA9IDE2MDtcblNIQTEuaG1hY1N0cmVuZ3RoID0gODA7XG5TSEExLnBhZExlbmd0aCA9IDY0O1xuXG5TSEExLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gX3VwZGF0ZShtc2csIHN0YXJ0KSB7XG4gIHZhciBXID0gdGhpcy5XO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgMTY7IGkrKylcbiAgICBXW2ldID0gbXNnW3N0YXJ0ICsgaV07XG5cbiAgZm9yKDsgaSA8IFcubGVuZ3RoOyBpKyspXG4gICAgV1tpXSA9IHJvdGwzMihXW2kgLSAzXSBeIFdbaSAtIDhdIF4gV1tpIC0gMTRdIF4gV1tpIC0gMTZdLCAxKTtcblxuICB2YXIgYSA9IHRoaXMuaFswXTtcbiAgdmFyIGIgPSB0aGlzLmhbMV07XG4gIHZhciBjID0gdGhpcy5oWzJdO1xuICB2YXIgZCA9IHRoaXMuaFszXTtcbiAgdmFyIGUgPSB0aGlzLmhbNF07XG5cbiAgZm9yIChpID0gMDsgaSA8IFcubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgcyA9IH5+KGkgLyAyMCk7XG4gICAgdmFyIHQgPSBzdW0zMl81KHJvdGwzMihhLCA1KSwgZnRfMShzLCBiLCBjLCBkKSwgZSwgV1tpXSwgc2hhMV9LW3NdKTtcbiAgICBlID0gZDtcbiAgICBkID0gYztcbiAgICBjID0gcm90bDMyKGIsIDMwKTtcbiAgICBiID0gYTtcbiAgICBhID0gdDtcbiAgfVxuXG4gIHRoaXMuaFswXSA9IHN1bTMyKHRoaXMuaFswXSwgYSk7XG4gIHRoaXMuaFsxXSA9IHN1bTMyKHRoaXMuaFsxXSwgYik7XG4gIHRoaXMuaFsyXSA9IHN1bTMyKHRoaXMuaFsyXSwgYyk7XG4gIHRoaXMuaFszXSA9IHN1bTMyKHRoaXMuaFszXSwgZCk7XG4gIHRoaXMuaFs0XSA9IHN1bTMyKHRoaXMuaFs0XSwgZSk7XG59O1xuXG5TSEExLnByb3RvdHlwZS5fZGlnZXN0ID0gZnVuY3Rpb24gZGlnZXN0KGVuYykge1xuICBpZiAoZW5jID09PSAnaGV4JylcbiAgICByZXR1cm4gdXRpbHMudG9IZXgzMih0aGlzLmgsICdiaWcnKTtcbiAgZWxzZVxuICAgIHJldHVybiB1dGlscy5zcGxpdDMyKHRoaXMuaCwgJ2JpZycpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcbnZhciBTSEEyNTYgPSByZXF1aXJlKCcuLzI1NicpO1xuXG5mdW5jdGlvbiBTSEEyMjQoKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBTSEEyMjQpKVxuICAgIHJldHVybiBuZXcgU0hBMjI0KCk7XG5cbiAgU0hBMjU2LmNhbGwodGhpcyk7XG4gIHRoaXMuaCA9IFtcbiAgICAweGMxMDU5ZWQ4LCAweDM2N2NkNTA3LCAweDMwNzBkZDE3LCAweGY3MGU1OTM5LFxuICAgIDB4ZmZjMDBiMzEsIDB4Njg1ODE1MTEsIDB4NjRmOThmYTcsIDB4YmVmYTRmYTQgXTtcbn1cbnV0aWxzLmluaGVyaXRzKFNIQTIyNCwgU0hBMjU2KTtcbm1vZHVsZS5leHBvcnRzID0gU0hBMjI0O1xuXG5TSEEyMjQuYmxvY2tTaXplID0gNTEyO1xuU0hBMjI0Lm91dFNpemUgPSAyMjQ7XG5TSEEyMjQuaG1hY1N0cmVuZ3RoID0gMTkyO1xuU0hBMjI0LnBhZExlbmd0aCA9IDY0O1xuXG5TSEEyMjQucHJvdG90eXBlLl9kaWdlc3QgPSBmdW5jdGlvbiBkaWdlc3QoZW5jKSB7XG4gIC8vIEp1c3QgdHJ1bmNhdGUgb3V0cHV0XG4gIGlmIChlbmMgPT09ICdoZXgnKVxuICAgIHJldHVybiB1dGlscy50b0hleDMyKHRoaXMuaC5zbGljZSgwLCA3KSwgJ2JpZycpO1xuICBlbHNlXG4gICAgcmV0dXJuIHV0aWxzLnNwbGl0MzIodGhpcy5oLnNsaWNlKDAsIDcpLCAnYmlnJyk7XG59O1xuXG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbnZhciBTSEE1MTIgPSByZXF1aXJlKCcuLzUxMicpO1xuXG5mdW5jdGlvbiBTSEEzODQoKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBTSEEzODQpKVxuICAgIHJldHVybiBuZXcgU0hBMzg0KCk7XG5cbiAgU0hBNTEyLmNhbGwodGhpcyk7XG4gIHRoaXMuaCA9IFtcbiAgICAweGNiYmI5ZDVkLCAweGMxMDU5ZWQ4LFxuICAgIDB4NjI5YTI5MmEsIDB4MzY3Y2Q1MDcsXG4gICAgMHg5MTU5MDE1YSwgMHgzMDcwZGQxNyxcbiAgICAweDE1MmZlY2Q4LCAweGY3MGU1OTM5LFxuICAgIDB4NjczMzI2NjcsIDB4ZmZjMDBiMzEsXG4gICAgMHg4ZWI0NGE4NywgMHg2ODU4MTUxMSxcbiAgICAweGRiMGMyZTBkLCAweDY0Zjk4ZmE3LFxuICAgIDB4NDdiNTQ4MWQsIDB4YmVmYTRmYTQgXTtcbn1cbnV0aWxzLmluaGVyaXRzKFNIQTM4NCwgU0hBNTEyKTtcbm1vZHVsZS5leHBvcnRzID0gU0hBMzg0O1xuXG5TSEEzODQuYmxvY2tTaXplID0gMTAyNDtcblNIQTM4NC5vdXRTaXplID0gMzg0O1xuU0hBMzg0LmhtYWNTdHJlbmd0aCA9IDE5MjtcblNIQTM4NC5wYWRMZW5ndGggPSAxMjg7XG5cblNIQTM4NC5wcm90b3R5cGUuX2RpZ2VzdCA9IGZ1bmN0aW9uIGRpZ2VzdChlbmMpIHtcbiAgaWYgKGVuYyA9PT0gJ2hleCcpXG4gICAgcmV0dXJuIHV0aWxzLnRvSGV4MzIodGhpcy5oLnNsaWNlKDAsIDEyKSwgJ2JpZycpO1xuICBlbHNlXG4gICAgcmV0dXJuIHV0aWxzLnNwbGl0MzIodGhpcy5oLnNsaWNlKDAsIDEyKSwgJ2JpZycpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIGNvbW1vbiA9IHJlcXVpcmUoJy4vY29tbW9uJyk7XG5cbnZhciByb3RsMzIgPSB1dGlscy5yb3RsMzI7XG52YXIgc3VtMzIgPSB1dGlscy5zdW0zMjtcbnZhciBzdW0zMl8zID0gdXRpbHMuc3VtMzJfMztcbnZhciBzdW0zMl80ID0gdXRpbHMuc3VtMzJfNDtcbnZhciBCbG9ja0hhc2ggPSBjb21tb24uQmxvY2tIYXNoO1xuXG5mdW5jdGlvbiBSSVBFTUQxNjAoKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBSSVBFTUQxNjApKVxuICAgIHJldHVybiBuZXcgUklQRU1EMTYwKCk7XG5cbiAgQmxvY2tIYXNoLmNhbGwodGhpcyk7XG5cbiAgdGhpcy5oID0gWyAweDY3NDUyMzAxLCAweGVmY2RhYjg5LCAweDk4YmFkY2ZlLCAweDEwMzI1NDc2LCAweGMzZDJlMWYwIF07XG4gIHRoaXMuZW5kaWFuID0gJ2xpdHRsZSc7XG59XG51dGlscy5pbmhlcml0cyhSSVBFTUQxNjAsIEJsb2NrSGFzaCk7XG5leHBvcnRzLnJpcGVtZDE2MCA9IFJJUEVNRDE2MDtcblxuUklQRU1EMTYwLmJsb2NrU2l6ZSA9IDUxMjtcblJJUEVNRDE2MC5vdXRTaXplID0gMTYwO1xuUklQRU1EMTYwLmhtYWNTdHJlbmd0aCA9IDE5MjtcblJJUEVNRDE2MC5wYWRMZW5ndGggPSA2NDtcblxuUklQRU1EMTYwLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlKG1zZywgc3RhcnQpIHtcbiAgdmFyIEEgPSB0aGlzLmhbMF07XG4gIHZhciBCID0gdGhpcy5oWzFdO1xuICB2YXIgQyA9IHRoaXMuaFsyXTtcbiAgdmFyIEQgPSB0aGlzLmhbM107XG4gIHZhciBFID0gdGhpcy5oWzRdO1xuICB2YXIgQWggPSBBO1xuICB2YXIgQmggPSBCO1xuICB2YXIgQ2ggPSBDO1xuICB2YXIgRGggPSBEO1xuICB2YXIgRWggPSBFO1xuICBmb3IgKHZhciBqID0gMDsgaiA8IDgwOyBqKyspIHtcbiAgICB2YXIgVCA9IHN1bTMyKFxuICAgICAgcm90bDMyKFxuICAgICAgICBzdW0zMl80KEEsIGYoaiwgQiwgQywgRCksIG1zZ1tyW2pdICsgc3RhcnRdLCBLKGopKSxcbiAgICAgICAgc1tqXSksXG4gICAgICBFKTtcbiAgICBBID0gRTtcbiAgICBFID0gRDtcbiAgICBEID0gcm90bDMyKEMsIDEwKTtcbiAgICBDID0gQjtcbiAgICBCID0gVDtcbiAgICBUID0gc3VtMzIoXG4gICAgICByb3RsMzIoXG4gICAgICAgIHN1bTMyXzQoQWgsIGYoNzkgLSBqLCBCaCwgQ2gsIERoKSwgbXNnW3JoW2pdICsgc3RhcnRdLCBLaChqKSksXG4gICAgICAgIHNoW2pdKSxcbiAgICAgIEVoKTtcbiAgICBBaCA9IEVoO1xuICAgIEVoID0gRGg7XG4gICAgRGggPSByb3RsMzIoQ2gsIDEwKTtcbiAgICBDaCA9IEJoO1xuICAgIEJoID0gVDtcbiAgfVxuICBUID0gc3VtMzJfMyh0aGlzLmhbMV0sIEMsIERoKTtcbiAgdGhpcy5oWzFdID0gc3VtMzJfMyh0aGlzLmhbMl0sIEQsIEVoKTtcbiAgdGhpcy5oWzJdID0gc3VtMzJfMyh0aGlzLmhbM10sIEUsIEFoKTtcbiAgdGhpcy5oWzNdID0gc3VtMzJfMyh0aGlzLmhbNF0sIEEsIEJoKTtcbiAgdGhpcy5oWzRdID0gc3VtMzJfMyh0aGlzLmhbMF0sIEIsIENoKTtcbiAgdGhpcy5oWzBdID0gVDtcbn07XG5cblJJUEVNRDE2MC5wcm90b3R5cGUuX2RpZ2VzdCA9IGZ1bmN0aW9uIGRpZ2VzdChlbmMpIHtcbiAgaWYgKGVuYyA9PT0gJ2hleCcpXG4gICAgcmV0dXJuIHV0aWxzLnRvSGV4MzIodGhpcy5oLCAnbGl0dGxlJyk7XG4gIGVsc2VcbiAgICByZXR1cm4gdXRpbHMuc3BsaXQzMih0aGlzLmgsICdsaXR0bGUnKTtcbn07XG5cbmZ1bmN0aW9uIGYoaiwgeCwgeSwgeikge1xuICBpZiAoaiA8PSAxNSlcbiAgICByZXR1cm4geCBeIHkgXiB6O1xuICBlbHNlIGlmIChqIDw9IDMxKVxuICAgIHJldHVybiAoeCAmIHkpIHwgKCh+eCkgJiB6KTtcbiAgZWxzZSBpZiAoaiA8PSA0NylcbiAgICByZXR1cm4gKHggfCAofnkpKSBeIHo7XG4gIGVsc2UgaWYgKGogPD0gNjMpXG4gICAgcmV0dXJuICh4ICYgeikgfCAoeSAmICh+eikpO1xuICBlbHNlXG4gICAgcmV0dXJuIHggXiAoeSB8ICh+eikpO1xufVxuXG5mdW5jdGlvbiBLKGopIHtcbiAgaWYgKGogPD0gMTUpXG4gICAgcmV0dXJuIDB4MDAwMDAwMDA7XG4gIGVsc2UgaWYgKGogPD0gMzEpXG4gICAgcmV0dXJuIDB4NWE4Mjc5OTk7XG4gIGVsc2UgaWYgKGogPD0gNDcpXG4gICAgcmV0dXJuIDB4NmVkOWViYTE7XG4gIGVsc2UgaWYgKGogPD0gNjMpXG4gICAgcmV0dXJuIDB4OGYxYmJjZGM7XG4gIGVsc2VcbiAgICByZXR1cm4gMHhhOTUzZmQ0ZTtcbn1cblxuZnVuY3Rpb24gS2goaikge1xuICBpZiAoaiA8PSAxNSlcbiAgICByZXR1cm4gMHg1MGEyOGJlNjtcbiAgZWxzZSBpZiAoaiA8PSAzMSlcbiAgICByZXR1cm4gMHg1YzRkZDEyNDtcbiAgZWxzZSBpZiAoaiA8PSA0NylcbiAgICByZXR1cm4gMHg2ZDcwM2VmMztcbiAgZWxzZSBpZiAoaiA8PSA2MylcbiAgICByZXR1cm4gMHg3YTZkNzZlOTtcbiAgZWxzZVxuICAgIHJldHVybiAweDAwMDAwMDAwO1xufVxuXG52YXIgciA9IFtcbiAgMCwgMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOSwgMTAsIDExLCAxMiwgMTMsIDE0LCAxNSxcbiAgNywgNCwgMTMsIDEsIDEwLCA2LCAxNSwgMywgMTIsIDAsIDksIDUsIDIsIDE0LCAxMSwgOCxcbiAgMywgMTAsIDE0LCA0LCA5LCAxNSwgOCwgMSwgMiwgNywgMCwgNiwgMTMsIDExLCA1LCAxMixcbiAgMSwgOSwgMTEsIDEwLCAwLCA4LCAxMiwgNCwgMTMsIDMsIDcsIDE1LCAxNCwgNSwgNiwgMixcbiAgNCwgMCwgNSwgOSwgNywgMTIsIDIsIDEwLCAxNCwgMSwgMywgOCwgMTEsIDYsIDE1LCAxM1xuXTtcblxudmFyIHJoID0gW1xuICA1LCAxNCwgNywgMCwgOSwgMiwgMTEsIDQsIDEzLCA2LCAxNSwgOCwgMSwgMTAsIDMsIDEyLFxuICA2LCAxMSwgMywgNywgMCwgMTMsIDUsIDEwLCAxNCwgMTUsIDgsIDEyLCA0LCA5LCAxLCAyLFxuICAxNSwgNSwgMSwgMywgNywgMTQsIDYsIDksIDExLCA4LCAxMiwgMiwgMTAsIDAsIDQsIDEzLFxuICA4LCA2LCA0LCAxLCAzLCAxMSwgMTUsIDAsIDUsIDEyLCAyLCAxMywgOSwgNywgMTAsIDE0LFxuICAxMiwgMTUsIDEwLCA0LCAxLCA1LCA4LCA3LCA2LCAyLCAxMywgMTQsIDAsIDMsIDksIDExXG5dO1xuXG52YXIgcyA9IFtcbiAgMTEsIDE0LCAxNSwgMTIsIDUsIDgsIDcsIDksIDExLCAxMywgMTQsIDE1LCA2LCA3LCA5LCA4LFxuICA3LCA2LCA4LCAxMywgMTEsIDksIDcsIDE1LCA3LCAxMiwgMTUsIDksIDExLCA3LCAxMywgMTIsXG4gIDExLCAxMywgNiwgNywgMTQsIDksIDEzLCAxNSwgMTQsIDgsIDEzLCA2LCA1LCAxMiwgNywgNSxcbiAgMTEsIDEyLCAxNCwgMTUsIDE0LCAxNSwgOSwgOCwgOSwgMTQsIDUsIDYsIDgsIDYsIDUsIDEyLFxuICA5LCAxNSwgNSwgMTEsIDYsIDgsIDEzLCAxMiwgNSwgMTIsIDEzLCAxNCwgMTEsIDgsIDUsIDZcbl07XG5cbnZhciBzaCA9IFtcbiAgOCwgOSwgOSwgMTEsIDEzLCAxNSwgMTUsIDUsIDcsIDcsIDgsIDExLCAxNCwgMTQsIDEyLCA2LFxuICA5LCAxMywgMTUsIDcsIDEyLCA4LCA5LCAxMSwgNywgNywgMTIsIDcsIDYsIDE1LCAxMywgMTEsXG4gIDksIDcsIDE1LCAxMSwgOCwgNiwgNiwgMTQsIDEyLCAxMywgNSwgMTQsIDEzLCAxMywgNywgNSxcbiAgMTUsIDUsIDgsIDExLCAxNCwgMTQsIDYsIDE0LCA2LCA5LCAxMiwgOSwgMTIsIDUsIDE1LCA4LFxuICA4LCA1LCAxMiwgOSwgMTIsIDUsIDE0LCA2LCA4LCAxMywgNiwgNSwgMTUsIDEzLCAxMSwgMTFcbl07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBhc3NlcnQgPSByZXF1aXJlKCdtaW5pbWFsaXN0aWMtYXNzZXJ0Jyk7XG5cbmZ1bmN0aW9uIEhtYWMoaGFzaCwga2V5LCBlbmMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIEhtYWMpKVxuICAgIHJldHVybiBuZXcgSG1hYyhoYXNoLCBrZXksIGVuYyk7XG4gIHRoaXMuSGFzaCA9IGhhc2g7XG4gIHRoaXMuYmxvY2tTaXplID0gaGFzaC5ibG9ja1NpemUgLyA4O1xuICB0aGlzLm91dFNpemUgPSBoYXNoLm91dFNpemUgLyA4O1xuICB0aGlzLmlubmVyID0gbnVsbDtcbiAgdGhpcy5vdXRlciA9IG51bGw7XG5cbiAgdGhpcy5faW5pdCh1dGlscy50b0FycmF5KGtleSwgZW5jKSk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IEhtYWM7XG5cbkhtYWMucHJvdG90eXBlLl9pbml0ID0gZnVuY3Rpb24gaW5pdChrZXkpIHtcbiAgLy8gU2hvcnRlbiBrZXksIGlmIG5lZWRlZFxuICBpZiAoa2V5Lmxlbmd0aCA+IHRoaXMuYmxvY2tTaXplKVxuICAgIGtleSA9IG5ldyB0aGlzLkhhc2goKS51cGRhdGUoa2V5KS5kaWdlc3QoKTtcbiAgYXNzZXJ0KGtleS5sZW5ndGggPD0gdGhpcy5ibG9ja1NpemUpO1xuXG4gIC8vIEFkZCBwYWRkaW5nIHRvIGtleVxuICBmb3IgKHZhciBpID0ga2V5Lmxlbmd0aDsgaSA8IHRoaXMuYmxvY2tTaXplOyBpKyspXG4gICAga2V5LnB1c2goMCk7XG5cbiAgZm9yIChpID0gMDsgaSA8IGtleS5sZW5ndGg7IGkrKylcbiAgICBrZXlbaV0gXj0gMHgzNjtcbiAgdGhpcy5pbm5lciA9IG5ldyB0aGlzLkhhc2goKS51cGRhdGUoa2V5KTtcblxuICAvLyAweDM2IF4gMHg1YyA9IDB4NmFcbiAgZm9yIChpID0gMDsgaSA8IGtleS5sZW5ndGg7IGkrKylcbiAgICBrZXlbaV0gXj0gMHg2YTtcbiAgdGhpcy5vdXRlciA9IG5ldyB0aGlzLkhhc2goKS51cGRhdGUoa2V5KTtcbn07XG5cbkhtYWMucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZShtc2csIGVuYykge1xuICB0aGlzLmlubmVyLnVwZGF0ZShtc2csIGVuYyk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuSG1hYy5wcm90b3R5cGUuZGlnZXN0ID0gZnVuY3Rpb24gZGlnZXN0KGVuYykge1xuICB0aGlzLm91dGVyLnVwZGF0ZSh0aGlzLmlubmVyLmRpZ2VzdCgpKTtcbiAgcmV0dXJuIHRoaXMub3V0ZXIuZGlnZXN0KGVuYyk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7XG4gIGRvdWJsZXM6IHtcbiAgICBzdGVwOiA0LFxuICAgIHBvaW50czogW1xuICAgICAgW1xuICAgICAgICAnZTYwZmNlOTNiNTllOWVjNTMwMTFhYWJjMjFjMjNlOTdiMmEzMTM2OWI4N2E1YWU5YzQ0ZWU4OWUyYTZkZWMwYScsXG4gICAgICAgICdmN2UzNTA3Mzk5ZTU5NTkyOWRiOTlmMzRmNTc5MzcxMDEyOTY4OTFlNDRkMjNmMGJlMWYzMmNjZTY5NjE2ODIxJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzgyODIyNjMyMTJjNjA5ZDllYTJhNmUzZTE3MmRlMjM4ZDhjMzljYWJkNWFjMWNhMTA2NDZlMjNmZDVmNTE1MDgnLFxuICAgICAgICAnMTFmOGE4MDk4NTU3ZGZlNDVlODI1NmU4MzBiNjBhY2U2MmQ2MTNhYzJmN2IxN2JlZDMxYjZlYWZmNmUyNmNhZidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcxNzVlMTU5ZjcyOGI4NjVhNzJmOTljYzZjNmZjODQ2ZGUwYjkzODMzZmQyMjIyZWQ3M2ZjZTViNTUxZTViNzM5JyxcbiAgICAgICAgJ2QzNTA2ZTBkOWUzYzc5ZWJhNGVmOTdhNTFmZjcxZjVlYWNiNTk1NWFkZDI0MzQ1YzZlZmE2ZmZlZTlmZWQ2OTUnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMzYzZDkwZDQ0N2IwMGM5Yzk5Y2VhYzA1YjYyNjJlZTA1MzQ0MWM3ZTU1NTUyZmZlNTI2YmFkOGY4M2ZmNDY0MCcsXG4gICAgICAgICc0ZTI3M2FkZmM3MzIyMjE5NTNiNDQ1Mzk3ZjMzNjMxNDViOWE4OTAwODE5OWVjYjYyMDAzYzdmM2JlZTlkZTknXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnOGI0YjVmMTY1ZGYzYzJiZThjNjI0NGI1Yjc0NTYzODg0M2U0YTc4MWExNWJjZDFiNjlmNzlhNTVkZmZkZjgwYycsXG4gICAgICAgICc0YWFkMGE2ZjY4ZDMwOGI0YjNmYmQ3ODEzYWIwZGEwNGY5ZTMzNjU0NjE2MmVlNTZiM2VmZjBjNjVmZDRmZDM2J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzcyM2NiYWE2ZTVkYjk5NmQ2YmY3NzFjMDBiZDU0OGM3YjcwMGRiZmZhNmMwZTc3YmNiNjExNTkyNTIzMmZjZGEnLFxuICAgICAgICAnOTZlODY3YjU1OTVjYzQ5OGE5MjExMzc0ODg4MjRkNmUyNjYwYTA2NTM3Nzk0OTQ4MDFkYzA2OWQ5ZWIzOWY1ZidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdlZWJmYTRkNDkzYmViZjk4YmE1ZmVlYzgxMmMyZDNiNTA5NDc5NjEyMzdhOTE5ODM5YTUzM2VjYTBlN2RkN2ZhJyxcbiAgICAgICAgJzVkOWE4Y2EzOTcwZWYwZjI2OWVlN2VkYWYxNzgwODlkOWFlNGNkYzNhNzExZjcxMmRkZmQ0ZmRhZTFkZTg5OTknXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMTAwZjQ0ZGE2OTZlNzE2NzI3OTFkMGEwOWI3YmRlNDU5ZjEyMTVhMjliM2MwM2JmZWZkNzgzNWIzOWE0OGRiMCcsXG4gICAgICAgICdjZGQ5ZTEzMTkyYTAwYjc3MmVjOGYzMzAwYzA5MDY2NmI3ZmY0YTE4ZmY1MTk1YWMwZmJkNWNkNjJiYzY1YTA5J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2UxMDMxYmUyNjJjN2VkMWIxZGM5MjI3YTRhMDRjMDE3YTc3ZjhkNDQ2NGYzYjM4NTJjOGFjZGU2ZTUzNGZkMmQnLFxuICAgICAgICAnOWQ3MDYxOTI4OTQwNDA1ZTZiYjZhNDE3NjU5NzUzNWFmMjkyZGQ0MTllMWNlZDc5YTQ0ZjE4ZjI5NDU2YTAwZCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdmZWVhNmNhZTQ2ZDU1YjUzMGFjMjgzOWYxNDNiZDdlYzVjZjhiMjY2YTQxZDZhZjUyZDVlNjg4ZDkwOTQ2OTZkJyxcbiAgICAgICAgJ2U1N2M2YjZjOTdkY2UxYmFiMDZlNGUxMmJmM2VjZDVjOTgxYzg5NTdjYzQxNDQyZDMxNTVkZWJmMTgwOTAwODgnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZGE2N2E5MWQ5MTA0OWNkY2IzNjdiZTRiZTZmZmNhM2NmZWVkNjU3ZDgwODU4M2RlMzNmYTk3OGJjMWVjNmNiMScsXG4gICAgICAgICc5YmFjYWEzNTQ4MTY0MmJjNDFmNDYzZjdlYzk3ODBlNWRlYzdhZGM1MDhmNzQwYTE3ZTllYThlMjdhNjhiZTFkJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzUzOTA0ZmFhMGIzMzRjZGRhNmUwMDA5MzVlZjIyMTUxZWMwOGQwZjdiYjExMDY5ZjU3NTQ1Y2NjMWEzN2I3YzAnLFxuICAgICAgICAnNWJjMDg3ZDBiYzgwMTA2ZDg4YzllY2NhYzIwZDNjMWMxMzk5OTk4MWUxNDQzNDY5OWRjYjA5NmIwMjI3NzFjOCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc4ZTdiY2QwYmQzNTk4M2E3NzE5Y2NhNzc2NGNhOTA2Nzc5YjUzYTA0M2E5YjhiY2FlZmY5NTlmNDNhZDg2MDQ3JyxcbiAgICAgICAgJzEwYjc3NzBiMmEzZGE0YjM5NDAzMTA0MjBjYTk1MTQ1NzllODhlMmU0N2ZkNjhiM2VhMTAwNDdlODQ2MDM3MmEnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMzg1ZWVkMzRjMWNkZmYyMWU2ZDA4MTg2ODliODFiZGU3MWE3ZjRmMTgzOTdlNjY5MGE4NDFlMTU5OWM0Mzg2MicsXG4gICAgICAgICcyODNiZWJjM2U4ZWEyM2Y1NjcwMWRlMTllOWViZjQ1NzZiMzA0ZWVjMjA4NmRjOGNjMDQ1OGZlNTU0MmU1NDUzJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzZmOWQ5YjgwM2VjZjE5MTYzN2M3M2E0NDEzZGZhMTgwZmRkZjg0YTU5NDdmYmM5YzYwNmVkODZjM2ZhYzNhNycsXG4gICAgICAgICc3YzgwYzY4ZTYwMzA1OWJhNjliOGUyYTMwZTQ1YzRkNDdlYTRkZDJmNWMyODEwMDJkODY4OTA2MDNhODQyMTYwJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzMzMjJkNDAxMjQzYzRlMjU4MmEyMTQ3YzEwNGQ2ZWNiZjc3NGQxNjNkYjBmNWU1MzEzYjdlMGU3NDJkMGU2YmQnLFxuICAgICAgICAnNTZlNzA3OTdlOTY2NGVmNWJmYjAxOWJjNGRkYWY5YjcyODA1ZjYzZWEyODczYWY2MjRmM2EyZTk2YzI4YjJhMCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc4NTY3MmM3ZDJkZTBiN2RhMmJkMTc3MGQ4OTY2NTg2ODc0MWIzZjlhZjc2NDMzOTc3MjFkNzRkMjgxMzRhYjgzJyxcbiAgICAgICAgJzdjNDgxYjliNWI0M2IyZWI2Mzc0MDQ5YmZhNjJjMmU1ZTc3ZjE3ZmNjNTI5OGY0NGM4ZTMwOTRmNzkwMzEzYTYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnOTQ4YmY4MDliMTk4OGE0NmIwNmM5ZjE5MTk0MTNiMTBmOTIyNmM2MGY2Njg4MzJmZmQ5NTlhZjYwYzgyYTBhJyxcbiAgICAgICAgJzUzYTU2Mjg1NmRjYjY2NDZkYzZiNzRjNWQxYzM0MThjNmQ0ZGZmMDhjOTdjZDJiZWQ0Y2I3Zjg4ZDhjOGU1ODknXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNjI2MGNlN2Y0NjE4MDFjMzRmMDY3Y2UwZjAyODczYThmMWIwZTQ0ZGZjNjk3NTJhY2NlY2Q4MTlmMzhmZDhlOCcsXG4gICAgICAgICdiYzJkYTgyYjZmYTViNTcxYTdmMDkwNDk3NzZhMWVmN2VjZDI5MjIzODA1MWMxOThjMWE4NGU5NWIyYjRhZTE3J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2U1MDM3ZGUwYWZjMWQ4ZDQzZDgzNDg0MTRiYmY0MTAzMDQzZWM4ZjU3NWJmZGM0MzI5NTNjYzhkMjAzN2ZhMmQnLFxuICAgICAgICAnNDU3MTUzNGJhYTk0ZDNiNWY5Zjk4ZDA5ZmI5OTBiZGRiZDVmNWIwM2VjNDgxZjEwZTBlNWRjODQxZDc1NWJkYSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdlMDYzNzJiMGY0YTIwN2FkZjVlYTkwNWU4ZjE3NzFiNGU3ZThkYmQxYzZhNmM1YjcyNTg2NmEwYWU0ZmNlNzI1JyxcbiAgICAgICAgJzdhOTA4OTc0YmNlMThjZmUxMmEyN2JiMmFkNWE0ODhjZDc0ODRhNzc4NzEwNDg3MGIyNzAzNGY5NGVlZTMxZGQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMjEzYzdhNzE1Y2Q1ZDQ1MzU4ZDBiYmY5ZGMwY2UwMjIwNGIxMGJkZGUyYTNmNTg1NDBhZDY5MDhkMDU1OTc1NCcsXG4gICAgICAgICc0YjZkYWQwYjVhZTQ2MjUwNzAxM2FkMDYyNDViYTE5MGJiNDg1MGY1ZjM2YTdlZWRkZmYyYzI3NTM0YjQ1OGYyJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzRlN2MyNzJhN2FmNGIzNGU4ZGJiOTM1MmE1NDE5YTg3ZTI4MzhjNzBhZGM2MmNkZGYwY2MzYTNiMDhmYmQ1M2MnLFxuICAgICAgICAnMTc3NDljNzY2YzlkMGIxOGUxNmZkMDlmNmRlZjY4MWI1MzBiOTYxNGJmZjdkZDMzZTBiMzk0MTgxN2RjYWFlNidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdmZWE3NGUzZGJlNzc4YjFiMTBmMjM4YWQ2MTY4NmFhNWM3NmUzZGIyYmU0MzA1NzYzMjQyN2UyODQwZmIyN2I2JyxcbiAgICAgICAgJzZlMDU2OGRiOWIwYjEzMjk3Y2Y2NzRkZWNjYjZhZjkzMTI2YjU5NmI5NzNmN2I3NzcwMWQzZGI3ZjIzY2I5NmYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNzZlNjQxMTNmNjc3Y2YwZTEwYTI1NzBkNTk5OTY4ZDMxNTQ0ZTE3OWI3NjA0MzI5NTJjMDJhNDQxN2JkZGUzOScsXG4gICAgICAgICdjOTBkZGY4ZGVlNGU5NWNmNTc3MDY2ZDcwNjgxZjBkMzVlMmEzM2QyYjU2ZDIwMzJiNGIxNzUyZDE5MDFhYzAxJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2M3MzhjNTZiMDNiMmFiZTFlODI4MWJhYTc0M2Y4ZjlhOGY3Y2M2NDNkZjI2Y2JlZTNhYjE1MDI0MmJjYmI4OTEnLFxuICAgICAgICAnODkzZmI1Nzg5NTFhZDI1MzdmNzE4ZjJlYWNiZmJiYmI4MjMxNGVlZjc4ODBjZmU5MTdlNzM1ZDk2OTlhODRjMydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdkODk1NjI2NTQ4YjY1YjgxZTI2NGM3NjM3Yzk3Mjg3N2QxZDcyZTVmM2E5MjUwMTQzNzJlOWY2NTg4ZjZjMTRiJyxcbiAgICAgICAgJ2ZlYmZhYTM4ZjJiYzdlYWU3MjhlYzYwODE4YzM0MGViMDM0MjhkNjMyYmIwNjdlMTc5MzYzZWQ3NWQ3ZDk5MWYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYjhkYTk0MDMyYTk1NzUxOGViMGY2NDMzNTcxZTg3NjFjZWZmYzczNjkzZTg0ZWRkNDkxNTBhNTY0ZjY3NmUwMycsXG4gICAgICAgICcyODA0ZGZhNDQ4MDVhMWU0ZDdjOTljYzk3NjI4MDhiMDkyY2M1ODRkOTVmZjNiNTExNDg4ZTRlNzRlZmRmNmU3J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2U4MGZlYTE0NDQxZmIzM2E3ZDhhZGFiOTQ3NWQ3ZmFiMjAxOWVmZmI1MTU2YTc5MmYxYTExNzc4ZTNjMGRmNWQnLFxuICAgICAgICAnZWVkMWRlN2Y2MzhlMDA3NzFlODk3NjhjYTNjYTk0NDcyZDE1NWU4MGFmMzIyZWE5ZmNiNDI5MWI2YWM5ZWM3OCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdhMzAxNjk3YmRmY2Q3MDQzMTNiYTQ4ZTUxZDU2NzU0M2YyYTE4MjAzMWVmZDY5MTVkZGMwN2JiY2M0ZTE2MDcwJyxcbiAgICAgICAgJzczNzBmOTFjZmI2N2U0ZjUwODE4MDlmYTI1ZDQwZjliMTczNWRiZjdjMGExMWExMzBjMGQxYTA0MWUxNzdlYTEnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnOTBhZDg1YjM4OWQ2YjkzNjQ2M2Y5ZDA1MTI2NzhkZTIwOGNjMzMwYjExMzA3ZmZmYWI3YWM2M2UzZmIwNGVkNCcsXG4gICAgICAgICdlNTA3YTM2MjBhMzgyNjFhZmZkY2JkOTQyNzIyMmI4MzlhZWZhYmUxNTgyODk0ZDk5MWQ0ZDQ4Y2I2ZWYxNTAnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnOGY2OGI5ZDJmNjNiNWYzMzkyMzljMWFkOTgxZjE2MmVlODhjNTY3ODcyM2VhMzM1MWI3YjQ0NGM5ZWM0YzBkYScsXG4gICAgICAgICc2NjJhOWYyZGJhMDYzOTg2ZGUxZDkwYzJiNmJlMjE1ZGJiZWEyY2ZlOTU1MTBiZmRmMjNjYmY3OTUwMWZmZjgyJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2U0ZjNmYjAxNzZhZjg1ZDY1ZmY5OWZmOTE5OGMzNjA5MWY0OGU4NjUwMzY4MWUzZTY2ODZmZDUwNTMyMzFlMTEnLFxuICAgICAgICAnMWU2MzYzM2FkMGVmNGYxYzE2NjFhNmQwZWEwMmI3Mjg2Y2M3ZTc0ZWM5NTFkMWM5ODIyYzM4NTc2ZmViNzNiYydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc4YzAwZmE5YjE4ZWJmMzMxZWI5NjE1MzdhNDVhNDI2NmM3MDM0ZjJmMGQ0ZTFkMDcxNmZiNmVhZTIwZWFlMjllJyxcbiAgICAgICAgJ2VmYTQ3MjY3ZmVhNTIxYTFhOWRjMzQzYTM3MzZjOTc0YzJmYWRhZmE4MWUzNmM1NGU3ZDJhNGM2NjcwMjQxNGInXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZTdhMjZjZTY5ZGQ0ODI5ZjNlMTBjZWMwYTllOThlZDMxNDNkMDg0ZjMwOGI5MmMwOTk3ZmRkZmM2MGNiM2U0MScsXG4gICAgICAgICcyYTc1OGUzMDBmYTc5ODRiNDcxYjAwNmExYWFmYmIxOGQwYTZiMmMwNDIwZTgzZTIwZThhOTQyMWNmMmNmZDUxJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2I2NDU5ZTBlZTM2NjJlYzhkMjM1NDBjMjIzYmNiZGM1NzFjYmNiOTY3ZDc5NDI0ZjNjZjI5ZWIzZGU2YjgwZWYnLFxuICAgICAgICAnNjdjODc2ZDA2ZjNlMDZkZTFkYWRmMTZlNTY2MWRiM2M0YjNhZTZkNDhlMzViMmZmMzBiZjBiNjFhNzFiYTQ1J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2Q2OGE4MGM4MjgwYmI4NDA3OTMyMzRhYTExOGYwNjIzMWQ2ZjFmYzY3ZTczYzVhNWRlZGEwZjViNDk2OTQzZTgnLFxuICAgICAgICAnZGI4YmE5ZmZmNGI1ODZkMDBjNGIxZjkxNzdiMGUyOGI1YjBlN2I4Zjc4NDUyOTVhMjk0Yzg0MjY2YjEzMzEyMCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICczMjRhZWQ3ZGY2NWM4MDQyNTJkYzAyNzA5MDdhMzBiMDk2MTJhZWI5NzM0NDljZWE0MDk1OTgwZmMyOGQzZDVkJyxcbiAgICAgICAgJzY0OGEzNjU3NzRiNjFmMmZmMTMwYzBjMzVhZWMxZjRmMTkyMTNiMGM3ZTMzMjg0Mzk2NzIyNGFmOTZhYjdjODQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNGRmOWMxNDkxOWNkZTYxZjZkNTFkZmRiZTVmZWU1ZGNlZWM0MTQzYmE4ZDFjYTg4OGU4YmQzNzNmZDA1NGM5NicsXG4gICAgICAgICczNWVjNTEwOTJkODcyODA1MDk3NGMyM2ExZDg1ZDRiNWQ1MDZjZGMyODg0OTAxOTJlYmFjMDZjYWQxMGQ1ZCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc5YzM5MTlhODRhNDc0ODcwZmFlZDhhOWMxY2M2NjAyMTUyMzQ4OTA1NGQ3ZjAzMDhjYmZjOTljOGFjMWY5OGNkJyxcbiAgICAgICAgJ2RkYjg0ZjBmNGE0ZGRkNTc1ODRmMDQ0YmYyNjBlNjQxOTA1MzI2Zjc2YzY0YzhlNmJlN2U1ZTAzZDRmYzU5OWQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNjA1NzE3MGIxZGQxMmZkZjhkZTA1ZjI4MWQ4ZTA2YmI5MWUxNDkzYThiOTFkNGNjNWEyMTM4MjEyMGE5NTllNScsXG4gICAgICAgICc5YTFhZjBiMjZhNmE0ODA3YWRkOWEyZGFmNzFkZjI2MjQ2NTE1MmJjM2VlMjRjNjVlODk5YmU5MzIzODVhMmE4J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2E1NzZkZjhlMjNhMDg0MTE0MjE0MzlhNDUxOGRhMzE4ODBjZWYwZmJhN2Q0ZGYxMmIxYTY5NzNlZWNiOTQyNjYnLFxuICAgICAgICAnNDBhNmJmMjBlNzY2NDBiMmM5MmI5N2FmZTU4Y2Q4MmM0MzJlMTBhN2Y1MTRkOWYzZWU4YmUxMWFlMWIyOGVjOCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc3Nzc4YTc4YzI4ZGVjM2UzMGEwNWZlOTYyOWRlOGMzOGJiMzBkMWY1Y2Y5YTNhMjA4Zjc2Mzg4OWJlNThhZDcxJyxcbiAgICAgICAgJzM0NjI2ZDlhYjVhNWIyMmZmNzA5OGUxMmYyZmY1ODAwODdiMzg0MTFmZjI0YWM1NjNiNTEzZmMxZmQ5ZjQzYWMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnOTI4OTU1ZWU2MzdhODQ0NjM3MjlmZDMwZTdhZmQyZWQ1Zjk2Mjc0ZTVhZDdlNWNiMDllZGE5YzA2ZDkwM2FjJyxcbiAgICAgICAgJ2MyNTYyMTAwM2QzZjQyYTgyN2I3OGExMzA5M2E5NWVlYWMzZDI2ZWZhOGE4ZDgzZmM1MTgwZTkzNWJjZDA5MWYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnODVkMGZlZjNlYzZkYjEwOTM5OTA2NGYzYTBlM2IyODU1NjQ1YjRhOTA3YWQzNTQ1MjdhYWU3NTE2M2Q4Mjc1MScsXG4gICAgICAgICcxZjAzNjQ4NDEzYTM4YzBiZTI5ZDQ5NmU1ODJjZjU2NjNlODc1MWU5Njg3NzMzMTU4MmMyMzdhMjRlYjFmOTYyJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2ZmMmIwZGNlOTdlZWNlOTdjMWM5YjYwNDE3OThiODVkZmRmYjZkODg4MmRhMjAzMDhmNTQwNDgyNDUyNjA4N2UnLFxuICAgICAgICAnNDkzZDEzZmVmNTI0YmExODhhZjRjNGRjNTRkMDc5MzZjN2I3ZWQ2ZmI5MGUyY2ViMmM5NTFlMDFmMGMyOTkwNydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc4MjdmYmJlNGIxZTg4MGVhOWVkMmIyZTYzMDFiMjEyYjU3ZjFlZTE0OGNkNmRkMjg3ODBlNWUyY2Y4NTZlMjQxJyxcbiAgICAgICAgJ2M2MGY5YzkyM2M3MjdiMGI3MWJlZjJjNjdkMWQxMjY4N2ZmN2E2MzE4NjkwMzE2NmQ2MDViNjhiYWVjMjkzZWMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZWFhNjQ5ZjIxZjUxYmRiYWU3YmU0YWUzNGNlNmU1MjE3YTU4ZmRjZTdmNDdmOWFhN2YzYjU4ZmEyMTIwZTJiMycsXG4gICAgICAgICdiZTMyNzllZDViYmJiMDNhYzY5YTgwZjg5ODc5YWE1YTAxYTZiOTY1ZjEzZjdlNTlkNDdhNTMwNWJhNWFkOTNkJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2U0YTQyZDQzYzVjZjE2OWQ5MzkxZGY2ZGVjZjQyZWU1NDFiNmQ4ZjBjOWExMzc0MDFlMjM2MzJkZGEzNGQyNGYnLFxuICAgICAgICAnNGQ5ZjkyZTcxNmQxYzczNTI2ZmM5OWNjZmI4YWQzNGNlODg2ZWVkZmE4ZDhlNGYxM2E3ZjcxMzFkZWJhOTQxNCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcxZWM4MGZlZjM2MGNiZGQ5NTQxNjBmYWRhYjM1MmI2YjkyYjUzNTc2YTg4ZmVhNDk0NzE3M2I5ZDQzMDBiZjE5JyxcbiAgICAgICAgJ2FlZWZlOTM3NTZiNTM0MGQyZjNhNDk1OGE3YWJiZjVlMDE0NmU3N2Y2Mjk1YTA3YjY3MWNkYzFjYzEwN2NlZmQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMTQ2YTc3OGMwNDY3MGMyZjkxYjAwYWY0NjgwZGZhOGJjZTM0OTA3MTdkNThiYTg4OWRkYjU5MjgzNjY2NDJiZScsXG4gICAgICAgICdiMzE4ZTBlYzMzNTQwMjhhZGQ2Njk4MjdmOWQ0YjI4NzBhYWE5NzFkMmY3ZTVlZDFkMGIyOTc0ODNkODNlZmQwJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2ZhNTBjMGY2MWQyMmU1ZjA3ZTNhY2ViYjFhYTA3YjEyOGQwMDEyMjA5YTI4Yjk3NzZkNzZhODc5MzE4MGVlZjknLFxuICAgICAgICAnNmI4NGM2OTIyMzk3ZWJhOWI3MmNkMjg3MjI4MWE2OGE1ZTY4MzI5M2E1N2EyMTNiMzhjZDhkN2QzZjRmMjgxMSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdkYTFkNjFkMGNhNzIxYTExYjFhNWJmNmI3ZDg4ZTg0MjFhMjg4YWI1ZDViYmE1MjIwZTUzZDMyYjVmMDY3ZWMyJyxcbiAgICAgICAgJzgxNTdmNTVhN2M5OTMwNmM3OWMwNzY2MTYxYzkxZTI5NjZhNzM4OTlkMjc5YjQ4YTY1NWZiYTBmMWFkODM2ZjEnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYThlMjgyZmYwYzk3MDY5MDcyMTVmZjk4ZThmZDQxNjYxNTMxMWRlMDQ0NmYxZTA2MmE3M2IwNjEwZDA2NGUxMycsXG4gICAgICAgICc3Zjk3MzU1YjhkYjgxYzA5YWJmYjdmM2M1YjI1MTU4ODhiNjc5YTNlNTBkZDZiZDZjZWY3YzczMTExZjRjYzBjJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzE3NGE1M2I5YzlhMjg1ODcyZDM5ZTU2ZTY5MTNjYWIxNWQ1OWIxZmE1MTI1MDhjMDIyZjM4MmRlODMxOTQ5N2MnLFxuICAgICAgICAnY2NjOWRjMzdhYmZjOWMxNjU3YjQxNTVmMmM0N2Y5ZTY2NDZiM2ExZDhjYjk4NTQzODNkYTEzYWMwNzlhZmE3MydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc5NTkzOTY5ODE5NDM3ODVjM2QzZTU3ZWRmNTAxOGNkYmUwMzllNzMwZTQ5MThiM2Q4ODRmZGZmMDk0NzViN2JhJyxcbiAgICAgICAgJzJlN2U1NTI4ODhjMzMxZGQ4YmEwMzg2YTRiOWNkNjg0OWM2NTNmNjRjODcwOTM4NWU5YjhhYmY4NzUyNGYyZmQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZDJhNjNhNTBhZTQwMWU1NmQ2NDVhMTE1M2IxMDlhOGZjY2EwYTQzZDU2MWZiYTJkYmI1MTM0MGM5ZDgyYjE1MScsXG4gICAgICAgICdlODJkODZmYjY0NDNmY2I3NTY1YWVlNThiMjk0ODIyMGE3MGY3NTBhZjQ4NGNhNTJkNDE0MjE3NGRjZjg5NDA1J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzY0NTg3ZTIzMzU0NzFlYjg5MGVlNzg5NmQ3Y2ZkYzg2NmJhY2JkYmQzODM5MzE3YjM0MzZmOWI0NTYxN2UwNzMnLFxuICAgICAgICAnZDk5ZmNkZDViZjY5MDJlMmFlOTZkZDY0NDdjMjk5YTE4NWI5MGEzOTEzM2FlYWIzNTgyOTllNWU5ZmFmNjU4OSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc4NDgxYmRlMGU0ZTRkODg1YjNhNTQ2ZDNlNTQ5ZGUwNDJmMGFhNmNlYTI1MGU3ZmQzNThkNmM4NmRkNDVlNDU4JyxcbiAgICAgICAgJzM4ZWU3YjhjYmE1NDA0ZGQ4NGEyNWJmMzljZWNiMmNhOTAwYTc5YzQyYjI2MmU1NTZkNjRiMWI1OTc3OTA1N2UnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMTM0NjRhNTdhNzgxMDJhYTYyYjY5NzlhZTgxN2Y0NjM3ZmZjZmVkM2M0YjFjZTMwYmNkNjMwM2Y2Y2FmNjY2YicsXG4gICAgICAgICc2OWJlMTU5MDA0NjE0NTgwZWY3ZTQzMzQ1M2NjYjBjYTQ4ZjMwMGE4MWQwOTQyZTEzZjQ5NWE5MDdmNmVjYzI3J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2JjNGE5ZGY1YjcxM2ZlMmU5YWVmNDMwYmNjMWRjOTdhMGNkOWNjZWRlMmYyODU4OGNhZGEzYTBkMmQ4M2YzNjYnLFxuICAgICAgICAnZDNhODFjYTZlNzg1YzA2MzgzOTM3YWRmNGI3OThjYWE2ZThhOWZiZmE1NDdiMTZkNzU4ZDY2NjU4MWYzM2MxJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzhjMjhhOTdiZjgyOThiYzBkMjNkOGM3NDk0NTJhMzJlNjk0YjY1ZTMwYTk0NzJhMzk1NGFiMzBmZTUzMjRjYWEnLFxuICAgICAgICAnNDBhMzA0NjNhMzMwNTE5MzM3OGZlZGYzMWY3Y2MwZWI3YWU3ODRmMDQ1MWNiOTQ1OWU3MWRjNzNjYmVmOTQ4MidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc4ZWE5NjY2MTM5NTI3YThjMWRkOTRjZTRmMDcxZmQyM2M4YjM1MGM1YTRiYjMzNzQ4YzRiYTExMWZhY2NhZTAnLFxuICAgICAgICAnNjIwZWZhYmJjOGVlMjc4MmUyNGU3YzBjZmI5NWM1ZDczNWI3ODNiZTljZjBmOGU5NTVhZjM0YTMwZTYyYjk0NSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdkZDM2MjVmYWVmNWJhMDYwNzQ2Njk3MTZiYmQzNzg4ZDg5YmRkZTgxNTk1OTk2ODA5MmY3NmNjNGViOWE5Nzg3JyxcbiAgICAgICAgJzdhMTg4ZmEzNTIwZTMwZDQ2MWRhMjUwMTA0NTczMWNhOTQxNDYxOTgyODgzMzk1OTM3ZjY4ZDAwYzY0NGE1NzMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZjcxMGQ3OWQ5ZWI5NjIyOTdlNGY2MjMyYjQwZThmN2ZlYjJiYzYzODE0NjE0ZDY5MmMxMmRlNzUyNDA4MjIxZScsXG4gICAgICAgICdlYTk4ZTY3MjMyZDNiMzI5NWQzYjUzNTUzMjExNWNjYWM4NjEyYzcyMTg1MTYxNzUyNmFlNDdhOWM3N2JmYzgyJ1xuICAgICAgXVxuICAgIF1cbiAgfSxcbiAgbmFmOiB7XG4gICAgd25kOiA3LFxuICAgIHBvaW50czogW1xuICAgICAgW1xuICAgICAgICAnZjkzMDhhMDE5MjU4YzMxMDQ5MzQ0Zjg1Zjg5ZDUyMjliNTMxYzg0NTgzNmY5OWIwODYwMWYxMTNiY2UwMzZmOScsXG4gICAgICAgICczODhmN2IwZjYzMmRlODE0MGZlMzM3ZTYyYTM3ZjM1NjY1MDBhOTk5MzRjMjIzMWI2Y2I5ZmQ3NTg0YjhlNjcyJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzJmOGJkZTRkMWEwNzIwOTM1NWI0YTcyNTBhNWM1MTI4ZTg4Yjg0YmRkYzYxOWFiN2NiYThkNTY5YjI0MGVmZTQnLFxuICAgICAgICAnZDhhYzIyMjYzNmU1ZTNkNmQ0ZGJhOWRkYTZjOWM0MjZmNzg4MjcxYmFiMGQ2ODQwZGNhODdkM2FhNmFjNjJkNidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc1Y2JkZjA2NDZlNWRiNGVhYTM5OGYzNjVmMmVhN2EwZTNkNDE5YjdlMDMzMGUzOWNlOTJiZGRlZGNhYzRmOWJjJyxcbiAgICAgICAgJzZhZWJjYTQwYmEyNTU5NjBhMzE3OGQ2ZDg2MWE1NGRiYTgxM2QwYjgxM2ZkZTdiNWE1MDgyNjI4MDg3MjY0ZGEnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYWNkNDg0ZTJmMGM3ZjY1MzA5YWQxNzhhOWY1NTlhYmRlMDk3OTY5NzRjNTdlNzE0YzM1ZjExMGRmYzI3Y2NiZScsXG4gICAgICAgICdjYzMzODkyMWIwYTdkOWZkNjQzODA5NzE3NjNiNjFlOWFkZDg4OGE0Mzc1ZjhlMGYwNWNjMjYyYWM2NGY5YzM3J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzc3NGFlN2Y4NThhOTQxMWU1ZWY0MjQ2YjcwYzY1YWFjNTY0OTk4MGJlNWMxNzg5MWJiZWMxNzg5NWRhMDA4Y2InLFxuICAgICAgICAnZDk4NGEwMzJlYjZiNWUxOTAyNDNkZDU2ZDdiN2IzNjUzNzJkYjFlMmRmZjlkNmE4MzAxZDc0YzljOTUzYzYxYidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdmMjg3NzNjMmQ5NzUyODhiYzdkMWQyMDVjMzc0ODY1MWIwNzVmYmM2NjEwZTU4Y2RkZWVkZGY4ZjE5NDA1YWE4JyxcbiAgICAgICAgJ2FiMDkwMmU4ZDg4MGE4OTc1ODIxMmViNjVjZGFmNDczYTFhMDZkYTUyMWZhOTFmMjliNWNiNTJkYjAzZWQ4MSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdkNzkyNGQ0ZjdkNDNlYTk2NWE0NjVhZTMwOTVmZjQxMTMxZTU5NDZmM2M4NWY3OWU0NGFkYmNmOGUyN2UwODBlJyxcbiAgICAgICAgJzU4MWUyODcyYTg2YzcyYTY4Mzg0MmVjMjI4Y2M2ZGVmZWE0MGFmMmJkODk2ZDNhNWM1MDRkYzlmZjZhMjZiNTgnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZGVmZGVhNGNkYjY3Nzc1MGE0MjBmZWU4MDdlYWNmMjFlYjk4OThhZTc5Yjk3Njg3NjZlNGZhYTA0YTJkNGEzNCcsXG4gICAgICAgICc0MjExYWIwNjk0NjM1MTY4ZTk5N2IwZWFkMmE5M2RhZWNlZDFmNGEwNGE5NWMwZjZjZmIxOTlmNjllNTZlYjc3J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzJiNGVhMGE3OTdhNDQzZDI5M2VmNWNmZjQ0NGY0OTc5ZjA2YWNmZWJkN2U4NmQyNzc0NzU2NTYxMzgzODViNmMnLFxuICAgICAgICAnODVlODliYzAzNzk0NWQ5M2IzNDMwODNiNWExYzg2MTMxYTAxZjYwYzUwMjY5NzYzYjU3MGM4NTRlNWMwOWI3YSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICczNTJiYmY0YTRjZGQxMjU2NGY5M2ZhMzMyY2UzMzMzMDFkOWFkNDAyNzFmODEwNzE4MTM0MGFlZjI1YmU1OWQ1JyxcbiAgICAgICAgJzMyMWViNDA3NTM0OGY1MzRkNTljMTgyNTlkZGEzZTFmNGExYjNiMmU3MWIxMDM5YzY3YmQzZDhiY2Y4MTk5OGMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMmZhMjEwNGQ2YjM4ZDExYjAyMzAwMTA1NTk4NzkxMjRlNDJhYjhkZmVmZjVmZjI5ZGM5Y2RhZGQ0ZWNhY2MzZicsXG4gICAgICAgICcyZGUxMDY4Mjk1ZGQ4NjViNjQ1NjkzMzViZDVkZDgwMTgxZDcwZWNmYzg4MjY0ODQyM2JhNzZiNTMyYjdkNjcnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnOTI0ODI3OWIwOWI0ZDY4ZGFiMjFhOWIwNjZlZGRhODMyNjNjM2Q4NGUwOTU3MmUyNjljYTBjZDdmNTQ1MzcxNCcsXG4gICAgICAgICc3MzAxNmY3YmYyMzRhYWRlNWQxYWE3MWJkZWEyYjFmZjNmYzBkZTJhODg3OTEyZmZlNTRhMzJjZTk3Y2IzNDAyJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2RhZWQ0ZjJiZTNhOGJmMjc4ZTcwMTMyZmIwYmViNzUyMmY1NzBlMTQ0YmY2MTVjMDdlOTk2ZDQ0M2RlZTg3MjknLFxuICAgICAgICAnYTY5ZGNlNGE3ZDZjOThlOGQ0YTFhY2E4N2VmOGQ3MDAzZjgzYzIzMGYzYWZhNzI2YWI0MGU1MjI5MGJlMWM1NSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdjNDRkMTJjNzA2NWQ4MTJlOGFjZjI4ZDdjYmIxOWY5MDExZWNkOWU5ZmRmMjgxYjBlNmEzYjVlODdkMjJlN2RiJyxcbiAgICAgICAgJzIxMTlhNDYwY2UzMjZjZGM3NmM0NTkyNmM5ODJmZGFjMGUxMDZlODYxZWRmNjFjNWEwMzkwNjNmMGUwZTY0ODInXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNmEyNDViZjZkYzY5ODUwNGM4OWEyMGNmZGVkNjA4NTMxNTJiNjk1MzM2YzI4MDYzYjYxYzY1Y2JkMjY5ZTZiNCcsXG4gICAgICAgICdlMDIyY2Y0MmMyYmQ0YTcwOGIzZjUxMjZmMTZhMjRhZDhiMzNiYTQ4ZDA0MjNiNmVmZDVlNjM0ODEwMGQ4YTgyJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzE2OTdmZmE2ZmQ5ZGU2MjdjMDc3ZTNkMmZlNTQxMDg0Y2UxMzMwMGIwYmVjMTE0NmY5NWFlNTdmMGQwYmQ2YTUnLFxuICAgICAgICAnYjljMzk4ZjE4NjgwNmY1ZDI3NTYxNTA2ZTQ1NTc0MzNhMmNmMTUwMDllNDk4YWU3YWRlZTlkNjNkMDFiMjM5NidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc2MDViZGIwMTk5ODE3MThiOTg2ZDBmMDdlODM0Y2IwZDlkZWI4MzYwZmZiN2Y2MWRmOTgyMzQ1ZWYyN2E3NDc5JyxcbiAgICAgICAgJzI5NzJkMmRlNGY4ZDIwNjgxYTc4ZDkzZWM5NmZlMjNjMjZiZmFlODRmYjE0ZGI0M2IwMWUxZTkwNTZiOGM0OSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc2MmQxNGRhYjQxNTBiZjQ5NzQwMmZkYzQ1YTIxNWUxMGRjYjAxYzM1NDk1OWIxMGNmZTMxYzdlOWQ4N2ZmMzNkJyxcbiAgICAgICAgJzgwZmMwNmJkOGNjNWIwMTA5ODA4OGExOTUwZWVkMGRiMDFhYTEzMjk2N2FiNDcyMjM1ZjU2NDI0ODNiMjVlYWYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnODBjNjBhZDAwNDBmMjdkYWRlNWI0YjA2YzQwOGU1NmIyYzUwZTlmNTZiOWI4YjQyNWU1NTVjMmY4NjMwOGI2ZicsXG4gICAgICAgICcxYzM4MzAzZjFjYzVjMzBmMjZlNjZiYWQ3ZmU3MmY3MGE2NWVlZDRjYmU3MDI0ZWIxYWEwMWY1NjQzMGJkNTdhJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzdhOTM3NWFkNjE2N2FkNTRhYTc0YzYzNDhjYzU0ZDM0NGNjNWRjOTQ4N2Q4NDcwNDlkNWVhYmIwZmEwM2M4ZmInLFxuICAgICAgICAnZDBlM2ZhOWVjYTg3MjY5MDk1NTllMGQ3OTI2OTA0NmJkYzU5ZWExMGM3MGNlMmIwMmQ0OTllYzIyNGRjN2Y3J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2Q1MjhlY2Q5YjY5NmI1NGM5MDdhOWVkMDQ1NDQ3YTc5YmI0MDhlYzM5YjY4ZGY1MDRiYjUxZjQ1OWJjM2ZmYzknLFxuICAgICAgICAnZWVjZjQxMjUzMTM2ZTVmOTk5NjZmMjE4ODFmZDY1NmViYzQzNDU0MDVjNTIwZGJjMDYzNDY1YjUyMTQwOTkzMydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc0OTM3MGE0YjVmNDM0MTJlYTI1ZjUxNGU4ZWNkYWQwNTI2NjExNWU0YTdlY2IxMzg3MjMxODA4ZjhiNDU5NjMnLFxuICAgICAgICAnNzU4ZjNmNDFhZmQ2ZWQ0MjhiMzA4MWIwNTEyZmQ2MmE1NGMzZjNhZmJiNWI2NzY0YjY1MzA1MmExMjk0OWM5YSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc3N2YyMzA5MzZlZTg4Y2JiZDczZGY5MzBkNjQ3MDJlZjg4MWQ4MTFlMGUxNDk4ZTJmMWMxM2ViMWZjMzQ1ZDc0JyxcbiAgICAgICAgJzk1OGVmNDJhNzg4NmI2NDAwYTA4MjY2ZTliYTFiMzc4OTZjOTUzMzBkOTcwNzdjYmJlOGViM2M3NjcxYzYwZDYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZjJkYWM5OTFjYzRjZTRiOWVhNDQ4ODdlNWM3YzBiY2U1OGM4MDA3NGFiOWQ0ZGJhZWIyODUzMWI3NzM5ZjUzMCcsXG4gICAgICAgICdlMGRlZGM5YjNiMmY4ZGFkNGRhMWYzMmRlYzI1MzFkZjllYjVmYmViMDU5OGU0ZmQxYTExN2RiYTcwM2EzYzM3J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzQ2M2IzZDlmNjYyNjIxZmIxYjRiZThmYmJlMjUyMDEyNWEyMTZjZGZjOWRhZTNkZWJjYmE0ODUwYzY5MGQ0NWInLFxuICAgICAgICAnNWVkNDMwZDc4YzI5NmMzNTQzMTE0MzA2ZGQ4NjIyZDdjNjIyZTI3Yzk3MGExZGUzMWNiMzc3YjAxYWY3MzA3ZSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdmMTZmODA0MjQ0ZTQ2ZTJhMDkyMzJkNGFmZjNiNTk5NzZiOThmYWMxNDMyOGEyZDFhMzI0OTZiNDk5OThmMjQ3JyxcbiAgICAgICAgJ2NlZGFiZDliODIyMDNmN2UxM2QyMDZmY2RmNGUzM2Q5MmE2YzUzYzI2ZTVjY2UyNmQ2NTc5OTYyYzRlMzFkZjYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnY2FmNzU0MjcyZGM4NDU2M2IwMzUyYjdhMTQzMTFhZjU1ZDI0NTMxNWFjZTI3YzY1MzY5ZTE1ZjcxNTFkNDFkMScsXG4gICAgICAgICdjYjQ3NDY2MGVmMzVmNWYyYTQxYjY0M2ZhNWU0NjA1NzVmNGZhOWI3OTYyMjMyYTVjMzJmOTA4MzE4YTA0NDc2J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzI2MDBjYTRiMjgyY2I5ODZmODVkMGYxNzA5OTc5ZDhiNDRhMDljMDdjYjg2ZDdjMTI0NDk3YmM4NmYwODIxMjAnLFxuICAgICAgICAnNDExOWI4ODc1M2MxNWJkNmE2OTNiMDNmY2RkYmI0NWQ1YWM2YmU3NGFiNWYwZWY0NGIwYmU5NDc1YTdlNGI0MCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc3NjM1Y2E3MmQ3ZTg0MzJjMzM4ZWM1M2NkMTIyMjBiYzAxYzQ4Njg1ZTI0ZjdkYzhjNjAyYTc3NDY5OThlNDM1JyxcbiAgICAgICAgJzkxYjY0OTYwOTQ4OWQ2MTNkMWQ1ZTU5MGY3OGU2ZDc0ZWNmYzA2MWQ1NzA0OGJhZDllNzZmMzAyYzViOWM2MSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc3NTRlMzIzOWYzMjU1NzBjZGJiZjRhODdkZWVlOGE2NmI3ZjJiMzM0NzlkNDY4ZmJjMWE1MDc0M2JmNTZjYzE4JyxcbiAgICAgICAgJzY3M2ZiODZlNWJkYTMwZmIzY2QwZWQzMDRlYTQ5YTAyM2VlMzNkMDE5N2E2OTVkMGM1ZDk4MDkzYzUzNjY4MydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdlM2U2YmQxMDcxYTFlOTZhZmY1Nzg1OWM4MmQ1NzBmMDMzMDgwMDY2MWQxYzk1MmY5ZmUyNjk0NjkxZDliOWU4JyxcbiAgICAgICAgJzU5YzllMGJiYTM5NGU3NmY0MGMwYWE1ODM3OWEzY2I2YTVhMjI4Mzk5M2U5MGM0MTY3MDAyYWY0OTIwZTM3ZjUnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMTg2YjQ4M2QwNTZhMDMzODI2YWU3M2Q4OGY3MzI5ODVjNGNjYjFmMzJiYTM1ZjRiNGNjNDdmZGNmMDRhYTZlYicsXG4gICAgICAgICczYjk1MmQzMmM2N2NmNzdlMmUxNzQ0NmUyMDQxODBhYjIxZmI4MDkwODk1MTM4YjRhNGE3OTdmODZlODA4ODhiJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2RmOWQ3MGE2Yjk4NzZjZTU0NGM5ODU2MWY0YmU0ZjcyNTQ0MmU2ZDJiNzM3ZDljOTFhODMyMTcyNGNlMDk2M2YnLFxuICAgICAgICAnNTVlYjJkYWZkODRkNmNjZDVmODYyYjc4NWRjMzlkNGFiMTU3MjIyNzIwZWY5ZGEyMTdiOGM0NWNmMmJhMjQxNydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc1ZWRkNWNjMjNjNTFlODdhNDk3Y2E4MTVkNWRjZTBmOGFiNTI1NTRmODQ5ZWQ4OTk1ZGU2NGM1ZjM0Y2U3MTQzJyxcbiAgICAgICAgJ2VmYWU5YzhkYmMxNDEzMDY2MWU4Y2VjMDMwYzg5YWQwYzEzYzY2YzBkMTdhMjkwNWNkYzcwNmFiNzM5OWE4NjgnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMjkwNzk4YzJiNjQ3NjgzMGRhMTJmZTAyMjg3ZTllNzc3YWEzZmJhMWMzNTViMTdhNzIyZDM2MmY4NDYxNGZiYScsXG4gICAgICAgICdlMzhkYTc2ZGNkNDQwNjIxOTg4ZDAwYmNmNzlhZjI1ZDViMjljMDk0ZGIyYTIzMTQ2ZDAwM2FmZDQxOTQzZTdhJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2FmM2M0MjNhOTVkOWY1YjMwNTQ3NTRlZmExNTBhYzM5Y2QyOTU1MmZlMzYwMjU3MzYyZGZkZWNlZjQwNTNiNDUnLFxuICAgICAgICAnZjk4YTNmZDgzMWViMmI3NDlhOTNiMGU2ZjM1Y2ZiNDBjOGNkNWFhNjY3YTE1NTgxYmMyZmVkZWQ0OThmZDljNidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc3NjZkYmIyNGQxMzRlNzQ1Y2NjYWEyOGM5OWJmMjc0OTA2YmI2NmIyNmRjZjk4ZGY4ZDJmZWQ1MGQ4ODQyNDlhJyxcbiAgICAgICAgJzc0NGIxMTUyZWFjYmU1ZTM4ZGNjODg3OTgwZGEzOGI4OTc1ODRhNjVmYTA2Y2VkZDJjOTI0Zjk3Y2JhYzU5OTYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNTlkYmY0NmY4Yzk0NzU5YmEyMTI3N2MzMzc4NGY0MTY0NWY3YjQ0ZjZjNTk2YTU4Y2U5MmU2NjYxOTFhYmUzZScsXG4gICAgICAgICdjNTM0YWQ0NDE3NWZiYzMwMGY0ZWE2Y2U2NDgzMDlhMDQyY2U3MzlhNzkxOTc5OGNkODVlMjE2YzRhMzA3ZjZlJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2YxM2FkYTk1MTAzYzQ1MzczMDVlNjkxZTc0ZTlhNGE4ZGQ2NDdlNzExYTk1ZTczY2I2MmRjNjAxOGNmZDg3YjgnLFxuICAgICAgICAnZTEzODE3YjQ0ZWUxNGRlNjYzYmY0YmM4MDgzNDFmMzI2OTQ5ZTIxYTZhNzVjMjU3MDc3ODQxOWJkYWY1NzMzZCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc3NzU0YjRmYTBlOGFjZWQwNmQ0MTY3YTJjNTljY2E0Y2RhMTg2OWMwNmViYWRmYjY0ODg1NTAwMTVhODg1MjJjJyxcbiAgICAgICAgJzMwZTkzZTg2NGU2NjlkODIyMjRiOTY3YzMwMjBiOGZhOGQxZTRlMzUwYjZjYmNjNTM3YTQ4YjU3ODQxMTYzYTInXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnOTQ4ZGNhZGY1OTkwZTA0OGFhMzg3NGQ0NmFiZWY5ZDcwMTg1OGY5NWRlODA0MWQyYTY4MjhjOTllMjI2MjUxOScsXG4gICAgICAgICdlNDkxYTQyNTM3ZjZlNTk3ZDVkMjhhMzIyNGIxYmMyNWRmOTE1NGVmYmQyZWYxZDJjYmJhMmNhZTUzNDdkNTdlJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzc5NjI0MTQ0NTBjNzZjMTY4OWM3YjQ4ZjgyMDJlYzM3ZmIyMjRjZjVhYzBiZmExNTcwMzI4YThhM2Q3Yzc3YWInLFxuICAgICAgICAnMTAwYjYxMGVjNGZmYjQ3NjBkNWMxZmMxMzNlZjZmNmIxMjUwN2EwNTFmMDRhYzU3NjBhZmE1YjI5ZGI4MzQzNydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICczNTE0MDg3ODM0OTY0YjU0YjE1YjE2MDY0NGQ5MTU0ODVhMTY5NzcyMjViODg0N2JiMGRkMDg1MTM3ZWM0N2NhJyxcbiAgICAgICAgJ2VmMGFmYmIyMDU2MjA1NDQ4ZTE2NTJjNDhlODEyN2ZjNjAzOWU3N2MxNWMyMzc4YjdlN2QxNWEwZGUyOTMzMTEnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZDNjYzMwYWQ2YjQ4M2U0YmM3OWNlMmM5ZGQ4YmM1NDk5M2U5NDdlYjhkZjc4N2I0NDI5NDNkM2Y3YjUyN2VhZicsXG4gICAgICAgICc4YjM3OGEyMmQ4MjcyNzhkODljNWU5YmU4Zjk1MDhhZTNjMmFkNDYyOTAzNTg2MzBhZmIzNGRiMDRlZWRlMGE0J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzE2MjRkODQ3ODA3MzI4NjBjZTFjNzhmY2JmZWZlMDhiMmIyOTgyM2RiOTEzZjY0OTM5NzViYTBmZjQ4NDc2MTAnLFxuICAgICAgICAnNjg2NTFjZjliNmRhOTAzZTA5MTQ0NDhjNmNkOWQ0Y2E4OTY4NzhmNTI4MmJlNGM4Y2MwNmUyYTQwNDA3ODU3NSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc3MzNjZTgwZGE5NTVhOGEyNjkwMmM5NTYzM2U2MmE5ODUxOTI0NzRiNWFmMjA3ZGE2ZGY3YjRmZDVmYzYxY2Q0JyxcbiAgICAgICAgJ2Y1NDM1YTJiZDJiYWRmN2Q0ODVhNGQ4YjhkYjlmY2NlM2UxZWY4ZTAyMDFlNDU3OGM1NDY3M2JjMWRjNWVhMWQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMTVkOTQ0MTI1NDk0NTA2NGNmMWExYzMzYmJkM2I0OWY4OTY2YzUwOTIxNzFlNjk5ZWYyNThkZmFiODFjMDQ1YycsXG4gICAgICAgICdkNTZlYjMwYjY5NDYzZTcyMzRmNTEzN2I3M2I4NDE3NzQzNDgwMGJhY2ViZmM2ODVmYzM3YmJlOWVmZTQwNzBkJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2ExZDBmY2YyZWM5ZGU2NzViNjEyMTM2ZTVjZTcwZDI3MWMyMTQxN2M5ZDJiOGFhYWFjMTM4NTk5ZDA3MTc5NDAnLFxuICAgICAgICAnZWRkNzdmNTBiY2I1YTNjYWIyZTkwNzM3MzA5NjY3ZjI2NDE0NjJhNTQwNzBmM2Q1MTkyMTJkMzljMTk3YTYyOSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdlMjJmYmUxNWMwYWY4Y2NjNTc4MGMwNzM1Zjg0ZGJlOWE3OTBiYWRlZTgyNDVjMDZjN2NhMzczMzFjYjM2OTgwJyxcbiAgICAgICAgJ2E4NTViYWJhZDVjZDYwYzg4YjQzMGE2OWY1M2ExYTdhMzgyODkxNTQ5NjQ3OTliZTQzZDA2ZDc3ZDMxZGEwNidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICczMTEwOTFkZDk4NjBlOGUyMGVlMTM0NzNjMTE1NWY1ZjY5NjM1ZTM5NDcwNGVhYTc0MDA5NDUyMjQ2Y2ZhOWIzJyxcbiAgICAgICAgJzY2ZGI2NTZmODdkMWYwNGZmZmQxZjA0Nzg4YzA2ODMwODcxZWM1YTY0ZmVlZTY4NWJkODBmMGIxMjg2ZDgzNzQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMzRjMWZkMDRkMzAxYmU4OWIzMWMwNDQyZDNlNmFjMjQ4ODM5MjhiNDVhOTM0MDc4MTg2N2Q0MjMyZWMyZGJkZicsXG4gICAgICAgICc5NDE0Njg1ZTk3YjFiNTk1NGJkNDZmNzMwMTc0MTM2ZDU3ZjFjZWViNDg3NDQzZGM1MzIxODU3YmE3M2FiZWUnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZjIxOWVhNWQ2YjU0NzAxYzFjMTRkZTViNTU3ZWI0MmE4ZDEzZjNhYmJjZDA4YWZmY2MyYTVlNmIwNDliOGQ2MycsXG4gICAgICAgICc0Y2I5NTk1N2U4M2Q0MGIwZjczYWY0NTQ0Y2NjZjZiMWY0YjA4ZDNjMDdiMjdmYjhkOGMyOTYyYTQwMDc2NmQxJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2Q3Yjg3NDBmNzRhOGZiYWFiMWY2ODNkYjhmNDVkZTI2NTQzYTU0OTBiY2E2MjcwODcyMzY5MTI0NjlhMGI0NDgnLFxuICAgICAgICAnZmE3Nzk2ODEyOGQ5YzkyZWUxMDEwZjMzN2FkNDcxN2VmZjE1ZGI1ZWQzYzA0OWIzNDExZTAzMTVlYWE0NTkzYidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICczMmQzMWMyMjJmOGY2ZjBlZjg2ZjdjOThkM2EzMzM1ZWFkNWJjZDMyYWJkZDk0Mjg5ZmU0ZDMwOTFhYTgyNGJmJyxcbiAgICAgICAgJzVmMzAzMmY1ODkyMTU2ZTM5Y2NkM2Q3OTE1YjllMWRhMmU2ZGFjOWU2ZjI2ZTk2MTExOGQxNGI4NDYyZTE2NjEnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNzQ2MWYzNzE5MTRhYjMyNjcxMDQ1YTE1NWQ5ODMxZWE4NzkzZDc3Y2Q1OTU5MmM0MzQwZjg2Y2JjMTgzNDdiNScsXG4gICAgICAgICc4ZWMwYmEyMzhiOTZiZWMwY2JkZGRjYWUwYWE0NDI1NDJlZWUxZmY1MGM5ODZlYTZiMzk4NDdiM2NjMDkyZmY2J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2VlMDc5YWRiMWRmMTg2MDA3NDM1NmEyNWFhMzgyMDZhNmQ3MTZiMmMzZTY3NDUzZDI4NzY5OGJhZDdiMmIyZDYnLFxuICAgICAgICAnOGRjMjQxMmFhZmUzYmU1YzRjNWYzN2UwZWNjNWY5ZjZhNDQ2OTg5YWYwNGM0ZTI1ZWJhYWM0NzllYzFjOGMxZSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcxNmVjOTNlNDQ3ZWM4M2YwNDY3YjE4MzAyZWU2MjBmN2U2NWRlMzMxODc0YzlkYzcyYmZkODYxNmJhOWRhNmI1JyxcbiAgICAgICAgJzVlNDYzMTE1MGU2MmZiNDBkMGU4YzJhN2NhNTgwNGEzOWQ1ODE4NmE1MGU0OTcxMzk2MjY3NzhlMjViMDY3NGQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZWFhNWY5ODBjMjQ1ZjZmMDM4OTc4MjkwYWZhNzBiNmJkODg1NTg5N2Y5OGI2YWE0ODViOTYwNjVkNTM3YmQ5OScsXG4gICAgICAgICdmNjVmNWQzZTI5MmMyZTA4MTlhNTI4MzkxYzk5NDYyNGQ3ODQ4NjlkN2U2ZWE2N2ZiMTgwNDEwMjRlZGMwN2RjJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzc4Yzk0MDc1NDRhYzEzMjY5MmVlMTkxMGEwMjQzOTk1OGFlMDQ4NzcxNTEzNDJlYTk2YzRiNmIzNWE0OWY1MScsXG4gICAgICAgICdmM2UwMzE5MTY5ZWI5Yjg1ZDU0MDQ3OTU1MzlhNWU2OGZhMWZiZDU4M2MwNjRkMjQ2MmI2NzVmMTk0YTNkZGI0J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzQ5NGY0YmUyMTlhMWE3NzAxNmRjZDgzODQzMWFlYTAwMDFjZGM4YWU3YTZmYzY4ODcyNjU3OGQ5NzAyODU3YTUnLFxuICAgICAgICAnNDIyNDJhOTY5MjgzYTVmMzM5YmE3ZjA3NWUzNmJhMmFmOTI1Y2UzMGQ3NjdlZDZlNTVmNGIwMzE4ODBkNTYyYydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdhNTk4YTgwMzBkYTZkODZjNmJjN2YyZjUxNDRlYTU0OWQyODIxMWVhNThmYWE3MGViZjRjMWU2NjVjMWZlOWI1JyxcbiAgICAgICAgJzIwNGI1ZDZmODQ4MjJjMzA3ZTRiNGE3MTQwNzM3YWVjMjNmYzYzYjY1YjM1Zjg2YTEwMDI2ZGJkMmQ4NjRlNmInXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYzQxOTE2MzY1YWJiMmI1ZDA5MTkyZjVmMmRiZWFmZWMyMDhmMDIwZjEyNTcwYTE4NGRiYWRjM2U1ODU5NTk5NycsXG4gICAgICAgICc0ZjE0MzUxZDAwODdlZmE0OWQyNDViMzI4OTg0OTg5ZDVjYWY5NDUwZjM0YmZjMGVkMTZlOTZiNThmYTk5MTMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnODQxZDYwNjNhNTg2ZmE0NzVhNzI0NjA0ZGEwM2JjNWI5MmEyZTBkMmUwYTM2YWNmZTRjNzNhNTUxNDc0Mjg4MScsXG4gICAgICAgICc3Mzg2N2Y1OWMwNjU5ZTgxOTA0ZjlhMWM3NTQzNjk4ZTYyNTYyZDY3NDRjMTY5Y2U3YTM2ZGUwMWE4ZDYxNTQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNWU5NWJiMzk5YTY5NzFkMzc2MDI2OTQ3Zjg5YmRlMmYyODJiMzM4MTA5MjhiZTRkZWQxMTJhYzRkNzBlMjBkNScsXG4gICAgICAgICczOWYyM2YzNjY4MDkwODViZWViZmM3MTE4MTMxMzc3NWE5OWM5YWVkN2Q4YmEzOGIxNjEzODRjNzQ2MDEyODY1J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzM2ZTQ2NDFhNTM5NDhmZDQ3NmMzOWY4YTk5ZmQ5NzRlNWVjMDc1NjRiNTMxNWQ4YmY5OTQ3MWJjYTBlZjJmNjYnLFxuICAgICAgICAnZDI0MjRiMWIxYWJlNGViODE2NDIyN2IwODVjOWFhOTQ1NmVhMTM0OTNmZDU2M2UwNmZkNTFjZjU2OTRjNzhmYydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICczMzY1ODFlYTdiZmJiYjI5MGMxOTFhMmY1MDdhNDFjZjU2NDM4NDIxNzBlOTE0ZmFlYWIyN2MyYzU3OWY3MjYnLFxuICAgICAgICAnZWFkMTIxNjg1OTVmZTFiZTk5MjUyMTI5YjZlNTZiMzM5MWY3YWIxNDEwY2QxZTBlZjNkY2RjYWJkMmZkYTIyNCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc4YWI4OTgxNmRhZGZkNmI2YTFmMjYzNGZjZjAwZWM4NDAzNzgxMDI1ZWQ2ODkwYzQ4NDk3NDI3MDZiZDQzZWRlJyxcbiAgICAgICAgJzZmZGNlZjA5ZjJmNmQwYTA0NGU2NTRhZWY2MjQxMzZmNTAzZDQ1OWMzZTg5ODQ1ODU4YTQ3YTkxMjljZGQyNGUnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMWUzM2YxYTc0NmM5YzU3NzgxMzMzNDRkOTI5OWZjYWEyMGIwOTM4ZThhY2ZmMjU0NGJiNDAyODRiOGM1ZmI5NCcsXG4gICAgICAgICc2MDY2MDI1N2RkMTFiM2FhOWM4ZWQ2MThkMjRlZGZmMjMwNmQzMjBmMWQwMzAxMGUzM2E3ZDIwNTdmM2IzYjYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnODViN2MxZGNiM2NlYzFiN2VlN2YzMGRlZDc5ZGQyMGEwZWQxZjRjYzE4Y2JjZmNmYTQxMDM2MWZkOGYwOGYzMScsXG4gICAgICAgICczZDk4YTljZGQwMjZkZDQzZjM5MDQ4ZjI1YTg4NDdmNGZjYWZhZDE4OTVkN2E2MzNjNmZlZDNjMzVlOTk5NTExJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzI5ZGY5ZmJkOGQ5ZTQ2NTA5Mjc1ZjRiMTI1ZDZkNDVkN2ZiZTlhM2I4NzhhN2FmODcyYTI4MDA2NjFhYzVmNTEnLFxuICAgICAgICAnYjRjNGZlOTljNzc1YTYwNmUyZDg4NjIxNzkxMzlmZmRhNjFkYzg2MWMwMTllNTVjZDI4NzZlYjJhMjdkODRiJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2EwYjFjYWUwNmIwYTg0N2EzZmVhNmU2NzFhYWY4YWRmZGZlNThjYTJmNzY4MTA1YzgwODJiMmU0NDlmY2UyNTInLFxuICAgICAgICAnYWU0MzQxMDJlZGRlMDk1OGVjNGIxOWQ5MTdhNmEyOGU2YjcyZGExODM0YWZmMGU2NTBmMDQ5NTAzYTI5NmNmMidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc0ZThjZWFmYjliM2U5YTEzNmRjN2ZmNjdlODQwMjk1YjQ5OWRmYjNiMjEzM2U0YmExMTNmMmU0YzBlMTIxZTUnLFxuICAgICAgICAnY2YyMTc0MTE4YzhiNmQ3YTRiNDhmNmQ1MzRjZTVjNzk0MjJjMDg2YTYzNDYwNTAyYjgyN2NlNjJhMzI2NjgzYydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdkMjRhNDRlMDQ3ZTE5YjZmNWFmYjgxYzdjYTJmNjkwODBhNTA3NjY4OWEwMTA5MTlmNDI3MjVjMmI3ODlhMzNiJyxcbiAgICAgICAgJzZmYjhkNTU5MWI0NjZmOGZjNjNkYjUwZjFjMGYxYzY5MDEzZjk5Njg4N2I4MjQ0ZDJjZGVjNDE3YWZlYThmYTMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZWEwMTYwNmE3YTZjOWNkZDI0OWZkZmNmYWNiOTk1ODQwMDFlZGQyOGFiYmFiNzdiNTEwNGU5OGU4ZTNiMzVkNCcsXG4gICAgICAgICczMjJhZjQ5MDhjNzMxMmIwY2ZiZmUzNjlmN2E3YjNjZGI3ZDQ0OTRiYzI4MjM3MDBjZmQ2NTIxODhhM2VhOThkJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2FmOGFkZGJmMmI2NjFjOGE2YzYzMjg2NTVlYjk2NjUxMjUyMDA3ZDhjNWVhMzFiZTRhZDE5NmRlOGNlMjEzMWYnLFxuICAgICAgICAnNjc0OWU2N2MwMjliODVmNTJhMDM0ZWFmZDA5NjgzNmIyNTIwODE4NjgwZTI2YWM4ZjNkZmJjZGI3MTc0OTcwMCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdlM2FlMTk3NDU2NmNhMDZjYzUxNmQ0N2UwZmIxNjVhNjc0YTNkYWJjZmNhMTVlNzIyZjBlMzQ1MGY0NTg4OScsXG4gICAgICAgICcyYWVhYmU3ZTQ1MzE1MTAxMTYyMTdmMDdiZjRkMDczMDBkZTk3ZTQ4NzRmODFmNTMzNDIwYTcyZWViMGJkNmE0J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzU5MWVlMzU1MzEzZDk5NzIxY2Y2OTkzZmZlZDFlM2UzMDE5OTNmZjNlZDI1ODgwMjA3NWVhOGNlZDM5N2UyNDYnLFxuICAgICAgICAnYjBlYTU1OGExMTNjMzBiZWE2MGZjNDc3NTQ2MGM3OTAxZmYwYjA1M2QyNWNhMmJkZWVlOThmMWE0YmU1ZDE5NidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcxMTM5NmQ1NWZkYTU0YzQ5ZjE5YWE5NzMxOGQ4ZGE2MWZhODU4NGU0N2IwODQ5NDUwNzdjZjAzMjU1YjUyOTg0JyxcbiAgICAgICAgJzk5OGM3NGE4Y2Q0NWFjMDEyODlkNTgzM2E3YmViNDc0NGZmNTM2YjAxYjI1N2JlNGM1NzY3YmVhOTNlYTU3YTQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnM2M1ZDJhMWJhMzljNWExNzkwMDAwNzM4YzllMGM0MGI4ZGNkZmQ1NDY4NzU0YjY0MDU1NDAxNTdlMDE3YWE3YScsXG4gICAgICAgICdiMjI4NDI3OTk5NWEzNGUyZjlkNGRlNzM5NmZjMThiODBmOWI4YjlmZGQyNzBmNjY2MWY3OWNhNGM4MWJkMjU3J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2NjODcwNGI4YTYwYTBkZWZhM2E5OWE3Mjk5ZjJlOWMzZmJjMzk1YWZiMDRhYzA3ODQyNWVmOGExNzkzY2MwMzAnLFxuICAgICAgICAnYmRkNDYwMzlmZWVkMTc4ODFkMWUwODYyZGIzNDdmOGNmMzk1Yjc0ZmM0YmNkYzRlOTQwYjc0ZTNhYzFmMWIxMydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdjNTMzZTRmN2VhODU1NWFhY2Q5Nzc3YWM1Y2FkMjliOTdkZDRkZWZjY2M1M2VlN2VhMjA0MTE5YjI4ODliMTk3JyxcbiAgICAgICAgJzZmMGEyNTZiYzVlZmRmNDI5YTJmYjYyNDJmMWE0M2EyZDliOTI1YmI0YTRiM2EyNmJiOGUwZjQ1ZWI1OTYwOTYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYzE0ZjhmMmNjYjI3ZDZmMTA5ZjZkMDhkMDNjYzk2YTY5YmE4YzM0ZWVjMDdiYmNmNTY2ZDQ4ZTMzZGE2NTkzJyxcbiAgICAgICAgJ2MzNTlkNjkyM2JiMzk4ZjdmZDQ0NzNlMTZmZTFjMjg0NzViNzQwZGQwOTgwNzVlNmMwZTg2NDkxMTNkYzNhMzgnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYTZjYmMzMDQ2YmM2YTQ1MGJhYzI0Nzg5ZmExNzExNWE0Yzk3MzllZDc1ZjhmMjFjZTQ0MWY3MmUwYjkwZTZlZicsXG4gICAgICAgICcyMWFlN2Y0NjgwZTg4OWJiMTMwNjE5ZTJjMGY5NWEzNjBjZWI1NzNjNzA2MDMxMzk4NjJhZmQ2MTdmYTliOWYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMzQ3ZDZkOWEwMmM0ODkyN2ViZmI4NmMxMzU5YjFjYWYxMzBhM2MwMjY3ZDExY2U2MzQ0YjM5Zjk5ZDQzY2MzOCcsXG4gICAgICAgICc2MGVhN2Y2MWEzNTM1MjRkMWM5ODdmNmVjZWM5MmYwODZkNTY1YWI2ODc4NzBjYjEyNjg5ZmYxZTMxYzc0NDQ4J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2RhNjU0NWQyMTgxZGI4ZDk4M2Y3ZGNiMzc1ZWY1ODY2ZDQ3YzY3YjFiZjMxYzhjZjg1NWVmNzQzN2I3MjY1NmEnLFxuICAgICAgICAnNDliOTY3MTVhYjY4NzhhNzllNzhmMDdjZTU2ODBjNWQ2NjczMDUxYjQ5MzViZDg5N2ZlYTgyNGI3N2RjMjA4YSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdjNDA3NDdjYzlkMDEyY2IxYTEzYjgxNDgzMDljNmRlN2VjMjVkNjk0NWQ2NTcxNDZiOWQ1OTk0YjhmZWIxMTExJyxcbiAgICAgICAgJzVjYTU2MDc1M2JlMmExMmZjNmRlNmNhZjJjYjQ4OTU2NWRiOTM2MTU2Yjk1MTRlMWJiNWU4MzAzN2UwZmEyZDQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNGU0MmM4ZWM4MmM5OTc5OGNjZjNhNjEwYmU4NzBlNzgzMzhjN2Y3MTMzNDhiZDM0YzgyMDNlZjQwMzdmMzUwMicsXG4gICAgICAgICc3NTcxZDc0ZWU1ZTBmYjkyYTdhOGIzM2EwNzc4MzM0MWE1NDkyMTQ0Y2M1NGJjYzQwYTk0NDczNjkzNjA2NDM3J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzM3NzVhYjcwODliYzZhZjgyM2FiYTJlMWFmNzBiMjM2ZDI1MWNhZGIwYzg2NzQzMjg3NTIyYTFiM2IwZGVkZWEnLFxuICAgICAgICAnYmU1MmQxMDdiY2ZhMDlkOGJjYjk3MzZhODI4Y2ZhN2ZhYzhkYjE3YmY3YTc2YTJjNDJhZDk2MTQwOTAxOGNmNydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdjZWUzMWNiZjdlMzRlYzM3OWQ5NGZiODE0ZDNkNzc1YWQ5NTQ1OTVkMTMxNGJhODg0Njk1OWUzZTgyZjc0ZTI2JyxcbiAgICAgICAgJzhmZDY0YTE0YzA2YjU4OWMyNmI5NDdhZTJiY2Y2YmZhMDE0OWVmMGJlMTRlZDRkODBmNDQ4YTAxYzQzYjFjNmQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYjRmOWVhZWEwOWI2OTE3NjE5ZjZlYTZhNGViNTQ2NGVmZGRiNThmZDQ1YjFlYmVmY2RjMWEwMWQwOGI0Nzk4NicsXG4gICAgICAgICczOWU1Yzk5MjViNWE1NGIwNzQzM2E0ZjE4YzYxNzI2ZjhiYjEzMWMwMTJjYTU0MmViMjRhOGFjMDcyMDA2ODJhJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2Q0MjYzZGZjM2QyZGY5MjNhMDE3OWE0ODk2NmQzMGNlODRlMjUxNWFmYzNkY2NjMWI3NzkwNzc5MmViY2M2MGUnLFxuICAgICAgICAnNjJkZmFmMDdhMGY3OGZlYjMwZTMwZDYyOTU4NTNjZTE4OWUxMjc3NjBhZDZjZjdmYWUxNjRlMTIyYTIwOGQ1NCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc0ODQ1NzUyNDgyMGZhNjVhNGY4ZDM1ZWI2OTMwODU3YzAwMzJhY2MwYTRhMmRlNDIyMjMzZWVkYTg5NzYxMmM0JyxcbiAgICAgICAgJzI1YTc0OGFiMzY3OTc5ZDk4NzMzYzM4YTFmYTFjMmU3ZGM2Y2MwN2RiMmQ2MGE5YWU3YTc2YWFhNDliZDBmNzcnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZGZlZWVmMTg4MTEwMWYyY2IxMTY0NGYzYTJhZmRmYzIwNDVlMTk5MTkxNTI5MjNmMzY3YTE3NjdjMTFjY2VkYScsXG4gICAgICAgICdlY2ZiNzA1NmNmMWRlMDQyZjk0MjBiYWIzOTY3OTNjMGMzOTBiZGU3NGI0YmJkZmYxNmE4M2FlMDlhOWE3NTE3J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzZkN2VmNmIxNzU0M2Y4MzczYzU3M2Y0NGUxZjM4OTgzNWQ4OWJjYmM2MDYyY2VkMzZjODJkZjgzYjhmYWU4NTknLFxuICAgICAgICAnY2Q0NTBlYzMzNTQzODk4NmRmZWZhMTBjNTdmZWE5YmNjNTIxYTA5NTliMmQ4MGJiZjc0YjE5MGRjYTcxMmQxMCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdlNzU2MDVkNTkxMDJhNWEyNjg0NTAwZDNiOTkxZjJlM2YzYzg4YjkzMjI1NTQ3MDM1YWYyNWFmNjZlMDQ1NDFmJyxcbiAgICAgICAgJ2Y1YzU0NzU0YThmNzFlZTU0MGI5YjQ4NzI4NDczZTMxNGY3MjlhYzUzMDhiMDY5MzgzNjA5OTBlMmJmYWQxMjUnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZWI5ODY2MGY0YzRkZmFhMDZhMmJlNDUzZDUwMjBiYzk5YTBjMmU2MGFiZTM4ODQ1N2RkNDNmZWZiMWVkNjIwYycsXG4gICAgICAgICc2Y2I5YTg4NzZkOWNiODUyMDYwOWFmM2FkZDI2Y2QyMGEwYTdjZDhhOTQxMTEzMWNlODVmNDQxMDAwOTkyMjNlJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzEzZTg3YjAyN2Q4NTE0ZDM1OTM5ZjJlNjg5MmIxOTkyMjE1NDU5Njk0MTg4ODMzNmRjMzU2M2UzYjhkYmE5NDInLFxuICAgICAgICAnZmVmNWEzYzY4MDU5YTZkZWM1ZDYyNDExNGJmMWU5MWFhYzJiOWRhNTY4ZDZhYmViMjU3MGQ1NTY0NmI4YWRmMSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdlZTE2MzAyNmU5ZmQ2ZmUwMTdjMzhmMDZhNWJlNmZjMTI1NDI0YjM3MWNlMjcwOGU3YmY0NDkxNjkxZTU3NjRhJyxcbiAgICAgICAgJzFhY2IyNTBmMjU1ZGQ2MWM0M2Q5NGNjYzY3MGQwZjU4ZjQ5YWUzZmExNWI5NjYyM2U1NDMwZGEwYWQ2YzYyYjInXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYjI2OGY1ZWY5YWQ1MWU0ZDc4ZGUzYTc1MGMyZGM4OWIxZTYyNmQ0MzUwNTg2Nzk5OTkzMmU1ZGIzM2FmM2Q4MCcsXG4gICAgICAgICc1ZjMxMGQ0YjNjOTliOWViYjE5Zjc3ZDQxYzFkZWUwMThjZjBkMzRmZDQxOTE2MTQwMDNlOTQ1YTEyMTZlNDIzJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2ZmMDdmMzExOGE5ZGYwMzVlOWZhZDg1ZWI2YzdiZmU0MmIwMmYwMWNhOTljZWVhM2JmN2ZmZGJhOTNjNDc1MGQnLFxuICAgICAgICAnNDM4MTM2ZDYwM2U4NThhM2E1YzQ0MGMzOGVjY2JhZGRjMWQyOTQyMTE0ZTJlZGRkNDc0MGQwOThjZWQxZjBkOCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc4ZDhiOTg1NWM3YzA1MmEzNDE0NmZkMjBmZmI2NThiZWE0YjlmNjllMGQ4MjVlYmVjMTZlOGMzY2UyYjUyNmExJyxcbiAgICAgICAgJ2NkYjU1OWVlZGMyZDc5ZjkyNmJhZjQ0ZmI4NGVhNGQ0NGJjZjUwZmVlNTFkN2NlYjMwZTJlN2Y0NjMwMzY3NTgnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNTJkYjBiNTM4NGRmYmYwNWJmYTlkNDcyZDdhZTI2ZGZlNGI4NTFjZWNhOTFiMWViYTU0MjYzMTgwZGEzMmI2MycsXG4gICAgICAgICdjM2I5OTdkMDUwZWU1ZDQyM2ViYWY2NmE2ZGI5ZjU3YjMxODBjOTAyODc1Njc5ZGU5MjRiNjlkODRhN2IzNzUnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZTYyZjk0OTBkM2Q1MWRhNjM5NWVmZDI0ZTgwOTE5Y2M3ZDBmMjljM2YzZmE0OGM2ZmZmNTQzYmVjYmQ0MzM1MicsXG4gICAgICAgICc2ZDg5YWQ3YmE0ODc2YjBiMjJjMmNhMjgwYzY4Mjg2MmYzNDJjODU5MWYxZGFmNTE3MGUwN2JmZDljY2FmYTdkJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzdmMzBlYTI0NzZiMzk5YjQ5NTc1MDljODhmNzdkMDE5MWFmYTJmZjVjYjdiMTRmZDZkOGU3ZDY1YWFhYjExOTMnLFxuICAgICAgICAnY2E1ZWY3ZDRiMjMxYzk0YzNiMTUzODlhNWY2MzExZTlkYWZmN2JiNjdiMTAzZTk4ODBlZjRiZmY2MzdhY2FlYydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc1MDk4ZmYxZTFkOWYxNGZiNDZhMjEwZmFkYTZjOTAzZmVmMGZiN2I0YTFkZDFkOWFjNjBhMDM2MTgwMGI3YTAwJyxcbiAgICAgICAgJzk3MzExNDFkODFmYzhmODA4NGQzN2M2ZTc1NDIwMDZiM2VlMWI0MGQ2MGRmZTUzNjJhNWIxMzJmZDE3ZGRjMCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICczMmI3OGM3ZGU5ZWU1MTJhNzI4OTViZTZiOWNiZWZhNmUyZjNjNGNjY2U0NDVjOTZiOWYyYzgxZTI3NzhhZDU4JyxcbiAgICAgICAgJ2VlMTg0OWY1MTNkZjcxZTMyZWZjMzg5NmVlMjgyNjBjNzNiYjgwNTQ3YWUyMjc1YmE0OTcyMzc3OTRjODc1M2MnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZTJjYjc0ZmRkYzhlOWZiY2QwNzZlZWYyYTdjNzJiMGNlMzdkNTBmMDgyNjlkZmMwNzRiNTgxNTUwNTQ3YTRmNycsXG4gICAgICAgICdkM2FhMmVkNzFjOWRkMjI0N2E2MmRmMDYyNzM2ZWIwYmFkZGVhOWUzNjEyMmQyYmU4NjQxYWJjYjAwNWNjNGE0J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzg0Mzg0NDc1NjZkNGQ3YmVkYWRjMjk5NDk2YWIzNTc0MjYwMDlhMzVmMjM1Y2IxNDFiZTBkOTljZDEwYWUzYTgnLFxuICAgICAgICAnYzRlMTAyMDkxNjk4MGE0ZGE1ZDAxYWM1ZTZhZDMzMDczNGVmMGQ3OTA2NjMxYzRmMjM5MDQyNmIyZWRkNzkxZidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc0MTYyZDQ4OGI4OTQwMjAzOWI1ODRjNmZjNmMzMDg4NzA1ODdkOWM0NmY2NjBiODc4YWI2NWM4MmM3MTFkNjdlJyxcbiAgICAgICAgJzY3MTYzZTkwMzIzNjI4OWY3NzZmMjJjMjVmYjhhM2FmYzE3MzJmMmI4NGI0ZTk1ZGJkYTQ3YWU1YTA4NTI2NDknXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnM2ZhZDNmYTg0Y2FmMGYzNGYwZjg5YmZkMmRjZjU0ZmMxNzVkNzY3YWVjM2U1MDY4NGYzYmE0YTRiZjVmNjgzZCcsXG4gICAgICAgICdjZDFiYzdjYjZjYzQwN2JiMmYwY2E2NDdjNzE4YTczMGNmNzE4NzJlN2QwZDJhNTNmYTIwZWZjZGZlNjE4MjYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNjc0ZjI2MDBhMzAwN2EwMDU2OGMxYTdjZTA1ZDA4MTZjMWZiODRiZjEzNzA3OThmMWM2OTUzMmZhZWIxYTg2YicsXG4gICAgICAgICcyOTlkMjFmOTQxM2YzM2IzZWRmNDNiMjU3MDA0NTgwYjcwZGI1N2RhMGIxODIyNTllMDllZWNjNjllMGQzOGE1J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2QzMmY0ZGE1NGFkZTc0YWJiODFiODE1YWQxZmIzYjI2M2Q4MmQ2YzY5MjcxNGJjZmY4N2QyOWJkNWVlOWYwOGYnLFxuICAgICAgICAnZjk0MjllNzM4YjhlNTNiOTY4ZTk5MDE2YzA1OTcwNzc4MmUxNGY0NTM1MzU5ZDU4MmZjNDE2OTEwYjNlZWE4NydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICczMGU0ZTY3MDQzNTM4NTU1NmU1OTM2NTcxMzU4NDVkMzZmYmI2OTMxZjcyYjA4Y2IxZWQ5NTRmMWUzY2UzZmY2JyxcbiAgICAgICAgJzQ2MmY5YmNlNjE5ODk4NjM4NDk5MzUwMTEzYmJjOWIxMGE4NzhkMzVkYTcwNzQwZGM2OTVhNTU5ZWI4OGRiN2InXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYmUyMDYyMDAzYzUxY2MzMDA0NjgyOTA0MzMwZTRkZWU3ZjNkY2QxMGIwMWU1ODBiZjE5NzFiMDRkNGNhZDI5NycsXG4gICAgICAgICc2MjE4OGJjNDlkNjFlNTQyODU3M2Q0OGE3NGUxYzY1NWIxYzYxMDkwOTA1NjgyYTBkNTU1OGVkNzJkY2NiOWJjJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzkzMTQ0NDIzYWNlMzQ1MWVkMjllMGZiOWFjMmFmMjExY2I2ZTg0YTYwMWRmNTk5M2M0MTk4NTlmZmY1ZGYwNGEnLFxuICAgICAgICAnN2MxMGRmYjE2NGMzNDI1ZjVjNzFhM2Y5ZDc5OTIwMzhmMTA2NTIyNGY3MmJiOWQxZDkwMmE2ZDEzMDM3YjQ3YydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdiMDE1ZjgwNDRmNWZjYmRjZjIxY2EyNmQ2YzM0ZmI4MTk3ODI5MjA1YzdiN2QyYTdjYjY2NDE4YzE1N2IxMTJjJyxcbiAgICAgICAgJ2FiOGMxZTA4NmQwNGU4MTM3NDRhNjU1YjJkZjhkNWY4M2IzY2RjNmZhYTMwODhjMWQzYWVhMTQ1NGUzYTFkNWYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZDVlOWUxZGE2NDlkOTdkODllNDg2ODExN2E0NjVhM2E0ZjhhMThkZTU3YTE0MGQzNmIzZjJhZjM0MWEyMWI1MicsXG4gICAgICAgICc0Y2IwNDQzN2YzOTFlZDczMTExYTEzY2MxZDRkZDBkYjE2OTM0NjVjMjI0MDQ4MGQ4OTU1ZTg1OTJmMjc0NDdhJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2QzYWU0MTA0N2RkN2NhMDY1ZGJmOGVkNzdiOTkyNDM5OTgzMDA1Y2Q3MmUxNmQ2Zjk5NmE1MzE2ZDM2OTY2YmInLFxuICAgICAgICAnYmQxYWViMjFhZDIyZWJiMjJhMTBmMDMwMzQxN2M2ZDk2NGY4Y2RkN2RmMGFjYTYxNGIxMGRjMTRkMTI1YWM0NidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc0NjNlMjc2M2Q4ODVmOTU4ZmM2NmNkZDIyODAwZjBhNDg3MTk3ZDBhODJlMzc3YjQ5ZjgwYWY4N2M4OTdiMDY1JyxcbiAgICAgICAgJ2JmZWZhY2RiMGU1ZDBmZDdkZjNhMzExYTk0ZGUwNjJiMjZiODBjNjFmYmM5NzUwOGI3OTk5MjY3MWVmN2NhN2YnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNzk4NWZkZmQxMjdjMDU2N2M2ZjUzZWMxYmI2M2VjMzE1OGU1OTdjNDBiZmU3NDdjODNjZGRmYzkxMDY0MTkxNycsXG4gICAgICAgICc2MDNjMTJkYWYzZDk4NjJlZjJiMjVmZTFkZTI4OWFlZDI0ZWQyOTFlMGVjNjcwODcwM2E1YmQ1NjdmMzJlZDAzJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzc0YTFhZDZiNWY3NmUzOWRiMmRkMjQ5NDEwZWFjN2Y5OWU3NGM1OWNiODNkMmQwZWQ1ZmYxNTQzZGE3NzAzZTknLFxuICAgICAgICAnY2M2MTU3ZWYxOGM5YzYzY2Q2MTkzZDgzNjMxYmJlYTAwOTNlMDk2ODk0MmU4YzMzZDU3MzdmZDc5MGUwZGIwOCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICczMDY4MmE1MDcwMzM3NWY2MDJkNDE2NjY0YmExOWI3ZmM5YmFiNDJjNzI3NDc0NjNhNzFkMDg5NmIyMmY2ZGEzJyxcbiAgICAgICAgJzU1M2UwNGY2YjAxOGI0ZmE2YzhmMzllN2YzMTFkMzE3NjI5MGQwZTBmMTljYTczZjE3NzE0ZDk5NzdhMjJmZjgnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnOWUyMTU4ZjBkN2MwZDVmMjZjMzc5MWVmZWZhNzk1OTc2NTRlN2EyYjI0NjRmNTJiMWVlNmMxMzQ3NzY5ZWY1NycsXG4gICAgICAgICc3MTJmY2RkMWI5MDUzZjA5MDAzYTM0ODFmYTc3NjJlOWZmZDdjOGVmMzVhMzg1MDllMmZiZjI2MjkwMDgzNzMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMTc2ZTI2OTg5YTQzYzljZmViYTQwMjljMjAyNTM4YzI4MTcyZTU2NmUzYzRmY2U3MzIyODU3ZjNiZTMyN2Q2NicsXG4gICAgICAgICdlZDhjYzlkMDRiMjllYjg3N2QyNzBiNDg3OGRjNDNjMTlhZWZkMzFmNGVlZTA5ZWU3YjQ3ODM0YzFmYTRiMWMzJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzc1ZDQ2ZWZlYTM3NzFlNmU2OGFiYjg5YTEzYWQ3NDdlY2YxODkyMzkzZGZjNGYxYjcwMDQ3ODhjNTAzNzRkYTgnLFxuICAgICAgICAnOTg1MjM5MGE5OTUwNzY3OWZkMGI4NmZkMmIzOWE4NjhkN2VmYzIyMTUxMzQ2ZTFhM2NhNDcyNjU4NmE2YmVkOCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc4MDlhMjBjNjdkNjQ5MDBmZmI2OThjNGM4MjVmNmQ1ZjIzMTBmYjA0NTFjODY5MzQ1YjczMTlmNjQ1NjA1NzIxJyxcbiAgICAgICAgJzllOTk0OTgwZDk5MTdlMjJiNzZiMDYxOTI3ZmEwNDE0M2QwOTZjY2M1NDk2M2U2YTVlYmZhNWYzZjhlMjg2YzEnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMWIzODkwM2E0M2Y3ZjExNGVkNDUwMGI0ZWFjNzA4M2ZkZWZlY2UxY2YyOWM2MzUyOGQ1NjM0NDZmOTcyYzE4MCcsXG4gICAgICAgICc0MDM2ZWRjOTMxYTYwYWU4ODkzNTNmNzdmZDUzZGU0YTI3MDhiMjZiNmY1ZGE3MmFkMzM5NDExOWRhZjQwOGY5J1xuICAgICAgXVxuICAgIF1cbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEJOID0gcmVxdWlyZSgnYm4uanMnKTtcbnZhciBIbWFjRFJCRyA9IHJlcXVpcmUoJ2htYWMtZHJiZycpO1xudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcbnZhciBjdXJ2ZXMgPSByZXF1aXJlKCcuLi9jdXJ2ZXMnKTtcbnZhciByYW5kID0gcmVxdWlyZSgnYnJvcmFuZCcpO1xudmFyIGFzc2VydCA9IHV0aWxzLmFzc2VydDtcblxudmFyIEtleVBhaXIgPSByZXF1aXJlKCcuL2tleScpO1xudmFyIFNpZ25hdHVyZSA9IHJlcXVpcmUoJy4vc2lnbmF0dXJlJyk7XG5cbmZ1bmN0aW9uIEVDKG9wdGlvbnMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIEVDKSlcbiAgICByZXR1cm4gbmV3IEVDKG9wdGlvbnMpO1xuXG4gIC8vIFNob3J0Y3V0IGBlbGxpcHRpYy5lYyhjdXJ2ZS1uYW1lKWBcbiAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnc3RyaW5nJykge1xuICAgIGFzc2VydChjdXJ2ZXMuaGFzT3duUHJvcGVydHkob3B0aW9ucyksICdVbmtub3duIGN1cnZlICcgKyBvcHRpb25zKTtcblxuICAgIG9wdGlvbnMgPSBjdXJ2ZXNbb3B0aW9uc107XG4gIH1cblxuICAvLyBTaG9ydGN1dCBmb3IgYGVsbGlwdGljLmVjKGVsbGlwdGljLmN1cnZlcy5jdXJ2ZU5hbWUpYFxuICBpZiAob3B0aW9ucyBpbnN0YW5jZW9mIGN1cnZlcy5QcmVzZXRDdXJ2ZSlcbiAgICBvcHRpb25zID0geyBjdXJ2ZTogb3B0aW9ucyB9O1xuXG4gIHRoaXMuY3VydmUgPSBvcHRpb25zLmN1cnZlLmN1cnZlO1xuICB0aGlzLm4gPSB0aGlzLmN1cnZlLm47XG4gIHRoaXMubmggPSB0aGlzLm4udXNocm4oMSk7XG4gIHRoaXMuZyA9IHRoaXMuY3VydmUuZztcblxuICAvLyBQb2ludCBvbiBjdXJ2ZVxuICB0aGlzLmcgPSBvcHRpb25zLmN1cnZlLmc7XG4gIHRoaXMuZy5wcmVjb21wdXRlKG9wdGlvbnMuY3VydmUubi5iaXRMZW5ndGgoKSArIDEpO1xuXG4gIC8vIEhhc2ggZm9yIGZ1bmN0aW9uIGZvciBEUkJHXG4gIHRoaXMuaGFzaCA9IG9wdGlvbnMuaGFzaCB8fCBvcHRpb25zLmN1cnZlLmhhc2g7XG59XG5tb2R1bGUuZXhwb3J0cyA9IEVDO1xuXG5FQy5wcm90b3R5cGUua2V5UGFpciA9IGZ1bmN0aW9uIGtleVBhaXIob3B0aW9ucykge1xuICByZXR1cm4gbmV3IEtleVBhaXIodGhpcywgb3B0aW9ucyk7XG59O1xuXG5FQy5wcm90b3R5cGUua2V5RnJvbVByaXZhdGUgPSBmdW5jdGlvbiBrZXlGcm9tUHJpdmF0ZShwcml2LCBlbmMpIHtcbiAgcmV0dXJuIEtleVBhaXIuZnJvbVByaXZhdGUodGhpcywgcHJpdiwgZW5jKTtcbn07XG5cbkVDLnByb3RvdHlwZS5rZXlGcm9tUHVibGljID0gZnVuY3Rpb24ga2V5RnJvbVB1YmxpYyhwdWIsIGVuYykge1xuICByZXR1cm4gS2V5UGFpci5mcm9tUHVibGljKHRoaXMsIHB1YiwgZW5jKTtcbn07XG5cbkVDLnByb3RvdHlwZS5nZW5LZXlQYWlyID0gZnVuY3Rpb24gZ2VuS2V5UGFpcihvcHRpb25zKSB7XG4gIGlmICghb3B0aW9ucylcbiAgICBvcHRpb25zID0ge307XG5cbiAgLy8gSW5zdGFudGlhdGUgSG1hY19EUkJHXG4gIHZhciBkcmJnID0gbmV3IEhtYWNEUkJHKHtcbiAgICBoYXNoOiB0aGlzLmhhc2gsXG4gICAgcGVyczogb3B0aW9ucy5wZXJzLFxuICAgIHBlcnNFbmM6IG9wdGlvbnMucGVyc0VuYyB8fCAndXRmOCcsXG4gICAgZW50cm9weTogb3B0aW9ucy5lbnRyb3B5IHx8IHJhbmQodGhpcy5oYXNoLmhtYWNTdHJlbmd0aCksXG4gICAgZW50cm9weUVuYzogb3B0aW9ucy5lbnRyb3B5ICYmIG9wdGlvbnMuZW50cm9weUVuYyB8fCAndXRmOCcsXG4gICAgbm9uY2U6IHRoaXMubi50b0FycmF5KClcbiAgfSk7XG5cbiAgdmFyIGJ5dGVzID0gdGhpcy5uLmJ5dGVMZW5ndGgoKTtcbiAgdmFyIG5zMiA9IHRoaXMubi5zdWIobmV3IEJOKDIpKTtcbiAgZG8ge1xuICAgIHZhciBwcml2ID0gbmV3IEJOKGRyYmcuZ2VuZXJhdGUoYnl0ZXMpKTtcbiAgICBpZiAocHJpdi5jbXAobnMyKSA+IDApXG4gICAgICBjb250aW51ZTtcblxuICAgIHByaXYuaWFkZG4oMSk7XG4gICAgcmV0dXJuIHRoaXMua2V5RnJvbVByaXZhdGUocHJpdik7XG4gIH0gd2hpbGUgKHRydWUpO1xufTtcblxuRUMucHJvdG90eXBlLl90cnVuY2F0ZVRvTiA9IGZ1bmN0aW9uIHRydW5jYXRlVG9OKG1zZywgdHJ1bmNPbmx5KSB7XG4gIHZhciBkZWx0YSA9IG1zZy5ieXRlTGVuZ3RoKCkgKiA4IC0gdGhpcy5uLmJpdExlbmd0aCgpO1xuICBpZiAoZGVsdGEgPiAwKVxuICAgIG1zZyA9IG1zZy51c2hybihkZWx0YSk7XG4gIGlmICghdHJ1bmNPbmx5ICYmIG1zZy5jbXAodGhpcy5uKSA+PSAwKVxuICAgIHJldHVybiBtc2cuc3ViKHRoaXMubik7XG4gIGVsc2VcbiAgICByZXR1cm4gbXNnO1xufTtcblxuRUMucHJvdG90eXBlLnNpZ24gPSBmdW5jdGlvbiBzaWduKG1zZywga2V5LCBlbmMsIG9wdGlvbnMpIHtcbiAgaWYgKHR5cGVvZiBlbmMgPT09ICdvYmplY3QnKSB7XG4gICAgb3B0aW9ucyA9IGVuYztcbiAgICBlbmMgPSBudWxsO1xuICB9XG4gIGlmICghb3B0aW9ucylcbiAgICBvcHRpb25zID0ge307XG5cbiAga2V5ID0gdGhpcy5rZXlGcm9tUHJpdmF0ZShrZXksIGVuYyk7XG4gIG1zZyA9IHRoaXMuX3RydW5jYXRlVG9OKG5ldyBCTihtc2csIDE2KSk7XG5cbiAgLy8gWmVyby1leHRlbmQga2V5IHRvIHByb3ZpZGUgZW5vdWdoIGVudHJvcHlcbiAgdmFyIGJ5dGVzID0gdGhpcy5uLmJ5dGVMZW5ndGgoKTtcbiAgdmFyIGJrZXkgPSBrZXkuZ2V0UHJpdmF0ZSgpLnRvQXJyYXkoJ2JlJywgYnl0ZXMpO1xuXG4gIC8vIFplcm8tZXh0ZW5kIG5vbmNlIHRvIGhhdmUgdGhlIHNhbWUgYnl0ZSBzaXplIGFzIE5cbiAgdmFyIG5vbmNlID0gbXNnLnRvQXJyYXkoJ2JlJywgYnl0ZXMpO1xuXG4gIC8vIEluc3RhbnRpYXRlIEhtYWNfRFJCR1xuICB2YXIgZHJiZyA9IG5ldyBIbWFjRFJCRyh7XG4gICAgaGFzaDogdGhpcy5oYXNoLFxuICAgIGVudHJvcHk6IGJrZXksXG4gICAgbm9uY2U6IG5vbmNlLFxuICAgIHBlcnM6IG9wdGlvbnMucGVycyxcbiAgICBwZXJzRW5jOiBvcHRpb25zLnBlcnNFbmMgfHwgJ3V0ZjgnXG4gIH0pO1xuXG4gIC8vIE51bWJlciBvZiBieXRlcyB0byBnZW5lcmF0ZVxuICB2YXIgbnMxID0gdGhpcy5uLnN1YihuZXcgQk4oMSkpO1xuXG4gIGZvciAodmFyIGl0ZXIgPSAwOyB0cnVlOyBpdGVyKyspIHtcbiAgICB2YXIgayA9IG9wdGlvbnMuayA/XG4gICAgICAgIG9wdGlvbnMuayhpdGVyKSA6XG4gICAgICAgIG5ldyBCTihkcmJnLmdlbmVyYXRlKHRoaXMubi5ieXRlTGVuZ3RoKCkpKTtcbiAgICBrID0gdGhpcy5fdHJ1bmNhdGVUb04oaywgdHJ1ZSk7XG4gICAgaWYgKGsuY21wbigxKSA8PSAwIHx8IGsuY21wKG5zMSkgPj0gMClcbiAgICAgIGNvbnRpbnVlO1xuXG4gICAgdmFyIGtwID0gdGhpcy5nLm11bChrKTtcbiAgICBpZiAoa3AuaXNJbmZpbml0eSgpKVxuICAgICAgY29udGludWU7XG5cbiAgICB2YXIga3BYID0ga3AuZ2V0WCgpO1xuICAgIHZhciByID0ga3BYLnVtb2QodGhpcy5uKTtcbiAgICBpZiAoci5jbXBuKDApID09PSAwKVxuICAgICAgY29udGludWU7XG5cbiAgICB2YXIgcyA9IGsuaW52bSh0aGlzLm4pLm11bChyLm11bChrZXkuZ2V0UHJpdmF0ZSgpKS5pYWRkKG1zZykpO1xuICAgIHMgPSBzLnVtb2QodGhpcy5uKTtcbiAgICBpZiAocy5jbXBuKDApID09PSAwKVxuICAgICAgY29udGludWU7XG5cbiAgICB2YXIgcmVjb3ZlcnlQYXJhbSA9IChrcC5nZXRZKCkuaXNPZGQoKSA/IDEgOiAwKSB8XG4gICAgICAgICAgICAgICAgICAgICAgICAoa3BYLmNtcChyKSAhPT0gMCA/IDIgOiAwKTtcblxuICAgIC8vIFVzZSBjb21wbGVtZW50IG9mIGBzYCwgaWYgaXQgaXMgPiBgbiAvIDJgXG4gICAgaWYgKG9wdGlvbnMuY2Fub25pY2FsICYmIHMuY21wKHRoaXMubmgpID4gMCkge1xuICAgICAgcyA9IHRoaXMubi5zdWIocyk7XG4gICAgICByZWNvdmVyeVBhcmFtIF49IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBTaWduYXR1cmUoeyByOiByLCBzOiBzLCByZWNvdmVyeVBhcmFtOiByZWNvdmVyeVBhcmFtIH0pO1xuICB9XG59O1xuXG5FQy5wcm90b3R5cGUudmVyaWZ5ID0gZnVuY3Rpb24gdmVyaWZ5KG1zZywgc2lnbmF0dXJlLCBrZXksIGVuYykge1xuICBtc2cgPSB0aGlzLl90cnVuY2F0ZVRvTihuZXcgQk4obXNnLCAxNikpO1xuICBrZXkgPSB0aGlzLmtleUZyb21QdWJsaWMoa2V5LCBlbmMpO1xuICBzaWduYXR1cmUgPSBuZXcgU2lnbmF0dXJlKHNpZ25hdHVyZSwgJ2hleCcpO1xuXG4gIC8vIFBlcmZvcm0gcHJpbWl0aXZlIHZhbHVlcyB2YWxpZGF0aW9uXG4gIHZhciByID0gc2lnbmF0dXJlLnI7XG4gIHZhciBzID0gc2lnbmF0dXJlLnM7XG4gIGlmIChyLmNtcG4oMSkgPCAwIHx8IHIuY21wKHRoaXMubikgPj0gMClcbiAgICByZXR1cm4gZmFsc2U7XG4gIGlmIChzLmNtcG4oMSkgPCAwIHx8IHMuY21wKHRoaXMubikgPj0gMClcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgLy8gVmFsaWRhdGUgc2lnbmF0dXJlXG4gIHZhciBzaW52ID0gcy5pbnZtKHRoaXMubik7XG4gIHZhciB1MSA9IHNpbnYubXVsKG1zZykudW1vZCh0aGlzLm4pO1xuICB2YXIgdTIgPSBzaW52Lm11bChyKS51bW9kKHRoaXMubik7XG5cbiAgaWYgKCF0aGlzLmN1cnZlLl9tYXh3ZWxsVHJpY2spIHtcbiAgICB2YXIgcCA9IHRoaXMuZy5tdWxBZGQodTEsIGtleS5nZXRQdWJsaWMoKSwgdTIpO1xuICAgIGlmIChwLmlzSW5maW5pdHkoKSlcbiAgICAgIHJldHVybiBmYWxzZTtcblxuICAgIHJldHVybiBwLmdldFgoKS51bW9kKHRoaXMubikuY21wKHIpID09PSAwO1xuICB9XG5cbiAgLy8gTk9URTogR3JlZyBNYXh3ZWxsJ3MgdHJpY2ssIGluc3BpcmVkIGJ5OlxuICAvLyBodHRwczovL2dpdC5pby92YWQzS1xuXG4gIHZhciBwID0gdGhpcy5nLmptdWxBZGQodTEsIGtleS5nZXRQdWJsaWMoKSwgdTIpO1xuICBpZiAocC5pc0luZmluaXR5KCkpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIC8vIENvbXBhcmUgYHAueGAgb2YgSmFjb2JpYW4gcG9pbnQgd2l0aCBgcmAsXG4gIC8vIHRoaXMgd2lsbCBkbyBgcC54ID09IHIgKiBwLnpeMmAgaW5zdGVhZCBvZiBtdWx0aXBseWluZyBgcC54YCBieSB0aGVcbiAgLy8gaW52ZXJzZSBvZiBgcC56XjJgXG4gIHJldHVybiBwLmVxWFRvUChyKTtcbn07XG5cbkVDLnByb3RvdHlwZS5yZWNvdmVyUHViS2V5ID0gZnVuY3Rpb24obXNnLCBzaWduYXR1cmUsIGosIGVuYykge1xuICBhc3NlcnQoKDMgJiBqKSA9PT0gaiwgJ1RoZSByZWNvdmVyeSBwYXJhbSBpcyBtb3JlIHRoYW4gdHdvIGJpdHMnKTtcbiAgc2lnbmF0dXJlID0gbmV3IFNpZ25hdHVyZShzaWduYXR1cmUsIGVuYyk7XG5cbiAgdmFyIG4gPSB0aGlzLm47XG4gIHZhciBlID0gbmV3IEJOKG1zZyk7XG4gIHZhciByID0gc2lnbmF0dXJlLnI7XG4gIHZhciBzID0gc2lnbmF0dXJlLnM7XG5cbiAgLy8gQSBzZXQgTFNCIHNpZ25pZmllcyB0aGF0IHRoZSB5LWNvb3JkaW5hdGUgaXMgb2RkXG4gIHZhciBpc1lPZGQgPSBqICYgMTtcbiAgdmFyIGlzU2Vjb25kS2V5ID0gaiA+PiAxO1xuICBpZiAoci5jbXAodGhpcy5jdXJ2ZS5wLnVtb2QodGhpcy5jdXJ2ZS5uKSkgPj0gMCAmJiBpc1NlY29uZEtleSlcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuYWJsZSB0byBmaW5kIHNlbmNvbmQga2V5IGNhbmRpbmF0ZScpO1xuXG4gIC8vIDEuMS4gTGV0IHggPSByICsgam4uXG4gIGlmIChpc1NlY29uZEtleSlcbiAgICByID0gdGhpcy5jdXJ2ZS5wb2ludEZyb21YKHIuYWRkKHRoaXMuY3VydmUubiksIGlzWU9kZCk7XG4gIGVsc2VcbiAgICByID0gdGhpcy5jdXJ2ZS5wb2ludEZyb21YKHIsIGlzWU9kZCk7XG5cbiAgdmFyIHJJbnYgPSBzaWduYXR1cmUuci5pbnZtKG4pO1xuICB2YXIgczEgPSBuLnN1YihlKS5tdWwockludikudW1vZChuKTtcbiAgdmFyIHMyID0gcy5tdWwockludikudW1vZChuKTtcblxuICAvLyAxLjYuMSBDb21wdXRlIFEgPSByXi0xIChzUiAtICBlRylcbiAgLy8gICAgICAgICAgICAgICBRID0gcl4tMSAoc1IgKyAtZUcpXG4gIHJldHVybiB0aGlzLmcubXVsQWRkKHMxLCByLCBzMik7XG59O1xuXG5FQy5wcm90b3R5cGUuZ2V0S2V5UmVjb3ZlcnlQYXJhbSA9IGZ1bmN0aW9uKGUsIHNpZ25hdHVyZSwgUSwgZW5jKSB7XG4gIHNpZ25hdHVyZSA9IG5ldyBTaWduYXR1cmUoc2lnbmF0dXJlLCBlbmMpO1xuICBpZiAoc2lnbmF0dXJlLnJlY292ZXJ5UGFyYW0gIT09IG51bGwpXG4gICAgcmV0dXJuIHNpZ25hdHVyZS5yZWNvdmVyeVBhcmFtO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgNDsgaSsrKSB7XG4gICAgdmFyIFFwcmltZTtcbiAgICB0cnkge1xuICAgICAgUXByaW1lID0gdGhpcy5yZWNvdmVyUHViS2V5KGUsIHNpZ25hdHVyZSwgaSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKFFwcmltZS5lcShRKSlcbiAgICAgIHJldHVybiBpO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcignVW5hYmxlIHRvIGZpbmQgdmFsaWQgcmVjb3ZlcnkgZmFjdG9yJyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaGFzaCA9IHJlcXVpcmUoJ2hhc2guanMnKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJ21pbmltYWxpc3RpYy1jcnlwdG8tdXRpbHMnKTtcbnZhciBhc3NlcnQgPSByZXF1aXJlKCdtaW5pbWFsaXN0aWMtYXNzZXJ0Jyk7XG5cbmZ1bmN0aW9uIEhtYWNEUkJHKG9wdGlvbnMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIEhtYWNEUkJHKSlcbiAgICByZXR1cm4gbmV3IEhtYWNEUkJHKG9wdGlvbnMpO1xuICB0aGlzLmhhc2ggPSBvcHRpb25zLmhhc2g7XG4gIHRoaXMucHJlZFJlc2lzdCA9ICEhb3B0aW9ucy5wcmVkUmVzaXN0O1xuXG4gIHRoaXMub3V0TGVuID0gdGhpcy5oYXNoLm91dFNpemU7XG4gIHRoaXMubWluRW50cm9weSA9IG9wdGlvbnMubWluRW50cm9weSB8fCB0aGlzLmhhc2guaG1hY1N0cmVuZ3RoO1xuXG4gIHRoaXMuX3Jlc2VlZCA9IG51bGw7XG4gIHRoaXMucmVzZWVkSW50ZXJ2YWwgPSBudWxsO1xuICB0aGlzLksgPSBudWxsO1xuICB0aGlzLlYgPSBudWxsO1xuXG4gIHZhciBlbnRyb3B5ID0gdXRpbHMudG9BcnJheShvcHRpb25zLmVudHJvcHksIG9wdGlvbnMuZW50cm9weUVuYyB8fCAnaGV4Jyk7XG4gIHZhciBub25jZSA9IHV0aWxzLnRvQXJyYXkob3B0aW9ucy5ub25jZSwgb3B0aW9ucy5ub25jZUVuYyB8fCAnaGV4Jyk7XG4gIHZhciBwZXJzID0gdXRpbHMudG9BcnJheShvcHRpb25zLnBlcnMsIG9wdGlvbnMucGVyc0VuYyB8fCAnaGV4Jyk7XG4gIGFzc2VydChlbnRyb3B5Lmxlbmd0aCA+PSAodGhpcy5taW5FbnRyb3B5IC8gOCksXG4gICAgICAgICAnTm90IGVub3VnaCBlbnRyb3B5LiBNaW5pbXVtIGlzOiAnICsgdGhpcy5taW5FbnRyb3B5ICsgJyBiaXRzJyk7XG4gIHRoaXMuX2luaXQoZW50cm9weSwgbm9uY2UsIHBlcnMpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBIbWFjRFJCRztcblxuSG1hY0RSQkcucHJvdG90eXBlLl9pbml0ID0gZnVuY3Rpb24gaW5pdChlbnRyb3B5LCBub25jZSwgcGVycykge1xuICB2YXIgc2VlZCA9IGVudHJvcHkuY29uY2F0KG5vbmNlKS5jb25jYXQocGVycyk7XG5cbiAgdGhpcy5LID0gbmV3IEFycmF5KHRoaXMub3V0TGVuIC8gOCk7XG4gIHRoaXMuViA9IG5ldyBBcnJheSh0aGlzLm91dExlbiAvIDgpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuVi5sZW5ndGg7IGkrKykge1xuICAgIHRoaXMuS1tpXSA9IDB4MDA7XG4gICAgdGhpcy5WW2ldID0gMHgwMTtcbiAgfVxuXG4gIHRoaXMuX3VwZGF0ZShzZWVkKTtcbiAgdGhpcy5fcmVzZWVkID0gMTtcbiAgdGhpcy5yZXNlZWRJbnRlcnZhbCA9IDB4MTAwMDAwMDAwMDAwMDsgIC8vIDJeNDhcbn07XG5cbkhtYWNEUkJHLnByb3RvdHlwZS5faG1hYyA9IGZ1bmN0aW9uIGhtYWMoKSB7XG4gIHJldHVybiBuZXcgaGFzaC5obWFjKHRoaXMuaGFzaCwgdGhpcy5LKTtcbn07XG5cbkhtYWNEUkJHLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlKHNlZWQpIHtcbiAgdmFyIGttYWMgPSB0aGlzLl9obWFjKClcbiAgICAgICAgICAgICAgICAgLnVwZGF0ZSh0aGlzLlYpXG4gICAgICAgICAgICAgICAgIC51cGRhdGUoWyAweDAwIF0pO1xuICBpZiAoc2VlZClcbiAgICBrbWFjID0ga21hYy51cGRhdGUoc2VlZCk7XG4gIHRoaXMuSyA9IGttYWMuZGlnZXN0KCk7XG4gIHRoaXMuViA9IHRoaXMuX2htYWMoKS51cGRhdGUodGhpcy5WKS5kaWdlc3QoKTtcbiAgaWYgKCFzZWVkKVxuICAgIHJldHVybjtcblxuICB0aGlzLksgPSB0aGlzLl9obWFjKClcbiAgICAgICAgICAgICAgIC51cGRhdGUodGhpcy5WKVxuICAgICAgICAgICAgICAgLnVwZGF0ZShbIDB4MDEgXSlcbiAgICAgICAgICAgICAgIC51cGRhdGUoc2VlZClcbiAgICAgICAgICAgICAgIC5kaWdlc3QoKTtcbiAgdGhpcy5WID0gdGhpcy5faG1hYygpLnVwZGF0ZSh0aGlzLlYpLmRpZ2VzdCgpO1xufTtcblxuSG1hY0RSQkcucHJvdG90eXBlLnJlc2VlZCA9IGZ1bmN0aW9uIHJlc2VlZChlbnRyb3B5LCBlbnRyb3B5RW5jLCBhZGQsIGFkZEVuYykge1xuICAvLyBPcHRpb25hbCBlbnRyb3B5IGVuY1xuICBpZiAodHlwZW9mIGVudHJvcHlFbmMgIT09ICdzdHJpbmcnKSB7XG4gICAgYWRkRW5jID0gYWRkO1xuICAgIGFkZCA9IGVudHJvcHlFbmM7XG4gICAgZW50cm9weUVuYyA9IG51bGw7XG4gIH1cblxuICBlbnRyb3B5ID0gdXRpbHMudG9BcnJheShlbnRyb3B5LCBlbnRyb3B5RW5jKTtcbiAgYWRkID0gdXRpbHMudG9BcnJheShhZGQsIGFkZEVuYyk7XG5cbiAgYXNzZXJ0KGVudHJvcHkubGVuZ3RoID49ICh0aGlzLm1pbkVudHJvcHkgLyA4KSxcbiAgICAgICAgICdOb3QgZW5vdWdoIGVudHJvcHkuIE1pbmltdW0gaXM6ICcgKyB0aGlzLm1pbkVudHJvcHkgKyAnIGJpdHMnKTtcblxuICB0aGlzLl91cGRhdGUoZW50cm9weS5jb25jYXQoYWRkIHx8IFtdKSk7XG4gIHRoaXMuX3Jlc2VlZCA9IDE7XG59O1xuXG5IbWFjRFJCRy5wcm90b3R5cGUuZ2VuZXJhdGUgPSBmdW5jdGlvbiBnZW5lcmF0ZShsZW4sIGVuYywgYWRkLCBhZGRFbmMpIHtcbiAgaWYgKHRoaXMuX3Jlc2VlZCA+IHRoaXMucmVzZWVkSW50ZXJ2YWwpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdSZXNlZWQgaXMgcmVxdWlyZWQnKTtcblxuICAvLyBPcHRpb25hbCBlbmNvZGluZ1xuICBpZiAodHlwZW9mIGVuYyAhPT0gJ3N0cmluZycpIHtcbiAgICBhZGRFbmMgPSBhZGQ7XG4gICAgYWRkID0gZW5jO1xuICAgIGVuYyA9IG51bGw7XG4gIH1cblxuICAvLyBPcHRpb25hbCBhZGRpdGlvbmFsIGRhdGFcbiAgaWYgKGFkZCkge1xuICAgIGFkZCA9IHV0aWxzLnRvQXJyYXkoYWRkLCBhZGRFbmMgfHwgJ2hleCcpO1xuICAgIHRoaXMuX3VwZGF0ZShhZGQpO1xuICB9XG5cbiAgdmFyIHRlbXAgPSBbXTtcbiAgd2hpbGUgKHRlbXAubGVuZ3RoIDwgbGVuKSB7XG4gICAgdGhpcy5WID0gdGhpcy5faG1hYygpLnVwZGF0ZSh0aGlzLlYpLmRpZ2VzdCgpO1xuICAgIHRlbXAgPSB0ZW1wLmNvbmNhdCh0aGlzLlYpO1xuICB9XG5cbiAgdmFyIHJlcyA9IHRlbXAuc2xpY2UoMCwgbGVuKTtcbiAgdGhpcy5fdXBkYXRlKGFkZCk7XG4gIHRoaXMuX3Jlc2VlZCsrO1xuICByZXR1cm4gdXRpbHMuZW5jb2RlKHJlcywgZW5jKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBCTiA9IHJlcXVpcmUoJ2JuLmpzJyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xudmFyIGFzc2VydCA9IHV0aWxzLmFzc2VydDtcblxuZnVuY3Rpb24gS2V5UGFpcihlYywgb3B0aW9ucykge1xuICB0aGlzLmVjID0gZWM7XG4gIHRoaXMucHJpdiA9IG51bGw7XG4gIHRoaXMucHViID0gbnVsbDtcblxuICAvLyBLZXlQYWlyKGVjLCB7IHByaXY6IC4uLiwgcHViOiAuLi4gfSlcbiAgaWYgKG9wdGlvbnMucHJpdilcbiAgICB0aGlzLl9pbXBvcnRQcml2YXRlKG9wdGlvbnMucHJpdiwgb3B0aW9ucy5wcml2RW5jKTtcbiAgaWYgKG9wdGlvbnMucHViKVxuICAgIHRoaXMuX2ltcG9ydFB1YmxpYyhvcHRpb25zLnB1Yiwgb3B0aW9ucy5wdWJFbmMpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBLZXlQYWlyO1xuXG5LZXlQYWlyLmZyb21QdWJsaWMgPSBmdW5jdGlvbiBmcm9tUHVibGljKGVjLCBwdWIsIGVuYykge1xuICBpZiAocHViIGluc3RhbmNlb2YgS2V5UGFpcilcbiAgICByZXR1cm4gcHViO1xuXG4gIHJldHVybiBuZXcgS2V5UGFpcihlYywge1xuICAgIHB1YjogcHViLFxuICAgIHB1YkVuYzogZW5jXG4gIH0pO1xufTtcblxuS2V5UGFpci5mcm9tUHJpdmF0ZSA9IGZ1bmN0aW9uIGZyb21Qcml2YXRlKGVjLCBwcml2LCBlbmMpIHtcbiAgaWYgKHByaXYgaW5zdGFuY2VvZiBLZXlQYWlyKVxuICAgIHJldHVybiBwcml2O1xuXG4gIHJldHVybiBuZXcgS2V5UGFpcihlYywge1xuICAgIHByaXY6IHByaXYsXG4gICAgcHJpdkVuYzogZW5jXG4gIH0pO1xufTtcblxuS2V5UGFpci5wcm90b3R5cGUudmFsaWRhdGUgPSBmdW5jdGlvbiB2YWxpZGF0ZSgpIHtcbiAgdmFyIHB1YiA9IHRoaXMuZ2V0UHVibGljKCk7XG5cbiAgaWYgKHB1Yi5pc0luZmluaXR5KCkpXG4gICAgcmV0dXJuIHsgcmVzdWx0OiBmYWxzZSwgcmVhc29uOiAnSW52YWxpZCBwdWJsaWMga2V5JyB9O1xuICBpZiAoIXB1Yi52YWxpZGF0ZSgpKVxuICAgIHJldHVybiB7IHJlc3VsdDogZmFsc2UsIHJlYXNvbjogJ1B1YmxpYyBrZXkgaXMgbm90IGEgcG9pbnQnIH07XG4gIGlmICghcHViLm11bCh0aGlzLmVjLmN1cnZlLm4pLmlzSW5maW5pdHkoKSlcbiAgICByZXR1cm4geyByZXN1bHQ6IGZhbHNlLCByZWFzb246ICdQdWJsaWMga2V5ICogTiAhPSBPJyB9O1xuXG4gIHJldHVybiB7IHJlc3VsdDogdHJ1ZSwgcmVhc29uOiBudWxsIH07XG59O1xuXG5LZXlQYWlyLnByb3RvdHlwZS5nZXRQdWJsaWMgPSBmdW5jdGlvbiBnZXRQdWJsaWMoY29tcGFjdCwgZW5jKSB7XG4gIC8vIGNvbXBhY3QgaXMgb3B0aW9uYWwgYXJndW1lbnRcbiAgaWYgKHR5cGVvZiBjb21wYWN0ID09PSAnc3RyaW5nJykge1xuICAgIGVuYyA9IGNvbXBhY3Q7XG4gICAgY29tcGFjdCA9IG51bGw7XG4gIH1cblxuICBpZiAoIXRoaXMucHViKVxuICAgIHRoaXMucHViID0gdGhpcy5lYy5nLm11bCh0aGlzLnByaXYpO1xuXG4gIGlmICghZW5jKVxuICAgIHJldHVybiB0aGlzLnB1YjtcblxuICByZXR1cm4gdGhpcy5wdWIuZW5jb2RlKGVuYywgY29tcGFjdCk7XG59O1xuXG5LZXlQYWlyLnByb3RvdHlwZS5nZXRQcml2YXRlID0gZnVuY3Rpb24gZ2V0UHJpdmF0ZShlbmMpIHtcbiAgaWYgKGVuYyA9PT0gJ2hleCcpXG4gICAgcmV0dXJuIHRoaXMucHJpdi50b1N0cmluZygxNiwgMik7XG4gIGVsc2VcbiAgICByZXR1cm4gdGhpcy5wcml2O1xufTtcblxuS2V5UGFpci5wcm90b3R5cGUuX2ltcG9ydFByaXZhdGUgPSBmdW5jdGlvbiBfaW1wb3J0UHJpdmF0ZShrZXksIGVuYykge1xuICB0aGlzLnByaXYgPSBuZXcgQk4oa2V5LCBlbmMgfHwgMTYpO1xuXG4gIC8vIEVuc3VyZSB0aGF0IHRoZSBwcml2IHdvbid0IGJlIGJpZ2dlciB0aGFuIG4sIG90aGVyd2lzZSB3ZSBtYXkgZmFpbFxuICAvLyBpbiBmaXhlZCBtdWx0aXBsaWNhdGlvbiBtZXRob2RcbiAgdGhpcy5wcml2ID0gdGhpcy5wcml2LnVtb2QodGhpcy5lYy5jdXJ2ZS5uKTtcbn07XG5cbktleVBhaXIucHJvdG90eXBlLl9pbXBvcnRQdWJsaWMgPSBmdW5jdGlvbiBfaW1wb3J0UHVibGljKGtleSwgZW5jKSB7XG4gIGlmIChrZXkueCB8fCBrZXkueSkge1xuICAgIC8vIE1vbnRnb21lcnkgcG9pbnRzIG9ubHkgaGF2ZSBhbiBgeGAgY29vcmRpbmF0ZS5cbiAgICAvLyBXZWllcnN0cmFzcy9FZHdhcmRzIHBvaW50cyBvbiB0aGUgb3RoZXIgaGFuZCBoYXZlIGJvdGggYHhgIGFuZFxuICAgIC8vIGB5YCBjb29yZGluYXRlcy5cbiAgICBpZiAodGhpcy5lYy5jdXJ2ZS50eXBlID09PSAnbW9udCcpIHtcbiAgICAgIGFzc2VydChrZXkueCwgJ05lZWQgeCBjb29yZGluYXRlJyk7XG4gICAgfSBlbHNlIGlmICh0aGlzLmVjLmN1cnZlLnR5cGUgPT09ICdzaG9ydCcgfHxcbiAgICAgICAgICAgICAgIHRoaXMuZWMuY3VydmUudHlwZSA9PT0gJ2Vkd2FyZHMnKSB7XG4gICAgICBhc3NlcnQoa2V5LnggJiYga2V5LnksICdOZWVkIGJvdGggeCBhbmQgeSBjb29yZGluYXRlJyk7XG4gICAgfVxuICAgIHRoaXMucHViID0gdGhpcy5lYy5jdXJ2ZS5wb2ludChrZXkueCwga2V5LnkpO1xuICAgIHJldHVybjtcbiAgfVxuICB0aGlzLnB1YiA9IHRoaXMuZWMuY3VydmUuZGVjb2RlUG9pbnQoa2V5LCBlbmMpO1xufTtcblxuLy8gRUNESFxuS2V5UGFpci5wcm90b3R5cGUuZGVyaXZlID0gZnVuY3Rpb24gZGVyaXZlKHB1Yikge1xuICByZXR1cm4gcHViLm11bCh0aGlzLnByaXYpLmdldFgoKTtcbn07XG5cbi8vIEVDRFNBXG5LZXlQYWlyLnByb3RvdHlwZS5zaWduID0gZnVuY3Rpb24gc2lnbihtc2csIGVuYywgb3B0aW9ucykge1xuICByZXR1cm4gdGhpcy5lYy5zaWduKG1zZywgdGhpcywgZW5jLCBvcHRpb25zKTtcbn07XG5cbktleVBhaXIucHJvdG90eXBlLnZlcmlmeSA9IGZ1bmN0aW9uIHZlcmlmeShtc2csIHNpZ25hdHVyZSkge1xuICByZXR1cm4gdGhpcy5lYy52ZXJpZnkobXNnLCBzaWduYXR1cmUsIHRoaXMpO1xufTtcblxuS2V5UGFpci5wcm90b3R5cGUuaW5zcGVjdCA9IGZ1bmN0aW9uIGluc3BlY3QoKSB7XG4gIHJldHVybiAnPEtleSBwcml2OiAnICsgKHRoaXMucHJpdiAmJiB0aGlzLnByaXYudG9TdHJpbmcoMTYsIDIpKSArXG4gICAgICAgICAnIHB1YjogJyArICh0aGlzLnB1YiAmJiB0aGlzLnB1Yi5pbnNwZWN0KCkpICsgJyA+Jztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBCTiA9IHJlcXVpcmUoJ2JuLmpzJyk7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG52YXIgYXNzZXJ0ID0gdXRpbHMuYXNzZXJ0O1xuXG5mdW5jdGlvbiBTaWduYXR1cmUob3B0aW9ucywgZW5jKSB7XG4gIGlmIChvcHRpb25zIGluc3RhbmNlb2YgU2lnbmF0dXJlKVxuICAgIHJldHVybiBvcHRpb25zO1xuXG4gIGlmICh0aGlzLl9pbXBvcnRERVIob3B0aW9ucywgZW5jKSlcbiAgICByZXR1cm47XG5cbiAgYXNzZXJ0KG9wdGlvbnMuciAmJiBvcHRpb25zLnMsICdTaWduYXR1cmUgd2l0aG91dCByIG9yIHMnKTtcbiAgdGhpcy5yID0gbmV3IEJOKG9wdGlvbnMuciwgMTYpO1xuICB0aGlzLnMgPSBuZXcgQk4ob3B0aW9ucy5zLCAxNik7XG4gIGlmIChvcHRpb25zLnJlY292ZXJ5UGFyYW0gPT09IHVuZGVmaW5lZClcbiAgICB0aGlzLnJlY292ZXJ5UGFyYW0gPSBudWxsO1xuICBlbHNlXG4gICAgdGhpcy5yZWNvdmVyeVBhcmFtID0gb3B0aW9ucy5yZWNvdmVyeVBhcmFtO1xufVxubW9kdWxlLmV4cG9ydHMgPSBTaWduYXR1cmU7XG5cbmZ1bmN0aW9uIFBvc2l0aW9uKCkge1xuICB0aGlzLnBsYWNlID0gMDtcbn1cblxuZnVuY3Rpb24gZ2V0TGVuZ3RoKGJ1ZiwgcCkge1xuICB2YXIgaW5pdGlhbCA9IGJ1ZltwLnBsYWNlKytdO1xuICBpZiAoIShpbml0aWFsICYgMHg4MCkpIHtcbiAgICByZXR1cm4gaW5pdGlhbDtcbiAgfVxuICB2YXIgb2N0ZXRMZW4gPSBpbml0aWFsICYgMHhmO1xuICB2YXIgdmFsID0gMDtcbiAgZm9yICh2YXIgaSA9IDAsIG9mZiA9IHAucGxhY2U7IGkgPCBvY3RldExlbjsgaSsrLCBvZmYrKykge1xuICAgIHZhbCA8PD0gODtcbiAgICB2YWwgfD0gYnVmW29mZl07XG4gIH1cbiAgcC5wbGFjZSA9IG9mZjtcbiAgcmV0dXJuIHZhbDtcbn1cblxuZnVuY3Rpb24gcm1QYWRkaW5nKGJ1Zikge1xuICB2YXIgaSA9IDA7XG4gIHZhciBsZW4gPSBidWYubGVuZ3RoIC0gMTtcbiAgd2hpbGUgKCFidWZbaV0gJiYgIShidWZbaSArIDFdICYgMHg4MCkgJiYgaSA8IGxlbikge1xuICAgIGkrKztcbiAgfVxuICBpZiAoaSA9PT0gMCkge1xuICAgIHJldHVybiBidWY7XG4gIH1cbiAgcmV0dXJuIGJ1Zi5zbGljZShpKTtcbn1cblxuU2lnbmF0dXJlLnByb3RvdHlwZS5faW1wb3J0REVSID0gZnVuY3Rpb24gX2ltcG9ydERFUihkYXRhLCBlbmMpIHtcbiAgZGF0YSA9IHV0aWxzLnRvQXJyYXkoZGF0YSwgZW5jKTtcbiAgdmFyIHAgPSBuZXcgUG9zaXRpb24oKTtcbiAgaWYgKGRhdGFbcC5wbGFjZSsrXSAhPT0gMHgzMCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgbGVuID0gZ2V0TGVuZ3RoKGRhdGEsIHApO1xuICBpZiAoKGxlbiArIHAucGxhY2UpICE9PSBkYXRhLmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoZGF0YVtwLnBsYWNlKytdICE9PSAweDAyKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBybGVuID0gZ2V0TGVuZ3RoKGRhdGEsIHApO1xuICB2YXIgciA9IGRhdGEuc2xpY2UocC5wbGFjZSwgcmxlbiArIHAucGxhY2UpO1xuICBwLnBsYWNlICs9IHJsZW47XG4gIGlmIChkYXRhW3AucGxhY2UrK10gIT09IDB4MDIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHNsZW4gPSBnZXRMZW5ndGgoZGF0YSwgcCk7XG4gIGlmIChkYXRhLmxlbmd0aCAhPT0gc2xlbiArIHAucGxhY2UpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHMgPSBkYXRhLnNsaWNlKHAucGxhY2UsIHNsZW4gKyBwLnBsYWNlKTtcbiAgaWYgKHJbMF0gPT09IDAgJiYgKHJbMV0gJiAweDgwKSkge1xuICAgIHIgPSByLnNsaWNlKDEpO1xuICB9XG4gIGlmIChzWzBdID09PSAwICYmIChzWzFdICYgMHg4MCkpIHtcbiAgICBzID0gcy5zbGljZSgxKTtcbiAgfVxuXG4gIHRoaXMuciA9IG5ldyBCTihyKTtcbiAgdGhpcy5zID0gbmV3IEJOKHMpO1xuICB0aGlzLnJlY292ZXJ5UGFyYW0gPSBudWxsO1xuXG4gIHJldHVybiB0cnVlO1xufTtcblxuZnVuY3Rpb24gY29uc3RydWN0TGVuZ3RoKGFyciwgbGVuKSB7XG4gIGlmIChsZW4gPCAweDgwKSB7XG4gICAgYXJyLnB1c2gobGVuKTtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIG9jdGV0cyA9IDEgKyAoTWF0aC5sb2cobGVuKSAvIE1hdGguTE4yID4+PiAzKTtcbiAgYXJyLnB1c2gob2N0ZXRzIHwgMHg4MCk7XG4gIHdoaWxlICgtLW9jdGV0cykge1xuICAgIGFyci5wdXNoKChsZW4gPj4+IChvY3RldHMgPDwgMykpICYgMHhmZik7XG4gIH1cbiAgYXJyLnB1c2gobGVuKTtcbn1cblxuU2lnbmF0dXJlLnByb3RvdHlwZS50b0RFUiA9IGZ1bmN0aW9uIHRvREVSKGVuYykge1xuICB2YXIgciA9IHRoaXMuci50b0FycmF5KCk7XG4gIHZhciBzID0gdGhpcy5zLnRvQXJyYXkoKTtcblxuICAvLyBQYWQgdmFsdWVzXG4gIGlmIChyWzBdICYgMHg4MClcbiAgICByID0gWyAwIF0uY29uY2F0KHIpO1xuICAvLyBQYWQgdmFsdWVzXG4gIGlmIChzWzBdICYgMHg4MClcbiAgICBzID0gWyAwIF0uY29uY2F0KHMpO1xuXG4gIHIgPSBybVBhZGRpbmcocik7XG4gIHMgPSBybVBhZGRpbmcocyk7XG5cbiAgd2hpbGUgKCFzWzBdICYmICEoc1sxXSAmIDB4ODApKSB7XG4gICAgcyA9IHMuc2xpY2UoMSk7XG4gIH1cbiAgdmFyIGFyciA9IFsgMHgwMiBdO1xuICBjb25zdHJ1Y3RMZW5ndGgoYXJyLCByLmxlbmd0aCk7XG4gIGFyciA9IGFyci5jb25jYXQocik7XG4gIGFyci5wdXNoKDB4MDIpO1xuICBjb25zdHJ1Y3RMZW5ndGgoYXJyLCBzLmxlbmd0aCk7XG4gIHZhciBiYWNrSGFsZiA9IGFyci5jb25jYXQocyk7XG4gIHZhciByZXMgPSBbIDB4MzAgXTtcbiAgY29uc3RydWN0TGVuZ3RoKHJlcywgYmFja0hhbGYubGVuZ3RoKTtcbiAgcmVzID0gcmVzLmNvbmNhdChiYWNrSGFsZik7XG4gIHJldHVybiB1dGlscy5lbmNvZGUocmVzLCBlbmMpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGhhc2ggPSByZXF1aXJlKCdoYXNoLmpzJyk7XG52YXIgY3VydmVzID0gcmVxdWlyZSgnLi4vY3VydmVzJyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xudmFyIGFzc2VydCA9IHV0aWxzLmFzc2VydDtcbnZhciBwYXJzZUJ5dGVzID0gdXRpbHMucGFyc2VCeXRlcztcbnZhciBLZXlQYWlyID0gcmVxdWlyZSgnLi9rZXknKTtcbnZhciBTaWduYXR1cmUgPSByZXF1aXJlKCcuL3NpZ25hdHVyZScpO1xuXG5mdW5jdGlvbiBFRERTQShjdXJ2ZSkge1xuICBhc3NlcnQoY3VydmUgPT09ICdlZDI1NTE5JywgJ29ubHkgdGVzdGVkIHdpdGggZWQyNTUxOSBzbyBmYXInKTtcblxuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgRUREU0EpKVxuICAgIHJldHVybiBuZXcgRUREU0EoY3VydmUpO1xuXG4gIHZhciBjdXJ2ZSA9IGN1cnZlc1tjdXJ2ZV0uY3VydmU7XG4gIHRoaXMuY3VydmUgPSBjdXJ2ZTtcbiAgdGhpcy5nID0gY3VydmUuZztcbiAgdGhpcy5nLnByZWNvbXB1dGUoY3VydmUubi5iaXRMZW5ndGgoKSArIDEpO1xuXG4gIHRoaXMucG9pbnRDbGFzcyA9IGN1cnZlLnBvaW50KCkuY29uc3RydWN0b3I7XG4gIHRoaXMuZW5jb2RpbmdMZW5ndGggPSBNYXRoLmNlaWwoY3VydmUubi5iaXRMZW5ndGgoKSAvIDgpO1xuICB0aGlzLmhhc2ggPSBoYXNoLnNoYTUxMjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBFRERTQTtcblxuLyoqXG4qIEBwYXJhbSB7QXJyYXl8U3RyaW5nfSBtZXNzYWdlIC0gbWVzc2FnZSBieXRlc1xuKiBAcGFyYW0ge0FycmF5fFN0cmluZ3xLZXlQYWlyfSBzZWNyZXQgLSBzZWNyZXQgYnl0ZXMgb3IgYSBrZXlwYWlyXG4qIEByZXR1cm5zIHtTaWduYXR1cmV9IC0gc2lnbmF0dXJlXG4qL1xuRUREU0EucHJvdG90eXBlLnNpZ24gPSBmdW5jdGlvbiBzaWduKG1lc3NhZ2UsIHNlY3JldCkge1xuICBtZXNzYWdlID0gcGFyc2VCeXRlcyhtZXNzYWdlKTtcbiAgdmFyIGtleSA9IHRoaXMua2V5RnJvbVNlY3JldChzZWNyZXQpO1xuICB2YXIgciA9IHRoaXMuaGFzaEludChrZXkubWVzc2FnZVByZWZpeCgpLCBtZXNzYWdlKTtcbiAgdmFyIFIgPSB0aGlzLmcubXVsKHIpO1xuICB2YXIgUmVuY29kZWQgPSB0aGlzLmVuY29kZVBvaW50KFIpO1xuICB2YXIgc18gPSB0aGlzLmhhc2hJbnQoUmVuY29kZWQsIGtleS5wdWJCeXRlcygpLCBtZXNzYWdlKVxuICAgICAgICAgICAgICAgLm11bChrZXkucHJpdigpKTtcbiAgdmFyIFMgPSByLmFkZChzXykudW1vZCh0aGlzLmN1cnZlLm4pO1xuICByZXR1cm4gdGhpcy5tYWtlU2lnbmF0dXJlKHsgUjogUiwgUzogUywgUmVuY29kZWQ6IFJlbmNvZGVkIH0pO1xufTtcblxuLyoqXG4qIEBwYXJhbSB7QXJyYXl9IG1lc3NhZ2UgLSBtZXNzYWdlIGJ5dGVzXG4qIEBwYXJhbSB7QXJyYXl8U3RyaW5nfFNpZ25hdHVyZX0gc2lnIC0gc2lnIGJ5dGVzXG4qIEBwYXJhbSB7QXJyYXl8U3RyaW5nfFBvaW50fEtleVBhaXJ9IHB1YiAtIHB1YmxpYyBrZXlcbiogQHJldHVybnMge0Jvb2xlYW59IC0gdHJ1ZSBpZiBwdWJsaWMga2V5IG1hdGNoZXMgc2lnIG9mIG1lc3NhZ2VcbiovXG5FRERTQS5wcm90b3R5cGUudmVyaWZ5ID0gZnVuY3Rpb24gdmVyaWZ5KG1lc3NhZ2UsIHNpZywgcHViKSB7XG4gIG1lc3NhZ2UgPSBwYXJzZUJ5dGVzKG1lc3NhZ2UpO1xuICBzaWcgPSB0aGlzLm1ha2VTaWduYXR1cmUoc2lnKTtcbiAgdmFyIGtleSA9IHRoaXMua2V5RnJvbVB1YmxpYyhwdWIpO1xuICB2YXIgaCA9IHRoaXMuaGFzaEludChzaWcuUmVuY29kZWQoKSwga2V5LnB1YkJ5dGVzKCksIG1lc3NhZ2UpO1xuICB2YXIgU0cgPSB0aGlzLmcubXVsKHNpZy5TKCkpO1xuICB2YXIgUnBsdXNBaCA9IHNpZy5SKCkuYWRkKGtleS5wdWIoKS5tdWwoaCkpO1xuICByZXR1cm4gUnBsdXNBaC5lcShTRyk7XG59O1xuXG5FRERTQS5wcm90b3R5cGUuaGFzaEludCA9IGZ1bmN0aW9uIGhhc2hJbnQoKSB7XG4gIHZhciBoYXNoID0gdGhpcy5oYXNoKCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKVxuICAgIGhhc2gudXBkYXRlKGFyZ3VtZW50c1tpXSk7XG4gIHJldHVybiB1dGlscy5pbnRGcm9tTEUoaGFzaC5kaWdlc3QoKSkudW1vZCh0aGlzLmN1cnZlLm4pO1xufTtcblxuRUREU0EucHJvdG90eXBlLmtleUZyb21QdWJsaWMgPSBmdW5jdGlvbiBrZXlGcm9tUHVibGljKHB1Yikge1xuICByZXR1cm4gS2V5UGFpci5mcm9tUHVibGljKHRoaXMsIHB1Yik7XG59O1xuXG5FRERTQS5wcm90b3R5cGUua2V5RnJvbVNlY3JldCA9IGZ1bmN0aW9uIGtleUZyb21TZWNyZXQoc2VjcmV0KSB7XG4gIHJldHVybiBLZXlQYWlyLmZyb21TZWNyZXQodGhpcywgc2VjcmV0KTtcbn07XG5cbkVERFNBLnByb3RvdHlwZS5tYWtlU2lnbmF0dXJlID0gZnVuY3Rpb24gbWFrZVNpZ25hdHVyZShzaWcpIHtcbiAgaWYgKHNpZyBpbnN0YW5jZW9mIFNpZ25hdHVyZSlcbiAgICByZXR1cm4gc2lnO1xuICByZXR1cm4gbmV3IFNpZ25hdHVyZSh0aGlzLCBzaWcpO1xufTtcblxuLyoqXG4qICogaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL2RyYWZ0LWpvc2Vmc3Nvbi1lZGRzYS1lZDI1NTE5LTAzI3NlY3Rpb24tNS4yXG4qXG4qIEVERFNBIGRlZmluZXMgbWV0aG9kcyBmb3IgZW5jb2RpbmcgYW5kIGRlY29kaW5nIHBvaW50cyBhbmQgaW50ZWdlcnMuIFRoZXNlIGFyZVxuKiBoZWxwZXIgY29udmVuaWVuY2UgbWV0aG9kcywgdGhhdCBwYXNzIGFsb25nIHRvIHV0aWxpdHkgZnVuY3Rpb25zIGltcGxpZWRcbiogcGFyYW1ldGVycy5cbipcbiovXG5FRERTQS5wcm90b3R5cGUuZW5jb2RlUG9pbnQgPSBmdW5jdGlvbiBlbmNvZGVQb2ludChwb2ludCkge1xuICB2YXIgZW5jID0gcG9pbnQuZ2V0WSgpLnRvQXJyYXkoJ2xlJywgdGhpcy5lbmNvZGluZ0xlbmd0aCk7XG4gIGVuY1t0aGlzLmVuY29kaW5nTGVuZ3RoIC0gMV0gfD0gcG9pbnQuZ2V0WCgpLmlzT2RkKCkgPyAweDgwIDogMDtcbiAgcmV0dXJuIGVuYztcbn07XG5cbkVERFNBLnByb3RvdHlwZS5kZWNvZGVQb2ludCA9IGZ1bmN0aW9uIGRlY29kZVBvaW50KGJ5dGVzKSB7XG4gIGJ5dGVzID0gdXRpbHMucGFyc2VCeXRlcyhieXRlcyk7XG5cbiAgdmFyIGxhc3RJeCA9IGJ5dGVzLmxlbmd0aCAtIDE7XG4gIHZhciBub3JtZWQgPSBieXRlcy5zbGljZSgwLCBsYXN0SXgpLmNvbmNhdChieXRlc1tsYXN0SXhdICYgfjB4ODApO1xuICB2YXIgeElzT2RkID0gKGJ5dGVzW2xhc3RJeF0gJiAweDgwKSAhPT0gMDtcblxuICB2YXIgeSA9IHV0aWxzLmludEZyb21MRShub3JtZWQpO1xuICByZXR1cm4gdGhpcy5jdXJ2ZS5wb2ludEZyb21ZKHksIHhJc09kZCk7XG59O1xuXG5FRERTQS5wcm90b3R5cGUuZW5jb2RlSW50ID0gZnVuY3Rpb24gZW5jb2RlSW50KG51bSkge1xuICByZXR1cm4gbnVtLnRvQXJyYXkoJ2xlJywgdGhpcy5lbmNvZGluZ0xlbmd0aCk7XG59O1xuXG5FRERTQS5wcm90b3R5cGUuZGVjb2RlSW50ID0gZnVuY3Rpb24gZGVjb2RlSW50KGJ5dGVzKSB7XG4gIHJldHVybiB1dGlscy5pbnRGcm9tTEUoYnl0ZXMpO1xufTtcblxuRUREU0EucHJvdG90eXBlLmlzUG9pbnQgPSBmdW5jdGlvbiBpc1BvaW50KHZhbCkge1xuICByZXR1cm4gdmFsIGluc3RhbmNlb2YgdGhpcy5wb2ludENsYXNzO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcbnZhciBhc3NlcnQgPSB1dGlscy5hc3NlcnQ7XG52YXIgcGFyc2VCeXRlcyA9IHV0aWxzLnBhcnNlQnl0ZXM7XG52YXIgY2FjaGVkUHJvcGVydHkgPSB1dGlscy5jYWNoZWRQcm9wZXJ0eTtcblxuLyoqXG4qIEBwYXJhbSB7RUREU0F9IGVkZHNhIC0gaW5zdGFuY2VcbiogQHBhcmFtIHtPYmplY3R9IHBhcmFtcyAtIHB1YmxpYy9wcml2YXRlIGtleSBwYXJhbWV0ZXJzXG4qXG4qIEBwYXJhbSB7QXJyYXk8Qnl0ZT59IFtwYXJhbXMuc2VjcmV0XSAtIHNlY3JldCBzZWVkIGJ5dGVzXG4qIEBwYXJhbSB7UG9pbnR9IFtwYXJhbXMucHViXSAtIHB1YmxpYyBrZXkgcG9pbnQgKGFrYSBgQWAgaW4gZWRkc2EgdGVybXMpXG4qIEBwYXJhbSB7QXJyYXk8Qnl0ZT59IFtwYXJhbXMucHViXSAtIHB1YmxpYyBrZXkgcG9pbnQgZW5jb2RlZCBhcyBieXRlc1xuKlxuKi9cbmZ1bmN0aW9uIEtleVBhaXIoZWRkc2EsIHBhcmFtcykge1xuICB0aGlzLmVkZHNhID0gZWRkc2E7XG4gIHRoaXMuX3NlY3JldCA9IHBhcnNlQnl0ZXMocGFyYW1zLnNlY3JldCk7XG4gIGlmIChlZGRzYS5pc1BvaW50KHBhcmFtcy5wdWIpKVxuICAgIHRoaXMuX3B1YiA9IHBhcmFtcy5wdWI7XG4gIGVsc2VcbiAgICB0aGlzLl9wdWJCeXRlcyA9IHBhcnNlQnl0ZXMocGFyYW1zLnB1Yik7XG59XG5cbktleVBhaXIuZnJvbVB1YmxpYyA9IGZ1bmN0aW9uIGZyb21QdWJsaWMoZWRkc2EsIHB1Yikge1xuICBpZiAocHViIGluc3RhbmNlb2YgS2V5UGFpcilcbiAgICByZXR1cm4gcHViO1xuICByZXR1cm4gbmV3IEtleVBhaXIoZWRkc2EsIHsgcHViOiBwdWIgfSk7XG59O1xuXG5LZXlQYWlyLmZyb21TZWNyZXQgPSBmdW5jdGlvbiBmcm9tU2VjcmV0KGVkZHNhLCBzZWNyZXQpIHtcbiAgaWYgKHNlY3JldCBpbnN0YW5jZW9mIEtleVBhaXIpXG4gICAgcmV0dXJuIHNlY3JldDtcbiAgcmV0dXJuIG5ldyBLZXlQYWlyKGVkZHNhLCB7IHNlY3JldDogc2VjcmV0IH0pO1xufTtcblxuS2V5UGFpci5wcm90b3R5cGUuc2VjcmV0ID0gZnVuY3Rpb24gc2VjcmV0KCkge1xuICByZXR1cm4gdGhpcy5fc2VjcmV0O1xufTtcblxuY2FjaGVkUHJvcGVydHkoS2V5UGFpciwgJ3B1YkJ5dGVzJywgZnVuY3Rpb24gcHViQnl0ZXMoKSB7XG4gIHJldHVybiB0aGlzLmVkZHNhLmVuY29kZVBvaW50KHRoaXMucHViKCkpO1xufSk7XG5cbmNhY2hlZFByb3BlcnR5KEtleVBhaXIsICdwdWInLCBmdW5jdGlvbiBwdWIoKSB7XG4gIGlmICh0aGlzLl9wdWJCeXRlcylcbiAgICByZXR1cm4gdGhpcy5lZGRzYS5kZWNvZGVQb2ludCh0aGlzLl9wdWJCeXRlcyk7XG4gIHJldHVybiB0aGlzLmVkZHNhLmcubXVsKHRoaXMucHJpdigpKTtcbn0pO1xuXG5jYWNoZWRQcm9wZXJ0eShLZXlQYWlyLCAncHJpdkJ5dGVzJywgZnVuY3Rpb24gcHJpdkJ5dGVzKCkge1xuICB2YXIgZWRkc2EgPSB0aGlzLmVkZHNhO1xuICB2YXIgaGFzaCA9IHRoaXMuaGFzaCgpO1xuICB2YXIgbGFzdEl4ID0gZWRkc2EuZW5jb2RpbmdMZW5ndGggLSAxO1xuXG4gIHZhciBhID0gaGFzaC5zbGljZSgwLCBlZGRzYS5lbmNvZGluZ0xlbmd0aCk7XG4gIGFbMF0gJj0gMjQ4O1xuICBhW2xhc3RJeF0gJj0gMTI3O1xuICBhW2xhc3RJeF0gfD0gNjQ7XG5cbiAgcmV0dXJuIGE7XG59KTtcblxuY2FjaGVkUHJvcGVydHkoS2V5UGFpciwgJ3ByaXYnLCBmdW5jdGlvbiBwcml2KCkge1xuICByZXR1cm4gdGhpcy5lZGRzYS5kZWNvZGVJbnQodGhpcy5wcml2Qnl0ZXMoKSk7XG59KTtcblxuY2FjaGVkUHJvcGVydHkoS2V5UGFpciwgJ2hhc2gnLCBmdW5jdGlvbiBoYXNoKCkge1xuICByZXR1cm4gdGhpcy5lZGRzYS5oYXNoKCkudXBkYXRlKHRoaXMuc2VjcmV0KCkpLmRpZ2VzdCgpO1xufSk7XG5cbmNhY2hlZFByb3BlcnR5KEtleVBhaXIsICdtZXNzYWdlUHJlZml4JywgZnVuY3Rpb24gbWVzc2FnZVByZWZpeCgpIHtcbiAgcmV0dXJuIHRoaXMuaGFzaCgpLnNsaWNlKHRoaXMuZWRkc2EuZW5jb2RpbmdMZW5ndGgpO1xufSk7XG5cbktleVBhaXIucHJvdG90eXBlLnNpZ24gPSBmdW5jdGlvbiBzaWduKG1lc3NhZ2UpIHtcbiAgYXNzZXJ0KHRoaXMuX3NlY3JldCwgJ0tleVBhaXIgY2FuIG9ubHkgdmVyaWZ5Jyk7XG4gIHJldHVybiB0aGlzLmVkZHNhLnNpZ24obWVzc2FnZSwgdGhpcyk7XG59O1xuXG5LZXlQYWlyLnByb3RvdHlwZS52ZXJpZnkgPSBmdW5jdGlvbiB2ZXJpZnkobWVzc2FnZSwgc2lnKSB7XG4gIHJldHVybiB0aGlzLmVkZHNhLnZlcmlmeShtZXNzYWdlLCBzaWcsIHRoaXMpO1xufTtcblxuS2V5UGFpci5wcm90b3R5cGUuZ2V0U2VjcmV0ID0gZnVuY3Rpb24gZ2V0U2VjcmV0KGVuYykge1xuICBhc3NlcnQodGhpcy5fc2VjcmV0LCAnS2V5UGFpciBpcyBwdWJsaWMgb25seScpO1xuICByZXR1cm4gdXRpbHMuZW5jb2RlKHRoaXMuc2VjcmV0KCksIGVuYyk7XG59O1xuXG5LZXlQYWlyLnByb3RvdHlwZS5nZXRQdWJsaWMgPSBmdW5jdGlvbiBnZXRQdWJsaWMoZW5jKSB7XG4gIHJldHVybiB1dGlscy5lbmNvZGUodGhpcy5wdWJCeXRlcygpLCBlbmMpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBLZXlQYWlyO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQk4gPSByZXF1aXJlKCdibi5qcycpO1xudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcbnZhciBhc3NlcnQgPSB1dGlscy5hc3NlcnQ7XG52YXIgY2FjaGVkUHJvcGVydHkgPSB1dGlscy5jYWNoZWRQcm9wZXJ0eTtcbnZhciBwYXJzZUJ5dGVzID0gdXRpbHMucGFyc2VCeXRlcztcblxuLyoqXG4qIEBwYXJhbSB7RUREU0F9IGVkZHNhIC0gZWRkc2EgaW5zdGFuY2VcbiogQHBhcmFtIHtBcnJheTxCeXRlcz58T2JqZWN0fSBzaWcgLVxuKiBAcGFyYW0ge0FycmF5PEJ5dGVzPnxQb2ludH0gW3NpZy5SXSAtIFIgcG9pbnQgYXMgUG9pbnQgb3IgYnl0ZXNcbiogQHBhcmFtIHtBcnJheTxCeXRlcz58Ym59IFtzaWcuU10gLSBTIHNjYWxhciBhcyBibiBvciBieXRlc1xuKiBAcGFyYW0ge0FycmF5PEJ5dGVzPn0gW3NpZy5SZW5jb2RlZF0gLSBSIHBvaW50IGVuY29kZWRcbiogQHBhcmFtIHtBcnJheTxCeXRlcz59IFtzaWcuU2VuY29kZWRdIC0gUyBzY2FsYXIgZW5jb2RlZFxuKi9cbmZ1bmN0aW9uIFNpZ25hdHVyZShlZGRzYSwgc2lnKSB7XG4gIHRoaXMuZWRkc2EgPSBlZGRzYTtcblxuICBpZiAodHlwZW9mIHNpZyAhPT0gJ29iamVjdCcpXG4gICAgc2lnID0gcGFyc2VCeXRlcyhzaWcpO1xuXG4gIGlmIChBcnJheS5pc0FycmF5KHNpZykpIHtcbiAgICBzaWcgPSB7XG4gICAgICBSOiBzaWcuc2xpY2UoMCwgZWRkc2EuZW5jb2RpbmdMZW5ndGgpLFxuICAgICAgUzogc2lnLnNsaWNlKGVkZHNhLmVuY29kaW5nTGVuZ3RoKVxuICAgIH07XG4gIH1cblxuICBhc3NlcnQoc2lnLlIgJiYgc2lnLlMsICdTaWduYXR1cmUgd2l0aG91dCBSIG9yIFMnKTtcblxuICBpZiAoZWRkc2EuaXNQb2ludChzaWcuUikpXG4gICAgdGhpcy5fUiA9IHNpZy5SO1xuICBpZiAoc2lnLlMgaW5zdGFuY2VvZiBCTilcbiAgICB0aGlzLl9TID0gc2lnLlM7XG5cbiAgdGhpcy5fUmVuY29kZWQgPSBBcnJheS5pc0FycmF5KHNpZy5SKSA/IHNpZy5SIDogc2lnLlJlbmNvZGVkO1xuICB0aGlzLl9TZW5jb2RlZCA9IEFycmF5LmlzQXJyYXkoc2lnLlMpID8gc2lnLlMgOiBzaWcuU2VuY29kZWQ7XG59XG5cbmNhY2hlZFByb3BlcnR5KFNpZ25hdHVyZSwgJ1MnLCBmdW5jdGlvbiBTKCkge1xuICByZXR1cm4gdGhpcy5lZGRzYS5kZWNvZGVJbnQodGhpcy5TZW5jb2RlZCgpKTtcbn0pO1xuXG5jYWNoZWRQcm9wZXJ0eShTaWduYXR1cmUsICdSJywgZnVuY3Rpb24gUigpIHtcbiAgcmV0dXJuIHRoaXMuZWRkc2EuZGVjb2RlUG9pbnQodGhpcy5SZW5jb2RlZCgpKTtcbn0pO1xuXG5jYWNoZWRQcm9wZXJ0eShTaWduYXR1cmUsICdSZW5jb2RlZCcsIGZ1bmN0aW9uIFJlbmNvZGVkKCkge1xuICByZXR1cm4gdGhpcy5lZGRzYS5lbmNvZGVQb2ludCh0aGlzLlIoKSk7XG59KTtcblxuY2FjaGVkUHJvcGVydHkoU2lnbmF0dXJlLCAnU2VuY29kZWQnLCBmdW5jdGlvbiBTZW5jb2RlZCgpIHtcbiAgcmV0dXJuIHRoaXMuZWRkc2EuZW5jb2RlSW50KHRoaXMuUygpKTtcbn0pO1xuXG5TaWduYXR1cmUucHJvdG90eXBlLnRvQnl0ZXMgPSBmdW5jdGlvbiB0b0J5dGVzKCkge1xuICByZXR1cm4gdGhpcy5SZW5jb2RlZCgpLmNvbmNhdCh0aGlzLlNlbmNvZGVkKCkpO1xufTtcblxuU2lnbmF0dXJlLnByb3RvdHlwZS50b0hleCA9IGZ1bmN0aW9uIHRvSGV4KCkge1xuICByZXR1cm4gdXRpbHMuZW5jb2RlKHRoaXMudG9CeXRlcygpLCAnaGV4JykudG9VcHBlckNhc2UoKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gU2lnbmF0dXJlO1xuIiwiLy8gZnJvbSBodHRwczovL2dpdGh1Yi5jb20vaW5kdXRueS9zZWxmLXNpZ25lZC9ibG9iL2doLXBhZ2VzL2xpYi9hc24xLmpzXG4vLyBGZWRvciwgeW91IGFyZSBhbWF6aW5nLlxuJ3VzZSBzdHJpY3QnXG5cbnZhciBhc24xID0gcmVxdWlyZSgnYXNuMS5qcycpXG5cbmV4cG9ydHMuY2VydGlmaWNhdGUgPSByZXF1aXJlKCcuL2NlcnRpZmljYXRlJylcblxudmFyIFJTQVByaXZhdGVLZXkgPSBhc24xLmRlZmluZSgnUlNBUHJpdmF0ZUtleScsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5zZXEoKS5vYmooXG4gICAgdGhpcy5rZXkoJ3ZlcnNpb24nKS5pbnQoKSxcbiAgICB0aGlzLmtleSgnbW9kdWx1cycpLmludCgpLFxuICAgIHRoaXMua2V5KCdwdWJsaWNFeHBvbmVudCcpLmludCgpLFxuICAgIHRoaXMua2V5KCdwcml2YXRlRXhwb25lbnQnKS5pbnQoKSxcbiAgICB0aGlzLmtleSgncHJpbWUxJykuaW50KCksXG4gICAgdGhpcy5rZXkoJ3ByaW1lMicpLmludCgpLFxuICAgIHRoaXMua2V5KCdleHBvbmVudDEnKS5pbnQoKSxcbiAgICB0aGlzLmtleSgnZXhwb25lbnQyJykuaW50KCksXG4gICAgdGhpcy5rZXkoJ2NvZWZmaWNpZW50JykuaW50KClcbiAgKVxufSlcbmV4cG9ydHMuUlNBUHJpdmF0ZUtleSA9IFJTQVByaXZhdGVLZXlcblxudmFyIFJTQVB1YmxpY0tleSA9IGFzbjEuZGVmaW5lKCdSU0FQdWJsaWNLZXknLCBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuc2VxKCkub2JqKFxuICAgIHRoaXMua2V5KCdtb2R1bHVzJykuaW50KCksXG4gICAgdGhpcy5rZXkoJ3B1YmxpY0V4cG9uZW50JykuaW50KClcbiAgKVxufSlcbmV4cG9ydHMuUlNBUHVibGljS2V5ID0gUlNBUHVibGljS2V5XG5cbnZhciBQdWJsaWNLZXkgPSBhc24xLmRlZmluZSgnU3ViamVjdFB1YmxpY0tleUluZm8nLCBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuc2VxKCkub2JqKFxuICAgIHRoaXMua2V5KCdhbGdvcml0aG0nKS51c2UoQWxnb3JpdGhtSWRlbnRpZmllciksXG4gICAgdGhpcy5rZXkoJ3N1YmplY3RQdWJsaWNLZXknKS5iaXRzdHIoKVxuICApXG59KVxuZXhwb3J0cy5QdWJsaWNLZXkgPSBQdWJsaWNLZXlcblxudmFyIEFsZ29yaXRobUlkZW50aWZpZXIgPSBhc24xLmRlZmluZSgnQWxnb3JpdGhtSWRlbnRpZmllcicsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5zZXEoKS5vYmooXG4gICAgdGhpcy5rZXkoJ2FsZ29yaXRobScpLm9iamlkKCksXG4gICAgdGhpcy5rZXkoJ25vbmUnKS5udWxsXygpLm9wdGlvbmFsKCksXG4gICAgdGhpcy5rZXkoJ2N1cnZlJykub2JqaWQoKS5vcHRpb25hbCgpLFxuICAgIHRoaXMua2V5KCdwYXJhbXMnKS5zZXEoKS5vYmooXG4gICAgICB0aGlzLmtleSgncCcpLmludCgpLFxuICAgICAgdGhpcy5rZXkoJ3EnKS5pbnQoKSxcbiAgICAgIHRoaXMua2V5KCdnJykuaW50KClcbiAgICApLm9wdGlvbmFsKClcbiAgKVxufSlcblxudmFyIFByaXZhdGVLZXlJbmZvID0gYXNuMS5kZWZpbmUoJ1ByaXZhdGVLZXlJbmZvJywgZnVuY3Rpb24gKCkge1xuICB0aGlzLnNlcSgpLm9iaihcbiAgICB0aGlzLmtleSgndmVyc2lvbicpLmludCgpLFxuICAgIHRoaXMua2V5KCdhbGdvcml0aG0nKS51c2UoQWxnb3JpdGhtSWRlbnRpZmllciksXG4gICAgdGhpcy5rZXkoJ3N1YmplY3RQcml2YXRlS2V5Jykub2N0c3RyKClcbiAgKVxufSlcbmV4cG9ydHMuUHJpdmF0ZUtleSA9IFByaXZhdGVLZXlJbmZvXG52YXIgRW5jcnlwdGVkUHJpdmF0ZUtleUluZm8gPSBhc24xLmRlZmluZSgnRW5jcnlwdGVkUHJpdmF0ZUtleUluZm8nLCBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuc2VxKCkub2JqKFxuICAgIHRoaXMua2V5KCdhbGdvcml0aG0nKS5zZXEoKS5vYmooXG4gICAgICB0aGlzLmtleSgnaWQnKS5vYmppZCgpLFxuICAgICAgdGhpcy5rZXkoJ2RlY3J5cHQnKS5zZXEoKS5vYmooXG4gICAgICAgIHRoaXMua2V5KCdrZGUnKS5zZXEoKS5vYmooXG4gICAgICAgICAgdGhpcy5rZXkoJ2lkJykub2JqaWQoKSxcbiAgICAgICAgICB0aGlzLmtleSgna2RlcGFyYW1zJykuc2VxKCkub2JqKFxuICAgICAgICAgICAgdGhpcy5rZXkoJ3NhbHQnKS5vY3RzdHIoKSxcbiAgICAgICAgICAgIHRoaXMua2V5KCdpdGVycycpLmludCgpXG4gICAgICAgICAgKVxuICAgICAgICApLFxuICAgICAgICB0aGlzLmtleSgnY2lwaGVyJykuc2VxKCkub2JqKFxuICAgICAgICAgIHRoaXMua2V5KCdhbGdvJykub2JqaWQoKSxcbiAgICAgICAgICB0aGlzLmtleSgnaXYnKS5vY3RzdHIoKVxuICAgICAgICApXG4gICAgICApXG4gICAgKSxcbiAgICB0aGlzLmtleSgnc3ViamVjdFByaXZhdGVLZXknKS5vY3RzdHIoKVxuICApXG59KVxuXG5leHBvcnRzLkVuY3J5cHRlZFByaXZhdGVLZXkgPSBFbmNyeXB0ZWRQcml2YXRlS2V5SW5mb1xuXG52YXIgRFNBUHJpdmF0ZUtleSA9IGFzbjEuZGVmaW5lKCdEU0FQcml2YXRlS2V5JywgZnVuY3Rpb24gKCkge1xuICB0aGlzLnNlcSgpLm9iaihcbiAgICB0aGlzLmtleSgndmVyc2lvbicpLmludCgpLFxuICAgIHRoaXMua2V5KCdwJykuaW50KCksXG4gICAgdGhpcy5rZXkoJ3EnKS5pbnQoKSxcbiAgICB0aGlzLmtleSgnZycpLmludCgpLFxuICAgIHRoaXMua2V5KCdwdWJfa2V5JykuaW50KCksXG4gICAgdGhpcy5rZXkoJ3ByaXZfa2V5JykuaW50KClcbiAgKVxufSlcbmV4cG9ydHMuRFNBUHJpdmF0ZUtleSA9IERTQVByaXZhdGVLZXlcblxuZXhwb3J0cy5EU0FwYXJhbSA9IGFzbjEuZGVmaW5lKCdEU0FwYXJhbScsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5pbnQoKVxufSlcblxudmFyIEVDUHJpdmF0ZUtleSA9IGFzbjEuZGVmaW5lKCdFQ1ByaXZhdGVLZXknLCBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuc2VxKCkub2JqKFxuICAgIHRoaXMua2V5KCd2ZXJzaW9uJykuaW50KCksXG4gICAgdGhpcy5rZXkoJ3ByaXZhdGVLZXknKS5vY3RzdHIoKSxcbiAgICB0aGlzLmtleSgncGFyYW1ldGVycycpLm9wdGlvbmFsKCkuZXhwbGljaXQoMCkudXNlKEVDUGFyYW1ldGVycyksXG4gICAgdGhpcy5rZXkoJ3B1YmxpY0tleScpLm9wdGlvbmFsKCkuZXhwbGljaXQoMSkuYml0c3RyKClcbiAgKVxufSlcbmV4cG9ydHMuRUNQcml2YXRlS2V5ID0gRUNQcml2YXRlS2V5XG5cbnZhciBFQ1BhcmFtZXRlcnMgPSBhc24xLmRlZmluZSgnRUNQYXJhbWV0ZXJzJywgZnVuY3Rpb24gKCkge1xuICB0aGlzLmNob2ljZSh7XG4gICAgbmFtZWRDdXJ2ZTogdGhpcy5vYmppZCgpXG4gIH0pXG59KVxuXG5leHBvcnRzLnNpZ25hdHVyZSA9IGFzbjEuZGVmaW5lKCdzaWduYXR1cmUnLCBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuc2VxKCkub2JqKFxuICAgIHRoaXMua2V5KCdyJykuaW50KCksXG4gICAgdGhpcy5rZXkoJ3MnKS5pbnQoKVxuICApXG59KVxuIiwidmFyIGFzbjEgPSByZXF1aXJlKCcuLi9hc24xJyk7XG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuXG52YXIgYXBpID0gZXhwb3J0cztcblxuYXBpLmRlZmluZSA9IGZ1bmN0aW9uIGRlZmluZShuYW1lLCBib2R5KSB7XG4gIHJldHVybiBuZXcgRW50aXR5KG5hbWUsIGJvZHkpO1xufTtcblxuZnVuY3Rpb24gRW50aXR5KG5hbWUsIGJvZHkpIHtcbiAgdGhpcy5uYW1lID0gbmFtZTtcbiAgdGhpcy5ib2R5ID0gYm9keTtcblxuICB0aGlzLmRlY29kZXJzID0ge307XG4gIHRoaXMuZW5jb2RlcnMgPSB7fTtcbn07XG5cbkVudGl0eS5wcm90b3R5cGUuX2NyZWF0ZU5hbWVkID0gZnVuY3Rpb24gY3JlYXRlTmFtZWQoYmFzZSkge1xuICB2YXIgbmFtZWQ7XG4gIHRyeSB7XG4gICAgbmFtZWQgPSByZXF1aXJlKCd2bScpLnJ1bkluVGhpc0NvbnRleHQoXG4gICAgICAnKGZ1bmN0aW9uICcgKyB0aGlzLm5hbWUgKyAnKGVudGl0eSkge1xcbicgK1xuICAgICAgJyAgdGhpcy5faW5pdE5hbWVkKGVudGl0eSk7XFxuJyArXG4gICAgICAnfSknXG4gICAgKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIG5hbWVkID0gZnVuY3Rpb24gKGVudGl0eSkge1xuICAgICAgdGhpcy5faW5pdE5hbWVkKGVudGl0eSk7XG4gICAgfTtcbiAgfVxuICBpbmhlcml0cyhuYW1lZCwgYmFzZSk7XG4gIG5hbWVkLnByb3RvdHlwZS5faW5pdE5hbWVkID0gZnVuY3Rpb24gaW5pdG5hbWVkKGVudGl0eSkge1xuICAgIGJhc2UuY2FsbCh0aGlzLCBlbnRpdHkpO1xuICB9O1xuXG4gIHJldHVybiBuZXcgbmFtZWQodGhpcyk7XG59O1xuXG5FbnRpdHkucHJvdG90eXBlLl9nZXREZWNvZGVyID0gZnVuY3Rpb24gX2dldERlY29kZXIoZW5jKSB7XG4gIGVuYyA9IGVuYyB8fCAnZGVyJztcbiAgLy8gTGF6aWx5IGNyZWF0ZSBkZWNvZGVyXG4gIGlmICghdGhpcy5kZWNvZGVycy5oYXNPd25Qcm9wZXJ0eShlbmMpKVxuICAgIHRoaXMuZGVjb2RlcnNbZW5jXSA9IHRoaXMuX2NyZWF0ZU5hbWVkKGFzbjEuZGVjb2RlcnNbZW5jXSk7XG4gIHJldHVybiB0aGlzLmRlY29kZXJzW2VuY107XG59O1xuXG5FbnRpdHkucHJvdG90eXBlLmRlY29kZSA9IGZ1bmN0aW9uIGRlY29kZShkYXRhLCBlbmMsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHRoaXMuX2dldERlY29kZXIoZW5jKS5kZWNvZGUoZGF0YSwgb3B0aW9ucyk7XG59O1xuXG5FbnRpdHkucHJvdG90eXBlLl9nZXRFbmNvZGVyID0gZnVuY3Rpb24gX2dldEVuY29kZXIoZW5jKSB7XG4gIGVuYyA9IGVuYyB8fCAnZGVyJztcbiAgLy8gTGF6aWx5IGNyZWF0ZSBlbmNvZGVyXG4gIGlmICghdGhpcy5lbmNvZGVycy5oYXNPd25Qcm9wZXJ0eShlbmMpKVxuICAgIHRoaXMuZW5jb2RlcnNbZW5jXSA9IHRoaXMuX2NyZWF0ZU5hbWVkKGFzbjEuZW5jb2RlcnNbZW5jXSk7XG4gIHJldHVybiB0aGlzLmVuY29kZXJzW2VuY107XG59O1xuXG5FbnRpdHkucHJvdG90eXBlLmVuY29kZSA9IGZ1bmN0aW9uIGVuY29kZShkYXRhLCBlbmMsIC8qIGludGVybmFsICovIHJlcG9ydGVyKSB7XG4gIHJldHVybiB0aGlzLl9nZXRFbmNvZGVyKGVuYykuZW5jb2RlKGRhdGEsIHJlcG9ydGVyKTtcbn07XG4iLCJ2YXIgaW5kZXhPZiA9IGZ1bmN0aW9uICh4cywgaXRlbSkge1xuICAgIGlmICh4cy5pbmRleE9mKSByZXR1cm4geHMuaW5kZXhPZihpdGVtKTtcbiAgICBlbHNlIGZvciAodmFyIGkgPSAwOyBpIDwgeHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKHhzW2ldID09PSBpdGVtKSByZXR1cm4gaTtcbiAgICB9XG4gICAgcmV0dXJuIC0xO1xufTtcbnZhciBPYmplY3Rfa2V5cyA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICBpZiAoT2JqZWN0LmtleXMpIHJldHVybiBPYmplY3Qua2V5cyhvYmopXG4gICAgZWxzZSB7XG4gICAgICAgIHZhciByZXMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIG9iaikgcmVzLnB1c2goa2V5KVxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cbn07XG5cbnZhciBmb3JFYWNoID0gZnVuY3Rpb24gKHhzLCBmbikge1xuICAgIGlmICh4cy5mb3JFYWNoKSByZXR1cm4geHMuZm9yRWFjaChmbilcbiAgICBlbHNlIGZvciAodmFyIGkgPSAwOyBpIDwgeHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgZm4oeHNbaV0sIGksIHhzKTtcbiAgICB9XG59O1xuXG52YXIgZGVmaW5lUHJvcCA9IChmdW5jdGlvbigpIHtcbiAgICB0cnkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdfJywge30pO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24ob2JqLCBuYW1lLCB2YWx1ZSkge1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwgbmFtZSwge1xuICAgICAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWVcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH07XG4gICAgfSBjYXRjaChlKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbihvYmosIG5hbWUsIHZhbHVlKSB7XG4gICAgICAgICAgICBvYmpbbmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgfTtcbiAgICB9XG59KCkpO1xuXG52YXIgZ2xvYmFscyA9IFsnQXJyYXknLCAnQm9vbGVhbicsICdEYXRlJywgJ0Vycm9yJywgJ0V2YWxFcnJvcicsICdGdW5jdGlvbicsXG4nSW5maW5pdHknLCAnSlNPTicsICdNYXRoJywgJ05hTicsICdOdW1iZXInLCAnT2JqZWN0JywgJ1JhbmdlRXJyb3InLFxuJ1JlZmVyZW5jZUVycm9yJywgJ1JlZ0V4cCcsICdTdHJpbmcnLCAnU3ludGF4RXJyb3InLCAnVHlwZUVycm9yJywgJ1VSSUVycm9yJyxcbidkZWNvZGVVUkknLCAnZGVjb2RlVVJJQ29tcG9uZW50JywgJ2VuY29kZVVSSScsICdlbmNvZGVVUklDb21wb25lbnQnLCAnZXNjYXBlJyxcbidldmFsJywgJ2lzRmluaXRlJywgJ2lzTmFOJywgJ3BhcnNlRmxvYXQnLCAncGFyc2VJbnQnLCAndW5kZWZpbmVkJywgJ3VuZXNjYXBlJ107XG5cbmZ1bmN0aW9uIENvbnRleHQoKSB7fVxuQ29udGV4dC5wcm90b3R5cGUgPSB7fTtcblxudmFyIFNjcmlwdCA9IGV4cG9ydHMuU2NyaXB0ID0gZnVuY3Rpb24gTm9kZVNjcmlwdCAoY29kZSkge1xuICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBTY3JpcHQpKSByZXR1cm4gbmV3IFNjcmlwdChjb2RlKTtcbiAgICB0aGlzLmNvZGUgPSBjb2RlO1xufTtcblxuU2NyaXB0LnByb3RvdHlwZS5ydW5JbkNvbnRleHQgPSBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgIGlmICghKGNvbnRleHQgaW5zdGFuY2VvZiBDb250ZXh0KSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwibmVlZHMgYSAnY29udGV4dCcgYXJndW1lbnQuXCIpO1xuICAgIH1cbiAgICBcbiAgICB2YXIgaWZyYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaWZyYW1lJyk7XG4gICAgaWYgKCFpZnJhbWUuc3R5bGUpIGlmcmFtZS5zdHlsZSA9IHt9O1xuICAgIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgIFxuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcbiAgICBcbiAgICB2YXIgd2luID0gaWZyYW1lLmNvbnRlbnRXaW5kb3c7XG4gICAgdmFyIHdFdmFsID0gd2luLmV2YWwsIHdFeGVjU2NyaXB0ID0gd2luLmV4ZWNTY3JpcHQ7XG5cbiAgICBpZiAoIXdFdmFsICYmIHdFeGVjU2NyaXB0KSB7XG4gICAgICAgIC8vIHdpbi5ldmFsKCkgbWFnaWNhbGx5IGFwcGVhcnMgd2hlbiB0aGlzIGlzIGNhbGxlZCBpbiBJRTpcbiAgICAgICAgd0V4ZWNTY3JpcHQuY2FsbCh3aW4sICdudWxsJyk7XG4gICAgICAgIHdFdmFsID0gd2luLmV2YWw7XG4gICAgfVxuICAgIFxuICAgIGZvckVhY2goT2JqZWN0X2tleXMoY29udGV4dCksIGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgd2luW2tleV0gPSBjb250ZXh0W2tleV07XG4gICAgfSk7XG4gICAgZm9yRWFjaChnbG9iYWxzLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmIChjb250ZXh0W2tleV0pIHtcbiAgICAgICAgICAgIHdpbltrZXldID0gY29udGV4dFtrZXldO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgXG4gICAgdmFyIHdpbktleXMgPSBPYmplY3Rfa2V5cyh3aW4pO1xuXG4gICAgdmFyIHJlcyA9IHdFdmFsLmNhbGwod2luLCB0aGlzLmNvZGUpO1xuICAgIFxuICAgIGZvckVhY2goT2JqZWN0X2tleXMod2luKSwgZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAvLyBBdm9pZCBjb3B5aW5nIGNpcmN1bGFyIG9iamVjdHMgbGlrZSBgdG9wYCBhbmQgYHdpbmRvd2AgYnkgb25seVxuICAgICAgICAvLyB1cGRhdGluZyBleGlzdGluZyBjb250ZXh0IHByb3BlcnRpZXMgb3IgbmV3IHByb3BlcnRpZXMgaW4gdGhlIGB3aW5gXG4gICAgICAgIC8vIHRoYXQgd2FzIG9ubHkgaW50cm9kdWNlZCBhZnRlciB0aGUgZXZhbC5cbiAgICAgICAgaWYgKGtleSBpbiBjb250ZXh0IHx8IGluZGV4T2Yod2luS2V5cywga2V5KSA9PT0gLTEpIHtcbiAgICAgICAgICAgIGNvbnRleHRba2V5XSA9IHdpbltrZXldO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICBmb3JFYWNoKGdsb2JhbHMsIGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKCEoa2V5IGluIGNvbnRleHQpKSB7XG4gICAgICAgICAgICBkZWZpbmVQcm9wKGNvbnRleHQsIGtleSwgd2luW2tleV0pO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgXG4gICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChpZnJhbWUpO1xuICAgIFxuICAgIHJldHVybiByZXM7XG59O1xuXG5TY3JpcHQucHJvdG90eXBlLnJ1bkluVGhpc0NvbnRleHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGV2YWwodGhpcy5jb2RlKTsgLy8gbWF5YmUuLi5cbn07XG5cblNjcmlwdC5wcm90b3R5cGUucnVuSW5OZXdDb250ZXh0ID0gZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICB2YXIgY3R4ID0gU2NyaXB0LmNyZWF0ZUNvbnRleHQoY29udGV4dCk7XG4gICAgdmFyIHJlcyA9IHRoaXMucnVuSW5Db250ZXh0KGN0eCk7XG5cbiAgICBpZiAoY29udGV4dCkge1xuICAgICAgICBmb3JFYWNoKE9iamVjdF9rZXlzKGN0eCksIGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgIGNvbnRleHRba2V5XSA9IGN0eFtrZXldO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzO1xufTtcblxuZm9yRWFjaChPYmplY3Rfa2V5cyhTY3JpcHQucHJvdG90eXBlKSwgZnVuY3Rpb24gKG5hbWUpIHtcbiAgICBleHBvcnRzW25hbWVdID0gU2NyaXB0W25hbWVdID0gZnVuY3Rpb24gKGNvZGUpIHtcbiAgICAgICAgdmFyIHMgPSBTY3JpcHQoY29kZSk7XG4gICAgICAgIHJldHVybiBzW25hbWVdLmFwcGx5KHMsIFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSk7XG4gICAgfTtcbn0pO1xuXG5leHBvcnRzLmlzQ29udGV4dCA9IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgcmV0dXJuIGNvbnRleHQgaW5zdGFuY2VvZiBDb250ZXh0O1xufTtcblxuZXhwb3J0cy5jcmVhdGVTY3JpcHQgPSBmdW5jdGlvbiAoY29kZSkge1xuICAgIHJldHVybiBleHBvcnRzLlNjcmlwdChjb2RlKTtcbn07XG5cbmV4cG9ydHMuY3JlYXRlQ29udGV4dCA9IFNjcmlwdC5jcmVhdGVDb250ZXh0ID0gZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICB2YXIgY29weSA9IG5ldyBDb250ZXh0KCk7XG4gICAgaWYodHlwZW9mIGNvbnRleHQgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIGZvckVhY2goT2JqZWN0X2tleXMoY29udGV4dCksIGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgIGNvcHlba2V5XSA9IGNvbnRleHRba2V5XTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBjb3B5O1xufTtcbiIsInZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG5cbmZ1bmN0aW9uIFJlcG9ydGVyKG9wdGlvbnMpIHtcbiAgdGhpcy5fcmVwb3J0ZXJTdGF0ZSA9IHtcbiAgICBvYmo6IG51bGwsXG4gICAgcGF0aDogW10sXG4gICAgb3B0aW9uczogb3B0aW9ucyB8fCB7fSxcbiAgICBlcnJvcnM6IFtdXG4gIH07XG59XG5leHBvcnRzLlJlcG9ydGVyID0gUmVwb3J0ZXI7XG5cblJlcG9ydGVyLnByb3RvdHlwZS5pc0Vycm9yID0gZnVuY3Rpb24gaXNFcnJvcihvYmopIHtcbiAgcmV0dXJuIG9iaiBpbnN0YW5jZW9mIFJlcG9ydGVyRXJyb3I7XG59O1xuXG5SZXBvcnRlci5wcm90b3R5cGUuc2F2ZSA9IGZ1bmN0aW9uIHNhdmUoKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlcG9ydGVyU3RhdGU7XG5cbiAgcmV0dXJuIHsgb2JqOiBzdGF0ZS5vYmosIHBhdGhMZW46IHN0YXRlLnBhdGgubGVuZ3RoIH07XG59O1xuXG5SZXBvcnRlci5wcm90b3R5cGUucmVzdG9yZSA9IGZ1bmN0aW9uIHJlc3RvcmUoZGF0YSkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZXBvcnRlclN0YXRlO1xuXG4gIHN0YXRlLm9iaiA9IGRhdGEub2JqO1xuICBzdGF0ZS5wYXRoID0gc3RhdGUucGF0aC5zbGljZSgwLCBkYXRhLnBhdGhMZW4pO1xufTtcblxuUmVwb3J0ZXIucHJvdG90eXBlLmVudGVyS2V5ID0gZnVuY3Rpb24gZW50ZXJLZXkoa2V5KSB7XG4gIHJldHVybiB0aGlzLl9yZXBvcnRlclN0YXRlLnBhdGgucHVzaChrZXkpO1xufTtcblxuUmVwb3J0ZXIucHJvdG90eXBlLmV4aXRLZXkgPSBmdW5jdGlvbiBleGl0S2V5KGluZGV4KSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlcG9ydGVyU3RhdGU7XG5cbiAgc3RhdGUucGF0aCA9IHN0YXRlLnBhdGguc2xpY2UoMCwgaW5kZXggLSAxKTtcbn07XG5cblJlcG9ydGVyLnByb3RvdHlwZS5sZWF2ZUtleSA9IGZ1bmN0aW9uIGxlYXZlS2V5KGluZGV4LCBrZXksIHZhbHVlKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlcG9ydGVyU3RhdGU7XG5cbiAgdGhpcy5leGl0S2V5KGluZGV4KTtcbiAgaWYgKHN0YXRlLm9iaiAhPT0gbnVsbClcbiAgICBzdGF0ZS5vYmpba2V5XSA9IHZhbHVlO1xufTtcblxuUmVwb3J0ZXIucHJvdG90eXBlLnBhdGggPSBmdW5jdGlvbiBwYXRoKCkge1xuICByZXR1cm4gdGhpcy5fcmVwb3J0ZXJTdGF0ZS5wYXRoLmpvaW4oJy8nKTtcbn07XG5cblJlcG9ydGVyLnByb3RvdHlwZS5lbnRlck9iamVjdCA9IGZ1bmN0aW9uIGVudGVyT2JqZWN0KCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZXBvcnRlclN0YXRlO1xuXG4gIHZhciBwcmV2ID0gc3RhdGUub2JqO1xuICBzdGF0ZS5vYmogPSB7fTtcbiAgcmV0dXJuIHByZXY7XG59O1xuXG5SZXBvcnRlci5wcm90b3R5cGUubGVhdmVPYmplY3QgPSBmdW5jdGlvbiBsZWF2ZU9iamVjdChwcmV2KSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlcG9ydGVyU3RhdGU7XG5cbiAgdmFyIG5vdyA9IHN0YXRlLm9iajtcbiAgc3RhdGUub2JqID0gcHJldjtcbiAgcmV0dXJuIG5vdztcbn07XG5cblJlcG9ydGVyLnByb3RvdHlwZS5lcnJvciA9IGZ1bmN0aW9uIGVycm9yKG1zZykge1xuICB2YXIgZXJyO1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZXBvcnRlclN0YXRlO1xuXG4gIHZhciBpbmhlcml0ZWQgPSBtc2cgaW5zdGFuY2VvZiBSZXBvcnRlckVycm9yO1xuICBpZiAoaW5oZXJpdGVkKSB7XG4gICAgZXJyID0gbXNnO1xuICB9IGVsc2Uge1xuICAgIGVyciA9IG5ldyBSZXBvcnRlckVycm9yKHN0YXRlLnBhdGgubWFwKGZ1bmN0aW9uKGVsZW0pIHtcbiAgICAgIHJldHVybiAnWycgKyBKU09OLnN0cmluZ2lmeShlbGVtKSArICddJztcbiAgICB9KS5qb2luKCcnKSwgbXNnLm1lc3NhZ2UgfHwgbXNnLCBtc2cuc3RhY2spO1xuICB9XG5cbiAgaWYgKCFzdGF0ZS5vcHRpb25zLnBhcnRpYWwpXG4gICAgdGhyb3cgZXJyO1xuXG4gIGlmICghaW5oZXJpdGVkKVxuICAgIHN0YXRlLmVycm9ycy5wdXNoKGVycik7XG5cbiAgcmV0dXJuIGVycjtcbn07XG5cblJlcG9ydGVyLnByb3RvdHlwZS53cmFwUmVzdWx0ID0gZnVuY3Rpb24gd3JhcFJlc3VsdChyZXN1bHQpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVwb3J0ZXJTdGF0ZTtcbiAgaWYgKCFzdGF0ZS5vcHRpb25zLnBhcnRpYWwpXG4gICAgcmV0dXJuIHJlc3VsdDtcblxuICByZXR1cm4ge1xuICAgIHJlc3VsdDogdGhpcy5pc0Vycm9yKHJlc3VsdCkgPyBudWxsIDogcmVzdWx0LFxuICAgIGVycm9yczogc3RhdGUuZXJyb3JzXG4gIH07XG59O1xuXG5mdW5jdGlvbiBSZXBvcnRlckVycm9yKHBhdGgsIG1zZykge1xuICB0aGlzLnBhdGggPSBwYXRoO1xuICB0aGlzLnJldGhyb3cobXNnKTtcbn07XG5pbmhlcml0cyhSZXBvcnRlckVycm9yLCBFcnJvcik7XG5cblJlcG9ydGVyRXJyb3IucHJvdG90eXBlLnJldGhyb3cgPSBmdW5jdGlvbiByZXRocm93KG1zZykge1xuICB0aGlzLm1lc3NhZ2UgPSBtc2cgKyAnIGF0OiAnICsgKHRoaXMucGF0aCB8fCAnKHNoYWxsb3cpJyk7XG4gIGlmIChFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSlcbiAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCBSZXBvcnRlckVycm9yKTtcblxuICBpZiAoIXRoaXMuc3RhY2spIHtcbiAgICB0cnkge1xuICAgICAgLy8gSUUgb25seSBhZGRzIHN0YWNrIHdoZW4gdGhyb3duXG4gICAgICB0aHJvdyBuZXcgRXJyb3IodGhpcy5tZXNzYWdlKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0aGlzLnN0YWNrID0gZS5zdGFjaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59O1xuIiwidmFyIFJlcG9ydGVyID0gcmVxdWlyZSgnLi4vYmFzZScpLlJlcG9ydGVyO1xudmFyIEVuY29kZXJCdWZmZXIgPSByZXF1aXJlKCcuLi9iYXNlJykuRW5jb2RlckJ1ZmZlcjtcbnZhciBEZWNvZGVyQnVmZmVyID0gcmVxdWlyZSgnLi4vYmFzZScpLkRlY29kZXJCdWZmZXI7XG52YXIgYXNzZXJ0ID0gcmVxdWlyZSgnbWluaW1hbGlzdGljLWFzc2VydCcpO1xuXG4vLyBTdXBwb3J0ZWQgdGFnc1xudmFyIHRhZ3MgPSBbXG4gICdzZXEnLCAnc2Vxb2YnLCAnc2V0JywgJ3NldG9mJywgJ29iamlkJywgJ2Jvb2wnLFxuICAnZ2VudGltZScsICd1dGN0aW1lJywgJ251bGxfJywgJ2VudW0nLCAnaW50JywgJ29iakRlc2MnLFxuICAnYml0c3RyJywgJ2JtcHN0cicsICdjaGFyc3RyJywgJ2dlbnN0cicsICdncmFwaHN0cicsICdpYTVzdHInLCAnaXNvNjQ2c3RyJyxcbiAgJ251bXN0cicsICdvY3RzdHInLCAncHJpbnRzdHInLCAndDYxc3RyJywgJ3VuaXN0cicsICd1dGY4c3RyJywgJ3ZpZGVvc3RyJ1xuXTtcblxuLy8gUHVibGljIG1ldGhvZHMgbGlzdFxudmFyIG1ldGhvZHMgPSBbXG4gICdrZXknLCAnb2JqJywgJ3VzZScsICdvcHRpb25hbCcsICdleHBsaWNpdCcsICdpbXBsaWNpdCcsICdkZWYnLCAnY2hvaWNlJyxcbiAgJ2FueScsICdjb250YWlucydcbl0uY29uY2F0KHRhZ3MpO1xuXG4vLyBPdmVycmlkZWQgbWV0aG9kcyBsaXN0XG52YXIgb3ZlcnJpZGVkID0gW1xuICAnX3BlZWtUYWcnLCAnX2RlY29kZVRhZycsICdfdXNlJyxcbiAgJ19kZWNvZGVTdHInLCAnX2RlY29kZU9iamlkJywgJ19kZWNvZGVUaW1lJyxcbiAgJ19kZWNvZGVOdWxsJywgJ19kZWNvZGVJbnQnLCAnX2RlY29kZUJvb2wnLCAnX2RlY29kZUxpc3QnLFxuXG4gICdfZW5jb2RlQ29tcG9zaXRlJywgJ19lbmNvZGVTdHInLCAnX2VuY29kZU9iamlkJywgJ19lbmNvZGVUaW1lJyxcbiAgJ19lbmNvZGVOdWxsJywgJ19lbmNvZGVJbnQnLCAnX2VuY29kZUJvb2wnXG5dO1xuXG5mdW5jdGlvbiBOb2RlKGVuYywgcGFyZW50KSB7XG4gIHZhciBzdGF0ZSA9IHt9O1xuICB0aGlzLl9iYXNlU3RhdGUgPSBzdGF0ZTtcblxuICBzdGF0ZS5lbmMgPSBlbmM7XG5cbiAgc3RhdGUucGFyZW50ID0gcGFyZW50IHx8IG51bGw7XG4gIHN0YXRlLmNoaWxkcmVuID0gbnVsbDtcblxuICAvLyBTdGF0ZVxuICBzdGF0ZS50YWcgPSBudWxsO1xuICBzdGF0ZS5hcmdzID0gbnVsbDtcbiAgc3RhdGUucmV2ZXJzZUFyZ3MgPSBudWxsO1xuICBzdGF0ZS5jaG9pY2UgPSBudWxsO1xuICBzdGF0ZS5vcHRpb25hbCA9IGZhbHNlO1xuICBzdGF0ZS5hbnkgPSBmYWxzZTtcbiAgc3RhdGUub2JqID0gZmFsc2U7XG4gIHN0YXRlLnVzZSA9IG51bGw7XG4gIHN0YXRlLnVzZURlY29kZXIgPSBudWxsO1xuICBzdGF0ZS5rZXkgPSBudWxsO1xuICBzdGF0ZVsnZGVmYXVsdCddID0gbnVsbDtcbiAgc3RhdGUuZXhwbGljaXQgPSBudWxsO1xuICBzdGF0ZS5pbXBsaWNpdCA9IG51bGw7XG4gIHN0YXRlLmNvbnRhaW5zID0gbnVsbDtcblxuICAvLyBTaG91bGQgY3JlYXRlIG5ldyBpbnN0YW5jZSBvbiBlYWNoIG1ldGhvZFxuICBpZiAoIXN0YXRlLnBhcmVudCkge1xuICAgIHN0YXRlLmNoaWxkcmVuID0gW107XG4gICAgdGhpcy5fd3JhcCgpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IE5vZGU7XG5cbnZhciBzdGF0ZVByb3BzID0gW1xuICAnZW5jJywgJ3BhcmVudCcsICdjaGlsZHJlbicsICd0YWcnLCAnYXJncycsICdyZXZlcnNlQXJncycsICdjaG9pY2UnLFxuICAnb3B0aW9uYWwnLCAnYW55JywgJ29iaicsICd1c2UnLCAnYWx0ZXJlZFVzZScsICdrZXknLCAnZGVmYXVsdCcsICdleHBsaWNpdCcsXG4gICdpbXBsaWNpdCcsICdjb250YWlucydcbl07XG5cbk5vZGUucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24gY2xvbmUoKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcbiAgdmFyIGNzdGF0ZSA9IHt9O1xuICBzdGF0ZVByb3BzLmZvckVhY2goZnVuY3Rpb24ocHJvcCkge1xuICAgIGNzdGF0ZVtwcm9wXSA9IHN0YXRlW3Byb3BdO1xuICB9KTtcbiAgdmFyIHJlcyA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yKGNzdGF0ZS5wYXJlbnQpO1xuICByZXMuX2Jhc2VTdGF0ZSA9IGNzdGF0ZTtcbiAgcmV0dXJuIHJlcztcbn07XG5cbk5vZGUucHJvdG90eXBlLl93cmFwID0gZnVuY3Rpb24gd3JhcCgpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuICBtZXRob2RzLmZvckVhY2goZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgdGhpc1ttZXRob2RdID0gZnVuY3Rpb24gX3dyYXBwZWRNZXRob2QoKSB7XG4gICAgICB2YXIgY2xvbmUgPSBuZXcgdGhpcy5jb25zdHJ1Y3Rvcih0aGlzKTtcbiAgICAgIHN0YXRlLmNoaWxkcmVuLnB1c2goY2xvbmUpO1xuICAgICAgcmV0dXJuIGNsb25lW21ldGhvZF0uYXBwbHkoY2xvbmUsIGFyZ3VtZW50cyk7XG4gICAgfTtcbiAgfSwgdGhpcyk7XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5faW5pdCA9IGZ1bmN0aW9uIGluaXQoYm9keSkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG5cbiAgYXNzZXJ0KHN0YXRlLnBhcmVudCA9PT0gbnVsbCk7XG4gIGJvZHkuY2FsbCh0aGlzKTtcblxuICAvLyBGaWx0ZXIgY2hpbGRyZW5cbiAgc3RhdGUuY2hpbGRyZW4gPSBzdGF0ZS5jaGlsZHJlbi5maWx0ZXIoZnVuY3Rpb24oY2hpbGQpIHtcbiAgICByZXR1cm4gY2hpbGQuX2Jhc2VTdGF0ZS5wYXJlbnQgPT09IHRoaXM7XG4gIH0sIHRoaXMpO1xuICBhc3NlcnQuZXF1YWwoc3RhdGUuY2hpbGRyZW4ubGVuZ3RoLCAxLCAnUm9vdCBub2RlIGNhbiBoYXZlIG9ubHkgb25lIGNoaWxkJyk7XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5fdXNlQXJncyA9IGZ1bmN0aW9uIHVzZUFyZ3MoYXJncykge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG5cbiAgLy8gRmlsdGVyIGNoaWxkcmVuIGFuZCBhcmdzXG4gIHZhciBjaGlsZHJlbiA9IGFyZ3MuZmlsdGVyKGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiBhcmcgaW5zdGFuY2VvZiB0aGlzLmNvbnN0cnVjdG9yO1xuICB9LCB0aGlzKTtcbiAgYXJncyA9IGFyZ3MuZmlsdGVyKGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiAhKGFyZyBpbnN0YW5jZW9mIHRoaXMuY29uc3RydWN0b3IpO1xuICB9LCB0aGlzKTtcblxuICBpZiAoY2hpbGRyZW4ubGVuZ3RoICE9PSAwKSB7XG4gICAgYXNzZXJ0KHN0YXRlLmNoaWxkcmVuID09PSBudWxsKTtcbiAgICBzdGF0ZS5jaGlsZHJlbiA9IGNoaWxkcmVuO1xuXG4gICAgLy8gUmVwbGFjZSBwYXJlbnQgdG8gbWFpbnRhaW4gYmFja3dhcmQgbGlua1xuICAgIGNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24oY2hpbGQpIHtcbiAgICAgIGNoaWxkLl9iYXNlU3RhdGUucGFyZW50ID0gdGhpcztcbiAgICB9LCB0aGlzKTtcbiAgfVxuICBpZiAoYXJncy5sZW5ndGggIT09IDApIHtcbiAgICBhc3NlcnQoc3RhdGUuYXJncyA9PT0gbnVsbCk7XG4gICAgc3RhdGUuYXJncyA9IGFyZ3M7XG4gICAgc3RhdGUucmV2ZXJzZUFyZ3MgPSBhcmdzLm1hcChmdW5jdGlvbihhcmcpIHtcbiAgICAgIGlmICh0eXBlb2YgYXJnICE9PSAnb2JqZWN0JyB8fCBhcmcuY29uc3RydWN0b3IgIT09IE9iamVjdClcbiAgICAgICAgcmV0dXJuIGFyZztcblxuICAgICAgdmFyIHJlcyA9IHt9O1xuICAgICAgT2JqZWN0LmtleXMoYXJnKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuICAgICAgICBpZiAoa2V5ID09IChrZXkgfCAwKSlcbiAgICAgICAgICBrZXkgfD0gMDtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJnW2tleV07XG4gICAgICAgIHJlc1t2YWx1ZV0gPSBrZXk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXM7XG4gICAgfSk7XG4gIH1cbn07XG5cbi8vXG4vLyBPdmVycmlkZWQgbWV0aG9kc1xuLy9cblxub3ZlcnJpZGVkLmZvckVhY2goZnVuY3Rpb24obWV0aG9kKSB7XG4gIE5vZGUucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbiBfb3ZlcnJpZGVkKCkge1xuICAgIHZhciBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcbiAgICB0aHJvdyBuZXcgRXJyb3IobWV0aG9kICsgJyBub3QgaW1wbGVtZW50ZWQgZm9yIGVuY29kaW5nOiAnICsgc3RhdGUuZW5jKTtcbiAgfTtcbn0pO1xuXG4vL1xuLy8gUHVibGljIG1ldGhvZHNcbi8vXG5cbnRhZ3MuZm9yRWFjaChmdW5jdGlvbih0YWcpIHtcbiAgTm9kZS5wcm90b3R5cGVbdGFnXSA9IGZ1bmN0aW9uIF90YWdNZXRob2QoKSB7XG4gICAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcblxuICAgIGFzc2VydChzdGF0ZS50YWcgPT09IG51bGwpO1xuICAgIHN0YXRlLnRhZyA9IHRhZztcblxuICAgIHRoaXMuX3VzZUFyZ3MoYXJncyk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbn0pO1xuXG5Ob2RlLnByb3RvdHlwZS51c2UgPSBmdW5jdGlvbiB1c2UoaXRlbSkge1xuICBhc3NlcnQoaXRlbSk7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcblxuICBhc3NlcnQoc3RhdGUudXNlID09PSBudWxsKTtcbiAgc3RhdGUudXNlID0gaXRlbTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbk5vZGUucHJvdG90eXBlLm9wdGlvbmFsID0gZnVuY3Rpb24gb3B0aW9uYWwoKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcblxuICBzdGF0ZS5vcHRpb25hbCA9IHRydWU7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5kZWYgPSBmdW5jdGlvbiBkZWYodmFsKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcblxuICBhc3NlcnQoc3RhdGVbJ2RlZmF1bHQnXSA9PT0gbnVsbCk7XG4gIHN0YXRlWydkZWZhdWx0J10gPSB2YWw7XG4gIHN0YXRlLm9wdGlvbmFsID0gdHJ1ZTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbk5vZGUucHJvdG90eXBlLmV4cGxpY2l0ID0gZnVuY3Rpb24gZXhwbGljaXQobnVtKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcblxuICBhc3NlcnQoc3RhdGUuZXhwbGljaXQgPT09IG51bGwgJiYgc3RhdGUuaW1wbGljaXQgPT09IG51bGwpO1xuICBzdGF0ZS5leHBsaWNpdCA9IG51bTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbk5vZGUucHJvdG90eXBlLmltcGxpY2l0ID0gZnVuY3Rpb24gaW1wbGljaXQobnVtKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcblxuICBhc3NlcnQoc3RhdGUuZXhwbGljaXQgPT09IG51bGwgJiYgc3RhdGUuaW1wbGljaXQgPT09IG51bGwpO1xuICBzdGF0ZS5pbXBsaWNpdCA9IG51bTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbk5vZGUucHJvdG90eXBlLm9iaiA9IGZ1bmN0aW9uIG9iaigpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG5cbiAgc3RhdGUub2JqID0gdHJ1ZTtcblxuICBpZiAoYXJncy5sZW5ndGggIT09IDApXG4gICAgdGhpcy5fdXNlQXJncyhhcmdzKTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbk5vZGUucHJvdG90eXBlLmtleSA9IGZ1bmN0aW9uIGtleShuZXdLZXkpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuXG4gIGFzc2VydChzdGF0ZS5rZXkgPT09IG51bGwpO1xuICBzdGF0ZS5rZXkgPSBuZXdLZXk7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5hbnkgPSBmdW5jdGlvbiBhbnkoKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcblxuICBzdGF0ZS5hbnkgPSB0cnVlO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuTm9kZS5wcm90b3R5cGUuY2hvaWNlID0gZnVuY3Rpb24gY2hvaWNlKG9iaikge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG5cbiAgYXNzZXJ0KHN0YXRlLmNob2ljZSA9PT0gbnVsbCk7XG4gIHN0YXRlLmNob2ljZSA9IG9iajtcbiAgdGhpcy5fdXNlQXJncyhPYmplY3Qua2V5cyhvYmopLm1hcChmdW5jdGlvbihrZXkpIHtcbiAgICByZXR1cm4gb2JqW2tleV07XG4gIH0pKTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbk5vZGUucHJvdG90eXBlLmNvbnRhaW5zID0gZnVuY3Rpb24gY29udGFpbnMoaXRlbSkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG5cbiAgYXNzZXJ0KHN0YXRlLnVzZSA9PT0gbnVsbCk7XG4gIHN0YXRlLmNvbnRhaW5zID0gaXRlbTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8vXG4vLyBEZWNvZGluZ1xuLy9cblxuTm9kZS5wcm90b3R5cGUuX2RlY29kZSA9IGZ1bmN0aW9uIGRlY29kZShpbnB1dCwgb3B0aW9ucykge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG5cbiAgLy8gRGVjb2RlIHJvb3Qgbm9kZVxuICBpZiAoc3RhdGUucGFyZW50ID09PSBudWxsKVxuICAgIHJldHVybiBpbnB1dC53cmFwUmVzdWx0KHN0YXRlLmNoaWxkcmVuWzBdLl9kZWNvZGUoaW5wdXQsIG9wdGlvbnMpKTtcblxuICB2YXIgcmVzdWx0ID0gc3RhdGVbJ2RlZmF1bHQnXTtcbiAgdmFyIHByZXNlbnQgPSB0cnVlO1xuXG4gIHZhciBwcmV2S2V5ID0gbnVsbDtcbiAgaWYgKHN0YXRlLmtleSAhPT0gbnVsbClcbiAgICBwcmV2S2V5ID0gaW5wdXQuZW50ZXJLZXkoc3RhdGUua2V5KTtcblxuICAvLyBDaGVjayBpZiB0YWcgaXMgdGhlcmVcbiAgaWYgKHN0YXRlLm9wdGlvbmFsKSB7XG4gICAgdmFyIHRhZyA9IG51bGw7XG4gICAgaWYgKHN0YXRlLmV4cGxpY2l0ICE9PSBudWxsKVxuICAgICAgdGFnID0gc3RhdGUuZXhwbGljaXQ7XG4gICAgZWxzZSBpZiAoc3RhdGUuaW1wbGljaXQgIT09IG51bGwpXG4gICAgICB0YWcgPSBzdGF0ZS5pbXBsaWNpdDtcbiAgICBlbHNlIGlmIChzdGF0ZS50YWcgIT09IG51bGwpXG4gICAgICB0YWcgPSBzdGF0ZS50YWc7XG5cbiAgICBpZiAodGFnID09PSBudWxsICYmICFzdGF0ZS5hbnkpIHtcbiAgICAgIC8vIFRyaWFsIGFuZCBFcnJvclxuICAgICAgdmFyIHNhdmUgPSBpbnB1dC5zYXZlKCk7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoc3RhdGUuY2hvaWNlID09PSBudWxsKVxuICAgICAgICAgIHRoaXMuX2RlY29kZUdlbmVyaWMoc3RhdGUudGFnLCBpbnB1dCwgb3B0aW9ucyk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICB0aGlzLl9kZWNvZGVDaG9pY2UoaW5wdXQsIG9wdGlvbnMpO1xuICAgICAgICBwcmVzZW50ID0gdHJ1ZTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcHJlc2VudCA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgaW5wdXQucmVzdG9yZShzYXZlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJlc2VudCA9IHRoaXMuX3BlZWtUYWcoaW5wdXQsIHRhZywgc3RhdGUuYW55KTtcblxuICAgICAgaWYgKGlucHV0LmlzRXJyb3IocHJlc2VudCkpXG4gICAgICAgIHJldHVybiBwcmVzZW50O1xuICAgIH1cbiAgfVxuXG4gIC8vIFB1c2ggb2JqZWN0IG9uIHN0YWNrXG4gIHZhciBwcmV2T2JqO1xuICBpZiAoc3RhdGUub2JqICYmIHByZXNlbnQpXG4gICAgcHJldk9iaiA9IGlucHV0LmVudGVyT2JqZWN0KCk7XG5cbiAgaWYgKHByZXNlbnQpIHtcbiAgICAvLyBVbndyYXAgZXhwbGljaXQgdmFsdWVzXG4gICAgaWYgKHN0YXRlLmV4cGxpY2l0ICE9PSBudWxsKSB7XG4gICAgICB2YXIgZXhwbGljaXQgPSB0aGlzLl9kZWNvZGVUYWcoaW5wdXQsIHN0YXRlLmV4cGxpY2l0KTtcbiAgICAgIGlmIChpbnB1dC5pc0Vycm9yKGV4cGxpY2l0KSlcbiAgICAgICAgcmV0dXJuIGV4cGxpY2l0O1xuICAgICAgaW5wdXQgPSBleHBsaWNpdDtcbiAgICB9XG5cbiAgICB2YXIgc3RhcnQgPSBpbnB1dC5vZmZzZXQ7XG5cbiAgICAvLyBVbndyYXAgaW1wbGljaXQgYW5kIG5vcm1hbCB2YWx1ZXNcbiAgICBpZiAoc3RhdGUudXNlID09PSBudWxsICYmIHN0YXRlLmNob2ljZSA9PT0gbnVsbCkge1xuICAgICAgaWYgKHN0YXRlLmFueSlcbiAgICAgICAgdmFyIHNhdmUgPSBpbnB1dC5zYXZlKCk7XG4gICAgICB2YXIgYm9keSA9IHRoaXMuX2RlY29kZVRhZyhcbiAgICAgICAgaW5wdXQsXG4gICAgICAgIHN0YXRlLmltcGxpY2l0ICE9PSBudWxsID8gc3RhdGUuaW1wbGljaXQgOiBzdGF0ZS50YWcsXG4gICAgICAgIHN0YXRlLmFueVxuICAgICAgKTtcbiAgICAgIGlmIChpbnB1dC5pc0Vycm9yKGJvZHkpKVxuICAgICAgICByZXR1cm4gYm9keTtcblxuICAgICAgaWYgKHN0YXRlLmFueSlcbiAgICAgICAgcmVzdWx0ID0gaW5wdXQucmF3KHNhdmUpO1xuICAgICAgZWxzZVxuICAgICAgICBpbnB1dCA9IGJvZHk7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy50cmFjayAmJiBzdGF0ZS50YWcgIT09IG51bGwpXG4gICAgICBvcHRpb25zLnRyYWNrKGlucHV0LnBhdGgoKSwgc3RhcnQsIGlucHV0Lmxlbmd0aCwgJ3RhZ2dlZCcpO1xuXG4gICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy50cmFjayAmJiBzdGF0ZS50YWcgIT09IG51bGwpXG4gICAgICBvcHRpb25zLnRyYWNrKGlucHV0LnBhdGgoKSwgaW5wdXQub2Zmc2V0LCBpbnB1dC5sZW5ndGgsICdjb250ZW50Jyk7XG5cbiAgICAvLyBTZWxlY3QgcHJvcGVyIG1ldGhvZCBmb3IgdGFnXG4gICAgaWYgKHN0YXRlLmFueSlcbiAgICAgIHJlc3VsdCA9IHJlc3VsdDtcbiAgICBlbHNlIGlmIChzdGF0ZS5jaG9pY2UgPT09IG51bGwpXG4gICAgICByZXN1bHQgPSB0aGlzLl9kZWNvZGVHZW5lcmljKHN0YXRlLnRhZywgaW5wdXQsIG9wdGlvbnMpO1xuICAgIGVsc2VcbiAgICAgIHJlc3VsdCA9IHRoaXMuX2RlY29kZUNob2ljZShpbnB1dCwgb3B0aW9ucyk7XG5cbiAgICBpZiAoaW5wdXQuaXNFcnJvcihyZXN1bHQpKVxuICAgICAgcmV0dXJuIHJlc3VsdDtcblxuICAgIC8vIERlY29kZSBjaGlsZHJlblxuICAgIGlmICghc3RhdGUuYW55ICYmIHN0YXRlLmNob2ljZSA9PT0gbnVsbCAmJiBzdGF0ZS5jaGlsZHJlbiAhPT0gbnVsbCkge1xuICAgICAgc3RhdGUuY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiBkZWNvZGVDaGlsZHJlbihjaGlsZCkge1xuICAgICAgICAvLyBOT1RFOiBXZSBhcmUgaWdub3JpbmcgZXJyb3JzIGhlcmUsIHRvIGxldCBwYXJzZXIgY29udGludWUgd2l0aCBvdGhlclxuICAgICAgICAvLyBwYXJ0cyBvZiBlbmNvZGVkIGRhdGFcbiAgICAgICAgY2hpbGQuX2RlY29kZShpbnB1dCwgb3B0aW9ucyk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBEZWNvZGUgY29udGFpbmVkL2VuY29kZWQgYnkgc2NoZW1hLCBvbmx5IGluIGJpdCBvciBvY3RldCBzdHJpbmdzXG4gICAgaWYgKHN0YXRlLmNvbnRhaW5zICYmIChzdGF0ZS50YWcgPT09ICdvY3RzdHInIHx8IHN0YXRlLnRhZyA9PT0gJ2JpdHN0cicpKSB7XG4gICAgICB2YXIgZGF0YSA9IG5ldyBEZWNvZGVyQnVmZmVyKHJlc3VsdCk7XG4gICAgICByZXN1bHQgPSB0aGlzLl9nZXRVc2Uoc3RhdGUuY29udGFpbnMsIGlucHV0Ll9yZXBvcnRlclN0YXRlLm9iailcbiAgICAgICAgICAuX2RlY29kZShkYXRhLCBvcHRpb25zKTtcbiAgICB9XG4gIH1cblxuICAvLyBQb3Agb2JqZWN0XG4gIGlmIChzdGF0ZS5vYmogJiYgcHJlc2VudClcbiAgICByZXN1bHQgPSBpbnB1dC5sZWF2ZU9iamVjdChwcmV2T2JqKTtcblxuICAvLyBTZXQga2V5XG4gIGlmIChzdGF0ZS5rZXkgIT09IG51bGwgJiYgKHJlc3VsdCAhPT0gbnVsbCB8fCBwcmVzZW50ID09PSB0cnVlKSlcbiAgICBpbnB1dC5sZWF2ZUtleShwcmV2S2V5LCBzdGF0ZS5rZXksIHJlc3VsdCk7XG4gIGVsc2UgaWYgKHByZXZLZXkgIT09IG51bGwpXG4gICAgaW5wdXQuZXhpdEtleShwcmV2S2V5KTtcblxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuTm9kZS5wcm90b3R5cGUuX2RlY29kZUdlbmVyaWMgPSBmdW5jdGlvbiBkZWNvZGVHZW5lcmljKHRhZywgaW5wdXQsIG9wdGlvbnMpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuXG4gIGlmICh0YWcgPT09ICdzZXEnIHx8IHRhZyA9PT0gJ3NldCcpXG4gICAgcmV0dXJuIG51bGw7XG4gIGlmICh0YWcgPT09ICdzZXFvZicgfHwgdGFnID09PSAnc2V0b2YnKVxuICAgIHJldHVybiB0aGlzLl9kZWNvZGVMaXN0KGlucHV0LCB0YWcsIHN0YXRlLmFyZ3NbMF0sIG9wdGlvbnMpO1xuICBlbHNlIGlmICgvc3RyJC8udGVzdCh0YWcpKVxuICAgIHJldHVybiB0aGlzLl9kZWNvZGVTdHIoaW5wdXQsIHRhZywgb3B0aW9ucyk7XG4gIGVsc2UgaWYgKHRhZyA9PT0gJ29iamlkJyAmJiBzdGF0ZS5hcmdzKVxuICAgIHJldHVybiB0aGlzLl9kZWNvZGVPYmppZChpbnB1dCwgc3RhdGUuYXJnc1swXSwgc3RhdGUuYXJnc1sxXSwgb3B0aW9ucyk7XG4gIGVsc2UgaWYgKHRhZyA9PT0gJ29iamlkJylcbiAgICByZXR1cm4gdGhpcy5fZGVjb2RlT2JqaWQoaW5wdXQsIG51bGwsIG51bGwsIG9wdGlvbnMpO1xuICBlbHNlIGlmICh0YWcgPT09ICdnZW50aW1lJyB8fCB0YWcgPT09ICd1dGN0aW1lJylcbiAgICByZXR1cm4gdGhpcy5fZGVjb2RlVGltZShpbnB1dCwgdGFnLCBvcHRpb25zKTtcbiAgZWxzZSBpZiAodGFnID09PSAnbnVsbF8nKVxuICAgIHJldHVybiB0aGlzLl9kZWNvZGVOdWxsKGlucHV0LCBvcHRpb25zKTtcbiAgZWxzZSBpZiAodGFnID09PSAnYm9vbCcpXG4gICAgcmV0dXJuIHRoaXMuX2RlY29kZUJvb2woaW5wdXQsIG9wdGlvbnMpO1xuICBlbHNlIGlmICh0YWcgPT09ICdvYmpEZXNjJylcbiAgICByZXR1cm4gdGhpcy5fZGVjb2RlU3RyKGlucHV0LCB0YWcsIG9wdGlvbnMpO1xuICBlbHNlIGlmICh0YWcgPT09ICdpbnQnIHx8IHRhZyA9PT0gJ2VudW0nKVxuICAgIHJldHVybiB0aGlzLl9kZWNvZGVJbnQoaW5wdXQsIHN0YXRlLmFyZ3MgJiYgc3RhdGUuYXJnc1swXSwgb3B0aW9ucyk7XG5cbiAgaWYgKHN0YXRlLnVzZSAhPT0gbnVsbCkge1xuICAgIHJldHVybiB0aGlzLl9nZXRVc2Uoc3RhdGUudXNlLCBpbnB1dC5fcmVwb3J0ZXJTdGF0ZS5vYmopXG4gICAgICAgIC5fZGVjb2RlKGlucHV0LCBvcHRpb25zKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gaW5wdXQuZXJyb3IoJ3Vua25vd24gdGFnOiAnICsgdGFnKTtcbiAgfVxufTtcblxuTm9kZS5wcm90b3R5cGUuX2dldFVzZSA9IGZ1bmN0aW9uIF9nZXRVc2UoZW50aXR5LCBvYmopIHtcblxuICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG4gIC8vIENyZWF0ZSBhbHRlcmVkIHVzZSBkZWNvZGVyIGlmIGltcGxpY2l0IGlzIHNldFxuICBzdGF0ZS51c2VEZWNvZGVyID0gdGhpcy5fdXNlKGVudGl0eSwgb2JqKTtcbiAgYXNzZXJ0KHN0YXRlLnVzZURlY29kZXIuX2Jhc2VTdGF0ZS5wYXJlbnQgPT09IG51bGwpO1xuICBzdGF0ZS51c2VEZWNvZGVyID0gc3RhdGUudXNlRGVjb2Rlci5fYmFzZVN0YXRlLmNoaWxkcmVuWzBdO1xuICBpZiAoc3RhdGUuaW1wbGljaXQgIT09IHN0YXRlLnVzZURlY29kZXIuX2Jhc2VTdGF0ZS5pbXBsaWNpdCkge1xuICAgIHN0YXRlLnVzZURlY29kZXIgPSBzdGF0ZS51c2VEZWNvZGVyLmNsb25lKCk7XG4gICAgc3RhdGUudXNlRGVjb2Rlci5fYmFzZVN0YXRlLmltcGxpY2l0ID0gc3RhdGUuaW1wbGljaXQ7XG4gIH1cbiAgcmV0dXJuIHN0YXRlLnVzZURlY29kZXI7XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5fZGVjb2RlQ2hvaWNlID0gZnVuY3Rpb24gZGVjb2RlQ2hvaWNlKGlucHV0LCBvcHRpb25zKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcbiAgdmFyIHJlc3VsdCA9IG51bGw7XG4gIHZhciBtYXRjaCA9IGZhbHNlO1xuXG4gIE9iamVjdC5rZXlzKHN0YXRlLmNob2ljZSkuc29tZShmdW5jdGlvbihrZXkpIHtcbiAgICB2YXIgc2F2ZSA9IGlucHV0LnNhdmUoKTtcbiAgICB2YXIgbm9kZSA9IHN0YXRlLmNob2ljZVtrZXldO1xuICAgIHRyeSB7XG4gICAgICB2YXIgdmFsdWUgPSBub2RlLl9kZWNvZGUoaW5wdXQsIG9wdGlvbnMpO1xuICAgICAgaWYgKGlucHV0LmlzRXJyb3IodmFsdWUpKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICAgIHJlc3VsdCA9IHsgdHlwZToga2V5LCB2YWx1ZTogdmFsdWUgfTtcbiAgICAgIG1hdGNoID0gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBpbnB1dC5yZXN0b3JlKHNhdmUpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSwgdGhpcyk7XG5cbiAgaWYgKCFtYXRjaClcbiAgICByZXR1cm4gaW5wdXQuZXJyb3IoJ0Nob2ljZSBub3QgbWF0Y2hlZCcpO1xuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG4vL1xuLy8gRW5jb2Rpbmdcbi8vXG5cbk5vZGUucHJvdG90eXBlLl9jcmVhdGVFbmNvZGVyQnVmZmVyID0gZnVuY3Rpb24gY3JlYXRlRW5jb2RlckJ1ZmZlcihkYXRhKSB7XG4gIHJldHVybiBuZXcgRW5jb2RlckJ1ZmZlcihkYXRhLCB0aGlzLnJlcG9ydGVyKTtcbn07XG5cbk5vZGUucHJvdG90eXBlLl9lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUoZGF0YSwgcmVwb3J0ZXIsIHBhcmVudCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG4gIGlmIChzdGF0ZVsnZGVmYXVsdCddICE9PSBudWxsICYmIHN0YXRlWydkZWZhdWx0J10gPT09IGRhdGEpXG4gICAgcmV0dXJuO1xuXG4gIHZhciByZXN1bHQgPSB0aGlzLl9lbmNvZGVWYWx1ZShkYXRhLCByZXBvcnRlciwgcGFyZW50KTtcbiAgaWYgKHJlc3VsdCA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybjtcblxuICBpZiAodGhpcy5fc2tpcERlZmF1bHQocmVzdWx0LCByZXBvcnRlciwgcGFyZW50KSlcbiAgICByZXR1cm47XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbk5vZGUucHJvdG90eXBlLl9lbmNvZGVWYWx1ZSA9IGZ1bmN0aW9uIGVuY29kZShkYXRhLCByZXBvcnRlciwgcGFyZW50KSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcblxuICAvLyBEZWNvZGUgcm9vdCBub2RlXG4gIGlmIChzdGF0ZS5wYXJlbnQgPT09IG51bGwpXG4gICAgcmV0dXJuIHN0YXRlLmNoaWxkcmVuWzBdLl9lbmNvZGUoZGF0YSwgcmVwb3J0ZXIgfHwgbmV3IFJlcG9ydGVyKCkpO1xuXG4gIHZhciByZXN1bHQgPSBudWxsO1xuXG4gIC8vIFNldCByZXBvcnRlciB0byBzaGFyZSBpdCB3aXRoIGEgY2hpbGQgY2xhc3NcbiAgdGhpcy5yZXBvcnRlciA9IHJlcG9ydGVyO1xuXG4gIC8vIENoZWNrIGlmIGRhdGEgaXMgdGhlcmVcbiAgaWYgKHN0YXRlLm9wdGlvbmFsICYmIGRhdGEgPT09IHVuZGVmaW5lZCkge1xuICAgIGlmIChzdGF0ZVsnZGVmYXVsdCddICE9PSBudWxsKVxuICAgICAgZGF0YSA9IHN0YXRlWydkZWZhdWx0J11cbiAgICBlbHNlXG4gICAgICByZXR1cm47XG4gIH1cblxuICAvLyBFbmNvZGUgY2hpbGRyZW4gZmlyc3RcbiAgdmFyIGNvbnRlbnQgPSBudWxsO1xuICB2YXIgcHJpbWl0aXZlID0gZmFsc2U7XG4gIGlmIChzdGF0ZS5hbnkpIHtcbiAgICAvLyBBbnl0aGluZyB0aGF0IHdhcyBnaXZlbiBpcyB0cmFuc2xhdGVkIHRvIGJ1ZmZlclxuICAgIHJlc3VsdCA9IHRoaXMuX2NyZWF0ZUVuY29kZXJCdWZmZXIoZGF0YSk7XG4gIH0gZWxzZSBpZiAoc3RhdGUuY2hvaWNlKSB7XG4gICAgcmVzdWx0ID0gdGhpcy5fZW5jb2RlQ2hvaWNlKGRhdGEsIHJlcG9ydGVyKTtcbiAgfSBlbHNlIGlmIChzdGF0ZS5jb250YWlucykge1xuICAgIGNvbnRlbnQgPSB0aGlzLl9nZXRVc2Uoc3RhdGUuY29udGFpbnMsIHBhcmVudCkuX2VuY29kZShkYXRhLCByZXBvcnRlcik7XG4gICAgcHJpbWl0aXZlID0gdHJ1ZTtcbiAgfSBlbHNlIGlmIChzdGF0ZS5jaGlsZHJlbikge1xuICAgIGNvbnRlbnQgPSBzdGF0ZS5jaGlsZHJlbi5tYXAoZnVuY3Rpb24oY2hpbGQpIHtcbiAgICAgIGlmIChjaGlsZC5fYmFzZVN0YXRlLnRhZyA9PT0gJ251bGxfJylcbiAgICAgICAgcmV0dXJuIGNoaWxkLl9lbmNvZGUobnVsbCwgcmVwb3J0ZXIsIGRhdGEpO1xuXG4gICAgICBpZiAoY2hpbGQuX2Jhc2VTdGF0ZS5rZXkgPT09IG51bGwpXG4gICAgICAgIHJldHVybiByZXBvcnRlci5lcnJvcignQ2hpbGQgc2hvdWxkIGhhdmUgYSBrZXknKTtcbiAgICAgIHZhciBwcmV2S2V5ID0gcmVwb3J0ZXIuZW50ZXJLZXkoY2hpbGQuX2Jhc2VTdGF0ZS5rZXkpO1xuXG4gICAgICBpZiAodHlwZW9mIGRhdGEgIT09ICdvYmplY3QnKVxuICAgICAgICByZXR1cm4gcmVwb3J0ZXIuZXJyb3IoJ0NoaWxkIGV4cGVjdGVkLCBidXQgaW5wdXQgaXMgbm90IG9iamVjdCcpO1xuXG4gICAgICB2YXIgcmVzID0gY2hpbGQuX2VuY29kZShkYXRhW2NoaWxkLl9iYXNlU3RhdGUua2V5XSwgcmVwb3J0ZXIsIGRhdGEpO1xuICAgICAgcmVwb3J0ZXIubGVhdmVLZXkocHJldktleSk7XG5cbiAgICAgIHJldHVybiByZXM7XG4gICAgfSwgdGhpcykuZmlsdGVyKGZ1bmN0aW9uKGNoaWxkKSB7XG4gICAgICByZXR1cm4gY2hpbGQ7XG4gICAgfSk7XG4gICAgY29udGVudCA9IHRoaXMuX2NyZWF0ZUVuY29kZXJCdWZmZXIoY29udGVudCk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHN0YXRlLnRhZyA9PT0gJ3NlcW9mJyB8fCBzdGF0ZS50YWcgPT09ICdzZXRvZicpIHtcbiAgICAgIC8vIFRPRE8oaW5kdXRueSk6IHRoaXMgc2hvdWxkIGJlIHRocm93biBvbiBEU0wgbGV2ZWxcbiAgICAgIGlmICghKHN0YXRlLmFyZ3MgJiYgc3RhdGUuYXJncy5sZW5ndGggPT09IDEpKVxuICAgICAgICByZXR1cm4gcmVwb3J0ZXIuZXJyb3IoJ1RvbyBtYW55IGFyZ3MgZm9yIDogJyArIHN0YXRlLnRhZyk7XG5cbiAgICAgIGlmICghQXJyYXkuaXNBcnJheShkYXRhKSlcbiAgICAgICAgcmV0dXJuIHJlcG9ydGVyLmVycm9yKCdzZXFvZi9zZXRvZiwgYnV0IGRhdGEgaXMgbm90IEFycmF5Jyk7XG5cbiAgICAgIHZhciBjaGlsZCA9IHRoaXMuY2xvbmUoKTtcbiAgICAgIGNoaWxkLl9iYXNlU3RhdGUuaW1wbGljaXQgPSBudWxsO1xuICAgICAgY29udGVudCA9IHRoaXMuX2NyZWF0ZUVuY29kZXJCdWZmZXIoZGF0YS5tYXAoZnVuY3Rpb24oaXRlbSkge1xuICAgICAgICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldFVzZShzdGF0ZS5hcmdzWzBdLCBkYXRhKS5fZW5jb2RlKGl0ZW0sIHJlcG9ydGVyKTtcbiAgICAgIH0sIGNoaWxkKSk7XG4gICAgfSBlbHNlIGlmIChzdGF0ZS51c2UgIT09IG51bGwpIHtcbiAgICAgIHJlc3VsdCA9IHRoaXMuX2dldFVzZShzdGF0ZS51c2UsIHBhcmVudCkuX2VuY29kZShkYXRhLCByZXBvcnRlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnRlbnQgPSB0aGlzLl9lbmNvZGVQcmltaXRpdmUoc3RhdGUudGFnLCBkYXRhKTtcbiAgICAgIHByaW1pdGl2ZSA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgLy8gRW5jb2RlIGRhdGEgaXRzZWxmXG4gIHZhciByZXN1bHQ7XG4gIGlmICghc3RhdGUuYW55ICYmIHN0YXRlLmNob2ljZSA9PT0gbnVsbCkge1xuICAgIHZhciB0YWcgPSBzdGF0ZS5pbXBsaWNpdCAhPT0gbnVsbCA/IHN0YXRlLmltcGxpY2l0IDogc3RhdGUudGFnO1xuICAgIHZhciBjbHMgPSBzdGF0ZS5pbXBsaWNpdCA9PT0gbnVsbCA/ICd1bml2ZXJzYWwnIDogJ2NvbnRleHQnO1xuXG4gICAgaWYgKHRhZyA9PT0gbnVsbCkge1xuICAgICAgaWYgKHN0YXRlLnVzZSA9PT0gbnVsbClcbiAgICAgICAgcmVwb3J0ZXIuZXJyb3IoJ1RhZyBjb3VsZCBiZSBvbWl0dGVkIG9ubHkgZm9yIC51c2UoKScpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoc3RhdGUudXNlID09PSBudWxsKVxuICAgICAgICByZXN1bHQgPSB0aGlzLl9lbmNvZGVDb21wb3NpdGUodGFnLCBwcmltaXRpdmUsIGNscywgY29udGVudCk7XG4gICAgfVxuICB9XG5cbiAgLy8gV3JhcCBpbiBleHBsaWNpdFxuICBpZiAoc3RhdGUuZXhwbGljaXQgIT09IG51bGwpXG4gICAgcmVzdWx0ID0gdGhpcy5fZW5jb2RlQ29tcG9zaXRlKHN0YXRlLmV4cGxpY2l0LCBmYWxzZSwgJ2NvbnRleHQnLCByZXN1bHQpO1xuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5fZW5jb2RlQ2hvaWNlID0gZnVuY3Rpb24gZW5jb2RlQ2hvaWNlKGRhdGEsIHJlcG9ydGVyKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcblxuICB2YXIgbm9kZSA9IHN0YXRlLmNob2ljZVtkYXRhLnR5cGVdO1xuICBpZiAoIW5vZGUpIHtcbiAgICBhc3NlcnQoXG4gICAgICAgIGZhbHNlLFxuICAgICAgICBkYXRhLnR5cGUgKyAnIG5vdCBmb3VuZCBpbiAnICtcbiAgICAgICAgICAgIEpTT04uc3RyaW5naWZ5KE9iamVjdC5rZXlzKHN0YXRlLmNob2ljZSkpKTtcbiAgfVxuICByZXR1cm4gbm9kZS5fZW5jb2RlKGRhdGEudmFsdWUsIHJlcG9ydGVyKTtcbn07XG5cbk5vZGUucHJvdG90eXBlLl9lbmNvZGVQcmltaXRpdmUgPSBmdW5jdGlvbiBlbmNvZGVQcmltaXRpdmUodGFnLCBkYXRhKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcblxuICBpZiAoL3N0ciQvLnRlc3QodGFnKSlcbiAgICByZXR1cm4gdGhpcy5fZW5jb2RlU3RyKGRhdGEsIHRhZyk7XG4gIGVsc2UgaWYgKHRhZyA9PT0gJ29iamlkJyAmJiBzdGF0ZS5hcmdzKVxuICAgIHJldHVybiB0aGlzLl9lbmNvZGVPYmppZChkYXRhLCBzdGF0ZS5yZXZlcnNlQXJnc1swXSwgc3RhdGUuYXJnc1sxXSk7XG4gIGVsc2UgaWYgKHRhZyA9PT0gJ29iamlkJylcbiAgICByZXR1cm4gdGhpcy5fZW5jb2RlT2JqaWQoZGF0YSwgbnVsbCwgbnVsbCk7XG4gIGVsc2UgaWYgKHRhZyA9PT0gJ2dlbnRpbWUnIHx8IHRhZyA9PT0gJ3V0Y3RpbWUnKVxuICAgIHJldHVybiB0aGlzLl9lbmNvZGVUaW1lKGRhdGEsIHRhZyk7XG4gIGVsc2UgaWYgKHRhZyA9PT0gJ251bGxfJylcbiAgICByZXR1cm4gdGhpcy5fZW5jb2RlTnVsbCgpO1xuICBlbHNlIGlmICh0YWcgPT09ICdpbnQnIHx8IHRhZyA9PT0gJ2VudW0nKVxuICAgIHJldHVybiB0aGlzLl9lbmNvZGVJbnQoZGF0YSwgc3RhdGUuYXJncyAmJiBzdGF0ZS5yZXZlcnNlQXJnc1swXSk7XG4gIGVsc2UgaWYgKHRhZyA9PT0gJ2Jvb2wnKVxuICAgIHJldHVybiB0aGlzLl9lbmNvZGVCb29sKGRhdGEpO1xuICBlbHNlIGlmICh0YWcgPT09ICdvYmpEZXNjJylcbiAgICByZXR1cm4gdGhpcy5fZW5jb2RlU3RyKGRhdGEsIHRhZyk7XG4gIGVsc2VcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vuc3VwcG9ydGVkIHRhZzogJyArIHRhZyk7XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5faXNOdW1zdHIgPSBmdW5jdGlvbiBpc051bXN0cihzdHIpIHtcbiAgcmV0dXJuIC9eWzAtOSBdKiQvLnRlc3Qoc3RyKTtcbn07XG5cbk5vZGUucHJvdG90eXBlLl9pc1ByaW50c3RyID0gZnVuY3Rpb24gaXNQcmludHN0cihzdHIpIHtcbiAgcmV0dXJuIC9eW0EtWmEtejAtOSAnXFwoXFwpXFwrLFxcLVxcLlxcLzo9XFw/XSokLy50ZXN0KHN0cik7XG59O1xuIiwidmFyIGNvbnN0YW50cyA9IHJlcXVpcmUoJy4uL2NvbnN0YW50cycpO1xuXG5leHBvcnRzLnRhZ0NsYXNzID0ge1xuICAwOiAndW5pdmVyc2FsJyxcbiAgMTogJ2FwcGxpY2F0aW9uJyxcbiAgMjogJ2NvbnRleHQnLFxuICAzOiAncHJpdmF0ZSdcbn07XG5leHBvcnRzLnRhZ0NsYXNzQnlOYW1lID0gY29uc3RhbnRzLl9yZXZlcnNlKGV4cG9ydHMudGFnQ2xhc3MpO1xuXG5leHBvcnRzLnRhZyA9IHtcbiAgMHgwMDogJ2VuZCcsXG4gIDB4MDE6ICdib29sJyxcbiAgMHgwMjogJ2ludCcsXG4gIDB4MDM6ICdiaXRzdHInLFxuICAweDA0OiAnb2N0c3RyJyxcbiAgMHgwNTogJ251bGxfJyxcbiAgMHgwNjogJ29iamlkJyxcbiAgMHgwNzogJ29iakRlc2MnLFxuICAweDA4OiAnZXh0ZXJuYWwnLFxuICAweDA5OiAncmVhbCcsXG4gIDB4MGE6ICdlbnVtJyxcbiAgMHgwYjogJ2VtYmVkJyxcbiAgMHgwYzogJ3V0ZjhzdHInLFxuICAweDBkOiAncmVsYXRpdmVPaWQnLFxuICAweDEwOiAnc2VxJyxcbiAgMHgxMTogJ3NldCcsXG4gIDB4MTI6ICdudW1zdHInLFxuICAweDEzOiAncHJpbnRzdHInLFxuICAweDE0OiAndDYxc3RyJyxcbiAgMHgxNTogJ3ZpZGVvc3RyJyxcbiAgMHgxNjogJ2lhNXN0cicsXG4gIDB4MTc6ICd1dGN0aW1lJyxcbiAgMHgxODogJ2dlbnRpbWUnLFxuICAweDE5OiAnZ3JhcGhzdHInLFxuICAweDFhOiAnaXNvNjQ2c3RyJyxcbiAgMHgxYjogJ2dlbnN0cicsXG4gIDB4MWM6ICd1bmlzdHInLFxuICAweDFkOiAnY2hhcnN0cicsXG4gIDB4MWU6ICdibXBzdHInXG59O1xuZXhwb3J0cy50YWdCeU5hbWUgPSBjb25zdGFudHMuX3JldmVyc2UoZXhwb3J0cy50YWcpO1xuIiwidmFyIGRlY29kZXJzID0gZXhwb3J0cztcblxuZGVjb2RlcnMuZGVyID0gcmVxdWlyZSgnLi9kZXInKTtcbmRlY29kZXJzLnBlbSA9IHJlcXVpcmUoJy4vcGVtJyk7XG4iLCJ2YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ2J1ZmZlcicpLkJ1ZmZlcjtcblxudmFyIERFUkRlY29kZXIgPSByZXF1aXJlKCcuL2RlcicpO1xuXG5mdW5jdGlvbiBQRU1EZWNvZGVyKGVudGl0eSkge1xuICBERVJEZWNvZGVyLmNhbGwodGhpcywgZW50aXR5KTtcbiAgdGhpcy5lbmMgPSAncGVtJztcbn07XG5pbmhlcml0cyhQRU1EZWNvZGVyLCBERVJEZWNvZGVyKTtcbm1vZHVsZS5leHBvcnRzID0gUEVNRGVjb2RlcjtcblxuUEVNRGVjb2Rlci5wcm90b3R5cGUuZGVjb2RlID0gZnVuY3Rpb24gZGVjb2RlKGRhdGEsIG9wdGlvbnMpIHtcbiAgdmFyIGxpbmVzID0gZGF0YS50b1N0cmluZygpLnNwbGl0KC9bXFxyXFxuXSsvZyk7XG5cbiAgdmFyIGxhYmVsID0gb3B0aW9ucy5sYWJlbC50b1VwcGVyQ2FzZSgpO1xuXG4gIHZhciByZSA9IC9eLS0tLS0oQkVHSU58RU5EKSAoW14tXSspLS0tLS0kLztcbiAgdmFyIHN0YXJ0ID0gLTE7XG4gIHZhciBlbmQgPSAtMTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaW5lcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBtYXRjaCA9IGxpbmVzW2ldLm1hdGNoKHJlKTtcbiAgICBpZiAobWF0Y2ggPT09IG51bGwpXG4gICAgICBjb250aW51ZTtcblxuICAgIGlmIChtYXRjaFsyXSAhPT0gbGFiZWwpXG4gICAgICBjb250aW51ZTtcblxuICAgIGlmIChzdGFydCA9PT0gLTEpIHtcbiAgICAgIGlmIChtYXRjaFsxXSAhPT0gJ0JFR0lOJylcbiAgICAgICAgYnJlYWs7XG4gICAgICBzdGFydCA9IGk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChtYXRjaFsxXSAhPT0gJ0VORCcpXG4gICAgICAgIGJyZWFrO1xuICAgICAgZW5kID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICBpZiAoc3RhcnQgPT09IC0xIHx8IGVuZCA9PT0gLTEpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdQRU0gc2VjdGlvbiBub3QgZm91bmQgZm9yOiAnICsgbGFiZWwpO1xuXG4gIHZhciBiYXNlNjQgPSBsaW5lcy5zbGljZShzdGFydCArIDEsIGVuZCkuam9pbignJyk7XG4gIC8vIFJlbW92ZSBleGNlc3NpdmUgc3ltYm9sc1xuICBiYXNlNjQucmVwbGFjZSgvW15hLXowLTlcXCtcXC89XSsvZ2ksICcnKTtcblxuICB2YXIgaW5wdXQgPSBuZXcgQnVmZmVyKGJhc2U2NCwgJ2Jhc2U2NCcpO1xuICByZXR1cm4gREVSRGVjb2Rlci5wcm90b3R5cGUuZGVjb2RlLmNhbGwodGhpcywgaW5wdXQsIG9wdGlvbnMpO1xufTtcbiIsInZhciBlbmNvZGVycyA9IGV4cG9ydHM7XG5cbmVuY29kZXJzLmRlciA9IHJlcXVpcmUoJy4vZGVyJyk7XG5lbmNvZGVycy5wZW0gPSByZXF1aXJlKCcuL3BlbScpO1xuIiwidmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcblxudmFyIERFUkVuY29kZXIgPSByZXF1aXJlKCcuL2RlcicpO1xuXG5mdW5jdGlvbiBQRU1FbmNvZGVyKGVudGl0eSkge1xuICBERVJFbmNvZGVyLmNhbGwodGhpcywgZW50aXR5KTtcbiAgdGhpcy5lbmMgPSAncGVtJztcbn07XG5pbmhlcml0cyhQRU1FbmNvZGVyLCBERVJFbmNvZGVyKTtcbm1vZHVsZS5leHBvcnRzID0gUEVNRW5jb2RlcjtcblxuUEVNRW5jb2Rlci5wcm90b3R5cGUuZW5jb2RlID0gZnVuY3Rpb24gZW5jb2RlKGRhdGEsIG9wdGlvbnMpIHtcbiAgdmFyIGJ1ZiA9IERFUkVuY29kZXIucHJvdG90eXBlLmVuY29kZS5jYWxsKHRoaXMsIGRhdGEpO1xuXG4gIHZhciBwID0gYnVmLnRvU3RyaW5nKCdiYXNlNjQnKTtcbiAgdmFyIG91dCA9IFsgJy0tLS0tQkVHSU4gJyArIG9wdGlvbnMubGFiZWwgKyAnLS0tLS0nIF07XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcC5sZW5ndGg7IGkgKz0gNjQpXG4gICAgb3V0LnB1c2gocC5zbGljZShpLCBpICsgNjQpKTtcbiAgb3V0LnB1c2goJy0tLS0tRU5EICcgKyBvcHRpb25zLmxhYmVsICsgJy0tLS0tJyk7XG4gIHJldHVybiBvdXQuam9pbignXFxuJyk7XG59O1xuIiwiLy8gZnJvbSBodHRwczovL2dpdGh1Yi5jb20vUmFudGFuZW4vbm9kZS1kdGxzL2Jsb2IvMjVhN2RjODYxYmRhMzhjZmVhYzkzYTcyMzUwMGVlYTRmMGFjMmU4Ni9DZXJ0aWZpY2F0ZS5qc1xuLy8gdGhhbmtzIHRvIEBSYW50YW5lblxuXG4ndXNlIHN0cmljdCdcblxudmFyIGFzbiA9IHJlcXVpcmUoJ2FzbjEuanMnKVxuXG52YXIgVGltZSA9IGFzbi5kZWZpbmUoJ1RpbWUnLCBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuY2hvaWNlKHtcbiAgICB1dGNUaW1lOiB0aGlzLnV0Y3RpbWUoKSxcbiAgICBnZW5lcmFsVGltZTogdGhpcy5nZW50aW1lKClcbiAgfSlcbn0pXG5cbnZhciBBdHRyaWJ1dGVUeXBlVmFsdWUgPSBhc24uZGVmaW5lKCdBdHRyaWJ1dGVUeXBlVmFsdWUnLCBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuc2VxKCkub2JqKFxuICAgIHRoaXMua2V5KCd0eXBlJykub2JqaWQoKSxcbiAgICB0aGlzLmtleSgndmFsdWUnKS5hbnkoKVxuICApXG59KVxuXG52YXIgQWxnb3JpdGhtSWRlbnRpZmllciA9IGFzbi5kZWZpbmUoJ0FsZ29yaXRobUlkZW50aWZpZXInLCBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuc2VxKCkub2JqKFxuICAgIHRoaXMua2V5KCdhbGdvcml0aG0nKS5vYmppZCgpLFxuICAgIHRoaXMua2V5KCdwYXJhbWV0ZXJzJykub3B0aW9uYWwoKSxcbiAgICB0aGlzLmtleSgnY3VydmUnKS5vYmppZCgpLm9wdGlvbmFsKClcbiAgKVxufSlcblxudmFyIFN1YmplY3RQdWJsaWNLZXlJbmZvID0gYXNuLmRlZmluZSgnU3ViamVjdFB1YmxpY0tleUluZm8nLCBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuc2VxKCkub2JqKFxuICAgIHRoaXMua2V5KCdhbGdvcml0aG0nKS51c2UoQWxnb3JpdGhtSWRlbnRpZmllciksXG4gICAgdGhpcy5rZXkoJ3N1YmplY3RQdWJsaWNLZXknKS5iaXRzdHIoKVxuICApXG59KVxuXG52YXIgUmVsYXRpdmVEaXN0aW5ndWlzaGVkTmFtZSA9IGFzbi5kZWZpbmUoJ1JlbGF0aXZlRGlzdGluZ3Vpc2hlZE5hbWUnLCBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuc2V0b2YoQXR0cmlidXRlVHlwZVZhbHVlKVxufSlcblxudmFyIFJETlNlcXVlbmNlID0gYXNuLmRlZmluZSgnUkROU2VxdWVuY2UnLCBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuc2Vxb2YoUmVsYXRpdmVEaXN0aW5ndWlzaGVkTmFtZSlcbn0pXG5cbnZhciBOYW1lID0gYXNuLmRlZmluZSgnTmFtZScsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5jaG9pY2Uoe1xuICAgIHJkblNlcXVlbmNlOiB0aGlzLnVzZShSRE5TZXF1ZW5jZSlcbiAgfSlcbn0pXG5cbnZhciBWYWxpZGl0eSA9IGFzbi5kZWZpbmUoJ1ZhbGlkaXR5JywgZnVuY3Rpb24gKCkge1xuICB0aGlzLnNlcSgpLm9iaihcbiAgICB0aGlzLmtleSgnbm90QmVmb3JlJykudXNlKFRpbWUpLFxuICAgIHRoaXMua2V5KCdub3RBZnRlcicpLnVzZShUaW1lKVxuICApXG59KVxuXG52YXIgRXh0ZW5zaW9uID0gYXNuLmRlZmluZSgnRXh0ZW5zaW9uJywgZnVuY3Rpb24gKCkge1xuICB0aGlzLnNlcSgpLm9iaihcbiAgICB0aGlzLmtleSgnZXh0bklEJykub2JqaWQoKSxcbiAgICB0aGlzLmtleSgnY3JpdGljYWwnKS5ib29sKCkuZGVmKGZhbHNlKSxcbiAgICB0aGlzLmtleSgnZXh0blZhbHVlJykub2N0c3RyKClcbiAgKVxufSlcblxudmFyIFRCU0NlcnRpZmljYXRlID0gYXNuLmRlZmluZSgnVEJTQ2VydGlmaWNhdGUnLCBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuc2VxKCkub2JqKFxuICAgIHRoaXMua2V5KCd2ZXJzaW9uJykuZXhwbGljaXQoMCkuaW50KCkub3B0aW9uYWwoKSxcbiAgICB0aGlzLmtleSgnc2VyaWFsTnVtYmVyJykuaW50KCksXG4gICAgdGhpcy5rZXkoJ3NpZ25hdHVyZScpLnVzZShBbGdvcml0aG1JZGVudGlmaWVyKSxcbiAgICB0aGlzLmtleSgnaXNzdWVyJykudXNlKE5hbWUpLFxuICAgIHRoaXMua2V5KCd2YWxpZGl0eScpLnVzZShWYWxpZGl0eSksXG4gICAgdGhpcy5rZXkoJ3N1YmplY3QnKS51c2UoTmFtZSksXG4gICAgdGhpcy5rZXkoJ3N1YmplY3RQdWJsaWNLZXlJbmZvJykudXNlKFN1YmplY3RQdWJsaWNLZXlJbmZvKSxcbiAgICB0aGlzLmtleSgnaXNzdWVyVW5pcXVlSUQnKS5pbXBsaWNpdCgxKS5iaXRzdHIoKS5vcHRpb25hbCgpLFxuICAgIHRoaXMua2V5KCdzdWJqZWN0VW5pcXVlSUQnKS5pbXBsaWNpdCgyKS5iaXRzdHIoKS5vcHRpb25hbCgpLFxuICAgIHRoaXMua2V5KCdleHRlbnNpb25zJykuZXhwbGljaXQoMykuc2Vxb2YoRXh0ZW5zaW9uKS5vcHRpb25hbCgpXG4gIClcbn0pXG5cbnZhciBYNTA5Q2VydGlmaWNhdGUgPSBhc24uZGVmaW5lKCdYNTA5Q2VydGlmaWNhdGUnLCBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuc2VxKCkub2JqKFxuICAgIHRoaXMua2V5KCd0YnNDZXJ0aWZpY2F0ZScpLnVzZShUQlNDZXJ0aWZpY2F0ZSksXG4gICAgdGhpcy5rZXkoJ3NpZ25hdHVyZUFsZ29yaXRobScpLnVzZShBbGdvcml0aG1JZGVudGlmaWVyKSxcbiAgICB0aGlzLmtleSgnc2lnbmF0dXJlVmFsdWUnKS5iaXRzdHIoKVxuICApXG59KVxuXG5tb2R1bGUuZXhwb3J0cyA9IFg1MDlDZXJ0aWZpY2F0ZVxuIiwiLy8gYWRhcHRlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9hcGF0aWwvcGVtc3RyaXBcbnZhciBmaW5kUHJvYyA9IC9Qcm9jLVR5cGU6IDQsRU5DUllQVEVEW1xcblxccl0rREVLLUluZm86IEFFUy0oKD86MTI4KXwoPzoxOTIpfCg/OjI1NikpLUNCQywoWzAtOUEtSF0rKVtcXG5cXHJdKyhbMC05QS16XFxuXFxyXFwrXFwvXFw9XSspW1xcblxccl0rL21cbnZhciBzdGFydFJlZ2V4ID0gL14tLS0tLUJFR0lOICgoPzouKj8gS0VZKXxDRVJUSUZJQ0FURSktLS0tLS9tXG52YXIgZnVsbFJlZ2V4ID0gL14tLS0tLUJFR0lOICgoPzouKj8gS0VZKXxDRVJUSUZJQ0FURSktLS0tLShbMC05QS16XFxuXFxyXFwrXFwvXFw9XSspLS0tLS1FTkQgXFwxLS0tLS0kL21cbnZhciBldnAgPSByZXF1aXJlKCdldnBfYnl0ZXN0b2tleScpXG52YXIgY2lwaGVycyA9IHJlcXVpcmUoJ2Jyb3dzZXJpZnktYWVzJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2tleSwgcGFzc3dvcmQpIHtcbiAgdmFyIGtleSA9IG9rZXkudG9TdHJpbmcoKVxuICB2YXIgbWF0Y2ggPSBrZXkubWF0Y2goZmluZFByb2MpXG4gIHZhciBkZWNyeXB0ZWRcbiAgaWYgKCFtYXRjaCkge1xuICAgIHZhciBtYXRjaDIgPSBrZXkubWF0Y2goZnVsbFJlZ2V4KVxuICAgIGRlY3J5cHRlZCA9IG5ldyBCdWZmZXIobWF0Y2gyWzJdLnJlcGxhY2UoL1tcXHJcXG5dL2csICcnKSwgJ2Jhc2U2NCcpXG4gIH0gZWxzZSB7XG4gICAgdmFyIHN1aXRlID0gJ2FlcycgKyBtYXRjaFsxXVxuICAgIHZhciBpdiA9IEJ1ZmZlci5mcm9tKG1hdGNoWzJdLCAnaGV4JylcbiAgICB2YXIgY2lwaGVyVGV4dCA9IEJ1ZmZlci5mcm9tKG1hdGNoWzNdLnJlcGxhY2UoL1tcXHJcXG5dL2csICcnKSwgJ2Jhc2U2NCcpXG4gICAgdmFyIGNpcGhlcktleSA9IGV2cChwYXNzd29yZCwgaXYuc2xpY2UoMCwgOCksIHBhcnNlSW50KG1hdGNoWzFdLCAxMCkpLmtleVxuICAgIHZhciBvdXQgPSBbXVxuICAgIHZhciBjaXBoZXIgPSBjaXBoZXJzLmNyZWF0ZURlY2lwaGVyaXYoc3VpdGUsIGNpcGhlcktleSwgaXYpXG4gICAgb3V0LnB1c2goY2lwaGVyLnVwZGF0ZShjaXBoZXJUZXh0KSlcbiAgICBvdXQucHVzaChjaXBoZXIuZmluYWwoKSlcbiAgICBkZWNyeXB0ZWQgPSBCdWZmZXIuY29uY2F0KG91dClcbiAgfVxuICB2YXIgdGFnID0ga2V5Lm1hdGNoKHN0YXJ0UmVnZXgpWzFdXG4gIHJldHVybiB7XG4gICAgdGFnOiB0YWcsXG4gICAgZGF0YTogZGVjcnlwdGVkXG4gIH1cbn1cbiIsIi8vIG11Y2ggb2YgdGhpcyBiYXNlZCBvbiBodHRwczovL2dpdGh1Yi5jb20vaW5kdXRueS9zZWxmLXNpZ25lZC9ibG9iL2doLXBhZ2VzL2xpYi9yc2EuanNcbnZhciBCTiA9IHJlcXVpcmUoJ2JuLmpzJylcbnZhciBFQyA9IHJlcXVpcmUoJ2VsbGlwdGljJykuZWNcbnZhciBwYXJzZUtleXMgPSByZXF1aXJlKCdwYXJzZS1hc24xJylcbnZhciBjdXJ2ZXMgPSByZXF1aXJlKCcuL2N1cnZlcy5qc29uJylcblxuZnVuY3Rpb24gdmVyaWZ5IChzaWcsIGhhc2gsIGtleSwgc2lnblR5cGUsIHRhZykge1xuICB2YXIgcHViID0gcGFyc2VLZXlzKGtleSlcbiAgaWYgKHB1Yi50eXBlID09PSAnZWMnKSB7XG4gICAgLy8gcnNhIGtleXMgY2FuIGJlIGludGVycHJldGVkIGFzIGVjZHNhIG9uZXMgaW4gb3BlbnNzbFxuICAgIGlmIChzaWduVHlwZSAhPT0gJ2VjZHNhJyAmJiBzaWduVHlwZSAhPT0gJ2VjZHNhL3JzYScpIHRocm93IG5ldyBFcnJvcignd3JvbmcgcHVibGljIGtleSB0eXBlJylcbiAgICByZXR1cm4gZWNWZXJpZnkoc2lnLCBoYXNoLCBwdWIpXG4gIH0gZWxzZSBpZiAocHViLnR5cGUgPT09ICdkc2EnKSB7XG4gICAgaWYgKHNpZ25UeXBlICE9PSAnZHNhJykgdGhyb3cgbmV3IEVycm9yKCd3cm9uZyBwdWJsaWMga2V5IHR5cGUnKVxuICAgIHJldHVybiBkc2FWZXJpZnkoc2lnLCBoYXNoLCBwdWIpXG4gIH0gZWxzZSB7XG4gICAgaWYgKHNpZ25UeXBlICE9PSAncnNhJyAmJiBzaWduVHlwZSAhPT0gJ2VjZHNhL3JzYScpIHRocm93IG5ldyBFcnJvcignd3JvbmcgcHVibGljIGtleSB0eXBlJylcbiAgfVxuICBoYXNoID0gQnVmZmVyLmNvbmNhdChbdGFnLCBoYXNoXSlcbiAgdmFyIGxlbiA9IHB1Yi5tb2R1bHVzLmJ5dGVMZW5ndGgoKVxuICB2YXIgcGFkID0gWyAxIF1cbiAgdmFyIHBhZE51bSA9IDBcbiAgd2hpbGUgKGhhc2gubGVuZ3RoICsgcGFkLmxlbmd0aCArIDIgPCBsZW4pIHtcbiAgICBwYWQucHVzaCgweGZmKVxuICAgIHBhZE51bSsrXG4gIH1cbiAgcGFkLnB1c2goMHgwMClcbiAgdmFyIGkgPSAtMVxuICB3aGlsZSAoKytpIDwgaGFzaC5sZW5ndGgpIHtcbiAgICBwYWQucHVzaChoYXNoW2ldKVxuICB9XG4gIHBhZCA9IG5ldyBCdWZmZXIocGFkKVxuICB2YXIgcmVkID0gQk4ubW9udChwdWIubW9kdWx1cylcbiAgc2lnID0gbmV3IEJOKHNpZykudG9SZWQocmVkKVxuXG4gIHNpZyA9IHNpZy5yZWRQb3cobmV3IEJOKHB1Yi5wdWJsaWNFeHBvbmVudCkpXG4gIHNpZyA9IG5ldyBCdWZmZXIoc2lnLmZyb21SZWQoKS50b0FycmF5KCkpXG4gIHZhciBvdXQgPSBwYWROdW0gPCA4ID8gMSA6IDBcbiAgbGVuID0gTWF0aC5taW4oc2lnLmxlbmd0aCwgcGFkLmxlbmd0aClcbiAgaWYgKHNpZy5sZW5ndGggIT09IHBhZC5sZW5ndGgpIG91dCA9IDFcblxuICBpID0gLTFcbiAgd2hpbGUgKCsraSA8IGxlbikgb3V0IHw9IHNpZ1tpXSBeIHBhZFtpXVxuICByZXR1cm4gb3V0ID09PSAwXG59XG5cbmZ1bmN0aW9uIGVjVmVyaWZ5IChzaWcsIGhhc2gsIHB1Yikge1xuICB2YXIgY3VydmVJZCA9IGN1cnZlc1twdWIuZGF0YS5hbGdvcml0aG0uY3VydmUuam9pbignLicpXVxuICBpZiAoIWN1cnZlSWQpIHRocm93IG5ldyBFcnJvcigndW5rbm93biBjdXJ2ZSAnICsgcHViLmRhdGEuYWxnb3JpdGhtLmN1cnZlLmpvaW4oJy4nKSlcblxuICB2YXIgY3VydmUgPSBuZXcgRUMoY3VydmVJZClcbiAgdmFyIHB1YmtleSA9IHB1Yi5kYXRhLnN1YmplY3RQcml2YXRlS2V5LmRhdGFcblxuICByZXR1cm4gY3VydmUudmVyaWZ5KGhhc2gsIHNpZywgcHVia2V5KVxufVxuXG5mdW5jdGlvbiBkc2FWZXJpZnkgKHNpZywgaGFzaCwgcHViKSB7XG4gIHZhciBwID0gcHViLmRhdGEucFxuICB2YXIgcSA9IHB1Yi5kYXRhLnFcbiAgdmFyIGcgPSBwdWIuZGF0YS5nXG4gIHZhciB5ID0gcHViLmRhdGEucHViX2tleVxuICB2YXIgdW5wYWNrZWQgPSBwYXJzZUtleXMuc2lnbmF0dXJlLmRlY29kZShzaWcsICdkZXInKVxuICB2YXIgcyA9IHVucGFja2VkLnNcbiAgdmFyIHIgPSB1bnBhY2tlZC5yXG4gIGNoZWNrVmFsdWUocywgcSlcbiAgY2hlY2tWYWx1ZShyLCBxKVxuICB2YXIgbW9udHAgPSBCTi5tb250KHApXG4gIHZhciB3ID0gcy5pbnZtKHEpXG4gIHZhciB2ID0gZy50b1JlZChtb250cClcbiAgICAucmVkUG93KG5ldyBCTihoYXNoKS5tdWwodykubW9kKHEpKVxuICAgIC5mcm9tUmVkKClcbiAgICAubXVsKHkudG9SZWQobW9udHApLnJlZFBvdyhyLm11bCh3KS5tb2QocSkpLmZyb21SZWQoKSlcbiAgICAubW9kKHApXG4gICAgLm1vZChxKVxuICByZXR1cm4gdi5jbXAocikgPT09IDBcbn1cblxuZnVuY3Rpb24gY2hlY2tWYWx1ZSAoYiwgcSkge1xuICBpZiAoYi5jbXBuKDApIDw9IDApIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBzaWcnKVxuICBpZiAoYi5jbXAocSkgPj0gcSkgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIHNpZycpXG59XG5cbm1vZHVsZS5leHBvcnRzID0gdmVyaWZ5XG4iLCJ2YXIgZWxsaXB0aWMgPSByZXF1aXJlKCdlbGxpcHRpYycpXG52YXIgQk4gPSByZXF1aXJlKCdibi5qcycpXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3JlYXRlRUNESCAoY3VydmUpIHtcbiAgcmV0dXJuIG5ldyBFQ0RIKGN1cnZlKVxufVxuXG52YXIgYWxpYXNlcyA9IHtcbiAgc2VjcDI1NmsxOiB7XG4gICAgbmFtZTogJ3NlY3AyNTZrMScsXG4gICAgYnl0ZUxlbmd0aDogMzJcbiAgfSxcbiAgc2VjcDIyNHIxOiB7XG4gICAgbmFtZTogJ3AyMjQnLFxuICAgIGJ5dGVMZW5ndGg6IDI4XG4gIH0sXG4gIHByaW1lMjU2djE6IHtcbiAgICBuYW1lOiAncDI1NicsXG4gICAgYnl0ZUxlbmd0aDogMzJcbiAgfSxcbiAgcHJpbWUxOTJ2MToge1xuICAgIG5hbWU6ICdwMTkyJyxcbiAgICBieXRlTGVuZ3RoOiAyNFxuICB9LFxuICBlZDI1NTE5OiB7XG4gICAgbmFtZTogJ2VkMjU1MTknLFxuICAgIGJ5dGVMZW5ndGg6IDMyXG4gIH0sXG4gIHNlY3AzODRyMToge1xuICAgIG5hbWU6ICdwMzg0JyxcbiAgICBieXRlTGVuZ3RoOiA0OFxuICB9LFxuICBzZWNwNTIxcjE6IHtcbiAgICBuYW1lOiAncDUyMScsXG4gICAgYnl0ZUxlbmd0aDogNjZcbiAgfVxufVxuXG5hbGlhc2VzLnAyMjQgPSBhbGlhc2VzLnNlY3AyMjRyMVxuYWxpYXNlcy5wMjU2ID0gYWxpYXNlcy5zZWNwMjU2cjEgPSBhbGlhc2VzLnByaW1lMjU2djFcbmFsaWFzZXMucDE5MiA9IGFsaWFzZXMuc2VjcDE5MnIxID0gYWxpYXNlcy5wcmltZTE5MnYxXG5hbGlhc2VzLnAzODQgPSBhbGlhc2VzLnNlY3AzODRyMVxuYWxpYXNlcy5wNTIxID0gYWxpYXNlcy5zZWNwNTIxcjFcblxuZnVuY3Rpb24gRUNESCAoY3VydmUpIHtcbiAgdGhpcy5jdXJ2ZVR5cGUgPSBhbGlhc2VzW2N1cnZlXVxuICBpZiAoIXRoaXMuY3VydmVUeXBlKSB7XG4gICAgdGhpcy5jdXJ2ZVR5cGUgPSB7XG4gICAgICBuYW1lOiBjdXJ2ZVxuICAgIH1cbiAgfVxuICB0aGlzLmN1cnZlID0gbmV3IGVsbGlwdGljLmVjKHRoaXMuY3VydmVUeXBlLm5hbWUpIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbmV3LWNhcFxuICB0aGlzLmtleXMgPSB2b2lkIDBcbn1cblxuRUNESC5wcm90b3R5cGUuZ2VuZXJhdGVLZXlzID0gZnVuY3Rpb24gKGVuYywgZm9ybWF0KSB7XG4gIHRoaXMua2V5cyA9IHRoaXMuY3VydmUuZ2VuS2V5UGFpcigpXG4gIHJldHVybiB0aGlzLmdldFB1YmxpY0tleShlbmMsIGZvcm1hdClcbn1cblxuRUNESC5wcm90b3R5cGUuY29tcHV0ZVNlY3JldCA9IGZ1bmN0aW9uIChvdGhlciwgaW5lbmMsIGVuYykge1xuICBpbmVuYyA9IGluZW5jIHx8ICd1dGY4J1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihvdGhlcikpIHtcbiAgICBvdGhlciA9IG5ldyBCdWZmZXIob3RoZXIsIGluZW5jKVxuICB9XG4gIHZhciBvdGhlclB1YiA9IHRoaXMuY3VydmUua2V5RnJvbVB1YmxpYyhvdGhlcikuZ2V0UHVibGljKClcbiAgdmFyIG91dCA9IG90aGVyUHViLm11bCh0aGlzLmtleXMuZ2V0UHJpdmF0ZSgpKS5nZXRYKClcbiAgcmV0dXJuIGZvcm1hdFJldHVyblZhbHVlKG91dCwgZW5jLCB0aGlzLmN1cnZlVHlwZS5ieXRlTGVuZ3RoKVxufVxuXG5FQ0RILnByb3RvdHlwZS5nZXRQdWJsaWNLZXkgPSBmdW5jdGlvbiAoZW5jLCBmb3JtYXQpIHtcbiAgdmFyIGtleSA9IHRoaXMua2V5cy5nZXRQdWJsaWMoZm9ybWF0ID09PSAnY29tcHJlc3NlZCcsIHRydWUpXG4gIGlmIChmb3JtYXQgPT09ICdoeWJyaWQnKSB7XG4gICAgaWYgKGtleVtrZXkubGVuZ3RoIC0gMV0gJSAyKSB7XG4gICAgICBrZXlbMF0gPSA3XG4gICAgfSBlbHNlIHtcbiAgICAgIGtleVswXSA9IDZcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZvcm1hdFJldHVyblZhbHVlKGtleSwgZW5jKVxufVxuXG5FQ0RILnByb3RvdHlwZS5nZXRQcml2YXRlS2V5ID0gZnVuY3Rpb24gKGVuYykge1xuICByZXR1cm4gZm9ybWF0UmV0dXJuVmFsdWUodGhpcy5rZXlzLmdldFByaXZhdGUoKSwgZW5jKVxufVxuXG5FQ0RILnByb3RvdHlwZS5zZXRQdWJsaWNLZXkgPSBmdW5jdGlvbiAocHViLCBlbmMpIHtcbiAgZW5jID0gZW5jIHx8ICd1dGY4J1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihwdWIpKSB7XG4gICAgcHViID0gbmV3IEJ1ZmZlcihwdWIsIGVuYylcbiAgfVxuICB0aGlzLmtleXMuX2ltcG9ydFB1YmxpYyhwdWIpXG4gIHJldHVybiB0aGlzXG59XG5cbkVDREgucHJvdG90eXBlLnNldFByaXZhdGVLZXkgPSBmdW5jdGlvbiAocHJpdiwgZW5jKSB7XG4gIGVuYyA9IGVuYyB8fCAndXRmOCdcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIocHJpdikpIHtcbiAgICBwcml2ID0gbmV3IEJ1ZmZlcihwcml2LCBlbmMpXG4gIH1cblxuICB2YXIgX3ByaXYgPSBuZXcgQk4ocHJpdilcbiAgX3ByaXYgPSBfcHJpdi50b1N0cmluZygxNilcbiAgdGhpcy5rZXlzID0gdGhpcy5jdXJ2ZS5nZW5LZXlQYWlyKClcbiAgdGhpcy5rZXlzLl9pbXBvcnRQcml2YXRlKF9wcml2KVxuICByZXR1cm4gdGhpc1xufVxuXG5mdW5jdGlvbiBmb3JtYXRSZXR1cm5WYWx1ZSAoYm4sIGVuYywgbGVuKSB7XG4gIGlmICghQXJyYXkuaXNBcnJheShibikpIHtcbiAgICBibiA9IGJuLnRvQXJyYXkoKVxuICB9XG4gIHZhciBidWYgPSBuZXcgQnVmZmVyKGJuKVxuICBpZiAobGVuICYmIGJ1Zi5sZW5ndGggPCBsZW4pIHtcbiAgICB2YXIgemVyb3MgPSBuZXcgQnVmZmVyKGxlbiAtIGJ1Zi5sZW5ndGgpXG4gICAgemVyb3MuZmlsbCgwKVxuICAgIGJ1ZiA9IEJ1ZmZlci5jb25jYXQoW3plcm9zLCBidWZdKVxuICB9XG4gIGlmICghZW5jKSB7XG4gICAgcmV0dXJuIGJ1ZlxuICB9IGVsc2Uge1xuICAgIHJldHVybiBidWYudG9TdHJpbmcoZW5jKVxuICB9XG59XG4iLCJleHBvcnRzLnB1YmxpY0VuY3J5cHQgPSByZXF1aXJlKCcuL3B1YmxpY0VuY3J5cHQnKVxuZXhwb3J0cy5wcml2YXRlRGVjcnlwdCA9IHJlcXVpcmUoJy4vcHJpdmF0ZURlY3J5cHQnKVxuXG5leHBvcnRzLnByaXZhdGVFbmNyeXB0ID0gZnVuY3Rpb24gcHJpdmF0ZUVuY3J5cHQgKGtleSwgYnVmKSB7XG4gIHJldHVybiBleHBvcnRzLnB1YmxpY0VuY3J5cHQoa2V5LCBidWYsIHRydWUpXG59XG5cbmV4cG9ydHMucHVibGljRGVjcnlwdCA9IGZ1bmN0aW9uIHB1YmxpY0RlY3J5cHQgKGtleSwgYnVmKSB7XG4gIHJldHVybiBleHBvcnRzLnByaXZhdGVEZWNyeXB0KGtleSwgYnVmLCB0cnVlKVxufVxuIiwidmFyIHBhcnNlS2V5cyA9IHJlcXVpcmUoJ3BhcnNlLWFzbjEnKVxudmFyIHJhbmRvbUJ5dGVzID0gcmVxdWlyZSgncmFuZG9tYnl0ZXMnKVxudmFyIGNyZWF0ZUhhc2ggPSByZXF1aXJlKCdjcmVhdGUtaGFzaCcpXG52YXIgbWdmID0gcmVxdWlyZSgnLi9tZ2YnKVxudmFyIHhvciA9IHJlcXVpcmUoJy4veG9yJylcbnZhciBCTiA9IHJlcXVpcmUoJ2JuLmpzJylcbnZhciB3aXRoUHVibGljID0gcmVxdWlyZSgnLi93aXRoUHVibGljJylcbnZhciBjcnQgPSByZXF1aXJlKCdicm93c2VyaWZ5LXJzYScpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBwdWJsaWNFbmNyeXB0IChwdWJsaWNLZXksIG1zZywgcmV2ZXJzZSkge1xuICB2YXIgcGFkZGluZ1xuICBpZiAocHVibGljS2V5LnBhZGRpbmcpIHtcbiAgICBwYWRkaW5nID0gcHVibGljS2V5LnBhZGRpbmdcbiAgfSBlbHNlIGlmIChyZXZlcnNlKSB7XG4gICAgcGFkZGluZyA9IDFcbiAgfSBlbHNlIHtcbiAgICBwYWRkaW5nID0gNFxuICB9XG4gIHZhciBrZXkgPSBwYXJzZUtleXMocHVibGljS2V5KVxuICB2YXIgcGFkZGVkTXNnXG4gIGlmIChwYWRkaW5nID09PSA0KSB7XG4gICAgcGFkZGVkTXNnID0gb2FlcChrZXksIG1zZylcbiAgfSBlbHNlIGlmIChwYWRkaW5nID09PSAxKSB7XG4gICAgcGFkZGVkTXNnID0gcGtjczEoa2V5LCBtc2csIHJldmVyc2UpXG4gIH0gZWxzZSBpZiAocGFkZGluZyA9PT0gMykge1xuICAgIHBhZGRlZE1zZyA9IG5ldyBCTihtc2cpXG4gICAgaWYgKHBhZGRlZE1zZy5jbXAoa2V5Lm1vZHVsdXMpID49IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignZGF0YSB0b28gbG9uZyBmb3IgbW9kdWx1cycpXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcigndW5rbm93biBwYWRkaW5nJylcbiAgfVxuICBpZiAocmV2ZXJzZSkge1xuICAgIHJldHVybiBjcnQocGFkZGVkTXNnLCBrZXkpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHdpdGhQdWJsaWMocGFkZGVkTXNnLCBrZXkpXG4gIH1cbn1cblxuZnVuY3Rpb24gb2FlcCAoa2V5LCBtc2cpIHtcbiAgdmFyIGsgPSBrZXkubW9kdWx1cy5ieXRlTGVuZ3RoKClcbiAgdmFyIG1MZW4gPSBtc2cubGVuZ3RoXG4gIHZhciBpSGFzaCA9IGNyZWF0ZUhhc2goJ3NoYTEnKS51cGRhdGUoQnVmZmVyLmFsbG9jKDApKS5kaWdlc3QoKVxuICB2YXIgaExlbiA9IGlIYXNoLmxlbmd0aFxuICB2YXIgaExlbjIgPSAyICogaExlblxuICBpZiAobUxlbiA+IGsgLSBoTGVuMiAtIDIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ21lc3NhZ2UgdG9vIGxvbmcnKVxuICB9XG4gIHZhciBwcyA9IEJ1ZmZlci5hbGxvYyhrIC0gbUxlbiAtIGhMZW4yIC0gMilcbiAgdmFyIGRibGVuID0gayAtIGhMZW4gLSAxXG4gIHZhciBzZWVkID0gcmFuZG9tQnl0ZXMoaExlbilcbiAgdmFyIG1hc2tlZERiID0geG9yKEJ1ZmZlci5jb25jYXQoW2lIYXNoLCBwcywgQnVmZmVyLmFsbG9jKDEsIDEpLCBtc2ddLCBkYmxlbiksIG1nZihzZWVkLCBkYmxlbikpXG4gIHZhciBtYXNrZWRTZWVkID0geG9yKHNlZWQsIG1nZihtYXNrZWREYiwgaExlbikpXG4gIHJldHVybiBuZXcgQk4oQnVmZmVyLmNvbmNhdChbQnVmZmVyLmFsbG9jKDEpLCBtYXNrZWRTZWVkLCBtYXNrZWREYl0sIGspKVxufVxuZnVuY3Rpb24gcGtjczEgKGtleSwgbXNnLCByZXZlcnNlKSB7XG4gIHZhciBtTGVuID0gbXNnLmxlbmd0aFxuICB2YXIgayA9IGtleS5tb2R1bHVzLmJ5dGVMZW5ndGgoKVxuICBpZiAobUxlbiA+IGsgLSAxMSkge1xuICAgIHRocm93IG5ldyBFcnJvcignbWVzc2FnZSB0b28gbG9uZycpXG4gIH1cbiAgdmFyIHBzXG4gIGlmIChyZXZlcnNlKSB7XG4gICAgcHMgPSBCdWZmZXIuYWxsb2MoayAtIG1MZW4gLSAzLCAweGZmKVxuICB9IGVsc2Uge1xuICAgIHBzID0gbm9uWmVybyhrIC0gbUxlbiAtIDMpXG4gIH1cbiAgcmV0dXJuIG5ldyBCTihCdWZmZXIuY29uY2F0KFtCdWZmZXIuZnJvbShbMCwgcmV2ZXJzZSA/IDEgOiAyXSksIHBzLCBCdWZmZXIuYWxsb2MoMSksIG1zZ10sIGspKVxufVxuZnVuY3Rpb24gbm9uWmVybyAobGVuKSB7XG4gIHZhciBvdXQgPSBCdWZmZXIuYWxsb2NVbnNhZmUobGVuKVxuICB2YXIgaSA9IDBcbiAgdmFyIGNhY2hlID0gcmFuZG9tQnl0ZXMobGVuICogMilcbiAgdmFyIGN1ciA9IDBcbiAgdmFyIG51bVxuICB3aGlsZSAoaSA8IGxlbikge1xuICAgIGlmIChjdXIgPT09IGNhY2hlLmxlbmd0aCkge1xuICAgICAgY2FjaGUgPSByYW5kb21CeXRlcyhsZW4gKiAyKVxuICAgICAgY3VyID0gMFxuICAgIH1cbiAgICBudW0gPSBjYWNoZVtjdXIrK11cbiAgICBpZiAobnVtKSB7XG4gICAgICBvdXRbaSsrXSA9IG51bVxuICAgIH1cbiAgfVxuICByZXR1cm4gb3V0XG59XG4iLCJ2YXIgcGFyc2VLZXlzID0gcmVxdWlyZSgncGFyc2UtYXNuMScpXG52YXIgbWdmID0gcmVxdWlyZSgnLi9tZ2YnKVxudmFyIHhvciA9IHJlcXVpcmUoJy4veG9yJylcbnZhciBCTiA9IHJlcXVpcmUoJ2JuLmpzJylcbnZhciBjcnQgPSByZXF1aXJlKCdicm93c2VyaWZ5LXJzYScpXG52YXIgY3JlYXRlSGFzaCA9IHJlcXVpcmUoJ2NyZWF0ZS1oYXNoJylcbnZhciB3aXRoUHVibGljID0gcmVxdWlyZSgnLi93aXRoUHVibGljJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHByaXZhdGVEZWNyeXB0IChwcml2YXRlS2V5LCBlbmMsIHJldmVyc2UpIHtcbiAgdmFyIHBhZGRpbmdcbiAgaWYgKHByaXZhdGVLZXkucGFkZGluZykge1xuICAgIHBhZGRpbmcgPSBwcml2YXRlS2V5LnBhZGRpbmdcbiAgfSBlbHNlIGlmIChyZXZlcnNlKSB7XG4gICAgcGFkZGluZyA9IDFcbiAgfSBlbHNlIHtcbiAgICBwYWRkaW5nID0gNFxuICB9XG5cbiAgdmFyIGtleSA9IHBhcnNlS2V5cyhwcml2YXRlS2V5KVxuICB2YXIgayA9IGtleS5tb2R1bHVzLmJ5dGVMZW5ndGgoKVxuICBpZiAoZW5jLmxlbmd0aCA+IGsgfHwgbmV3IEJOKGVuYykuY21wKGtleS5tb2R1bHVzKSA+PSAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdkZWNyeXB0aW9uIGVycm9yJylcbiAgfVxuICB2YXIgbXNnXG4gIGlmIChyZXZlcnNlKSB7XG4gICAgbXNnID0gd2l0aFB1YmxpYyhuZXcgQk4oZW5jKSwga2V5KVxuICB9IGVsc2Uge1xuICAgIG1zZyA9IGNydChlbmMsIGtleSlcbiAgfVxuICB2YXIgekJ1ZmZlciA9IEJ1ZmZlci5hbGxvYyhrIC0gbXNnLmxlbmd0aClcbiAgbXNnID0gQnVmZmVyLmNvbmNhdChbekJ1ZmZlciwgbXNnXSwgaylcbiAgaWYgKHBhZGRpbmcgPT09IDQpIHtcbiAgICByZXR1cm4gb2FlcChrZXksIG1zZylcbiAgfSBlbHNlIGlmIChwYWRkaW5nID09PSAxKSB7XG4gICAgcmV0dXJuIHBrY3MxKGtleSwgbXNnLCByZXZlcnNlKVxuICB9IGVsc2UgaWYgKHBhZGRpbmcgPT09IDMpIHtcbiAgICByZXR1cm4gbXNnXG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCd1bmtub3duIHBhZGRpbmcnKVxuICB9XG59XG5cbmZ1bmN0aW9uIG9hZXAgKGtleSwgbXNnKSB7XG4gIHZhciBrID0ga2V5Lm1vZHVsdXMuYnl0ZUxlbmd0aCgpXG4gIHZhciBpSGFzaCA9IGNyZWF0ZUhhc2goJ3NoYTEnKS51cGRhdGUoQnVmZmVyLmFsbG9jKDApKS5kaWdlc3QoKVxuICB2YXIgaExlbiA9IGlIYXNoLmxlbmd0aFxuICBpZiAobXNnWzBdICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdkZWNyeXB0aW9uIGVycm9yJylcbiAgfVxuICB2YXIgbWFza2VkU2VlZCA9IG1zZy5zbGljZSgxLCBoTGVuICsgMSlcbiAgdmFyIG1hc2tlZERiID0gbXNnLnNsaWNlKGhMZW4gKyAxKVxuICB2YXIgc2VlZCA9IHhvcihtYXNrZWRTZWVkLCBtZ2YobWFza2VkRGIsIGhMZW4pKVxuICB2YXIgZGIgPSB4b3IobWFza2VkRGIsIG1nZihzZWVkLCBrIC0gaExlbiAtIDEpKVxuICBpZiAoY29tcGFyZShpSGFzaCwgZGIuc2xpY2UoMCwgaExlbikpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdkZWNyeXB0aW9uIGVycm9yJylcbiAgfVxuICB2YXIgaSA9IGhMZW5cbiAgd2hpbGUgKGRiW2ldID09PSAwKSB7XG4gICAgaSsrXG4gIH1cbiAgaWYgKGRiW2krK10gIT09IDEpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2RlY3J5cHRpb24gZXJyb3InKVxuICB9XG4gIHJldHVybiBkYi5zbGljZShpKVxufVxuXG5mdW5jdGlvbiBwa2NzMSAoa2V5LCBtc2csIHJldmVyc2UpIHtcbiAgdmFyIHAxID0gbXNnLnNsaWNlKDAsIDIpXG4gIHZhciBpID0gMlxuICB2YXIgc3RhdHVzID0gMFxuICB3aGlsZSAobXNnW2krK10gIT09IDApIHtcbiAgICBpZiAoaSA+PSBtc2cubGVuZ3RoKSB7XG4gICAgICBzdGF0dXMrK1xuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cbiAgdmFyIHBzID0gbXNnLnNsaWNlKDIsIGkgLSAxKVxuXG4gIGlmICgocDEudG9TdHJpbmcoJ2hleCcpICE9PSAnMDAwMicgJiYgIXJldmVyc2UpIHx8IChwMS50b1N0cmluZygnaGV4JykgIT09ICcwMDAxJyAmJiByZXZlcnNlKSkge1xuICAgIHN0YXR1cysrXG4gIH1cbiAgaWYgKHBzLmxlbmd0aCA8IDgpIHtcbiAgICBzdGF0dXMrK1xuICB9XG4gIGlmIChzdGF0dXMpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2RlY3J5cHRpb24gZXJyb3InKVxuICB9XG4gIHJldHVybiBtc2cuc2xpY2UoaSlcbn1cbmZ1bmN0aW9uIGNvbXBhcmUgKGEsIGIpIHtcbiAgYSA9IEJ1ZmZlci5mcm9tKGEpXG4gIGIgPSBCdWZmZXIuZnJvbShiKVxuICB2YXIgZGlmID0gMFxuICB2YXIgbGVuID0gYS5sZW5ndGhcbiAgaWYgKGEubGVuZ3RoICE9PSBiLmxlbmd0aCkge1xuICAgIGRpZisrXG4gICAgbGVuID0gTWF0aC5taW4oYS5sZW5ndGgsIGIubGVuZ3RoKVxuICB9XG4gIHZhciBpID0gLTFcbiAgd2hpbGUgKCsraSA8IGxlbikge1xuICAgIGRpZiArPSAoYVtpXSBeIGJbaV0pXG4gIH1cbiAgcmV0dXJuIGRpZlxufVxuIiwiJ3VzZSBzdHJpY3QnXG5cbmZ1bmN0aW9uIG9sZEJyb3dzZXIgKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ3NlY3VyZSByYW5kb20gbnVtYmVyIGdlbmVyYXRpb24gbm90IHN1cHBvcnRlZCBieSB0aGlzIGJyb3dzZXJcXG51c2UgY2hyb21lLCBGaXJlRm94IG9yIEludGVybmV0IEV4cGxvcmVyIDExJylcbn1cbnZhciBzYWZlQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKVxudmFyIHJhbmRvbWJ5dGVzID0gcmVxdWlyZSgncmFuZG9tYnl0ZXMnKVxudmFyIEJ1ZmZlciA9IHNhZmVCdWZmZXIuQnVmZmVyXG52YXIga0J1ZmZlck1heExlbmd0aCA9IHNhZmVCdWZmZXIua01heExlbmd0aFxudmFyIGNyeXB0byA9IGdsb2JhbC5jcnlwdG8gfHwgZ2xvYmFsLm1zQ3J5cHRvXG52YXIga01heFVpbnQzMiA9IE1hdGgucG93KDIsIDMyKSAtIDFcbmZ1bmN0aW9uIGFzc2VydE9mZnNldCAob2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKHR5cGVvZiBvZmZzZXQgIT09ICdudW1iZXInIHx8IG9mZnNldCAhPT0gb2Zmc2V0KSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignb2Zmc2V0IG11c3QgYmUgYSBudW1iZXInKVxuICB9XG5cbiAgaWYgKG9mZnNldCA+IGtNYXhVaW50MzIgfHwgb2Zmc2V0IDwgMCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ29mZnNldCBtdXN0IGJlIGEgdWludDMyJylcbiAgfVxuXG4gIGlmIChvZmZzZXQgPiBrQnVmZmVyTWF4TGVuZ3RoIHx8IG9mZnNldCA+IGxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdvZmZzZXQgb3V0IG9mIHJhbmdlJylcbiAgfVxufVxuXG5mdW5jdGlvbiBhc3NlcnRTaXplIChzaXplLCBvZmZzZXQsIGxlbmd0aCkge1xuICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInIHx8IHNpemUgIT09IHNpemUpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdzaXplIG11c3QgYmUgYSBudW1iZXInKVxuICB9XG5cbiAgaWYgKHNpemUgPiBrTWF4VWludDMyIHx8IHNpemUgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignc2l6ZSBtdXN0IGJlIGEgdWludDMyJylcbiAgfVxuXG4gIGlmIChzaXplICsgb2Zmc2V0ID4gbGVuZ3RoIHx8IHNpemUgPiBrQnVmZmVyTWF4TGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2J1ZmZlciB0b28gc21hbGwnKVxuICB9XG59XG5pZiAoKGNyeXB0byAmJiBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKSB8fCAhcHJvY2Vzcy5icm93c2VyKSB7XG4gIGV4cG9ydHMucmFuZG9tRmlsbCA9IHJhbmRvbUZpbGxcbiAgZXhwb3J0cy5yYW5kb21GaWxsU3luYyA9IHJhbmRvbUZpbGxTeW5jXG59IGVsc2Uge1xuICBleHBvcnRzLnJhbmRvbUZpbGwgPSBvbGRCcm93c2VyXG4gIGV4cG9ydHMucmFuZG9tRmlsbFN5bmMgPSBvbGRCcm93c2VyXG59XG5mdW5jdGlvbiByYW5kb21GaWxsIChidWYsIG9mZnNldCwgc2l6ZSwgY2IpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSAmJiAhKGJ1ZiBpbnN0YW5jZW9mIGdsb2JhbC5VaW50OEFycmF5KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiYnVmXCIgYXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlciBvciBVaW50OEFycmF5JylcbiAgfVxuXG4gIGlmICh0eXBlb2Ygb2Zmc2V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2IgPSBvZmZzZXRcbiAgICBvZmZzZXQgPSAwXG4gICAgc2l6ZSA9IGJ1Zi5sZW5ndGhcbiAgfSBlbHNlIGlmICh0eXBlb2Ygc2l6ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNiID0gc2l6ZVxuICAgIHNpemUgPSBidWYubGVuZ3RoIC0gb2Zmc2V0XG4gIH0gZWxzZSBpZiAodHlwZW9mIGNiICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJjYlwiIGFyZ3VtZW50IG11c3QgYmUgYSBmdW5jdGlvbicpXG4gIH1cbiAgYXNzZXJ0T2Zmc2V0KG9mZnNldCwgYnVmLmxlbmd0aClcbiAgYXNzZXJ0U2l6ZShzaXplLCBvZmZzZXQsIGJ1Zi5sZW5ndGgpXG4gIHJldHVybiBhY3R1YWxGaWxsKGJ1Ziwgb2Zmc2V0LCBzaXplLCBjYilcbn1cblxuZnVuY3Rpb24gYWN0dWFsRmlsbCAoYnVmLCBvZmZzZXQsIHNpemUsIGNiKSB7XG4gIGlmIChwcm9jZXNzLmJyb3dzZXIpIHtcbiAgICB2YXIgb3VyQnVmID0gYnVmLmJ1ZmZlclxuICAgIHZhciB1aW50ID0gbmV3IFVpbnQ4QXJyYXkob3VyQnVmLCBvZmZzZXQsIHNpemUpXG4gICAgY3J5cHRvLmdldFJhbmRvbVZhbHVlcyh1aW50KVxuICAgIGlmIChjYikge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNiKG51bGwsIGJ1ZilcbiAgICAgIH0pXG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgcmV0dXJuIGJ1ZlxuICB9XG4gIGlmIChjYikge1xuICAgIHJhbmRvbWJ5dGVzKHNpemUsIGZ1bmN0aW9uIChlcnIsIGJ5dGVzKSB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIHJldHVybiBjYihlcnIpXG4gICAgICB9XG4gICAgICBieXRlcy5jb3B5KGJ1Ziwgb2Zmc2V0KVxuICAgICAgY2IobnVsbCwgYnVmKVxuICAgIH0pXG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIGJ5dGVzID0gcmFuZG9tYnl0ZXMoc2l6ZSlcbiAgYnl0ZXMuY29weShidWYsIG9mZnNldClcbiAgcmV0dXJuIGJ1ZlxufVxuZnVuY3Rpb24gcmFuZG9tRmlsbFN5bmMgKGJ1Ziwgb2Zmc2V0LCBzaXplKSB7XG4gIGlmICh0eXBlb2Ygb2Zmc2V0ID09PSAndW5kZWZpbmVkJykge1xuICAgIG9mZnNldCA9IDBcbiAgfVxuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpICYmICEoYnVmIGluc3RhbmNlb2YgZ2xvYmFsLlVpbnQ4QXJyYXkpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJidWZcIiBhcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyIG9yIFVpbnQ4QXJyYXknKVxuICB9XG5cbiAgYXNzZXJ0T2Zmc2V0KG9mZnNldCwgYnVmLmxlbmd0aClcblxuICBpZiAoc2l6ZSA9PT0gdW5kZWZpbmVkKSBzaXplID0gYnVmLmxlbmd0aCAtIG9mZnNldFxuXG4gIGFzc2VydFNpemUoc2l6ZSwgb2Zmc2V0LCBidWYubGVuZ3RoKVxuXG4gIHJldHVybiBhY3R1YWxGaWxsKGJ1Ziwgb2Zmc2V0LCBzaXplKVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgb2JqZWN0QXNzaWduID0gcmVxdWlyZSgnb2JqZWN0LWFzc2lnbicpO1xuXG4vLyBjb21wYXJlIGFuZCBpc0J1ZmZlciB0YWtlbiBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyL2Jsb2IvNjgwZTllNWU0ODhmMjJhYWMyNzU5OWE1N2RjODQ0YTYzMTU5MjhkZC9pbmRleC5qc1xuLy8gb3JpZ2luYWwgbm90aWNlOlxuXG4vKiFcbiAqIFRoZSBidWZmZXIgbW9kdWxlIGZyb20gbm9kZS5qcywgZm9yIHRoZSBicm93c2VyLlxuICpcbiAqIEBhdXRob3IgICBGZXJvc3MgQWJvdWtoYWRpamVoIDxmZXJvc3NAZmVyb3NzLm9yZz4gPGh0dHA6Ly9mZXJvc3Mub3JnPlxuICogQGxpY2Vuc2UgIE1JVFxuICovXG5mdW5jdGlvbiBjb21wYXJlKGEsIGIpIHtcbiAgaWYgKGEgPT09IGIpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIHZhciB4ID0gYS5sZW5ndGg7XG4gIHZhciB5ID0gYi5sZW5ndGg7XG5cbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IE1hdGgubWluKHgsIHkpOyBpIDwgbGVuOyArK2kpIHtcbiAgICBpZiAoYVtpXSAhPT0gYltpXSkge1xuICAgICAgeCA9IGFbaV07XG4gICAgICB5ID0gYltpXTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIGlmICh4IDwgeSkge1xuICAgIHJldHVybiAtMTtcbiAgfVxuICBpZiAoeSA8IHgpIHtcbiAgICByZXR1cm4gMTtcbiAgfVxuICByZXR1cm4gMDtcbn1cbmZ1bmN0aW9uIGlzQnVmZmVyKGIpIHtcbiAgaWYgKGdsb2JhbC5CdWZmZXIgJiYgdHlwZW9mIGdsb2JhbC5CdWZmZXIuaXNCdWZmZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gZ2xvYmFsLkJ1ZmZlci5pc0J1ZmZlcihiKTtcbiAgfVxuICByZXR1cm4gISEoYiAhPSBudWxsICYmIGIuX2lzQnVmZmVyKTtcbn1cblxuLy8gYmFzZWQgb24gbm9kZSBhc3NlcnQsIG9yaWdpbmFsIG5vdGljZTpcbi8vIE5COiBUaGUgVVJMIHRvIHRoZSBDb21tb25KUyBzcGVjIGlzIGtlcHQganVzdCBmb3IgdHJhZGl0aW9uLlxuLy8gICAgIG5vZGUtYXNzZXJ0IGhhcyBldm9sdmVkIGEgbG90IHNpbmNlIHRoZW4sIGJvdGggaW4gQVBJIGFuZCBiZWhhdmlvci5cblxuLy8gaHR0cDovL3dpa2kuY29tbW9uanMub3JnL3dpa2kvVW5pdF9UZXN0aW5nLzEuMFxuLy9cbi8vIFRISVMgSVMgTk9UIFRFU1RFRCBOT1IgTElLRUxZIFRPIFdPUksgT1VUU0lERSBWOCFcbi8vXG4vLyBPcmlnaW5hbGx5IGZyb20gbmFyd2hhbC5qcyAoaHR0cDovL25hcndoYWxqcy5vcmcpXG4vLyBDb3B5cmlnaHQgKGMpIDIwMDkgVGhvbWFzIFJvYmluc29uIDwyODBub3J0aC5jb20+XG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuLy8gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgJ1NvZnR3YXJlJyksIHRvXG4vLyBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZVxuLy8gcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yXG4vLyBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEICdBUyBJUycsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTlxuLy8gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTlxuLy8gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbnZhciB1dGlsID0gcmVxdWlyZSgndXRpbC8nKTtcbnZhciBoYXNPd24gPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIHBTbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcbnZhciBmdW5jdGlvbnNIYXZlTmFtZXMgPSAoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gZnVuY3Rpb24gZm9vKCkge30ubmFtZSA9PT0gJ2Zvbyc7XG59KCkpO1xuZnVuY3Rpb24gcFRvU3RyaW5nIChvYmopIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopO1xufVxuZnVuY3Rpb24gaXNWaWV3KGFycmJ1Zikge1xuICBpZiAoaXNCdWZmZXIoYXJyYnVmKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAodHlwZW9mIGdsb2JhbC5BcnJheUJ1ZmZlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAodHlwZW9mIEFycmF5QnVmZmVyLmlzVmlldyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBBcnJheUJ1ZmZlci5pc1ZpZXcoYXJyYnVmKTtcbiAgfVxuICBpZiAoIWFycmJ1Zikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoYXJyYnVmIGluc3RhbmNlb2YgRGF0YVZpZXcpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAoYXJyYnVmLmJ1ZmZlciAmJiBhcnJidWYuYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG4vLyAxLiBUaGUgYXNzZXJ0IG1vZHVsZSBwcm92aWRlcyBmdW5jdGlvbnMgdGhhdCB0aHJvd1xuLy8gQXNzZXJ0aW9uRXJyb3IncyB3aGVuIHBhcnRpY3VsYXIgY29uZGl0aW9ucyBhcmUgbm90IG1ldC4gVGhlXG4vLyBhc3NlcnQgbW9kdWxlIG11c3QgY29uZm9ybSB0byB0aGUgZm9sbG93aW5nIGludGVyZmFjZS5cblxudmFyIGFzc2VydCA9IG1vZHVsZS5leHBvcnRzID0gb2s7XG5cbi8vIDIuIFRoZSBBc3NlcnRpb25FcnJvciBpcyBkZWZpbmVkIGluIGFzc2VydC5cbi8vIG5ldyBhc3NlcnQuQXNzZXJ0aW9uRXJyb3IoeyBtZXNzYWdlOiBtZXNzYWdlLFxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdHVhbDogYWN0dWFsLFxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdGVkOiBleHBlY3RlZCB9KVxuXG52YXIgcmVnZXggPSAvXFxzKmZ1bmN0aW9uXFxzKyhbXlxcKFxcc10qKVxccyovO1xuLy8gYmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL2xqaGFyYi9mdW5jdGlvbi5wcm90b3R5cGUubmFtZS9ibG9iL2FkZWVlZWM4YmZjYzYwNjhiMTg3ZDdkOWZiM2Q1YmIxZDNhMzA4OTkvaW1wbGVtZW50YXRpb24uanNcbmZ1bmN0aW9uIGdldE5hbWUoZnVuYykge1xuICBpZiAoIXV0aWwuaXNGdW5jdGlvbihmdW5jKSkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoZnVuY3Rpb25zSGF2ZU5hbWVzKSB7XG4gICAgcmV0dXJuIGZ1bmMubmFtZTtcbiAgfVxuICB2YXIgc3RyID0gZnVuYy50b1N0cmluZygpO1xuICB2YXIgbWF0Y2ggPSBzdHIubWF0Y2gocmVnZXgpO1xuICByZXR1cm4gbWF0Y2ggJiYgbWF0Y2hbMV07XG59XG5hc3NlcnQuQXNzZXJ0aW9uRXJyb3IgPSBmdW5jdGlvbiBBc3NlcnRpb25FcnJvcihvcHRpb25zKSB7XG4gIHRoaXMubmFtZSA9ICdBc3NlcnRpb25FcnJvcic7XG4gIHRoaXMuYWN0dWFsID0gb3B0aW9ucy5hY3R1YWw7XG4gIHRoaXMuZXhwZWN0ZWQgPSBvcHRpb25zLmV4cGVjdGVkO1xuICB0aGlzLm9wZXJhdG9yID0gb3B0aW9ucy5vcGVyYXRvcjtcbiAgaWYgKG9wdGlvbnMubWVzc2FnZSkge1xuICAgIHRoaXMubWVzc2FnZSA9IG9wdGlvbnMubWVzc2FnZTtcbiAgICB0aGlzLmdlbmVyYXRlZE1lc3NhZ2UgPSBmYWxzZTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLm1lc3NhZ2UgPSBnZXRNZXNzYWdlKHRoaXMpO1xuICAgIHRoaXMuZ2VuZXJhdGVkTWVzc2FnZSA9IHRydWU7XG4gIH1cbiAgdmFyIHN0YWNrU3RhcnRGdW5jdGlvbiA9IG9wdGlvbnMuc3RhY2tTdGFydEZ1bmN0aW9uIHx8IGZhaWw7XG4gIGlmIChFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSkge1xuICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIHN0YWNrU3RhcnRGdW5jdGlvbik7XG4gIH0gZWxzZSB7XG4gICAgLy8gbm9uIHY4IGJyb3dzZXJzIHNvIHdlIGNhbiBoYXZlIGEgc3RhY2t0cmFjZVxuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoKTtcbiAgICBpZiAoZXJyLnN0YWNrKSB7XG4gICAgICB2YXIgb3V0ID0gZXJyLnN0YWNrO1xuXG4gICAgICAvLyB0cnkgdG8gc3RyaXAgdXNlbGVzcyBmcmFtZXNcbiAgICAgIHZhciBmbl9uYW1lID0gZ2V0TmFtZShzdGFja1N0YXJ0RnVuY3Rpb24pO1xuICAgICAgdmFyIGlkeCA9IG91dC5pbmRleE9mKCdcXG4nICsgZm5fbmFtZSk7XG4gICAgICBpZiAoaWR4ID49IDApIHtcbiAgICAgICAgLy8gb25jZSB3ZSBoYXZlIGxvY2F0ZWQgdGhlIGZ1bmN0aW9uIGZyYW1lXG4gICAgICAgIC8vIHdlIG5lZWQgdG8gc3RyaXAgb3V0IGV2ZXJ5dGhpbmcgYmVmb3JlIGl0IChhbmQgaXRzIGxpbmUpXG4gICAgICAgIHZhciBuZXh0X2xpbmUgPSBvdXQuaW5kZXhPZignXFxuJywgaWR4ICsgMSk7XG4gICAgICAgIG91dCA9IG91dC5zdWJzdHJpbmcobmV4dF9saW5lICsgMSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc3RhY2sgPSBvdXQ7XG4gICAgfVxuICB9XG59O1xuXG4vLyBhc3NlcnQuQXNzZXJ0aW9uRXJyb3IgaW5zdGFuY2VvZiBFcnJvclxudXRpbC5pbmhlcml0cyhhc3NlcnQuQXNzZXJ0aW9uRXJyb3IsIEVycm9yKTtcblxuZnVuY3Rpb24gdHJ1bmNhdGUocywgbikge1xuICBpZiAodHlwZW9mIHMgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHMubGVuZ3RoIDwgbiA/IHMgOiBzLnNsaWNlKDAsIG4pO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBzO1xuICB9XG59XG5mdW5jdGlvbiBpbnNwZWN0KHNvbWV0aGluZykge1xuICBpZiAoZnVuY3Rpb25zSGF2ZU5hbWVzIHx8ICF1dGlsLmlzRnVuY3Rpb24oc29tZXRoaW5nKSkge1xuICAgIHJldHVybiB1dGlsLmluc3BlY3Qoc29tZXRoaW5nKTtcbiAgfVxuICB2YXIgcmF3bmFtZSA9IGdldE5hbWUoc29tZXRoaW5nKTtcbiAgdmFyIG5hbWUgPSByYXduYW1lID8gJzogJyArIHJhd25hbWUgOiAnJztcbiAgcmV0dXJuICdbRnVuY3Rpb24nICsgIG5hbWUgKyAnXSc7XG59XG5mdW5jdGlvbiBnZXRNZXNzYWdlKHNlbGYpIHtcbiAgcmV0dXJuIHRydW5jYXRlKGluc3BlY3Qoc2VsZi5hY3R1YWwpLCAxMjgpICsgJyAnICtcbiAgICAgICAgIHNlbGYub3BlcmF0b3IgKyAnICcgK1xuICAgICAgICAgdHJ1bmNhdGUoaW5zcGVjdChzZWxmLmV4cGVjdGVkKSwgMTI4KTtcbn1cblxuLy8gQXQgcHJlc2VudCBvbmx5IHRoZSB0aHJlZSBrZXlzIG1lbnRpb25lZCBhYm92ZSBhcmUgdXNlZCBhbmRcbi8vIHVuZGVyc3Rvb2QgYnkgdGhlIHNwZWMuIEltcGxlbWVudGF0aW9ucyBvciBzdWIgbW9kdWxlcyBjYW4gcGFzc1xuLy8gb3RoZXIga2V5cyB0byB0aGUgQXNzZXJ0aW9uRXJyb3IncyBjb25zdHJ1Y3RvciAtIHRoZXkgd2lsbCBiZVxuLy8gaWdub3JlZC5cblxuLy8gMy4gQWxsIG9mIHRoZSBmb2xsb3dpbmcgZnVuY3Rpb25zIG11c3QgdGhyb3cgYW4gQXNzZXJ0aW9uRXJyb3Jcbi8vIHdoZW4gYSBjb3JyZXNwb25kaW5nIGNvbmRpdGlvbiBpcyBub3QgbWV0LCB3aXRoIGEgbWVzc2FnZSB0aGF0XG4vLyBtYXkgYmUgdW5kZWZpbmVkIGlmIG5vdCBwcm92aWRlZC4gIEFsbCBhc3NlcnRpb24gbWV0aG9kcyBwcm92aWRlXG4vLyBib3RoIHRoZSBhY3R1YWwgYW5kIGV4cGVjdGVkIHZhbHVlcyB0byB0aGUgYXNzZXJ0aW9uIGVycm9yIGZvclxuLy8gZGlzcGxheSBwdXJwb3Nlcy5cblxuZnVuY3Rpb24gZmFpbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlLCBvcGVyYXRvciwgc3RhY2tTdGFydEZ1bmN0aW9uKSB7XG4gIHRocm93IG5ldyBhc3NlcnQuQXNzZXJ0aW9uRXJyb3Ioe1xuICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgYWN0dWFsOiBhY3R1YWwsXG4gICAgZXhwZWN0ZWQ6IGV4cGVjdGVkLFxuICAgIG9wZXJhdG9yOiBvcGVyYXRvcixcbiAgICBzdGFja1N0YXJ0RnVuY3Rpb246IHN0YWNrU3RhcnRGdW5jdGlvblxuICB9KTtcbn1cblxuLy8gRVhURU5TSU9OISBhbGxvd3MgZm9yIHdlbGwgYmVoYXZlZCBlcnJvcnMgZGVmaW5lZCBlbHNld2hlcmUuXG5hc3NlcnQuZmFpbCA9IGZhaWw7XG5cbi8vIDQuIFB1cmUgYXNzZXJ0aW9uIHRlc3RzIHdoZXRoZXIgYSB2YWx1ZSBpcyB0cnV0aHksIGFzIGRldGVybWluZWRcbi8vIGJ5ICEhZ3VhcmQuXG4vLyBhc3NlcnQub2soZ3VhcmQsIG1lc3NhZ2Vfb3B0KTtcbi8vIFRoaXMgc3RhdGVtZW50IGlzIGVxdWl2YWxlbnQgdG8gYXNzZXJ0LmVxdWFsKHRydWUsICEhZ3VhcmQsXG4vLyBtZXNzYWdlX29wdCk7LiBUbyB0ZXN0IHN0cmljdGx5IGZvciB0aGUgdmFsdWUgdHJ1ZSwgdXNlXG4vLyBhc3NlcnQuc3RyaWN0RXF1YWwodHJ1ZSwgZ3VhcmQsIG1lc3NhZ2Vfb3B0KTsuXG5cbmZ1bmN0aW9uIG9rKHZhbHVlLCBtZXNzYWdlKSB7XG4gIGlmICghdmFsdWUpIGZhaWwodmFsdWUsIHRydWUsIG1lc3NhZ2UsICc9PScsIGFzc2VydC5vayk7XG59XG5hc3NlcnQub2sgPSBvaztcblxuLy8gNS4gVGhlIGVxdWFsaXR5IGFzc2VydGlvbiB0ZXN0cyBzaGFsbG93LCBjb2VyY2l2ZSBlcXVhbGl0eSB3aXRoXG4vLyA9PS5cbi8vIGFzc2VydC5lcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlX29wdCk7XG5cbmFzc2VydC5lcXVhbCA9IGZ1bmN0aW9uIGVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpIHtcbiAgaWYgKGFjdHVhbCAhPSBleHBlY3RlZCkgZmFpbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlLCAnPT0nLCBhc3NlcnQuZXF1YWwpO1xufTtcblxuLy8gNi4gVGhlIG5vbi1lcXVhbGl0eSBhc3NlcnRpb24gdGVzdHMgZm9yIHdoZXRoZXIgdHdvIG9iamVjdHMgYXJlIG5vdCBlcXVhbFxuLy8gd2l0aCAhPSBhc3NlcnQubm90RXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZV9vcHQpO1xuXG5hc3NlcnQubm90RXF1YWwgPSBmdW5jdGlvbiBub3RFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKSB7XG4gIGlmIChhY3R1YWwgPT0gZXhwZWN0ZWQpIHtcbiAgICBmYWlsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UsICchPScsIGFzc2VydC5ub3RFcXVhbCk7XG4gIH1cbn07XG5cbi8vIDcuIFRoZSBlcXVpdmFsZW5jZSBhc3NlcnRpb24gdGVzdHMgYSBkZWVwIGVxdWFsaXR5IHJlbGF0aW9uLlxuLy8gYXNzZXJ0LmRlZXBFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlX29wdCk7XG5cbmFzc2VydC5kZWVwRXF1YWwgPSBmdW5jdGlvbiBkZWVwRXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSkge1xuICBpZiAoIV9kZWVwRXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgZmFsc2UpKSB7XG4gICAgZmFpbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlLCAnZGVlcEVxdWFsJywgYXNzZXJ0LmRlZXBFcXVhbCk7XG4gIH1cbn07XG5cbmFzc2VydC5kZWVwU3RyaWN0RXF1YWwgPSBmdW5jdGlvbiBkZWVwU3RyaWN0RXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSkge1xuICBpZiAoIV9kZWVwRXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgdHJ1ZSkpIHtcbiAgICBmYWlsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UsICdkZWVwU3RyaWN0RXF1YWwnLCBhc3NlcnQuZGVlcFN0cmljdEVxdWFsKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gX2RlZXBFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBzdHJpY3QsIG1lbW9zKSB7XG4gIC8vIDcuMS4gQWxsIGlkZW50aWNhbCB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGFzIGRldGVybWluZWQgYnkgPT09LlxuICBpZiAoYWN0dWFsID09PSBleHBlY3RlZCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2UgaWYgKGlzQnVmZmVyKGFjdHVhbCkgJiYgaXNCdWZmZXIoZXhwZWN0ZWQpKSB7XG4gICAgcmV0dXJuIGNvbXBhcmUoYWN0dWFsLCBleHBlY3RlZCkgPT09IDA7XG5cbiAgLy8gNy4yLiBJZiB0aGUgZXhwZWN0ZWQgdmFsdWUgaXMgYSBEYXRlIG9iamVjdCwgdGhlIGFjdHVhbCB2YWx1ZSBpc1xuICAvLyBlcXVpdmFsZW50IGlmIGl0IGlzIGFsc28gYSBEYXRlIG9iamVjdCB0aGF0IHJlZmVycyB0byB0aGUgc2FtZSB0aW1lLlxuICB9IGVsc2UgaWYgKHV0aWwuaXNEYXRlKGFjdHVhbCkgJiYgdXRpbC5pc0RhdGUoZXhwZWN0ZWQpKSB7XG4gICAgcmV0dXJuIGFjdHVhbC5nZXRUaW1lKCkgPT09IGV4cGVjdGVkLmdldFRpbWUoKTtcblxuICAvLyA3LjMgSWYgdGhlIGV4cGVjdGVkIHZhbHVlIGlzIGEgUmVnRXhwIG9iamVjdCwgdGhlIGFjdHVhbCB2YWx1ZSBpc1xuICAvLyBlcXVpdmFsZW50IGlmIGl0IGlzIGFsc28gYSBSZWdFeHAgb2JqZWN0IHdpdGggdGhlIHNhbWUgc291cmNlIGFuZFxuICAvLyBwcm9wZXJ0aWVzIChgZ2xvYmFsYCwgYG11bHRpbGluZWAsIGBsYXN0SW5kZXhgLCBgaWdub3JlQ2FzZWApLlxuICB9IGVsc2UgaWYgKHV0aWwuaXNSZWdFeHAoYWN0dWFsKSAmJiB1dGlsLmlzUmVnRXhwKGV4cGVjdGVkKSkge1xuICAgIHJldHVybiBhY3R1YWwuc291cmNlID09PSBleHBlY3RlZC5zb3VyY2UgJiZcbiAgICAgICAgICAgYWN0dWFsLmdsb2JhbCA9PT0gZXhwZWN0ZWQuZ2xvYmFsICYmXG4gICAgICAgICAgIGFjdHVhbC5tdWx0aWxpbmUgPT09IGV4cGVjdGVkLm11bHRpbGluZSAmJlxuICAgICAgICAgICBhY3R1YWwubGFzdEluZGV4ID09PSBleHBlY3RlZC5sYXN0SW5kZXggJiZcbiAgICAgICAgICAgYWN0dWFsLmlnbm9yZUNhc2UgPT09IGV4cGVjdGVkLmlnbm9yZUNhc2U7XG5cbiAgLy8gNy40LiBPdGhlciBwYWlycyB0aGF0IGRvIG5vdCBib3RoIHBhc3MgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnLFxuICAvLyBlcXVpdmFsZW5jZSBpcyBkZXRlcm1pbmVkIGJ5ID09LlxuICB9IGVsc2UgaWYgKChhY3R1YWwgPT09IG51bGwgfHwgdHlwZW9mIGFjdHVhbCAhPT0gJ29iamVjdCcpICYmXG4gICAgICAgICAgICAgKGV4cGVjdGVkID09PSBudWxsIHx8IHR5cGVvZiBleHBlY3RlZCAhPT0gJ29iamVjdCcpKSB7XG4gICAgcmV0dXJuIHN0cmljdCA/IGFjdHVhbCA9PT0gZXhwZWN0ZWQgOiBhY3R1YWwgPT0gZXhwZWN0ZWQ7XG5cbiAgLy8gSWYgYm90aCB2YWx1ZXMgYXJlIGluc3RhbmNlcyBvZiB0eXBlZCBhcnJheXMsIHdyYXAgdGhlaXIgdW5kZXJseWluZ1xuICAvLyBBcnJheUJ1ZmZlcnMgaW4gYSBCdWZmZXIgZWFjaCB0byBpbmNyZWFzZSBwZXJmb3JtYW5jZVxuICAvLyBUaGlzIG9wdGltaXphdGlvbiByZXF1aXJlcyB0aGUgYXJyYXlzIHRvIGhhdmUgdGhlIHNhbWUgdHlwZSBhcyBjaGVja2VkIGJ5XG4gIC8vIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcgKGFrYSBwVG9TdHJpbmcpLiBOZXZlciBwZXJmb3JtIGJpbmFyeVxuICAvLyBjb21wYXJpc29ucyBmb3IgRmxvYXQqQXJyYXlzLCB0aG91Z2gsIHNpbmNlIGUuZy4gKzAgPT09IC0wIGJ1dCB0aGVpclxuICAvLyBiaXQgcGF0dGVybnMgYXJlIG5vdCBpZGVudGljYWwuXG4gIH0gZWxzZSBpZiAoaXNWaWV3KGFjdHVhbCkgJiYgaXNWaWV3KGV4cGVjdGVkKSAmJlxuICAgICAgICAgICAgIHBUb1N0cmluZyhhY3R1YWwpID09PSBwVG9TdHJpbmcoZXhwZWN0ZWQpICYmXG4gICAgICAgICAgICAgIShhY3R1YWwgaW5zdGFuY2VvZiBGbG9hdDMyQXJyYXkgfHxcbiAgICAgICAgICAgICAgIGFjdHVhbCBpbnN0YW5jZW9mIEZsb2F0NjRBcnJheSkpIHtcbiAgICByZXR1cm4gY29tcGFyZShuZXcgVWludDhBcnJheShhY3R1YWwuYnVmZmVyKSxcbiAgICAgICAgICAgICAgICAgICBuZXcgVWludDhBcnJheShleHBlY3RlZC5idWZmZXIpKSA9PT0gMDtcblxuICAvLyA3LjUgRm9yIGFsbCBvdGhlciBPYmplY3QgcGFpcnMsIGluY2x1ZGluZyBBcnJheSBvYmplY3RzLCBlcXVpdmFsZW5jZSBpc1xuICAvLyBkZXRlcm1pbmVkIGJ5IGhhdmluZyB0aGUgc2FtZSBudW1iZXIgb2Ygb3duZWQgcHJvcGVydGllcyAoYXMgdmVyaWZpZWRcbiAgLy8gd2l0aCBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwpLCB0aGUgc2FtZSBzZXQgb2Yga2V5c1xuICAvLyAoYWx0aG91Z2ggbm90IG5lY2Vzc2FyaWx5IHRoZSBzYW1lIG9yZGVyKSwgZXF1aXZhbGVudCB2YWx1ZXMgZm9yIGV2ZXJ5XG4gIC8vIGNvcnJlc3BvbmRpbmcga2V5LCBhbmQgYW4gaWRlbnRpY2FsICdwcm90b3R5cGUnIHByb3BlcnR5LiBOb3RlOiB0aGlzXG4gIC8vIGFjY291bnRzIGZvciBib3RoIG5hbWVkIGFuZCBpbmRleGVkIHByb3BlcnRpZXMgb24gQXJyYXlzLlxuICB9IGVsc2UgaWYgKGlzQnVmZmVyKGFjdHVhbCkgIT09IGlzQnVmZmVyKGV4cGVjdGVkKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSBlbHNlIHtcbiAgICBtZW1vcyA9IG1lbW9zIHx8IHthY3R1YWw6IFtdLCBleHBlY3RlZDogW119O1xuXG4gICAgdmFyIGFjdHVhbEluZGV4ID0gbWVtb3MuYWN0dWFsLmluZGV4T2YoYWN0dWFsKTtcbiAgICBpZiAoYWN0dWFsSW5kZXggIT09IC0xKSB7XG4gICAgICBpZiAoYWN0dWFsSW5kZXggPT09IG1lbW9zLmV4cGVjdGVkLmluZGV4T2YoZXhwZWN0ZWQpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIG1lbW9zLmFjdHVhbC5wdXNoKGFjdHVhbCk7XG4gICAgbWVtb3MuZXhwZWN0ZWQucHVzaChleHBlY3RlZCk7XG5cbiAgICByZXR1cm4gb2JqRXF1aXYoYWN0dWFsLCBleHBlY3RlZCwgc3RyaWN0LCBtZW1vcyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNBcmd1bWVudHMob2JqZWN0KSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqZWN0KSA9PSAnW29iamVjdCBBcmd1bWVudHNdJztcbn1cblxuZnVuY3Rpb24gb2JqRXF1aXYoYSwgYiwgc3RyaWN0LCBhY3R1YWxWaXNpdGVkT2JqZWN0cykge1xuICBpZiAoYSA9PT0gbnVsbCB8fCBhID09PSB1bmRlZmluZWQgfHwgYiA9PT0gbnVsbCB8fCBiID09PSB1bmRlZmluZWQpXG4gICAgcmV0dXJuIGZhbHNlO1xuICAvLyBpZiBvbmUgaXMgYSBwcmltaXRpdmUsIHRoZSBvdGhlciBtdXN0IGJlIHNhbWVcbiAgaWYgKHV0aWwuaXNQcmltaXRpdmUoYSkgfHwgdXRpbC5pc1ByaW1pdGl2ZShiKSlcbiAgICByZXR1cm4gYSA9PT0gYjtcbiAgaWYgKHN0cmljdCAmJiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoYSkgIT09IE9iamVjdC5nZXRQcm90b3R5cGVPZihiKSlcbiAgICByZXR1cm4gZmFsc2U7XG4gIHZhciBhSXNBcmdzID0gaXNBcmd1bWVudHMoYSk7XG4gIHZhciBiSXNBcmdzID0gaXNBcmd1bWVudHMoYik7XG4gIGlmICgoYUlzQXJncyAmJiAhYklzQXJncykgfHwgKCFhSXNBcmdzICYmIGJJc0FyZ3MpKVxuICAgIHJldHVybiBmYWxzZTtcbiAgaWYgKGFJc0FyZ3MpIHtcbiAgICBhID0gcFNsaWNlLmNhbGwoYSk7XG4gICAgYiA9IHBTbGljZS5jYWxsKGIpO1xuICAgIHJldHVybiBfZGVlcEVxdWFsKGEsIGIsIHN0cmljdCk7XG4gIH1cbiAgdmFyIGthID0gb2JqZWN0S2V5cyhhKTtcbiAgdmFyIGtiID0gb2JqZWN0S2V5cyhiKTtcbiAgdmFyIGtleSwgaTtcbiAgLy8gaGF2aW5nIHRoZSBzYW1lIG51bWJlciBvZiBvd25lZCBwcm9wZXJ0aWVzIChrZXlzIGluY29ycG9yYXRlc1xuICAvLyBoYXNPd25Qcm9wZXJ0eSlcbiAgaWYgKGthLmxlbmd0aCAhPT0ga2IubGVuZ3RoKVxuICAgIHJldHVybiBmYWxzZTtcbiAgLy90aGUgc2FtZSBzZXQgb2Yga2V5cyAoYWx0aG91Z2ggbm90IG5lY2Vzc2FyaWx5IHRoZSBzYW1lIG9yZGVyKSxcbiAga2Euc29ydCgpO1xuICBrYi5zb3J0KCk7XG4gIC8vfn5+Y2hlYXAga2V5IHRlc3RcbiAgZm9yIChpID0ga2EubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICBpZiAoa2FbaV0gIT09IGtiW2ldKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vZXF1aXZhbGVudCB2YWx1ZXMgZm9yIGV2ZXJ5IGNvcnJlc3BvbmRpbmcga2V5LCBhbmRcbiAgLy9+fn5wb3NzaWJseSBleHBlbnNpdmUgZGVlcCB0ZXN0XG4gIGZvciAoaSA9IGthLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAga2V5ID0ga2FbaV07XG4gICAgaWYgKCFfZGVlcEVxdWFsKGFba2V5XSwgYltrZXldLCBzdHJpY3QsIGFjdHVhbFZpc2l0ZWRPYmplY3RzKSlcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuLy8gOC4gVGhlIG5vbi1lcXVpdmFsZW5jZSBhc3NlcnRpb24gdGVzdHMgZm9yIGFueSBkZWVwIGluZXF1YWxpdHkuXG4vLyBhc3NlcnQubm90RGVlcEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2Vfb3B0KTtcblxuYXNzZXJ0Lm5vdERlZXBFcXVhbCA9IGZ1bmN0aW9uIG5vdERlZXBFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKSB7XG4gIGlmIChfZGVlcEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIGZhbHNlKSkge1xuICAgIGZhaWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSwgJ25vdERlZXBFcXVhbCcsIGFzc2VydC5ub3REZWVwRXF1YWwpO1xuICB9XG59O1xuXG5hc3NlcnQubm90RGVlcFN0cmljdEVxdWFsID0gbm90RGVlcFN0cmljdEVxdWFsO1xuZnVuY3Rpb24gbm90RGVlcFN0cmljdEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpIHtcbiAgaWYgKF9kZWVwRXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgdHJ1ZSkpIHtcbiAgICBmYWlsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UsICdub3REZWVwU3RyaWN0RXF1YWwnLCBub3REZWVwU3RyaWN0RXF1YWwpO1xuICB9XG59XG5cblxuLy8gOS4gVGhlIHN0cmljdCBlcXVhbGl0eSBhc3NlcnRpb24gdGVzdHMgc3RyaWN0IGVxdWFsaXR5LCBhcyBkZXRlcm1pbmVkIGJ5ID09PS5cbi8vIGFzc2VydC5zdHJpY3RFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlX29wdCk7XG5cbmFzc2VydC5zdHJpY3RFcXVhbCA9IGZ1bmN0aW9uIHN0cmljdEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpIHtcbiAgaWYgKGFjdHVhbCAhPT0gZXhwZWN0ZWQpIHtcbiAgICBmYWlsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UsICc9PT0nLCBhc3NlcnQuc3RyaWN0RXF1YWwpO1xuICB9XG59O1xuXG4vLyAxMC4gVGhlIHN0cmljdCBub24tZXF1YWxpdHkgYXNzZXJ0aW9uIHRlc3RzIGZvciBzdHJpY3QgaW5lcXVhbGl0eSwgYXNcbi8vIGRldGVybWluZWQgYnkgIT09LiAgYXNzZXJ0Lm5vdFN0cmljdEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2Vfb3B0KTtcblxuYXNzZXJ0Lm5vdFN0cmljdEVxdWFsID0gZnVuY3Rpb24gbm90U3RyaWN0RXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSkge1xuICBpZiAoYWN0dWFsID09PSBleHBlY3RlZCkge1xuICAgIGZhaWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSwgJyE9PScsIGFzc2VydC5ub3RTdHJpY3RFcXVhbCk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGV4cGVjdGVkRXhjZXB0aW9uKGFjdHVhbCwgZXhwZWN0ZWQpIHtcbiAgaWYgKCFhY3R1YWwgfHwgIWV4cGVjdGVkKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChleHBlY3RlZCkgPT0gJ1tvYmplY3QgUmVnRXhwXScpIHtcbiAgICByZXR1cm4gZXhwZWN0ZWQudGVzdChhY3R1YWwpO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBpZiAoYWN0dWFsIGluc3RhbmNlb2YgZXhwZWN0ZWQpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIElnbm9yZS4gIFRoZSBpbnN0YW5jZW9mIGNoZWNrIGRvZXNuJ3Qgd29yayBmb3IgYXJyb3cgZnVuY3Rpb25zLlxuICB9XG5cbiAgaWYgKEVycm9yLmlzUHJvdG90eXBlT2YoZXhwZWN0ZWQpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGV4cGVjdGVkLmNhbGwoe30sIGFjdHVhbCkgPT09IHRydWU7XG59XG5cbmZ1bmN0aW9uIF90cnlCbG9jayhibG9jaykge1xuICB2YXIgZXJyb3I7XG4gIHRyeSB7XG4gICAgYmxvY2soKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGVycm9yID0gZTtcbiAgfVxuICByZXR1cm4gZXJyb3I7XG59XG5cbmZ1bmN0aW9uIF90aHJvd3Moc2hvdWxkVGhyb3csIGJsb2NrLCBleHBlY3RlZCwgbWVzc2FnZSkge1xuICB2YXIgYWN0dWFsO1xuXG4gIGlmICh0eXBlb2YgYmxvY2sgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImJsb2NrXCIgYXJndW1lbnQgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gIH1cblxuICBpZiAodHlwZW9mIGV4cGVjdGVkID09PSAnc3RyaW5nJykge1xuICAgIG1lc3NhZ2UgPSBleHBlY3RlZDtcbiAgICBleHBlY3RlZCA9IG51bGw7XG4gIH1cblxuICBhY3R1YWwgPSBfdHJ5QmxvY2soYmxvY2spO1xuXG4gIG1lc3NhZ2UgPSAoZXhwZWN0ZWQgJiYgZXhwZWN0ZWQubmFtZSA/ICcgKCcgKyBleHBlY3RlZC5uYW1lICsgJykuJyA6ICcuJykgK1xuICAgICAgICAgICAgKG1lc3NhZ2UgPyAnICcgKyBtZXNzYWdlIDogJy4nKTtcblxuICBpZiAoc2hvdWxkVGhyb3cgJiYgIWFjdHVhbCkge1xuICAgIGZhaWwoYWN0dWFsLCBleHBlY3RlZCwgJ01pc3NpbmcgZXhwZWN0ZWQgZXhjZXB0aW9uJyArIG1lc3NhZ2UpO1xuICB9XG5cbiAgdmFyIHVzZXJQcm92aWRlZE1lc3NhZ2UgPSB0eXBlb2YgbWVzc2FnZSA9PT0gJ3N0cmluZyc7XG4gIHZhciBpc1Vud2FudGVkRXhjZXB0aW9uID0gIXNob3VsZFRocm93ICYmIHV0aWwuaXNFcnJvcihhY3R1YWwpO1xuICB2YXIgaXNVbmV4cGVjdGVkRXhjZXB0aW9uID0gIXNob3VsZFRocm93ICYmIGFjdHVhbCAmJiAhZXhwZWN0ZWQ7XG5cbiAgaWYgKChpc1Vud2FudGVkRXhjZXB0aW9uICYmXG4gICAgICB1c2VyUHJvdmlkZWRNZXNzYWdlICYmXG4gICAgICBleHBlY3RlZEV4Y2VwdGlvbihhY3R1YWwsIGV4cGVjdGVkKSkgfHxcbiAgICAgIGlzVW5leHBlY3RlZEV4Y2VwdGlvbikge1xuICAgIGZhaWwoYWN0dWFsLCBleHBlY3RlZCwgJ0dvdCB1bndhbnRlZCBleGNlcHRpb24nICsgbWVzc2FnZSk7XG4gIH1cblxuICBpZiAoKHNob3VsZFRocm93ICYmIGFjdHVhbCAmJiBleHBlY3RlZCAmJlxuICAgICAgIWV4cGVjdGVkRXhjZXB0aW9uKGFjdHVhbCwgZXhwZWN0ZWQpKSB8fCAoIXNob3VsZFRocm93ICYmIGFjdHVhbCkpIHtcbiAgICB0aHJvdyBhY3R1YWw7XG4gIH1cbn1cblxuLy8gMTEuIEV4cGVjdGVkIHRvIHRocm93IGFuIGVycm9yOlxuLy8gYXNzZXJ0LnRocm93cyhibG9jaywgRXJyb3Jfb3B0LCBtZXNzYWdlX29wdCk7XG5cbmFzc2VydC50aHJvd3MgPSBmdW5jdGlvbihibG9jaywgLypvcHRpb25hbCovZXJyb3IsIC8qb3B0aW9uYWwqL21lc3NhZ2UpIHtcbiAgX3Rocm93cyh0cnVlLCBibG9jaywgZXJyb3IsIG1lc3NhZ2UpO1xufTtcblxuLy8gRVhURU5TSU9OISBUaGlzIGlzIGFubm95aW5nIHRvIHdyaXRlIG91dHNpZGUgdGhpcyBtb2R1bGUuXG5hc3NlcnQuZG9lc05vdFRocm93ID0gZnVuY3Rpb24oYmxvY2ssIC8qb3B0aW9uYWwqL2Vycm9yLCAvKm9wdGlvbmFsKi9tZXNzYWdlKSB7XG4gIF90aHJvd3MoZmFsc2UsIGJsb2NrLCBlcnJvciwgbWVzc2FnZSk7XG59O1xuXG5hc3NlcnQuaWZFcnJvciA9IGZ1bmN0aW9uKGVycikgeyBpZiAoZXJyKSB0aHJvdyBlcnI7IH07XG5cbi8vIEV4cG9zZSBhIHN0cmljdCBvbmx5IHZhcmlhbnQgb2YgYXNzZXJ0XG5mdW5jdGlvbiBzdHJpY3QodmFsdWUsIG1lc3NhZ2UpIHtcbiAgaWYgKCF2YWx1ZSkgZmFpbCh2YWx1ZSwgdHJ1ZSwgbWVzc2FnZSwgJz09Jywgc3RyaWN0KTtcbn1cbmFzc2VydC5zdHJpY3QgPSBvYmplY3RBc3NpZ24oc3RyaWN0LCBhc3NlcnQsIHtcbiAgZXF1YWw6IGFzc2VydC5zdHJpY3RFcXVhbCxcbiAgZGVlcEVxdWFsOiBhc3NlcnQuZGVlcFN0cmljdEVxdWFsLFxuICBub3RFcXVhbDogYXNzZXJ0Lm5vdFN0cmljdEVxdWFsLFxuICBub3REZWVwRXF1YWw6IGFzc2VydC5ub3REZWVwU3RyaWN0RXF1YWxcbn0pO1xuYXNzZXJ0LnN0cmljdC5zdHJpY3QgPSBhc3NlcnQuc3RyaWN0O1xuXG52YXIgb2JqZWN0S2V5cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIChvYmopIHtcbiAgdmFyIGtleXMgPSBbXTtcbiAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgIGlmIChoYXNPd24uY2FsbChvYmosIGtleSkpIGtleXMucHVzaChrZXkpO1xuICB9XG4gIHJldHVybiBrZXlzO1xufTtcbiIsIi8qXG5vYmplY3QtYXNzaWduXG4oYykgU2luZHJlIFNvcmh1c1xuQGxpY2Vuc2UgTUlUXG4qL1xuXG4ndXNlIHN0cmljdCc7XG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIHByb3BJc0VudW1lcmFibGUgPSBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG5mdW5jdGlvbiB0b09iamVjdCh2YWwpIHtcblx0aWYgKHZhbCA9PT0gbnVsbCB8fCB2YWwgPT09IHVuZGVmaW5lZCkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5hc3NpZ24gY2Fubm90IGJlIGNhbGxlZCB3aXRoIG51bGwgb3IgdW5kZWZpbmVkJyk7XG5cdH1cblxuXHRyZXR1cm4gT2JqZWN0KHZhbCk7XG59XG5cbmZ1bmN0aW9uIHNob3VsZFVzZU5hdGl2ZSgpIHtcblx0dHJ5IHtcblx0XHRpZiAoIU9iamVjdC5hc3NpZ24pIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBEZXRlY3QgYnVnZ3kgcHJvcGVydHkgZW51bWVyYXRpb24gb3JkZXIgaW4gb2xkZXIgVjggdmVyc2lvbnMuXG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD00MTE4XG5cdFx0dmFyIHRlc3QxID0gbmV3IFN0cmluZygnYWJjJyk7ICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ldy13cmFwcGVyc1xuXHRcdHRlc3QxWzVdID0gJ2RlJztcblx0XHRpZiAoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDEpWzBdID09PSAnNScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QyID0ge307XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XG5cdFx0XHR0ZXN0MlsnXycgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKGkpXSA9IGk7XG5cdFx0fVxuXHRcdHZhciBvcmRlcjIgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MikubWFwKGZ1bmN0aW9uIChuKSB7XG5cdFx0XHRyZXR1cm4gdGVzdDJbbl07XG5cdFx0fSk7XG5cdFx0aWYgKG9yZGVyMi5qb2luKCcnKSAhPT0gJzAxMjM0NTY3ODknKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MyA9IHt9O1xuXHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGxldHRlcikge1xuXHRcdFx0dGVzdDNbbGV0dGVyXSA9IGxldHRlcjtcblx0XHR9KTtcblx0XHRpZiAoT2JqZWN0LmtleXMoT2JqZWN0LmFzc2lnbih7fSwgdGVzdDMpKS5qb2luKCcnKSAhPT1cblx0XHRcdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHQvLyBXZSBkb24ndCBleHBlY3QgYW55IG9mIHRoZSBhYm92ZSB0byB0aHJvdywgYnV0IGJldHRlciB0byBiZSBzYWZlLlxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNob3VsZFVzZU5hdGl2ZSgpID8gT2JqZWN0LmFzc2lnbiA6IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSkge1xuXHR2YXIgZnJvbTtcblx0dmFyIHRvID0gdG9PYmplY3QodGFyZ2V0KTtcblx0dmFyIHN5bWJvbHM7XG5cblx0Zm9yICh2YXIgcyA9IDE7IHMgPCBhcmd1bWVudHMubGVuZ3RoOyBzKyspIHtcblx0XHRmcm9tID0gT2JqZWN0KGFyZ3VtZW50c1tzXSk7XG5cblx0XHRmb3IgKHZhciBrZXkgaW4gZnJvbSkge1xuXHRcdFx0aWYgKGhhc093blByb3BlcnR5LmNhbGwoZnJvbSwga2V5KSkge1xuXHRcdFx0XHR0b1trZXldID0gZnJvbVtrZXldO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcblx0XHRcdHN5bWJvbHMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZnJvbSk7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHN5bWJvbHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0aWYgKHByb3BJc0VudW1lcmFibGUuY2FsbChmcm9tLCBzeW1ib2xzW2ldKSkge1xuXHRcdFx0XHRcdHRvW3N5bWJvbHNbaV1dID0gZnJvbVtzeW1ib2xzW2ldXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB0bztcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQnVmZmVyKGFyZykge1xuICByZXR1cm4gYXJnICYmIHR5cGVvZiBhcmcgPT09ICdvYmplY3QnXG4gICAgJiYgdHlwZW9mIGFyZy5jb3B5ID09PSAnZnVuY3Rpb24nXG4gICAgJiYgdHlwZW9mIGFyZy5maWxsID09PSAnZnVuY3Rpb24nXG4gICAgJiYgdHlwZW9mIGFyZy5yZWFkVUludDggPT09ICdmdW5jdGlvbic7XG59IiwiaWYgKHR5cGVvZiBPYmplY3QuY3JlYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gIC8vIGltcGxlbWVudGF0aW9uIGZyb20gc3RhbmRhcmQgbm9kZS5qcyAndXRpbCcgbW9kdWxlXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3JcbiAgICBjdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDdG9yLnByb3RvdHlwZSwge1xuICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgdmFsdWU6IGN0b3IsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICB9XG4gICAgfSk7XG4gIH07XG59IGVsc2Uge1xuICAvLyBvbGQgc2Nob29sIHNoaW0gZm9yIG9sZCBicm93c2Vyc1xuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yXG4gICAgdmFyIFRlbXBDdG9yID0gZnVuY3Rpb24gKCkge31cbiAgICBUZW1wQ3Rvci5wcm90b3R5cGUgPSBzdXBlckN0b3IucHJvdG90eXBlXG4gICAgY3Rvci5wcm90b3R5cGUgPSBuZXcgVGVtcEN0b3IoKVxuICAgIGN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY3RvclxuICB9XG59XG4iLCJpbXBvcnQgYnVmZmVySnNvbiBmcm9tICdidWZmZXItanNvbic7XG5cbmNsYXNzIFVzZXIge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLm5pY2tOYW1lID0gXCJcIjtcbiAgICB0aGlzLmVtYWlsID0gXCJcIjtcbiAgICB0aGlzLnBhc3N3b3JkID0gXCJcIjtcbiAgICB0aGlzLnVzZXJJZCA9IFwiXCI7XG4gIH1cblxuICBpbml0VXNlcihkYXRhKSB7XG4gICAgdGhpcy5uaWNrTmFtZSA9IGRhdGEubmFtZTtcbiAgICB0aGlzLmVtYWlsID0gZGF0YS5lbWFpbDtcbiAgICB0aGlzLnBhc3N3b3JkID0gZGF0YS5wYXNzd29yZDtcbiAgICB0aGlzLnVzZXJJZCA9IGRhdGEudXNlcklkO1xuICAgIHRoaXMuYyA9IGRhdGEuYztcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgQ2hhdCA9IFZ1ZS5jb21wb25lbnQoJ0NoYXQnLCB7XG4gIHRlbXBsYXRlOiBgXG4gIDxkaXYgaWQ9XCJjaGF0QXBwXCI+XG4gICAgPGRpdiB2LWZvcj1cIml0ZW0gaW4gbWVzc2FnZXNcIj5cbiAgICAgIHt7IGl0ZW0udXNlcm5hbWUgfX0gOiB7eyBpdGVtLm1lc3NhZ2UgfX1cbiAgICA8L2Rpdj5cbiAgICA8aW5wdXQgdi1tb2RlbD0nbWVzc2FnZScgaWQ9XCJtZXNzYWdlRW50ZXJCb3hcIiBhdXRvY29tcGxldGU9XCJvZmZcIiAvPlxuICAgIDxidXR0b24gdi1vbjpjbGljaz0nc2VuZE1lc3NhZ2UnPlNlbmQ8L2J1dHRvbj5cbiAgPC9kaXY+XG4gIGAsXG4gIGRhdGE6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB7XG4gICAgICBtZXNzYWdlOiAnJyxcbiAgICAgIHVzZXI6IG51bGwsXG4gICAgICBzb2NrZXQ6IG51bGwsXG4gICAgICBtZXNzYWdlczogW3tcbiAgICAgICAgdXNlcm5hbWU6ICdhZG1pbicsXG4gICAgICAgIG1lc3NhZ2U6ICdOaWNlIHRvIG1lZXQgeW91IGhlcmUhJ1xuICAgIH1dLFxuICB9fSxcbiAgY3JlYXRlZDogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZ2V0QXV0aERhdGEoKTtcbiAgICB0aGlzLnNvY2tldCA9IGlvKFwiaHR0cDovL2xvY2FsaG9zdDozMDAwXCIpO1xuICAgIHRoaXMuJGRhdGEudXNlciA9IG5ldyBVc2VyKCk7XG4gICAgdGhpcy5zb2NrZXQub24oXCJpbml0VXNlclwiLCBkYXRhID0+IHtcbiAgICAgIGNvbnN0IHVzZXJEYXRhID0gSlNPTi5wYXJzZShkYXRhKTtcbiAgICAgIHRoaXMuJGRhdGEudXNlci5pbml0VXNlcih1c2VyRGF0YS5pbmNvbWVEYXRhKTtcbiAgICB9KTtcbiAgICB0aGlzLnNvY2tldC5vbihcInB1c2hfbWVzc2FnZVwiLCBtc2cgPT4ge1xuICAgICAgY29uc3QgZGF0YSA9IEpTT04ucGFyc2UobXNnKTtcbiAgICAgIHRoaXMuJGRhdGEubWVzc2FnZXMucHVzaChkYXRhKTtcbiAgICB9KTtcbiAgfSxcbiAgbWV0aG9kcyA6IHtcbiAgICBzZW5kTWVzc2FnZTogZnVuY3Rpb24oKSB7XG4gICAgICBjb25zdCBkYXRhID0ge1xuICAgICAgICBtZXNzYWdlOiB0aGlzLiRkYXRhLm1lc3NhZ2UsXG4gICAgICAgIHVzZXJuYW1lOiB0aGlzLiRkYXRhLnVzZXIubmlja05hbWUsXG4gICAgICAgIHVzZXJJZDogdGhpcy4kZGF0YS51c2VyLnVzZXJJZFxuICAgICAgfVxuICAgICAgdGhpcy5zb2NrZXQuZW1pdChcInB1c2hfbWVzc2FnZVwiLCBKU09OLnN0cmluZ2lmeShkYXRhKSk7XG4gICAgICB0aGlzLiRkYXRhLm1lc3NhZ2UgPSAnJztcbiAgICB9XG4gIH1cbn0pO1xuIiwiaW1wb3J0IHsgUmVnaXN0ZXIgfSBmcm9tICcuL1JlZ2lzdGVyJztcbmltcG9ydCB7IENoYXQgfSBmcm9tICcuL0NoYXQnO1xuXG5jb25zdCByb3V0ZXMgPSBbXG4gIHsgcGF0aDogJy8nLCBjb21wb25lbnQ6IFJlZ2lzdGVyLCBuYW1lOiAncmVnaXN0ZXInIH0sXG4gIHsgcGF0aDogJy9jaGF0JywgY29tcG9uZW50OiBDaGF0LCBuYW1lOiAnY2hhdCcsIHBhcmFtczogdHJ1ZSB9XG5dO1xuXG5jb25zdCByb3V0ZXIgPSBuZXcgVnVlUm91dGVyKHtcbiAgcm91dGVzXG59KTtcblxubmV3IFZ1ZSh7XG4gIGVsOiAnI2FwcCcsXG4gIHJvdXRlcjogcm91dGVyXG59KTtcbiJdLCJzb3VyY2VSb290IjoiIn0=